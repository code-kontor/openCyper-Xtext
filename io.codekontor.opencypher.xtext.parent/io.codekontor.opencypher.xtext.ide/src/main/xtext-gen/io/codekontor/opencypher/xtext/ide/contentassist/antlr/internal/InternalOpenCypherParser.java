package io.codekontor.opencypher.xtext.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import io.codekontor.opencypher.xtext.services.OpenCypherGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalOpenCypherParser extends AbstractInternalContentAssistParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALLSHORTESTPATHS", "FIELDTERMINATOR", "RELATIONSHIP", "SHORTESTPATH", "CONSTRAINT", "DESCENDING", "ASCENDING", "CONTAINS", "DISTINCT", "OPTIONAL", "PERIODIC", "EXPLAIN", "EXTRACT", "FOREACH", "HEADERS", "PROFILE", "ASSERT", "COMMIT", "CREATE", "CYPHER", "DELETE", "DETACH", "EXISTS", "FILTER", "REDUCE", "REMOVE", "RETURN", "SINGLE", "STARTS", "UNIQUE", "UNWIND", "COUNT", "FALSE", "INDEX", "LIMIT", "MATCH", "MERGE", "ORDER", "START", "UNION", "USING", "WHERE", "YIELD", "CALL", "CASE", "DESC", "DROP", "ELSE", "ENDS", "FROM", "JOIN", "LOAD", "NODE", "NONE", "NULL", "SCAN", "SKIP", "THEN", "TRUE", "WHEN", "WITH", "ALL", "AND", "ANY", "ASC", "CSV", "END", "NOT", "REL", "SET", "XOR", "PlusSignEqualsSign", "FullStopFullStop", "LessThanSignEqualsSign", "LessThanSignGreaterThanSign", "EqualsSignTilde", "GreaterThanSignEqualsSign", "AS", "BY", "IN", "IS", "ON", "OR", "ExclamationMark", "DollarSign", "PercentSign", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "RULE_ID", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_STRING_LITERAL", "RULE_HEX", "RULE_INT", "RULE_DECIMAL"
    };
    public static final int LessThanSignGreaterThanSign=78;
    public static final int RULE_HEX=115;
    public static final int CREATE=22;
    public static final int JOIN=54;
    public static final int LessThanSign=100;
    public static final int WHEN=63;
    public static final int LeftParenthesis=90;
    public static final int EXPLAIN=15;
    public static final int PERIODIC=14;
    public static final int ELSE=51;
    public static final int EqualsSignTilde=79;
    public static final int NONE=57;
    public static final int ExclamationMark=87;
    public static final int GreaterThanSign=102;
    public static final int RULE_ID=110;
    public static final int IN=83;
    public static final int NODE=56;
    public static final int DISTINCT=12;
    public static final int IS=84;
    public static final int WHERE=45;
    public static final int CASE=48;
    public static final int GreaterThanSignEqualsSign=80;
    public static final int FIELDTERMINATOR=5;
    public static final int STARTS=32;
    public static final int AS=81;
    public static final int VerticalLine=108;
    public static final int PlusSign=93;
    public static final int RULE_INT=116;
    public static final int RULE_ML_COMMENT=111;
    public static final int COUNT=35;
    public static final int THEN=61;
    public static final int XOR=74;
    public static final int LeftSquareBracket=104;
    public static final int CALL=47;
    public static final int SET=73;
    public static final int MERGE=40;
    public static final int CONSTRAINT=8;
    public static final int FOREACH=17;
    public static final int ORDER=41;
    public static final int ASC=68;
    public static final int Comma=94;
    public static final int DELETE=24;
    public static final int HyphenMinus=95;
    public static final int HEADERS=18;
    public static final int BY=82;
    public static final int REMOVE=29;
    public static final int SKIP=60;
    public static final int SCAN=59;
    public static final int LessThanSignEqualsSign=77;
    public static final int Solidus=97;
    public static final int RightCurlyBracket=109;
    public static final int UNWIND=34;
    public static final int FullStop=96;
    public static final int YIELD=46;
    public static final int DETACH=25;
    public static final int Semicolon=99;
    public static final int ASCENDING=10;
    public static final int QuestionMark=103;
    public static final int SHORTESTPATH=7;
    public static final int REL=72;
    public static final int CYPHER=23;
    public static final int UNION=43;
    public static final int ALL=65;
    public static final int SINGLE=31;
    public static final int FROM=53;
    public static final int DESC=49;
    public static final int OPTIONAL=13;
    public static final int PercentSign=89;
    public static final int ALLSHORTESTPATHS=4;
    public static final int FullStopFullStop=76;
    public static final int DESCENDING=9;
    public static final int INDEX=37;
    public static final int RightSquareBracket=105;
    public static final int EXTRACT=16;
    public static final int NULL=58;
    public static final int UNIQUE=33;
    public static final int RightParenthesis=91;
    public static final int TRUE=62;
    public static final int USING=44;
    public static final int RULE_DECIMAL=117;
    public static final int NOT=71;
    public static final int AND=66;
    public static final int END=70;
    public static final int RELATIONSHIP=6;
    public static final int REDUCE=28;
    public static final int LOAD=55;
    public static final int LIMIT=38;
    public static final int CONTAINS=11;
    public static final int ANY=67;
    public static final int RULE_STRING_LITERAL=114;
    public static final int DROP=50;
    public static final int RULE_SL_COMMENT=112;
    public static final int RETURN=30;
    public static final int EqualsSign=101;
    public static final int PROFILE=19;
    public static final int ENDS=52;
    public static final int Colon=98;
    public static final int EOF=-1;
    public static final int Asterisk=92;
    public static final int PlusSignEqualsSign=75;
    public static final int ON=85;
    public static final int FILTER=27;
    public static final int OR=86;
    public static final int EXISTS=26;
    public static final int ASSERT=20;
    public static final int COMMIT=21;
    public static final int RULE_WS=113;
    public static final int CSV=69;
    public static final int LeftCurlyBracket=107;
    public static final int WITH=64;
    public static final int CircumflexAccent=106;
    public static final int DollarSign=88;
    public static final int FALSE=36;
    public static final int START=42;
    public static final int MATCH=39;

    // delegates
    // delegators


        public InternalOpenCypherParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalOpenCypherParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalOpenCypherParser.tokenNames; }
    public String getGrammarFileName() { return "InternalOpenCypherParser.g"; }


    	private OpenCypherGrammarAccess grammarAccess;
    	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
    	
    	{
    		tokenNameToValue.put("ExclamationMark", "'!'");
    		tokenNameToValue.put("DollarSign", "'\\u0024'");
    		tokenNameToValue.put("PercentSign", "'%'");
    		tokenNameToValue.put("LeftParenthesis", "'('");
    		tokenNameToValue.put("RightParenthesis", "')'");
    		tokenNameToValue.put("Asterisk", "'*'");
    		tokenNameToValue.put("PlusSign", "'+'");
    		tokenNameToValue.put("Comma", "','");
    		tokenNameToValue.put("HyphenMinus", "'-'");
    		tokenNameToValue.put("FullStop", "'.'");
    		tokenNameToValue.put("Solidus", "'/'");
    		tokenNameToValue.put("Colon", "':'");
    		tokenNameToValue.put("Semicolon", "';'");
    		tokenNameToValue.put("LessThanSign", "'<'");
    		tokenNameToValue.put("EqualsSign", "'='");
    		tokenNameToValue.put("GreaterThanSign", "'>'");
    		tokenNameToValue.put("QuestionMark", "'?'");
    		tokenNameToValue.put("LeftSquareBracket", "'['");
    		tokenNameToValue.put("RightSquareBracket", "']'");
    		tokenNameToValue.put("CircumflexAccent", "'^'");
    		tokenNameToValue.put("LeftCurlyBracket", "'{'");
    		tokenNameToValue.put("VerticalLine", "'|'");
    		tokenNameToValue.put("RightCurlyBracket", "'}'");
    		tokenNameToValue.put("PlusSignEqualsSign", "'+='");
    		tokenNameToValue.put("FullStopFullStop", "'..'");
    		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
    		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
    		tokenNameToValue.put("EqualsSignTilde", "'=~'");
    		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
    		tokenNameToValue.put("AS", "'AS'");
    		tokenNameToValue.put("BY", "'BY'");
    		tokenNameToValue.put("IN", "'IN'");
    		tokenNameToValue.put("IS", "'IS'");
    		tokenNameToValue.put("ON", "'ON'");
    		tokenNameToValue.put("OR", "'OR'");
    		tokenNameToValue.put("ALL", "'ALL'");
    		tokenNameToValue.put("AND", "'AND'");
    		tokenNameToValue.put("ANY", "'ANY'");
    		tokenNameToValue.put("ASC", "'ASC'");
    		tokenNameToValue.put("CSV", "'CSV'");
    		tokenNameToValue.put("END", "'END'");
    		tokenNameToValue.put("NOT", "'NOT'");
    		tokenNameToValue.put("REL", "'REL'");
    		tokenNameToValue.put("SET", "'SET'");
    		tokenNameToValue.put("XOR", "'XOR'");
    		tokenNameToValue.put("CALL", "'CALL'");
    		tokenNameToValue.put("CASE", "'CASE'");
    		tokenNameToValue.put("DESC", "'DESC'");
    		tokenNameToValue.put("DROP", "'DROP'");
    		tokenNameToValue.put("ELSE", "'ELSE'");
    		tokenNameToValue.put("ENDS", "'ENDS'");
    		tokenNameToValue.put("FROM", "'FROM'");
    		tokenNameToValue.put("JOIN", "'JOIN'");
    		tokenNameToValue.put("LOAD", "'LOAD'");
    		tokenNameToValue.put("NODE", "'NODE'");
    		tokenNameToValue.put("NONE", "'NONE'");
    		tokenNameToValue.put("NULL", "'NULL'");
    		tokenNameToValue.put("SCAN", "'SCAN'");
    		tokenNameToValue.put("SKIP", "'SKIP'");
    		tokenNameToValue.put("THEN", "'THEN'");
    		tokenNameToValue.put("TRUE", "'TRUE'");
    		tokenNameToValue.put("WHEN", "'WHEN'");
    		tokenNameToValue.put("WITH", "'WITH'");
    		tokenNameToValue.put("COUNT", "'COUNT'");
    		tokenNameToValue.put("FALSE", "'FALSE'");
    		tokenNameToValue.put("INDEX", "'INDEX'");
    		tokenNameToValue.put("LIMIT", "'LIMIT'");
    		tokenNameToValue.put("MATCH", "'MATCH'");
    		tokenNameToValue.put("MERGE", "'MERGE'");
    		tokenNameToValue.put("ORDER", "'ORDER'");
    		tokenNameToValue.put("START", "'START'");
    		tokenNameToValue.put("UNION", "'UNION'");
    		tokenNameToValue.put("USING", "'USING'");
    		tokenNameToValue.put("WHERE", "'WHERE'");
    		tokenNameToValue.put("YIELD", "'YIELD'");
    		tokenNameToValue.put("ASSERT", "'ASSERT'");
    		tokenNameToValue.put("COMMIT", "'COMMIT'");
    		tokenNameToValue.put("CREATE", "'CREATE'");
    		tokenNameToValue.put("CYPHER", "'CYPHER'");
    		tokenNameToValue.put("DELETE", "'DELETE'");
    		tokenNameToValue.put("DETACH", "'DETACH'");
    		tokenNameToValue.put("EXISTS", "'EXISTS'");
    		tokenNameToValue.put("FILTER", "'FILTER'");
    		tokenNameToValue.put("REDUCE", "'REDUCE'");
    		tokenNameToValue.put("REMOVE", "'REMOVE'");
    		tokenNameToValue.put("RETURN", "'RETURN'");
    		tokenNameToValue.put("SINGLE", "'SINGLE'");
    		tokenNameToValue.put("STARTS", "'STARTS'");
    		tokenNameToValue.put("UNIQUE", "'UNIQUE'");
    		tokenNameToValue.put("UNWIND", "'UNWIND'");
    		tokenNameToValue.put("EXPLAIN", "'EXPLAIN'");
    		tokenNameToValue.put("EXTRACT", "'EXTRACT'");
    		tokenNameToValue.put("FOREACH", "'FOREACH'");
    		tokenNameToValue.put("HEADERS", "'HEADERS'");
    		tokenNameToValue.put("PROFILE", "'PROFILE'");
    		tokenNameToValue.put("CONTAINS", "'CONTAINS'");
    		tokenNameToValue.put("DISTINCT", "'DISTINCT'");
    		tokenNameToValue.put("OPTIONAL", "'OPTIONAL'");
    		tokenNameToValue.put("PERIODIC", "'PERIODIC'");
    		tokenNameToValue.put("ASCENDING", "'ASCENDING'");
    		tokenNameToValue.put("CONSTRAINT", "'CONSTRAINT'");
    		tokenNameToValue.put("DESCENDING", "'DESCENDING'");
    		tokenNameToValue.put("RELATIONSHIP", "'RELATIONSHIP'");
    		tokenNameToValue.put("SHORTESTPATH", "'SHORTESTPATH'");
    		tokenNameToValue.put("FIELDTERMINATOR", "'FIELDTERMINATOR'");
    		tokenNameToValue.put("ALLSHORTESTPATHS", "'ALLSHORTESTPATHS'");
    	}

    	public void setGrammarAccess(OpenCypherGrammarAccess grammarAccess) {
    		this.grammarAccess = grammarAccess;
    	}

    	@Override
    	protected Grammar getGrammar() {
    		return grammarAccess.getGrammar();
    	}

    	@Override
    	protected String getValueForTokenName(String tokenName) {
    		String result = tokenNameToValue.get(tokenName);
    		if (result == null)
    			result = tokenName;
    		return result;
    	}



    // $ANTLR start "entryRuleCypher"
    // InternalOpenCypherParser.g:162:1: entryRuleCypher : ruleCypher EOF ;
    public final void entryRuleCypher() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:163:1: ( ruleCypher EOF )
            // InternalOpenCypherParser.g:164:1: ruleCypher EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCypher();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCypher"


    // $ANTLR start "ruleCypher"
    // InternalOpenCypherParser.g:171:1: ruleCypher : ( ( rule__Cypher__Group__0 ) ) ;
    public final void ruleCypher() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:175:2: ( ( ( rule__Cypher__Group__0 ) ) )
            // InternalOpenCypherParser.g:176:2: ( ( rule__Cypher__Group__0 ) )
            {
            // InternalOpenCypherParser.g:176:2: ( ( rule__Cypher__Group__0 ) )
            // InternalOpenCypherParser.g:177:3: ( rule__Cypher__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:178:3: ( rule__Cypher__Group__0 )
            // InternalOpenCypherParser.g:178:4: rule__Cypher__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Cypher__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCypher"


    // $ANTLR start "entryRuleQueryOptions"
    // InternalOpenCypherParser.g:187:1: entryRuleQueryOptions : ruleQueryOptions EOF ;
    public final void entryRuleQueryOptions() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:188:1: ( ruleQueryOptions EOF )
            // InternalOpenCypherParser.g:189:1: ruleQueryOptions EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleQueryOptions();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleQueryOptions"


    // $ANTLR start "ruleQueryOptions"
    // InternalOpenCypherParser.g:196:1: ruleQueryOptions : ( ( rule__QueryOptions__Group__0 ) ) ;
    public final void ruleQueryOptions() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:200:2: ( ( ( rule__QueryOptions__Group__0 ) ) )
            // InternalOpenCypherParser.g:201:2: ( ( rule__QueryOptions__Group__0 ) )
            {
            // InternalOpenCypherParser.g:201:2: ( ( rule__QueryOptions__Group__0 ) )
            // InternalOpenCypherParser.g:202:3: ( rule__QueryOptions__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:203:3: ( rule__QueryOptions__Group__0 )
            // InternalOpenCypherParser.g:203:4: rule__QueryOptions__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__QueryOptions__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleQueryOptions"


    // $ANTLR start "entryRuleCypherOption"
    // InternalOpenCypherParser.g:212:1: entryRuleCypherOption : ruleCypherOption EOF ;
    public final void entryRuleCypherOption() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:213:1: ( ruleCypherOption EOF )
            // InternalOpenCypherParser.g:214:1: ruleCypherOption EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCypherOption();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCypherOption"


    // $ANTLR start "ruleCypherOption"
    // InternalOpenCypherParser.g:221:1: ruleCypherOption : ( ( rule__CypherOption__Group__0 ) ) ;
    public final void ruleCypherOption() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:225:2: ( ( ( rule__CypherOption__Group__0 ) ) )
            // InternalOpenCypherParser.g:226:2: ( ( rule__CypherOption__Group__0 ) )
            {
            // InternalOpenCypherParser.g:226:2: ( ( rule__CypherOption__Group__0 ) )
            // InternalOpenCypherParser.g:227:3: ( rule__CypherOption__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:228:3: ( rule__CypherOption__Group__0 )
            // InternalOpenCypherParser.g:228:4: rule__CypherOption__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CypherOption__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCypherOption"


    // $ANTLR start "entryRuleVersionNumber"
    // InternalOpenCypherParser.g:237:1: entryRuleVersionNumber : ruleVersionNumber EOF ;
    public final void entryRuleVersionNumber() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:238:1: ( ruleVersionNumber EOF )
            // InternalOpenCypherParser.g:239:1: ruleVersionNumber EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVersionNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleVersionNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getVersionNumberRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleVersionNumber"


    // $ANTLR start "ruleVersionNumber"
    // InternalOpenCypherParser.g:246:1: ruleVersionNumber : ( ( rule__VersionNumber__VersionNumberAssignment ) ) ;
    public final void ruleVersionNumber() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:250:2: ( ( ( rule__VersionNumber__VersionNumberAssignment ) ) )
            // InternalOpenCypherParser.g:251:2: ( ( rule__VersionNumber__VersionNumberAssignment ) )
            {
            // InternalOpenCypherParser.g:251:2: ( ( rule__VersionNumber__VersionNumberAssignment ) )
            // InternalOpenCypherParser.g:252:3: ( rule__VersionNumber__VersionNumberAssignment )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVersionNumberAccess().getVersionNumberAssignment()); 
            }
            // InternalOpenCypherParser.g:253:3: ( rule__VersionNumber__VersionNumberAssignment )
            // InternalOpenCypherParser.g:253:4: rule__VersionNumber__VersionNumberAssignment
            {
            pushFollow(FOLLOW_2);
            rule__VersionNumber__VersionNumberAssignment();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getVersionNumberAccess().getVersionNumberAssignment()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleVersionNumber"


    // $ANTLR start "entryRuleConfigurationOption"
    // InternalOpenCypherParser.g:262:1: entryRuleConfigurationOption : ruleConfigurationOption EOF ;
    public final void entryRuleConfigurationOption() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:263:1: ( ruleConfigurationOption EOF )
            // InternalOpenCypherParser.g:264:1: ruleConfigurationOption EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleConfigurationOption();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleConfigurationOption"


    // $ANTLR start "ruleConfigurationOption"
    // InternalOpenCypherParser.g:271:1: ruleConfigurationOption : ( ( rule__ConfigurationOption__Group__0 ) ) ;
    public final void ruleConfigurationOption() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:275:2: ( ( ( rule__ConfigurationOption__Group__0 ) ) )
            // InternalOpenCypherParser.g:276:2: ( ( rule__ConfigurationOption__Group__0 ) )
            {
            // InternalOpenCypherParser.g:276:2: ( ( rule__ConfigurationOption__Group__0 ) )
            // InternalOpenCypherParser.g:277:3: ( rule__ConfigurationOption__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:278:3: ( rule__ConfigurationOption__Group__0 )
            // InternalOpenCypherParser.g:278:4: rule__ConfigurationOption__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleConfigurationOption"


    // $ANTLR start "entryRuleStatement"
    // InternalOpenCypherParser.g:287:1: entryRuleStatement : ruleStatement EOF ;
    public final void entryRuleStatement() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:288:1: ( ruleStatement EOF )
            // InternalOpenCypherParser.g:289:1: ruleStatement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStatementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStatement"


    // $ANTLR start "ruleStatement"
    // InternalOpenCypherParser.g:296:1: ruleStatement : ( ( rule__Statement__Alternatives ) ) ;
    public final void ruleStatement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:300:2: ( ( ( rule__Statement__Alternatives ) ) )
            // InternalOpenCypherParser.g:301:2: ( ( rule__Statement__Alternatives ) )
            {
            // InternalOpenCypherParser.g:301:2: ( ( rule__Statement__Alternatives ) )
            // InternalOpenCypherParser.g:302:3: ( rule__Statement__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStatementAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:303:3: ( rule__Statement__Alternatives )
            // InternalOpenCypherParser.g:303:4: rule__Statement__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Statement__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStatementAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStatement"


    // $ANTLR start "entryRuleQuery"
    // InternalOpenCypherParser.g:312:1: entryRuleQuery : ruleQuery EOF ;
    public final void entryRuleQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:313:1: ( ruleQuery EOF )
            // InternalOpenCypherParser.g:314:1: ruleQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleQuery"


    // $ANTLR start "ruleQuery"
    // InternalOpenCypherParser.g:321:1: ruleQuery : ( ( rule__Query__Alternatives ) ) ;
    public final void ruleQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:325:2: ( ( ( rule__Query__Alternatives ) ) )
            // InternalOpenCypherParser.g:326:2: ( ( rule__Query__Alternatives ) )
            {
            // InternalOpenCypherParser.g:326:2: ( ( rule__Query__Alternatives ) )
            // InternalOpenCypherParser.g:327:3: ( rule__Query__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:328:3: ( rule__Query__Alternatives )
            // InternalOpenCypherParser.g:328:4: rule__Query__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Query__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleQuery"


    // $ANTLR start "entryRuleRegularQuery"
    // InternalOpenCypherParser.g:337:1: entryRuleRegularQuery : ruleRegularQuery EOF ;
    public final void entryRuleRegularQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:338:1: ( ruleRegularQuery EOF )
            // InternalOpenCypherParser.g:339:1: ruleRegularQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRegularQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRegularQuery"


    // $ANTLR start "ruleRegularQuery"
    // InternalOpenCypherParser.g:346:1: ruleRegularQuery : ( ( rule__RegularQuery__Group__0 ) ) ;
    public final void ruleRegularQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:350:2: ( ( ( rule__RegularQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:351:2: ( ( rule__RegularQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:351:2: ( ( rule__RegularQuery__Group__0 ) )
            // InternalOpenCypherParser.g:352:3: ( rule__RegularQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:353:3: ( rule__RegularQuery__Group__0 )
            // InternalOpenCypherParser.g:353:4: rule__RegularQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RegularQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRegularQuery"


    // $ANTLR start "entryRuleBulkImportQuery"
    // InternalOpenCypherParser.g:362:1: entryRuleBulkImportQuery : ruleBulkImportQuery EOF ;
    public final void entryRuleBulkImportQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:363:1: ( ruleBulkImportQuery EOF )
            // InternalOpenCypherParser.g:364:1: ruleBulkImportQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleBulkImportQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleBulkImportQuery"


    // $ANTLR start "ruleBulkImportQuery"
    // InternalOpenCypherParser.g:371:1: ruleBulkImportQuery : ( ( rule__BulkImportQuery__Group__0 ) ) ;
    public final void ruleBulkImportQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:375:2: ( ( ( rule__BulkImportQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:376:2: ( ( rule__BulkImportQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:376:2: ( ( rule__BulkImportQuery__Group__0 ) )
            // InternalOpenCypherParser.g:377:3: ( rule__BulkImportQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:378:3: ( rule__BulkImportQuery__Group__0 )
            // InternalOpenCypherParser.g:378:4: rule__BulkImportQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__BulkImportQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleBulkImportQuery"


    // $ANTLR start "entryRulePeriodicCommitHint"
    // InternalOpenCypherParser.g:387:1: entryRulePeriodicCommitHint : rulePeriodicCommitHint EOF ;
    public final void entryRulePeriodicCommitHint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:388:1: ( rulePeriodicCommitHint EOF )
            // InternalOpenCypherParser.g:389:1: rulePeriodicCommitHint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePeriodicCommitHint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePeriodicCommitHint"


    // $ANTLR start "rulePeriodicCommitHint"
    // InternalOpenCypherParser.g:396:1: rulePeriodicCommitHint : ( ( rule__PeriodicCommitHint__Group__0 ) ) ;
    public final void rulePeriodicCommitHint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:400:2: ( ( ( rule__PeriodicCommitHint__Group__0 ) ) )
            // InternalOpenCypherParser.g:401:2: ( ( rule__PeriodicCommitHint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:401:2: ( ( rule__PeriodicCommitHint__Group__0 ) )
            // InternalOpenCypherParser.g:402:3: ( rule__PeriodicCommitHint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:403:3: ( rule__PeriodicCommitHint__Group__0 )
            // InternalOpenCypherParser.g:403:4: rule__PeriodicCommitHint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePeriodicCommitHint"


    // $ANTLR start "entryRuleLoadCSVQuery"
    // InternalOpenCypherParser.g:412:1: entryRuleLoadCSVQuery : ruleLoadCSVQuery EOF ;
    public final void entryRuleLoadCSVQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:413:1: ( ruleLoadCSVQuery EOF )
            // InternalOpenCypherParser.g:414:1: ruleLoadCSVQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLoadCSVQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLoadCSVQuery"


    // $ANTLR start "ruleLoadCSVQuery"
    // InternalOpenCypherParser.g:421:1: ruleLoadCSVQuery : ( ( rule__LoadCSVQuery__Group__0 ) ) ;
    public final void ruleLoadCSVQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:425:2: ( ( ( rule__LoadCSVQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:426:2: ( ( rule__LoadCSVQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:426:2: ( ( rule__LoadCSVQuery__Group__0 ) )
            // InternalOpenCypherParser.g:427:3: ( rule__LoadCSVQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:428:3: ( rule__LoadCSVQuery__Group__0 )
            // InternalOpenCypherParser.g:428:4: rule__LoadCSVQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLoadCSVQuery"


    // $ANTLR start "entryRuleUnion"
    // InternalOpenCypherParser.g:437:1: entryRuleUnion : ruleUnion EOF ;
    public final void entryRuleUnion() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:438:1: ( ruleUnion EOF )
            // InternalOpenCypherParser.g:439:1: ruleUnion EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleUnion();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleUnion"


    // $ANTLR start "ruleUnion"
    // InternalOpenCypherParser.g:446:1: ruleUnion : ( ( rule__Union__Group__0 ) ) ;
    public final void ruleUnion() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:450:2: ( ( ( rule__Union__Group__0 ) ) )
            // InternalOpenCypherParser.g:451:2: ( ( rule__Union__Group__0 ) )
            {
            // InternalOpenCypherParser.g:451:2: ( ( rule__Union__Group__0 ) )
            // InternalOpenCypherParser.g:452:3: ( rule__Union__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:453:3: ( rule__Union__Group__0 )
            // InternalOpenCypherParser.g:453:4: rule__Union__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Union__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleUnion"


    // $ANTLR start "entryRuleSingleQuery"
    // InternalOpenCypherParser.g:462:1: entryRuleSingleQuery : ruleSingleQuery EOF ;
    public final void entryRuleSingleQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:463:1: ( ruleSingleQuery EOF )
            // InternalOpenCypherParser.g:464:1: ruleSingleQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSingleQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSingleQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSingleQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSingleQuery"


    // $ANTLR start "ruleSingleQuery"
    // InternalOpenCypherParser.g:471:1: ruleSingleQuery : ( ( rule__SingleQuery__Alternatives ) ) ;
    public final void ruleSingleQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:475:2: ( ( ( rule__SingleQuery__Alternatives ) ) )
            // InternalOpenCypherParser.g:476:2: ( ( rule__SingleQuery__Alternatives ) )
            {
            // InternalOpenCypherParser.g:476:2: ( ( rule__SingleQuery__Alternatives ) )
            // InternalOpenCypherParser.g:477:3: ( rule__SingleQuery__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSingleQueryAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:478:3: ( rule__SingleQuery__Alternatives )
            // InternalOpenCypherParser.g:478:4: rule__SingleQuery__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__SingleQuery__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSingleQueryAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSingleQuery"


    // $ANTLR start "entryRuleSinglePartQuery"
    // InternalOpenCypherParser.g:487:1: entryRuleSinglePartQuery : ruleSinglePartQuery EOF ;
    public final void entryRuleSinglePartQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:488:1: ( ruleSinglePartQuery EOF )
            // InternalOpenCypherParser.g:489:1: ruleSinglePartQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSinglePartQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSinglePartQuery"


    // $ANTLR start "ruleSinglePartQuery"
    // InternalOpenCypherParser.g:496:1: ruleSinglePartQuery : ( ( rule__SinglePartQuery__Alternatives ) ) ;
    public final void ruleSinglePartQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:500:2: ( ( ( rule__SinglePartQuery__Alternatives ) ) )
            // InternalOpenCypherParser.g:501:2: ( ( rule__SinglePartQuery__Alternatives ) )
            {
            // InternalOpenCypherParser.g:501:2: ( ( rule__SinglePartQuery__Alternatives ) )
            // InternalOpenCypherParser.g:502:3: ( rule__SinglePartQuery__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:503:3: ( rule__SinglePartQuery__Alternatives )
            // InternalOpenCypherParser.g:503:4: rule__SinglePartQuery__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__SinglePartQuery__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSinglePartQuery"


    // $ANTLR start "entryRuleMultiPartQuery"
    // InternalOpenCypherParser.g:512:1: entryRuleMultiPartQuery : ruleMultiPartQuery EOF ;
    public final void entryRuleMultiPartQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:513:1: ( ruleMultiPartQuery EOF )
            // InternalOpenCypherParser.g:514:1: ruleMultiPartQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMultiPartQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMultiPartQuery"


    // $ANTLR start "ruleMultiPartQuery"
    // InternalOpenCypherParser.g:521:1: ruleMultiPartQuery : ( ( rule__MultiPartQuery__Group__0 ) ) ;
    public final void ruleMultiPartQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:525:2: ( ( ( rule__MultiPartQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:526:2: ( ( rule__MultiPartQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:526:2: ( ( rule__MultiPartQuery__Group__0 ) )
            // InternalOpenCypherParser.g:527:3: ( rule__MultiPartQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:528:3: ( rule__MultiPartQuery__Group__0 )
            // InternalOpenCypherParser.g:528:4: rule__MultiPartQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MultiPartQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMultiPartQuery"


    // $ANTLR start "entryRuleMultiPartSubQuery"
    // InternalOpenCypherParser.g:537:1: entryRuleMultiPartSubQuery : ruleMultiPartSubQuery EOF ;
    public final void entryRuleMultiPartSubQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:538:1: ( ruleMultiPartSubQuery EOF )
            // InternalOpenCypherParser.g:539:1: ruleMultiPartSubQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartSubQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMultiPartSubQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartSubQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMultiPartSubQuery"


    // $ANTLR start "ruleMultiPartSubQuery"
    // InternalOpenCypherParser.g:546:1: ruleMultiPartSubQuery : ( ( rule__MultiPartSubQuery__Group__0 ) ) ;
    public final void ruleMultiPartSubQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:550:2: ( ( ( rule__MultiPartSubQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:551:2: ( ( rule__MultiPartSubQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:551:2: ( ( rule__MultiPartSubQuery__Group__0 ) )
            // InternalOpenCypherParser.g:552:3: ( rule__MultiPartSubQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartSubQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:553:3: ( rule__MultiPartSubQuery__Group__0 )
            // InternalOpenCypherParser.g:553:4: rule__MultiPartSubQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MultiPartSubQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartSubQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMultiPartSubQuery"


    // $ANTLR start "entryRuleUpdatingClause"
    // InternalOpenCypherParser.g:562:1: entryRuleUpdatingClause : ruleUpdatingClause EOF ;
    public final void entryRuleUpdatingClause() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:563:1: ( ruleUpdatingClause EOF )
            // InternalOpenCypherParser.g:564:1: ruleUpdatingClause EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUpdatingClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleUpdatingClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUpdatingClauseRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleUpdatingClause"


    // $ANTLR start "ruleUpdatingClause"
    // InternalOpenCypherParser.g:571:1: ruleUpdatingClause : ( ( rule__UpdatingClause__Alternatives ) ) ;
    public final void ruleUpdatingClause() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:575:2: ( ( ( rule__UpdatingClause__Alternatives ) ) )
            // InternalOpenCypherParser.g:576:2: ( ( rule__UpdatingClause__Alternatives ) )
            {
            // InternalOpenCypherParser.g:576:2: ( ( rule__UpdatingClause__Alternatives ) )
            // InternalOpenCypherParser.g:577:3: ( rule__UpdatingClause__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUpdatingClauseAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:578:3: ( rule__UpdatingClause__Alternatives )
            // InternalOpenCypherParser.g:578:4: rule__UpdatingClause__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__UpdatingClause__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUpdatingClauseAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleUpdatingClause"


    // $ANTLR start "entryRuleReadingClause"
    // InternalOpenCypherParser.g:587:1: entryRuleReadingClause : ruleReadingClause EOF ;
    public final void entryRuleReadingClause() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:588:1: ( ruleReadingClause EOF )
            // InternalOpenCypherParser.g:589:1: ruleReadingClause EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReadingClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReadingClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReadingClauseRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReadingClause"


    // $ANTLR start "ruleReadingClause"
    // InternalOpenCypherParser.g:596:1: ruleReadingClause : ( ( rule__ReadingClause__Alternatives ) ) ;
    public final void ruleReadingClause() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:600:2: ( ( ( rule__ReadingClause__Alternatives ) ) )
            // InternalOpenCypherParser.g:601:2: ( ( rule__ReadingClause__Alternatives ) )
            {
            // InternalOpenCypherParser.g:601:2: ( ( rule__ReadingClause__Alternatives ) )
            // InternalOpenCypherParser.g:602:3: ( rule__ReadingClause__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReadingClauseAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:603:3: ( rule__ReadingClause__Alternatives )
            // InternalOpenCypherParser.g:603:4: rule__ReadingClause__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__ReadingClause__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReadingClauseAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReadingClause"


    // $ANTLR start "entryRuleCommand"
    // InternalOpenCypherParser.g:612:1: entryRuleCommand : ruleCommand EOF ;
    public final void entryRuleCommand() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:613:1: ( ruleCommand EOF )
            // InternalOpenCypherParser.g:614:1: ruleCommand EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCommandRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCommand();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCommandRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCommand"


    // $ANTLR start "ruleCommand"
    // InternalOpenCypherParser.g:621:1: ruleCommand : ( ( rule__Command__Alternatives ) ) ;
    public final void ruleCommand() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:625:2: ( ( ( rule__Command__Alternatives ) ) )
            // InternalOpenCypherParser.g:626:2: ( ( rule__Command__Alternatives ) )
            {
            // InternalOpenCypherParser.g:626:2: ( ( rule__Command__Alternatives ) )
            // InternalOpenCypherParser.g:627:3: ( rule__Command__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCommandAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:628:3: ( rule__Command__Alternatives )
            // InternalOpenCypherParser.g:628:4: rule__Command__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Command__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCommandAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCommand"


    // $ANTLR start "entryRuleCreateUniqueConstraint"
    // InternalOpenCypherParser.g:637:1: entryRuleCreateUniqueConstraint : ruleCreateUniqueConstraint EOF ;
    public final void entryRuleCreateUniqueConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:638:1: ( ruleCreateUniqueConstraint EOF )
            // InternalOpenCypherParser.g:639:1: ruleCreateUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreateUniqueConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateUniqueConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCreateUniqueConstraint"


    // $ANTLR start "ruleCreateUniqueConstraint"
    // InternalOpenCypherParser.g:646:1: ruleCreateUniqueConstraint : ( ( rule__CreateUniqueConstraint__Group__0 ) ) ;
    public final void ruleCreateUniqueConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:650:2: ( ( ( rule__CreateUniqueConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:651:2: ( ( rule__CreateUniqueConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:651:2: ( ( rule__CreateUniqueConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:652:3: ( rule__CreateUniqueConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateUniqueConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:653:3: ( rule__CreateUniqueConstraint__Group__0 )
            // InternalOpenCypherParser.g:653:4: rule__CreateUniqueConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CreateUniqueConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateUniqueConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCreateUniqueConstraint"


    // $ANTLR start "entryRuleCreateNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:662:1: entryRuleCreateNodePropertyExistenceConstraint : ruleCreateNodePropertyExistenceConstraint EOF ;
    public final void entryRuleCreateNodePropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:663:1: ( ruleCreateNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:664:1: ruleCreateNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreateNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateNodePropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCreateNodePropertyExistenceConstraint"


    // $ANTLR start "ruleCreateNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:671:1: ruleCreateNodePropertyExistenceConstraint : ( ( rule__CreateNodePropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleCreateNodePropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:675:2: ( ( ( rule__CreateNodePropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:676:2: ( ( rule__CreateNodePropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:676:2: ( ( rule__CreateNodePropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:677:3: ( rule__CreateNodePropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:678:3: ( rule__CreateNodePropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:678:4: rule__CreateNodePropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CreateNodePropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCreateNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleCreateRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:687:1: entryRuleCreateRelationshipPropertyExistenceConstraint : ruleCreateRelationshipPropertyExistenceConstraint EOF ;
    public final void entryRuleCreateRelationshipPropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:688:1: ( ruleCreateRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:689:1: ruleCreateRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreateRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCreateRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleCreateRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:696:1: ruleCreateRelationshipPropertyExistenceConstraint : ( ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleCreateRelationshipPropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:700:2: ( ( ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:701:2: ( ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:701:2: ( ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:702:3: ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:703:3: ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:703:4: rule__CreateRelationshipPropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CreateRelationshipPropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCreateRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleCreateIndex"
    // InternalOpenCypherParser.g:712:1: entryRuleCreateIndex : ruleCreateIndex EOF ;
    public final void entryRuleCreateIndex() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:713:1: ( ruleCreateIndex EOF )
            // InternalOpenCypherParser.g:714:1: ruleCreateIndex EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreateIndex();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateIndexRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCreateIndex"


    // $ANTLR start "ruleCreateIndex"
    // InternalOpenCypherParser.g:721:1: ruleCreateIndex : ( ( rule__CreateIndex__Group__0 ) ) ;
    public final void ruleCreateIndex() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:725:2: ( ( ( rule__CreateIndex__Group__0 ) ) )
            // InternalOpenCypherParser.g:726:2: ( ( rule__CreateIndex__Group__0 ) )
            {
            // InternalOpenCypherParser.g:726:2: ( ( rule__CreateIndex__Group__0 ) )
            // InternalOpenCypherParser.g:727:3: ( rule__CreateIndex__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateIndexAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:728:3: ( rule__CreateIndex__Group__0 )
            // InternalOpenCypherParser.g:728:4: rule__CreateIndex__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CreateIndex__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateIndexAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCreateIndex"


    // $ANTLR start "entryRuleDropUniqueConstraint"
    // InternalOpenCypherParser.g:737:1: entryRuleDropUniqueConstraint : ruleDropUniqueConstraint EOF ;
    public final void entryRuleDropUniqueConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:738:1: ( ruleDropUniqueConstraint EOF )
            // InternalOpenCypherParser.g:739:1: ruleDropUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDropUniqueConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropUniqueConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDropUniqueConstraint"


    // $ANTLR start "ruleDropUniqueConstraint"
    // InternalOpenCypherParser.g:746:1: ruleDropUniqueConstraint : ( ( rule__DropUniqueConstraint__Group__0 ) ) ;
    public final void ruleDropUniqueConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:750:2: ( ( ( rule__DropUniqueConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:751:2: ( ( rule__DropUniqueConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:751:2: ( ( rule__DropUniqueConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:752:3: ( rule__DropUniqueConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropUniqueConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:753:3: ( rule__DropUniqueConstraint__Group__0 )
            // InternalOpenCypherParser.g:753:4: rule__DropUniqueConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DropUniqueConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropUniqueConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDropUniqueConstraint"


    // $ANTLR start "entryRuleDropNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:762:1: entryRuleDropNodePropertyExistenceConstraint : ruleDropNodePropertyExistenceConstraint EOF ;
    public final void entryRuleDropNodePropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:763:1: ( ruleDropNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:764:1: ruleDropNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDropNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropNodePropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDropNodePropertyExistenceConstraint"


    // $ANTLR start "ruleDropNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:771:1: ruleDropNodePropertyExistenceConstraint : ( ( rule__DropNodePropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleDropNodePropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:775:2: ( ( ( rule__DropNodePropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:776:2: ( ( rule__DropNodePropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:776:2: ( ( rule__DropNodePropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:777:3: ( rule__DropNodePropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:778:3: ( rule__DropNodePropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:778:4: rule__DropNodePropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DropNodePropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDropNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleDropRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:787:1: entryRuleDropRelationshipPropertyExistenceConstraint : ruleDropRelationshipPropertyExistenceConstraint EOF ;
    public final void entryRuleDropRelationshipPropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:788:1: ( ruleDropRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:789:1: ruleDropRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDropRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDropRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleDropRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:796:1: ruleDropRelationshipPropertyExistenceConstraint : ( ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleDropRelationshipPropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:800:2: ( ( ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:801:2: ( ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:801:2: ( ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:802:3: ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:803:3: ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:803:4: rule__DropRelationshipPropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DropRelationshipPropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDropRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleDropIndex"
    // InternalOpenCypherParser.g:812:1: entryRuleDropIndex : ruleDropIndex EOF ;
    public final void entryRuleDropIndex() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:813:1: ( ruleDropIndex EOF )
            // InternalOpenCypherParser.g:814:1: ruleDropIndex EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDropIndex();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropIndexRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDropIndex"


    // $ANTLR start "ruleDropIndex"
    // InternalOpenCypherParser.g:821:1: ruleDropIndex : ( ( rule__DropIndex__Group__0 ) ) ;
    public final void ruleDropIndex() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:825:2: ( ( ( rule__DropIndex__Group__0 ) ) )
            // InternalOpenCypherParser.g:826:2: ( ( rule__DropIndex__Group__0 ) )
            {
            // InternalOpenCypherParser.g:826:2: ( ( rule__DropIndex__Group__0 ) )
            // InternalOpenCypherParser.g:827:3: ( rule__DropIndex__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropIndexAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:828:3: ( rule__DropIndex__Group__0 )
            // InternalOpenCypherParser.g:828:4: rule__DropIndex__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DropIndex__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropIndexAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDropIndex"


    // $ANTLR start "entryRuleIndex"
    // InternalOpenCypherParser.g:837:1: entryRuleIndex : ruleIndex EOF ;
    public final void entryRuleIndex() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:838:1: ( ruleIndex EOF )
            // InternalOpenCypherParser.g:839:1: ruleIndex EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIndex();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIndex"


    // $ANTLR start "ruleIndex"
    // InternalOpenCypherParser.g:846:1: ruleIndex : ( ( rule__Index__Group__0 ) ) ;
    public final void ruleIndex() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:850:2: ( ( ( rule__Index__Group__0 ) ) )
            // InternalOpenCypherParser.g:851:2: ( ( rule__Index__Group__0 ) )
            {
            // InternalOpenCypherParser.g:851:2: ( ( rule__Index__Group__0 ) )
            // InternalOpenCypherParser.g:852:3: ( rule__Index__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:853:3: ( rule__Index__Group__0 )
            // InternalOpenCypherParser.g:853:4: rule__Index__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Index__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIndex"


    // $ANTLR start "entryRuleUniqueConstraint"
    // InternalOpenCypherParser.g:862:1: entryRuleUniqueConstraint : ruleUniqueConstraint EOF ;
    public final void entryRuleUniqueConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:863:1: ( ruleUniqueConstraint EOF )
            // InternalOpenCypherParser.g:864:1: ruleUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleUniqueConstraint"


    // $ANTLR start "ruleUniqueConstraint"
    // InternalOpenCypherParser.g:871:1: ruleUniqueConstraint : ( ( rule__UniqueConstraint__Group__0 ) ) ;
    public final void ruleUniqueConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:875:2: ( ( ( rule__UniqueConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:876:2: ( ( rule__UniqueConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:876:2: ( ( rule__UniqueConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:877:3: ( rule__UniqueConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:878:3: ( rule__UniqueConstraint__Group__0 )
            // InternalOpenCypherParser.g:878:4: rule__UniqueConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleUniqueConstraint"


    // $ANTLR start "entryRuleNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:887:1: entryRuleNodePropertyExistenceConstraint : ruleNodePropertyExistenceConstraint EOF ;
    public final void entryRuleNodePropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:888:1: ( ruleNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:889:1: ruleNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNodePropertyExistenceConstraint"


    // $ANTLR start "ruleNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:896:1: ruleNodePropertyExistenceConstraint : ( ( rule__NodePropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleNodePropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:900:2: ( ( ( rule__NodePropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:901:2: ( ( rule__NodePropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:901:2: ( ( rule__NodePropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:902:3: ( rule__NodePropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:903:3: ( rule__NodePropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:903:4: rule__NodePropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:912:1: entryRuleRelationshipPropertyExistenceConstraint : ruleRelationshipPropertyExistenceConstraint EOF ;
    public final void entryRuleRelationshipPropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:913:1: ( ruleRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:914:1: ruleRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:921:1: ruleRelationshipPropertyExistenceConstraint : ( ( rule__RelationshipPropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleRelationshipPropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:925:2: ( ( ( rule__RelationshipPropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:926:2: ( ( rule__RelationshipPropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:926:2: ( ( rule__RelationshipPropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:927:3: ( rule__RelationshipPropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:928:3: ( rule__RelationshipPropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:928:4: rule__RelationshipPropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleRelationshipPatternSyntax"
    // InternalOpenCypherParser.g:937:1: entryRuleRelationshipPatternSyntax : ruleRelationshipPatternSyntax EOF ;
    public final void entryRuleRelationshipPatternSyntax() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:938:1: ( ruleRelationshipPatternSyntax EOF )
            // InternalOpenCypherParser.g:939:1: ruleRelationshipPatternSyntax EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipPatternSyntax();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipPatternSyntax"


    // $ANTLR start "ruleRelationshipPatternSyntax"
    // InternalOpenCypherParser.g:946:1: ruleRelationshipPatternSyntax : ( ( rule__RelationshipPatternSyntax__Group__0 ) ) ;
    public final void ruleRelationshipPatternSyntax() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:950:2: ( ( ( rule__RelationshipPatternSyntax__Group__0 ) ) )
            // InternalOpenCypherParser.g:951:2: ( ( rule__RelationshipPatternSyntax__Group__0 ) )
            {
            // InternalOpenCypherParser.g:951:2: ( ( rule__RelationshipPatternSyntax__Group__0 ) )
            // InternalOpenCypherParser.g:952:3: ( rule__RelationshipPatternSyntax__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:953:3: ( rule__RelationshipPatternSyntax__Group__0 )
            // InternalOpenCypherParser.g:953:4: rule__RelationshipPatternSyntax__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipPatternSyntax"


    // $ANTLR start "entryRuleLoadCSV"
    // InternalOpenCypherParser.g:962:1: entryRuleLoadCSV : ruleLoadCSV EOF ;
    public final void entryRuleLoadCSV() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:963:1: ( ruleLoadCSV EOF )
            // InternalOpenCypherParser.g:964:1: ruleLoadCSV EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLoadCSV();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLoadCSV"


    // $ANTLR start "ruleLoadCSV"
    // InternalOpenCypherParser.g:971:1: ruleLoadCSV : ( ( rule__LoadCSV__Group__0 ) ) ;
    public final void ruleLoadCSV() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:975:2: ( ( ( rule__LoadCSV__Group__0 ) ) )
            // InternalOpenCypherParser.g:976:2: ( ( rule__LoadCSV__Group__0 ) )
            {
            // InternalOpenCypherParser.g:976:2: ( ( rule__LoadCSV__Group__0 ) )
            // InternalOpenCypherParser.g:977:3: ( rule__LoadCSV__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:978:3: ( rule__LoadCSV__Group__0 )
            // InternalOpenCypherParser.g:978:4: rule__LoadCSV__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLoadCSV"


    // $ANTLR start "entryRuleLoadCSVWithHeaders"
    // InternalOpenCypherParser.g:987:1: entryRuleLoadCSVWithHeaders : ruleLoadCSVWithHeaders EOF ;
    public final void entryRuleLoadCSVWithHeaders() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:988:1: ( ruleLoadCSVWithHeaders EOF )
            // InternalOpenCypherParser.g:989:1: ruleLoadCSVWithHeaders EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVWithHeadersRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLoadCSVWithHeaders();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVWithHeadersRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLoadCSVWithHeaders"


    // $ANTLR start "ruleLoadCSVWithHeaders"
    // InternalOpenCypherParser.g:996:1: ruleLoadCSVWithHeaders : ( ( rule__LoadCSVWithHeaders__Group__0 ) ) ;
    public final void ruleLoadCSVWithHeaders() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1000:2: ( ( ( rule__LoadCSVWithHeaders__Group__0 ) ) )
            // InternalOpenCypherParser.g:1001:2: ( ( rule__LoadCSVWithHeaders__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1001:2: ( ( rule__LoadCSVWithHeaders__Group__0 ) )
            // InternalOpenCypherParser.g:1002:3: ( rule__LoadCSVWithHeaders__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVWithHeadersAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1003:3: ( rule__LoadCSVWithHeaders__Group__0 )
            // InternalOpenCypherParser.g:1003:4: rule__LoadCSVWithHeaders__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVWithHeaders__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVWithHeadersAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLoadCSVWithHeaders"


    // $ANTLR start "entryRuleMatch"
    // InternalOpenCypherParser.g:1012:1: entryRuleMatch : ruleMatch EOF ;
    public final void entryRuleMatch() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1013:1: ( ruleMatch EOF )
            // InternalOpenCypherParser.g:1014:1: ruleMatch EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMatch();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMatch"


    // $ANTLR start "ruleMatch"
    // InternalOpenCypherParser.g:1021:1: ruleMatch : ( ( rule__Match__Group__0 ) ) ;
    public final void ruleMatch() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1025:2: ( ( ( rule__Match__Group__0 ) ) )
            // InternalOpenCypherParser.g:1026:2: ( ( rule__Match__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1026:2: ( ( rule__Match__Group__0 ) )
            // InternalOpenCypherParser.g:1027:3: ( rule__Match__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1028:3: ( rule__Match__Group__0 )
            // InternalOpenCypherParser.g:1028:4: rule__Match__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Match__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMatch"


    // $ANTLR start "entryRuleUnwind"
    // InternalOpenCypherParser.g:1037:1: entryRuleUnwind : ruleUnwind EOF ;
    public final void entryRuleUnwind() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1038:1: ( ruleUnwind EOF )
            // InternalOpenCypherParser.g:1039:1: ruleUnwind EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleUnwind();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleUnwind"


    // $ANTLR start "ruleUnwind"
    // InternalOpenCypherParser.g:1046:1: ruleUnwind : ( ( rule__Unwind__Group__0 ) ) ;
    public final void ruleUnwind() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1050:2: ( ( ( rule__Unwind__Group__0 ) ) )
            // InternalOpenCypherParser.g:1051:2: ( ( rule__Unwind__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1051:2: ( ( rule__Unwind__Group__0 ) )
            // InternalOpenCypherParser.g:1052:3: ( rule__Unwind__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1053:3: ( rule__Unwind__Group__0 )
            // InternalOpenCypherParser.g:1053:4: rule__Unwind__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Unwind__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleUnwind"


    // $ANTLR start "entryRuleMerge"
    // InternalOpenCypherParser.g:1062:1: entryRuleMerge : ruleMerge EOF ;
    public final void entryRuleMerge() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1063:1: ( ruleMerge EOF )
            // InternalOpenCypherParser.g:1064:1: ruleMerge EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMerge();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMerge"


    // $ANTLR start "ruleMerge"
    // InternalOpenCypherParser.g:1071:1: ruleMerge : ( ( rule__Merge__Group__0 ) ) ;
    public final void ruleMerge() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1075:2: ( ( ( rule__Merge__Group__0 ) ) )
            // InternalOpenCypherParser.g:1076:2: ( ( rule__Merge__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1076:2: ( ( rule__Merge__Group__0 ) )
            // InternalOpenCypherParser.g:1077:3: ( rule__Merge__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1078:3: ( rule__Merge__Group__0 )
            // InternalOpenCypherParser.g:1078:4: rule__Merge__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Merge__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMerge"


    // $ANTLR start "entryRuleMergeAction"
    // InternalOpenCypherParser.g:1087:1: entryRuleMergeAction : ruleMergeAction EOF ;
    public final void entryRuleMergeAction() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1088:1: ( ruleMergeAction EOF )
            // InternalOpenCypherParser.g:1089:1: ruleMergeAction EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMergeAction();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMergeAction"


    // $ANTLR start "ruleMergeAction"
    // InternalOpenCypherParser.g:1096:1: ruleMergeAction : ( ( rule__MergeAction__Group__0 ) ) ;
    public final void ruleMergeAction() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1100:2: ( ( ( rule__MergeAction__Group__0 ) ) )
            // InternalOpenCypherParser.g:1101:2: ( ( rule__MergeAction__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1101:2: ( ( rule__MergeAction__Group__0 ) )
            // InternalOpenCypherParser.g:1102:3: ( rule__MergeAction__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1103:3: ( rule__MergeAction__Group__0 )
            // InternalOpenCypherParser.g:1103:4: rule__MergeAction__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MergeAction__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMergeAction"


    // $ANTLR start "entryRuleCreate"
    // InternalOpenCypherParser.g:1112:1: entryRuleCreate : ruleCreate EOF ;
    public final void entryRuleCreate() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1113:1: ( ruleCreate EOF )
            // InternalOpenCypherParser.g:1114:1: ruleCreate EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreate();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCreate"


    // $ANTLR start "ruleCreate"
    // InternalOpenCypherParser.g:1121:1: ruleCreate : ( ( rule__Create__Group__0 ) ) ;
    public final void ruleCreate() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1125:2: ( ( ( rule__Create__Group__0 ) ) )
            // InternalOpenCypherParser.g:1126:2: ( ( rule__Create__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1126:2: ( ( rule__Create__Group__0 ) )
            // InternalOpenCypherParser.g:1127:3: ( rule__Create__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1128:3: ( rule__Create__Group__0 )
            // InternalOpenCypherParser.g:1128:4: rule__Create__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Create__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCreate"


    // $ANTLR start "entryRuleSet"
    // InternalOpenCypherParser.g:1137:1: entryRuleSet : ruleSet EOF ;
    public final void entryRuleSet() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1138:1: ( ruleSet EOF )
            // InternalOpenCypherParser.g:1139:1: ruleSet EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSet();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSet"


    // $ANTLR start "ruleSet"
    // InternalOpenCypherParser.g:1146:1: ruleSet : ( ( rule__Set__Group__0 ) ) ;
    public final void ruleSet() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1150:2: ( ( ( rule__Set__Group__0 ) ) )
            // InternalOpenCypherParser.g:1151:2: ( ( rule__Set__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1151:2: ( ( rule__Set__Group__0 ) )
            // InternalOpenCypherParser.g:1152:3: ( rule__Set__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1153:3: ( rule__Set__Group__0 )
            // InternalOpenCypherParser.g:1153:4: rule__Set__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Set__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSet"


    // $ANTLR start "entryRuleSetItem"
    // InternalOpenCypherParser.g:1162:1: entryRuleSetItem : ruleSetItem EOF ;
    public final void entryRuleSetItem() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1163:1: ( ruleSetItem EOF )
            // InternalOpenCypherParser.g:1164:1: ruleSetItem EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSetItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSetItem"


    // $ANTLR start "ruleSetItem"
    // InternalOpenCypherParser.g:1171:1: ruleSetItem : ( ( rule__SetItem__Alternatives ) ) ;
    public final void ruleSetItem() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1175:2: ( ( ( rule__SetItem__Alternatives ) ) )
            // InternalOpenCypherParser.g:1176:2: ( ( rule__SetItem__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1176:2: ( ( rule__SetItem__Alternatives ) )
            // InternalOpenCypherParser.g:1177:3: ( rule__SetItem__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1178:3: ( rule__SetItem__Alternatives )
            // InternalOpenCypherParser.g:1178:4: rule__SetItem__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSetItem"


    // $ANTLR start "entryRuleDelete"
    // InternalOpenCypherParser.g:1187:1: entryRuleDelete : ruleDelete EOF ;
    public final void entryRuleDelete() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1188:1: ( ruleDelete EOF )
            // InternalOpenCypherParser.g:1189:1: ruleDelete EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDelete();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDelete"


    // $ANTLR start "ruleDelete"
    // InternalOpenCypherParser.g:1196:1: ruleDelete : ( ( rule__Delete__Group__0 ) ) ;
    public final void ruleDelete() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1200:2: ( ( ( rule__Delete__Group__0 ) ) )
            // InternalOpenCypherParser.g:1201:2: ( ( rule__Delete__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1201:2: ( ( rule__Delete__Group__0 ) )
            // InternalOpenCypherParser.g:1202:3: ( rule__Delete__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1203:3: ( rule__Delete__Group__0 )
            // InternalOpenCypherParser.g:1203:4: rule__Delete__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Delete__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDelete"


    // $ANTLR start "entryRuleRemove"
    // InternalOpenCypherParser.g:1212:1: entryRuleRemove : ruleRemove EOF ;
    public final void entryRuleRemove() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1213:1: ( ruleRemove EOF )
            // InternalOpenCypherParser.g:1214:1: ruleRemove EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRemove();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRemove"


    // $ANTLR start "ruleRemove"
    // InternalOpenCypherParser.g:1221:1: ruleRemove : ( ( rule__Remove__Group__0 ) ) ;
    public final void ruleRemove() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1225:2: ( ( ( rule__Remove__Group__0 ) ) )
            // InternalOpenCypherParser.g:1226:2: ( ( rule__Remove__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1226:2: ( ( rule__Remove__Group__0 ) )
            // InternalOpenCypherParser.g:1227:3: ( rule__Remove__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1228:3: ( rule__Remove__Group__0 )
            // InternalOpenCypherParser.g:1228:4: rule__Remove__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Remove__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRemove"


    // $ANTLR start "entryRuleRemoveItem"
    // InternalOpenCypherParser.g:1237:1: entryRuleRemoveItem : ruleRemoveItem EOF ;
    public final void entryRuleRemoveItem() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1238:1: ( ruleRemoveItem EOF )
            // InternalOpenCypherParser.g:1239:1: ruleRemoveItem EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRemoveItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRemoveItem"


    // $ANTLR start "ruleRemoveItem"
    // InternalOpenCypherParser.g:1246:1: ruleRemoveItem : ( ( rule__RemoveItem__Alternatives ) ) ;
    public final void ruleRemoveItem() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1250:2: ( ( ( rule__RemoveItem__Alternatives ) ) )
            // InternalOpenCypherParser.g:1251:2: ( ( rule__RemoveItem__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1251:2: ( ( rule__RemoveItem__Alternatives ) )
            // InternalOpenCypherParser.g:1252:3: ( rule__RemoveItem__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1253:3: ( rule__RemoveItem__Alternatives )
            // InternalOpenCypherParser.g:1253:4: rule__RemoveItem__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRemoveItem"


    // $ANTLR start "entryRuleForeach"
    // InternalOpenCypherParser.g:1262:1: entryRuleForeach : ruleForeach EOF ;
    public final void entryRuleForeach() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1263:1: ( ruleForeach EOF )
            // InternalOpenCypherParser.g:1264:1: ruleForeach EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleForeach();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleForeach"


    // $ANTLR start "ruleForeach"
    // InternalOpenCypherParser.g:1271:1: ruleForeach : ( ( rule__Foreach__Group__0 ) ) ;
    public final void ruleForeach() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1275:2: ( ( ( rule__Foreach__Group__0 ) ) )
            // InternalOpenCypherParser.g:1276:2: ( ( rule__Foreach__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1276:2: ( ( rule__Foreach__Group__0 ) )
            // InternalOpenCypherParser.g:1277:3: ( rule__Foreach__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1278:3: ( rule__Foreach__Group__0 )
            // InternalOpenCypherParser.g:1278:4: rule__Foreach__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleForeach"


    // $ANTLR start "entryRuleInQueryCall"
    // InternalOpenCypherParser.g:1287:1: entryRuleInQueryCall : ruleInQueryCall EOF ;
    public final void entryRuleInQueryCall() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1288:1: ( ruleInQueryCall EOF )
            // InternalOpenCypherParser.g:1289:1: ruleInQueryCall EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleInQueryCall();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInQueryCall"


    // $ANTLR start "ruleInQueryCall"
    // InternalOpenCypherParser.g:1296:1: ruleInQueryCall : ( ( rule__InQueryCall__Group__0 ) ) ;
    public final void ruleInQueryCall() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1300:2: ( ( ( rule__InQueryCall__Group__0 ) ) )
            // InternalOpenCypherParser.g:1301:2: ( ( rule__InQueryCall__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1301:2: ( ( rule__InQueryCall__Group__0 ) )
            // InternalOpenCypherParser.g:1302:3: ( rule__InQueryCall__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1303:3: ( rule__InQueryCall__Group__0 )
            // InternalOpenCypherParser.g:1303:4: rule__InQueryCall__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInQueryCall"


    // $ANTLR start "entryRuleStandaloneCall"
    // InternalOpenCypherParser.g:1312:1: entryRuleStandaloneCall : ruleStandaloneCall EOF ;
    public final void entryRuleStandaloneCall() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1313:1: ( ruleStandaloneCall EOF )
            // InternalOpenCypherParser.g:1314:1: ruleStandaloneCall EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStandaloneCall();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStandaloneCall"


    // $ANTLR start "ruleStandaloneCall"
    // InternalOpenCypherParser.g:1321:1: ruleStandaloneCall : ( ( rule__StandaloneCall__Group__0 ) ) ;
    public final void ruleStandaloneCall() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1325:2: ( ( ( rule__StandaloneCall__Group__0 ) ) )
            // InternalOpenCypherParser.g:1326:2: ( ( rule__StandaloneCall__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1326:2: ( ( rule__StandaloneCall__Group__0 ) )
            // InternalOpenCypherParser.g:1327:3: ( rule__StandaloneCall__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1328:3: ( rule__StandaloneCall__Group__0 )
            // InternalOpenCypherParser.g:1328:4: rule__StandaloneCall__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStandaloneCall"


    // $ANTLR start "entryRuleYieldItems"
    // InternalOpenCypherParser.g:1337:1: entryRuleYieldItems : ruleYieldItems EOF ;
    public final void entryRuleYieldItems() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1338:1: ( ruleYieldItems EOF )
            // InternalOpenCypherParser.g:1339:1: ruleYieldItems EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleYieldItems();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleYieldItems"


    // $ANTLR start "ruleYieldItems"
    // InternalOpenCypherParser.g:1346:1: ruleYieldItems : ( ( rule__YieldItems__Group__0 ) ) ;
    public final void ruleYieldItems() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1350:2: ( ( ( rule__YieldItems__Group__0 ) ) )
            // InternalOpenCypherParser.g:1351:2: ( ( rule__YieldItems__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1351:2: ( ( rule__YieldItems__Group__0 ) )
            // InternalOpenCypherParser.g:1352:3: ( rule__YieldItems__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1353:3: ( rule__YieldItems__Group__0 )
            // InternalOpenCypherParser.g:1353:4: rule__YieldItems__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleYieldItems"


    // $ANTLR start "entryRuleYieldItem"
    // InternalOpenCypherParser.g:1362:1: entryRuleYieldItem : ruleYieldItem EOF ;
    public final void entryRuleYieldItem() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1363:1: ( ruleYieldItem EOF )
            // InternalOpenCypherParser.g:1364:1: ruleYieldItem EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleYieldItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleYieldItem"


    // $ANTLR start "ruleYieldItem"
    // InternalOpenCypherParser.g:1371:1: ruleYieldItem : ( ( rule__YieldItem__Group__0 ) ) ;
    public final void ruleYieldItem() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1375:2: ( ( ( rule__YieldItem__Group__0 ) ) )
            // InternalOpenCypherParser.g:1376:2: ( ( rule__YieldItem__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1376:2: ( ( rule__YieldItem__Group__0 ) )
            // InternalOpenCypherParser.g:1377:3: ( rule__YieldItem__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1378:3: ( rule__YieldItem__Group__0 )
            // InternalOpenCypherParser.g:1378:4: rule__YieldItem__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__YieldItem__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleYieldItem"


    // $ANTLR start "entryRuleWith"
    // InternalOpenCypherParser.g:1387:1: entryRuleWith : ruleWith EOF ;
    public final void entryRuleWith() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1388:1: ( ruleWith EOF )
            // InternalOpenCypherParser.g:1389:1: ruleWith EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleWith();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleWith"


    // $ANTLR start "ruleWith"
    // InternalOpenCypherParser.g:1396:1: ruleWith : ( ( rule__With__Group__0 ) ) ;
    public final void ruleWith() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1400:2: ( ( ( rule__With__Group__0 ) ) )
            // InternalOpenCypherParser.g:1401:2: ( ( rule__With__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1401:2: ( ( rule__With__Group__0 ) )
            // InternalOpenCypherParser.g:1402:3: ( rule__With__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1403:3: ( rule__With__Group__0 )
            // InternalOpenCypherParser.g:1403:4: rule__With__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__With__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleWith"


    // $ANTLR start "entryRuleReturn"
    // InternalOpenCypherParser.g:1412:1: entryRuleReturn : ruleReturn EOF ;
    public final void entryRuleReturn() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1413:1: ( ruleReturn EOF )
            // InternalOpenCypherParser.g:1414:1: ruleReturn EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReturn();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReturn"


    // $ANTLR start "ruleReturn"
    // InternalOpenCypherParser.g:1421:1: ruleReturn : ( ( rule__Return__Group__0 ) ) ;
    public final void ruleReturn() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1425:2: ( ( ( rule__Return__Group__0 ) ) )
            // InternalOpenCypherParser.g:1426:2: ( ( rule__Return__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1426:2: ( ( rule__Return__Group__0 ) )
            // InternalOpenCypherParser.g:1427:3: ( rule__Return__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1428:3: ( rule__Return__Group__0 )
            // InternalOpenCypherParser.g:1428:4: rule__Return__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Return__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReturn"


    // $ANTLR start "entryRuleReturnBody"
    // InternalOpenCypherParser.g:1437:1: entryRuleReturnBody : ruleReturnBody EOF ;
    public final void entryRuleReturnBody() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1438:1: ( ruleReturnBody EOF )
            // InternalOpenCypherParser.g:1439:1: ruleReturnBody EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReturnBody();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReturnBody"


    // $ANTLR start "ruleReturnBody"
    // InternalOpenCypherParser.g:1446:1: ruleReturnBody : ( ( rule__ReturnBody__Group__0 ) ) ;
    public final void ruleReturnBody() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1450:2: ( ( ( rule__ReturnBody__Group__0 ) ) )
            // InternalOpenCypherParser.g:1451:2: ( ( rule__ReturnBody__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1451:2: ( ( rule__ReturnBody__Group__0 ) )
            // InternalOpenCypherParser.g:1452:3: ( rule__ReturnBody__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1453:3: ( rule__ReturnBody__Group__0 )
            // InternalOpenCypherParser.g:1453:4: rule__ReturnBody__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReturnBody"


    // $ANTLR start "entryRuleReturnItems"
    // InternalOpenCypherParser.g:1462:1: entryRuleReturnItems : ruleReturnItems EOF ;
    public final void entryRuleReturnItems() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1463:1: ( ruleReturnItems EOF )
            // InternalOpenCypherParser.g:1464:1: ruleReturnItems EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReturnItems();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReturnItems"


    // $ANTLR start "ruleReturnItems"
    // InternalOpenCypherParser.g:1471:1: ruleReturnItems : ( ( rule__ReturnItems__Alternatives ) ) ;
    public final void ruleReturnItems() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1475:2: ( ( ( rule__ReturnItems__Alternatives ) ) )
            // InternalOpenCypherParser.g:1476:2: ( ( rule__ReturnItems__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1476:2: ( ( rule__ReturnItems__Alternatives ) )
            // InternalOpenCypherParser.g:1477:3: ( rule__ReturnItems__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1478:3: ( rule__ReturnItems__Alternatives )
            // InternalOpenCypherParser.g:1478:4: rule__ReturnItems__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReturnItems"


    // $ANTLR start "entryRuleReturnItem"
    // InternalOpenCypherParser.g:1487:1: entryRuleReturnItem : ruleReturnItem EOF ;
    public final void entryRuleReturnItem() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1488:1: ( ruleReturnItem EOF )
            // InternalOpenCypherParser.g:1489:1: ruleReturnItem EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReturnItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReturnItem"


    // $ANTLR start "ruleReturnItem"
    // InternalOpenCypherParser.g:1496:1: ruleReturnItem : ( ( rule__ReturnItem__Group__0 ) ) ;
    public final void ruleReturnItem() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1500:2: ( ( ( rule__ReturnItem__Group__0 ) ) )
            // InternalOpenCypherParser.g:1501:2: ( ( rule__ReturnItem__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1501:2: ( ( rule__ReturnItem__Group__0 ) )
            // InternalOpenCypherParser.g:1502:3: ( rule__ReturnItem__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1503:3: ( rule__ReturnItem__Group__0 )
            // InternalOpenCypherParser.g:1503:4: rule__ReturnItem__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItem__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReturnItem"


    // $ANTLR start "entryRuleOrder"
    // InternalOpenCypherParser.g:1512:1: entryRuleOrder : ruleOrder EOF ;
    public final void entryRuleOrder() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1513:1: ( ruleOrder EOF )
            // InternalOpenCypherParser.g:1514:1: ruleOrder EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOrder();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleOrder"


    // $ANTLR start "ruleOrder"
    // InternalOpenCypherParser.g:1521:1: ruleOrder : ( ( rule__Order__Group__0 ) ) ;
    public final void ruleOrder() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1525:2: ( ( ( rule__Order__Group__0 ) ) )
            // InternalOpenCypherParser.g:1526:2: ( ( rule__Order__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1526:2: ( ( rule__Order__Group__0 ) )
            // InternalOpenCypherParser.g:1527:3: ( rule__Order__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1528:3: ( rule__Order__Group__0 )
            // InternalOpenCypherParser.g:1528:4: rule__Order__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Order__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleOrder"


    // $ANTLR start "entryRuleSkip"
    // InternalOpenCypherParser.g:1537:1: entryRuleSkip : ruleSkip EOF ;
    public final void entryRuleSkip() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1538:1: ( ruleSkip EOF )
            // InternalOpenCypherParser.g:1539:1: ruleSkip EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSkipRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSkip();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSkipRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSkip"


    // $ANTLR start "ruleSkip"
    // InternalOpenCypherParser.g:1546:1: ruleSkip : ( ( rule__Skip__Group__0 ) ) ;
    public final void ruleSkip() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1550:2: ( ( ( rule__Skip__Group__0 ) ) )
            // InternalOpenCypherParser.g:1551:2: ( ( rule__Skip__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1551:2: ( ( rule__Skip__Group__0 ) )
            // InternalOpenCypherParser.g:1552:3: ( rule__Skip__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSkipAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1553:3: ( rule__Skip__Group__0 )
            // InternalOpenCypherParser.g:1553:4: rule__Skip__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Skip__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSkipAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSkip"


    // $ANTLR start "entryRuleLimit"
    // InternalOpenCypherParser.g:1562:1: entryRuleLimit : ruleLimit EOF ;
    public final void entryRuleLimit() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1563:1: ( ruleLimit EOF )
            // InternalOpenCypherParser.g:1564:1: ruleLimit EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLimitRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLimit();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLimitRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLimit"


    // $ANTLR start "ruleLimit"
    // InternalOpenCypherParser.g:1571:1: ruleLimit : ( ( rule__Limit__Group__0 ) ) ;
    public final void ruleLimit() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1575:2: ( ( ( rule__Limit__Group__0 ) ) )
            // InternalOpenCypherParser.g:1576:2: ( ( rule__Limit__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1576:2: ( ( rule__Limit__Group__0 ) )
            // InternalOpenCypherParser.g:1577:3: ( rule__Limit__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLimitAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1578:3: ( rule__Limit__Group__0 )
            // InternalOpenCypherParser.g:1578:4: rule__Limit__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Limit__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLimitAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLimit"


    // $ANTLR start "entryRuleSortItem"
    // InternalOpenCypherParser.g:1587:1: entryRuleSortItem : ruleSortItem EOF ;
    public final void entryRuleSortItem() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1588:1: ( ruleSortItem EOF )
            // InternalOpenCypherParser.g:1589:1: ruleSortItem EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSortItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSortItem"


    // $ANTLR start "ruleSortItem"
    // InternalOpenCypherParser.g:1596:1: ruleSortItem : ( ( rule__SortItem__Group__0 ) ) ;
    public final void ruleSortItem() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1600:2: ( ( ( rule__SortItem__Group__0 ) ) )
            // InternalOpenCypherParser.g:1601:2: ( ( rule__SortItem__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1601:2: ( ( rule__SortItem__Group__0 ) )
            // InternalOpenCypherParser.g:1602:3: ( rule__SortItem__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1603:3: ( rule__SortItem__Group__0 )
            // InternalOpenCypherParser.g:1603:4: rule__SortItem__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SortItem__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSortItem"


    // $ANTLR start "entryRuleHint"
    // InternalOpenCypherParser.g:1612:1: entryRuleHint : ruleHint EOF ;
    public final void entryRuleHint() throws RecognitionException {
         
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:1616:1: ( ruleHint EOF )
            // InternalOpenCypherParser.g:1617:1: ruleHint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleHint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "entryRuleHint"


    // $ANTLR start "ruleHint"
    // InternalOpenCypherParser.g:1627:1: ruleHint : ( ( rule__Hint__Alternatives ) ) ;
    public final void ruleHint() throws RecognitionException {

        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1632:2: ( ( ( rule__Hint__Alternatives ) ) )
            // InternalOpenCypherParser.g:1633:2: ( ( rule__Hint__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1633:2: ( ( rule__Hint__Alternatives ) )
            // InternalOpenCypherParser.g:1634:3: ( rule__Hint__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1635:3: ( rule__Hint__Alternatives )
            // InternalOpenCypherParser.g:1635:4: rule__Hint__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);
            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "ruleHint"


    // $ANTLR start "entryRuleStart"
    // InternalOpenCypherParser.g:1645:1: entryRuleStart : ruleStart EOF ;
    public final void entryRuleStart() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1646:1: ( ruleStart EOF )
            // InternalOpenCypherParser.g:1647:1: ruleStart EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStart"


    // $ANTLR start "ruleStart"
    // InternalOpenCypherParser.g:1654:1: ruleStart : ( ( rule__Start__Group__0 ) ) ;
    public final void ruleStart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1658:2: ( ( ( rule__Start__Group__0 ) ) )
            // InternalOpenCypherParser.g:1659:2: ( ( rule__Start__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1659:2: ( ( rule__Start__Group__0 ) )
            // InternalOpenCypherParser.g:1660:3: ( rule__Start__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1661:3: ( rule__Start__Group__0 )
            // InternalOpenCypherParser.g:1661:4: rule__Start__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Start__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStart"


    // $ANTLR start "entryRuleStartPoint"
    // InternalOpenCypherParser.g:1670:1: entryRuleStartPoint : ruleStartPoint EOF ;
    public final void entryRuleStartPoint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1671:1: ( ruleStartPoint EOF )
            // InternalOpenCypherParser.g:1672:1: ruleStartPoint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStartPoint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStartPoint"


    // $ANTLR start "ruleStartPoint"
    // InternalOpenCypherParser.g:1679:1: ruleStartPoint : ( ( rule__StartPoint__Group__0 ) ) ;
    public final void ruleStartPoint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1683:2: ( ( ( rule__StartPoint__Group__0 ) ) )
            // InternalOpenCypherParser.g:1684:2: ( ( rule__StartPoint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1684:2: ( ( rule__StartPoint__Group__0 ) )
            // InternalOpenCypherParser.g:1685:3: ( rule__StartPoint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1686:3: ( rule__StartPoint__Group__0 )
            // InternalOpenCypherParser.g:1686:4: rule__StartPoint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__StartPoint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStartPoint"


    // $ANTLR start "entryRuleLookup"
    // InternalOpenCypherParser.g:1695:1: entryRuleLookup : ruleLookup EOF ;
    public final void entryRuleLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1696:1: ( ruleLookup EOF )
            // InternalOpenCypherParser.g:1697:1: ruleLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLookup"


    // $ANTLR start "ruleLookup"
    // InternalOpenCypherParser.g:1704:1: ruleLookup : ( ( rule__Lookup__Alternatives ) ) ;
    public final void ruleLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1708:2: ( ( ( rule__Lookup__Alternatives ) ) )
            // InternalOpenCypherParser.g:1709:2: ( ( rule__Lookup__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1709:2: ( ( rule__Lookup__Alternatives ) )
            // InternalOpenCypherParser.g:1710:3: ( rule__Lookup__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLookupAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1711:3: ( rule__Lookup__Alternatives )
            // InternalOpenCypherParser.g:1711:4: rule__Lookup__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Lookup__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLookupAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLookup"


    // $ANTLR start "entryRuleNodeLookup"
    // InternalOpenCypherParser.g:1720:1: entryRuleNodeLookup : ruleNodeLookup EOF ;
    public final void entryRuleNodeLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1721:1: ( ruleNodeLookup EOF )
            // InternalOpenCypherParser.g:1722:1: ruleNodeLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNodeLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNodeLookup"


    // $ANTLR start "ruleNodeLookup"
    // InternalOpenCypherParser.g:1729:1: ruleNodeLookup : ( ( rule__NodeLookup__Group__0 ) ) ;
    public final void ruleNodeLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1733:2: ( ( ( rule__NodeLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:1734:2: ( ( rule__NodeLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1734:2: ( ( rule__NodeLookup__Group__0 ) )
            // InternalOpenCypherParser.g:1735:3: ( rule__NodeLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1736:3: ( rule__NodeLookup__Group__0 )
            // InternalOpenCypherParser.g:1736:4: rule__NodeLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__NodeLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNodeLookup"


    // $ANTLR start "entryRuleRelationshipLookup"
    // InternalOpenCypherParser.g:1745:1: entryRuleRelationshipLookup : ruleRelationshipLookup EOF ;
    public final void entryRuleRelationshipLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1746:1: ( ruleRelationshipLookup EOF )
            // InternalOpenCypherParser.g:1747:1: ruleRelationshipLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipLookup"


    // $ANTLR start "ruleRelationshipLookup"
    // InternalOpenCypherParser.g:1754:1: ruleRelationshipLookup : ( ( rule__RelationshipLookup__Group__0 ) ) ;
    public final void ruleRelationshipLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1758:2: ( ( ( rule__RelationshipLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:1759:2: ( ( rule__RelationshipLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1759:2: ( ( rule__RelationshipLookup__Group__0 ) )
            // InternalOpenCypherParser.g:1760:3: ( rule__RelationshipLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1761:3: ( rule__RelationshipLookup__Group__0 )
            // InternalOpenCypherParser.g:1761:4: rule__RelationshipLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipLookup"


    // $ANTLR start "entryRuleIdentifiedIndexLookup"
    // InternalOpenCypherParser.g:1770:1: entryRuleIdentifiedIndexLookup : ruleIdentifiedIndexLookup EOF ;
    public final void entryRuleIdentifiedIndexLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1771:1: ( ruleIdentifiedIndexLookup EOF )
            // InternalOpenCypherParser.g:1772:1: ruleIdentifiedIndexLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIdentifiedIndexLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIdentifiedIndexLookup"


    // $ANTLR start "ruleIdentifiedIndexLookup"
    // InternalOpenCypherParser.g:1779:1: ruleIdentifiedIndexLookup : ( ( rule__IdentifiedIndexLookup__Group__0 ) ) ;
    public final void ruleIdentifiedIndexLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1783:2: ( ( ( rule__IdentifiedIndexLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:1784:2: ( ( rule__IdentifiedIndexLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1784:2: ( ( rule__IdentifiedIndexLookup__Group__0 ) )
            // InternalOpenCypherParser.g:1785:3: ( rule__IdentifiedIndexLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1786:3: ( rule__IdentifiedIndexLookup__Group__0 )
            // InternalOpenCypherParser.g:1786:4: rule__IdentifiedIndexLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIdentifiedIndexLookup"


    // $ANTLR start "entryRuleIndexQuery"
    // InternalOpenCypherParser.g:1795:1: entryRuleIndexQuery : ruleIndexQuery EOF ;
    public final void entryRuleIndexQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1796:1: ( ruleIndexQuery EOF )
            // InternalOpenCypherParser.g:1797:1: ruleIndexQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIndexQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIndexQuery"


    // $ANTLR start "ruleIndexQuery"
    // InternalOpenCypherParser.g:1804:1: ruleIndexQuery : ( ( rule__IndexQuery__Group__0 ) ) ;
    public final void ruleIndexQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1808:2: ( ( ( rule__IndexQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:1809:2: ( ( rule__IndexQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1809:2: ( ( rule__IndexQuery__Group__0 ) )
            // InternalOpenCypherParser.g:1810:3: ( rule__IndexQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1811:3: ( rule__IndexQuery__Group__0 )
            // InternalOpenCypherParser.g:1811:4: rule__IndexQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIndexQuery"


    // $ANTLR start "entryRuleIdLookup"
    // InternalOpenCypherParser.g:1820:1: entryRuleIdLookup : ruleIdLookup EOF ;
    public final void entryRuleIdLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1821:1: ( ruleIdLookup EOF )
            // InternalOpenCypherParser.g:1822:1: ruleIdLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIdLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIdLookup"


    // $ANTLR start "ruleIdLookup"
    // InternalOpenCypherParser.g:1829:1: ruleIdLookup : ( ( rule__IdLookup__Group__0 ) ) ;
    public final void ruleIdLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1833:2: ( ( ( rule__IdLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:1834:2: ( ( rule__IdLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1834:2: ( ( rule__IdLookup__Group__0 ) )
            // InternalOpenCypherParser.g:1835:3: ( rule__IdLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1836:3: ( rule__IdLookup__Group__0 )
            // InternalOpenCypherParser.g:1836:4: rule__IdLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IdLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIdLookup"


    // $ANTLR start "entryRuleLiteralIds"
    // InternalOpenCypherParser.g:1845:1: entryRuleLiteralIds : ruleLiteralIds EOF ;
    public final void entryRuleLiteralIds() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1846:1: ( ruleLiteralIds EOF )
            // InternalOpenCypherParser.g:1847:1: ruleLiteralIds EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLiteralIds();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLiteralIds"


    // $ANTLR start "ruleLiteralIds"
    // InternalOpenCypherParser.g:1854:1: ruleLiteralIds : ( ( rule__LiteralIds__Group__0 ) ) ;
    public final void ruleLiteralIds() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1858:2: ( ( ( rule__LiteralIds__Group__0 ) ) )
            // InternalOpenCypherParser.g:1859:2: ( ( rule__LiteralIds__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1859:2: ( ( rule__LiteralIds__Group__0 ) )
            // InternalOpenCypherParser.g:1860:3: ( rule__LiteralIds__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1861:3: ( rule__LiteralIds__Group__0 )
            // InternalOpenCypherParser.g:1861:4: rule__LiteralIds__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LiteralIds__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLiteralIds"


    // $ANTLR start "entryRuleWhere"
    // InternalOpenCypherParser.g:1870:1: entryRuleWhere : ruleWhere EOF ;
    public final void entryRuleWhere() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1871:1: ( ruleWhere EOF )
            // InternalOpenCypherParser.g:1872:1: ruleWhere EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWhereRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWhereRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleWhere"


    // $ANTLR start "ruleWhere"
    // InternalOpenCypherParser.g:1879:1: ruleWhere : ( ( rule__Where__Group__0 ) ) ;
    public final void ruleWhere() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1883:2: ( ( ( rule__Where__Group__0 ) ) )
            // InternalOpenCypherParser.g:1884:2: ( ( rule__Where__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1884:2: ( ( rule__Where__Group__0 ) )
            // InternalOpenCypherParser.g:1885:3: ( rule__Where__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWhereAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1886:3: ( rule__Where__Group__0 )
            // InternalOpenCypherParser.g:1886:4: rule__Where__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Where__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWhereAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleWhere"


    // $ANTLR start "entryRulePattern"
    // InternalOpenCypherParser.g:1895:1: entryRulePattern : rulePattern EOF ;
    public final void entryRulePattern() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1896:1: ( rulePattern EOF )
            // InternalOpenCypherParser.g:1897:1: rulePattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePattern"


    // $ANTLR start "rulePattern"
    // InternalOpenCypherParser.g:1904:1: rulePattern : ( ( rule__Pattern__Group__0 ) ) ;
    public final void rulePattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1908:2: ( ( ( rule__Pattern__Group__0 ) ) )
            // InternalOpenCypherParser.g:1909:2: ( ( rule__Pattern__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1909:2: ( ( rule__Pattern__Group__0 ) )
            // InternalOpenCypherParser.g:1910:3: ( rule__Pattern__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1911:3: ( rule__Pattern__Group__0 )
            // InternalOpenCypherParser.g:1911:4: rule__Pattern__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePattern"


    // $ANTLR start "entryRulePatternPart"
    // InternalOpenCypherParser.g:1920:1: entryRulePatternPart : rulePatternPart EOF ;
    public final void entryRulePatternPart() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1921:1: ( rulePatternPart EOF )
            // InternalOpenCypherParser.g:1922:1: rulePatternPart EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePatternPart"


    // $ANTLR start "rulePatternPart"
    // InternalOpenCypherParser.g:1929:1: rulePatternPart : ( ( rule__PatternPart__Alternatives ) ) ;
    public final void rulePatternPart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1933:2: ( ( ( rule__PatternPart__Alternatives ) ) )
            // InternalOpenCypherParser.g:1934:2: ( ( rule__PatternPart__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1934:2: ( ( rule__PatternPart__Alternatives ) )
            // InternalOpenCypherParser.g:1935:3: ( rule__PatternPart__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1936:3: ( rule__PatternPart__Alternatives )
            // InternalOpenCypherParser.g:1936:4: rule__PatternPart__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__PatternPart__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePatternPart"


    // $ANTLR start "entryRuleAnonymousPatternPart"
    // InternalOpenCypherParser.g:1945:1: entryRuleAnonymousPatternPart : ruleAnonymousPatternPart EOF ;
    public final void entryRuleAnonymousPatternPart() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1946:1: ( ruleAnonymousPatternPart EOF )
            // InternalOpenCypherParser.g:1947:1: ruleAnonymousPatternPart EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAnonymousPatternPartRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleAnonymousPatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAnonymousPatternPartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleAnonymousPatternPart"


    // $ANTLR start "ruleAnonymousPatternPart"
    // InternalOpenCypherParser.g:1954:1: ruleAnonymousPatternPart : ( ( rule__AnonymousPatternPart__Alternatives ) ) ;
    public final void ruleAnonymousPatternPart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1958:2: ( ( ( rule__AnonymousPatternPart__Alternatives ) ) )
            // InternalOpenCypherParser.g:1959:2: ( ( rule__AnonymousPatternPart__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1959:2: ( ( rule__AnonymousPatternPart__Alternatives ) )
            // InternalOpenCypherParser.g:1960:3: ( rule__AnonymousPatternPart__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAnonymousPatternPartAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1961:3: ( rule__AnonymousPatternPart__Alternatives )
            // InternalOpenCypherParser.g:1961:4: rule__AnonymousPatternPart__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__AnonymousPatternPart__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAnonymousPatternPartAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAnonymousPatternPart"


    // $ANTLR start "entryRuleShortestPathPattern"
    // InternalOpenCypherParser.g:1970:1: entryRuleShortestPathPattern : ruleShortestPathPattern EOF ;
    public final void entryRuleShortestPathPattern() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1971:1: ( ruleShortestPathPattern EOF )
            // InternalOpenCypherParser.g:1972:1: ruleShortestPathPattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleShortestPathPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleShortestPathPattern"


    // $ANTLR start "ruleShortestPathPattern"
    // InternalOpenCypherParser.g:1979:1: ruleShortestPathPattern : ( ( rule__ShortestPathPattern__Alternatives ) ) ;
    public final void ruleShortestPathPattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1983:2: ( ( ( rule__ShortestPathPattern__Alternatives ) ) )
            // InternalOpenCypherParser.g:1984:2: ( ( rule__ShortestPathPattern__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1984:2: ( ( rule__ShortestPathPattern__Alternatives ) )
            // InternalOpenCypherParser.g:1985:3: ( rule__ShortestPathPattern__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1986:3: ( rule__ShortestPathPattern__Alternatives )
            // InternalOpenCypherParser.g:1986:4: rule__ShortestPathPattern__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleShortestPathPattern"


    // $ANTLR start "entryRulePatternElement"
    // InternalOpenCypherParser.g:1995:1: entryRulePatternElement : rulePatternElement EOF ;
    public final void entryRulePatternElement() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1996:1: ( rulePatternElement EOF )
            // InternalOpenCypherParser.g:1997:1: rulePatternElement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePatternElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePatternElement"


    // $ANTLR start "rulePatternElement"
    // InternalOpenCypherParser.g:2004:1: rulePatternElement : ( ( rule__PatternElement__Alternatives ) ) ;
    public final void rulePatternElement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2008:2: ( ( ( rule__PatternElement__Alternatives ) ) )
            // InternalOpenCypherParser.g:2009:2: ( ( rule__PatternElement__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2009:2: ( ( rule__PatternElement__Alternatives ) )
            // InternalOpenCypherParser.g:2010:3: ( rule__PatternElement__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2011:3: ( rule__PatternElement__Alternatives )
            // InternalOpenCypherParser.g:2011:4: rule__PatternElement__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__PatternElement__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePatternElement"


    // $ANTLR start "entryRuleNodePattern"
    // InternalOpenCypherParser.g:2020:1: entryRuleNodePattern : ruleNodePattern EOF ;
    public final void entryRuleNodePattern() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2021:1: ( ruleNodePattern EOF )
            // InternalOpenCypherParser.g:2022:1: ruleNodePattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNodePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNodePattern"


    // $ANTLR start "ruleNodePattern"
    // InternalOpenCypherParser.g:2029:1: ruleNodePattern : ( ( rule__NodePattern__Group__0 ) ) ;
    public final void ruleNodePattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2033:2: ( ( ( rule__NodePattern__Group__0 ) ) )
            // InternalOpenCypherParser.g:2034:2: ( ( rule__NodePattern__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2034:2: ( ( rule__NodePattern__Group__0 ) )
            // InternalOpenCypherParser.g:2035:3: ( rule__NodePattern__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2036:3: ( rule__NodePattern__Group__0 )
            // InternalOpenCypherParser.g:2036:4: rule__NodePattern__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNodePattern"


    // $ANTLR start "entryRulePatternElementChain"
    // InternalOpenCypherParser.g:2045:1: entryRulePatternElementChain : rulePatternElementChain EOF ;
    public final void entryRulePatternElementChain() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2046:1: ( rulePatternElementChain EOF )
            // InternalOpenCypherParser.g:2047:1: rulePatternElementChain EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePatternElementChain();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePatternElementChain"


    // $ANTLR start "rulePatternElementChain"
    // InternalOpenCypherParser.g:2054:1: rulePatternElementChain : ( ( rule__PatternElementChain__Group__0 ) ) ;
    public final void rulePatternElementChain() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2058:2: ( ( ( rule__PatternElementChain__Group__0 ) ) )
            // InternalOpenCypherParser.g:2059:2: ( ( rule__PatternElementChain__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2059:2: ( ( rule__PatternElementChain__Group__0 ) )
            // InternalOpenCypherParser.g:2060:3: ( rule__PatternElementChain__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2061:3: ( rule__PatternElementChain__Group__0 )
            // InternalOpenCypherParser.g:2061:4: rule__PatternElementChain__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PatternElementChain__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePatternElementChain"


    // $ANTLR start "entryRuleRelationshipPattern"
    // InternalOpenCypherParser.g:2070:1: entryRuleRelationshipPattern : ruleRelationshipPattern EOF ;
    public final void entryRuleRelationshipPattern() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2071:1: ( ruleRelationshipPattern EOF )
            // InternalOpenCypherParser.g:2072:1: ruleRelationshipPattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipPattern"


    // $ANTLR start "ruleRelationshipPattern"
    // InternalOpenCypherParser.g:2079:1: ruleRelationshipPattern : ( ( rule__RelationshipPattern__Group__0 ) ) ;
    public final void ruleRelationshipPattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2083:2: ( ( ( rule__RelationshipPattern__Group__0 ) ) )
            // InternalOpenCypherParser.g:2084:2: ( ( rule__RelationshipPattern__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2084:2: ( ( rule__RelationshipPattern__Group__0 ) )
            // InternalOpenCypherParser.g:2085:3: ( rule__RelationshipPattern__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2086:3: ( rule__RelationshipPattern__Group__0 )
            // InternalOpenCypherParser.g:2086:4: rule__RelationshipPattern__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipPattern"


    // $ANTLR start "entryRuleRelationshipDetail"
    // InternalOpenCypherParser.g:2095:1: entryRuleRelationshipDetail : ruleRelationshipDetail EOF ;
    public final void entryRuleRelationshipDetail() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2096:1: ( ruleRelationshipDetail EOF )
            // InternalOpenCypherParser.g:2097:1: ruleRelationshipDetail EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipDetail();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipDetail"


    // $ANTLR start "ruleRelationshipDetail"
    // InternalOpenCypherParser.g:2104:1: ruleRelationshipDetail : ( ( rule__RelationshipDetail__Group__0 ) ) ;
    public final void ruleRelationshipDetail() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2108:2: ( ( ( rule__RelationshipDetail__Group__0 ) ) )
            // InternalOpenCypherParser.g:2109:2: ( ( rule__RelationshipDetail__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2109:2: ( ( rule__RelationshipDetail__Group__0 ) )
            // InternalOpenCypherParser.g:2110:3: ( rule__RelationshipDetail__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2111:3: ( rule__RelationshipDetail__Group__0 )
            // InternalOpenCypherParser.g:2111:4: rule__RelationshipDetail__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipDetail"


    // $ANTLR start "entryRuleProperties"
    // InternalOpenCypherParser.g:2120:1: entryRuleProperties : ruleProperties EOF ;
    public final void entryRuleProperties() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2121:1: ( ruleProperties EOF )
            // InternalOpenCypherParser.g:2122:1: ruleProperties EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertiesRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleProperties();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertiesRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleProperties"


    // $ANTLR start "ruleProperties"
    // InternalOpenCypherParser.g:2129:1: ruleProperties : ( ( rule__Properties__Alternatives ) ) ;
    public final void ruleProperties() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2133:2: ( ( ( rule__Properties__Alternatives ) ) )
            // InternalOpenCypherParser.g:2134:2: ( ( rule__Properties__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2134:2: ( ( rule__Properties__Alternatives ) )
            // InternalOpenCypherParser.g:2135:3: ( rule__Properties__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertiesAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2136:3: ( rule__Properties__Alternatives )
            // InternalOpenCypherParser.g:2136:4: rule__Properties__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Properties__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertiesAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleProperties"


    // $ANTLR start "entryRuleRelType"
    // InternalOpenCypherParser.g:2145:1: entryRuleRelType : ruleRelType EOF ;
    public final void entryRuleRelType() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2146:1: ( ruleRelType EOF )
            // InternalOpenCypherParser.g:2147:1: ruleRelType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelType"


    // $ANTLR start "ruleRelType"
    // InternalOpenCypherParser.g:2154:1: ruleRelType : ( ( rule__RelType__Group__0 ) ) ;
    public final void ruleRelType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2158:2: ( ( ( rule__RelType__Group__0 ) ) )
            // InternalOpenCypherParser.g:2159:2: ( ( rule__RelType__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2159:2: ( ( rule__RelType__Group__0 ) )
            // InternalOpenCypherParser.g:2160:3: ( rule__RelType__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2161:3: ( rule__RelType__Group__0 )
            // InternalOpenCypherParser.g:2161:4: rule__RelType__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelType__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelType"


    // $ANTLR start "ruleRelationshipTypes"
    // InternalOpenCypherParser.g:2171:1: ruleRelationshipTypes : ( ( rule__RelationshipTypes__Group__0 ) ) ;
    public final void ruleRelationshipTypes() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2175:2: ( ( ( rule__RelationshipTypes__Group__0 ) ) )
            // InternalOpenCypherParser.g:2176:2: ( ( rule__RelationshipTypes__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2176:2: ( ( rule__RelationshipTypes__Group__0 ) )
            // InternalOpenCypherParser.g:2177:3: ( rule__RelationshipTypes__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2178:3: ( rule__RelationshipTypes__Group__0 )
            // InternalOpenCypherParser.g:2178:4: rule__RelationshipTypes__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipTypes"


    // $ANTLR start "ruleNodeLabels"
    // InternalOpenCypherParser.g:2188:1: ruleNodeLabels : ( ( ( rule__NodeLabels__NodeLabelsAssignment ) ) ( ( rule__NodeLabels__NodeLabelsAssignment )* ) ) ;
    public final void ruleNodeLabels() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2192:2: ( ( ( ( rule__NodeLabels__NodeLabelsAssignment ) ) ( ( rule__NodeLabels__NodeLabelsAssignment )* ) ) )
            // InternalOpenCypherParser.g:2193:2: ( ( ( rule__NodeLabels__NodeLabelsAssignment ) ) ( ( rule__NodeLabels__NodeLabelsAssignment )* ) )
            {
            // InternalOpenCypherParser.g:2193:2: ( ( ( rule__NodeLabels__NodeLabelsAssignment ) ) ( ( rule__NodeLabels__NodeLabelsAssignment )* ) )
            // InternalOpenCypherParser.g:2194:3: ( ( rule__NodeLabels__NodeLabelsAssignment ) ) ( ( rule__NodeLabels__NodeLabelsAssignment )* )
            {
            // InternalOpenCypherParser.g:2194:3: ( ( rule__NodeLabels__NodeLabelsAssignment ) )
            // InternalOpenCypherParser.g:2195:4: ( rule__NodeLabels__NodeLabelsAssignment )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment()); 
            }
            // InternalOpenCypherParser.g:2196:4: ( rule__NodeLabels__NodeLabelsAssignment )
            // InternalOpenCypherParser.g:2196:5: rule__NodeLabels__NodeLabelsAssignment
            {
            pushFollow(FOLLOW_3);
            rule__NodeLabels__NodeLabelsAssignment();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment()); 
            }

            }

            // InternalOpenCypherParser.g:2199:3: ( ( rule__NodeLabels__NodeLabelsAssignment )* )
            // InternalOpenCypherParser.g:2200:4: ( rule__NodeLabels__NodeLabelsAssignment )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment()); 
            }
            // InternalOpenCypherParser.g:2201:4: ( rule__NodeLabels__NodeLabelsAssignment )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==Colon) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2201:5: rule__NodeLabels__NodeLabelsAssignment
            	    {
            	    pushFollow(FOLLOW_3);
            	    rule__NodeLabels__NodeLabelsAssignment();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNodeLabels"


    // $ANTLR start "entryRuleNodeLabel"
    // InternalOpenCypherParser.g:2211:1: entryRuleNodeLabel : ruleNodeLabel EOF ;
    public final void entryRuleNodeLabel() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2212:1: ( ruleNodeLabel EOF )
            // InternalOpenCypherParser.g:2213:1: ruleNodeLabel EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNodeLabel"


    // $ANTLR start "ruleNodeLabel"
    // InternalOpenCypherParser.g:2220:1: ruleNodeLabel : ( ( rule__NodeLabel__Group__0 ) ) ;
    public final void ruleNodeLabel() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2224:2: ( ( ( rule__NodeLabel__Group__0 ) ) )
            // InternalOpenCypherParser.g:2225:2: ( ( rule__NodeLabel__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2225:2: ( ( rule__NodeLabel__Group__0 ) )
            // InternalOpenCypherParser.g:2226:3: ( rule__NodeLabel__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2227:3: ( rule__NodeLabel__Group__0 )
            // InternalOpenCypherParser.g:2227:4: rule__NodeLabel__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__NodeLabel__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNodeLabel"


    // $ANTLR start "entryRuleRangeLiteral"
    // InternalOpenCypherParser.g:2236:1: entryRuleRangeLiteral : ruleRangeLiteral EOF ;
    public final void entryRuleRangeLiteral() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2237:1: ( ruleRangeLiteral EOF )
            // InternalOpenCypherParser.g:2238:1: ruleRangeLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRangeLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRangeLiteral"


    // $ANTLR start "ruleRangeLiteral"
    // InternalOpenCypherParser.g:2245:1: ruleRangeLiteral : ( ( rule__RangeLiteral__Group__0 ) ) ;
    public final void ruleRangeLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2249:2: ( ( ( rule__RangeLiteral__Group__0 ) ) )
            // InternalOpenCypherParser.g:2250:2: ( ( rule__RangeLiteral__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2250:2: ( ( rule__RangeLiteral__Group__0 ) )
            // InternalOpenCypherParser.g:2251:3: ( rule__RangeLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2252:3: ( rule__RangeLiteral__Group__0 )
            // InternalOpenCypherParser.g:2252:4: rule__RangeLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRangeLiteral"


    // $ANTLR start "entryRuleLabelName"
    // InternalOpenCypherParser.g:2261:1: entryRuleLabelName : ruleLabelName EOF ;
    public final void entryRuleLabelName() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2262:1: ( ruleLabelName EOF )
            // InternalOpenCypherParser.g:2263:1: ruleLabelName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLabelNameRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLabelName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLabelNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLabelName"


    // $ANTLR start "ruleLabelName"
    // InternalOpenCypherParser.g:2270:1: ruleLabelName : ( ruleSYMBOLIC_NAME_X ) ;
    public final void ruleLabelName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2274:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:2275:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:2275:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:2276:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLabelNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLabelNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLabelName"


    // $ANTLR start "entryRuleRelTypeName"
    // InternalOpenCypherParser.g:2286:1: entryRuleRelTypeName : ruleRelTypeName EOF ;
    public final void entryRuleRelTypeName() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2287:1: ( ruleRelTypeName EOF )
            // InternalOpenCypherParser.g:2288:1: ruleRelTypeName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeNameRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelTypeName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelTypeName"


    // $ANTLR start "ruleRelTypeName"
    // InternalOpenCypherParser.g:2295:1: ruleRelTypeName : ( ruleSYMBOLIC_NAME_X ) ;
    public final void ruleRelTypeName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2299:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:2300:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:2300:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:2301:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelTypeName"


    // $ANTLR start "entryRuleExpression"
    // InternalOpenCypherParser.g:2311:1: entryRuleExpression : ruleExpression EOF ;
    public final void entryRuleExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2312:1: ( ruleExpression EOF )
            // InternalOpenCypherParser.g:2313:1: ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalOpenCypherParser.g:2320:1: ruleExpression : ( ruleOrExpression ) ;
    public final void ruleExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2324:2: ( ( ruleOrExpression ) )
            // InternalOpenCypherParser.g:2325:2: ( ruleOrExpression )
            {
            // InternalOpenCypherParser.g:2325:2: ( ruleOrExpression )
            // InternalOpenCypherParser.g:2326:3: ruleOrExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleOrExpression"
    // InternalOpenCypherParser.g:2336:1: entryRuleOrExpression : ruleOrExpression EOF ;
    public final void entryRuleOrExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2337:1: ( ruleOrExpression EOF )
            // InternalOpenCypherParser.g:2338:1: ruleOrExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleOrExpression"


    // $ANTLR start "ruleOrExpression"
    // InternalOpenCypherParser.g:2345:1: ruleOrExpression : ( ( rule__OrExpression__Group__0 ) ) ;
    public final void ruleOrExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2349:2: ( ( ( rule__OrExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2350:2: ( ( rule__OrExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2350:2: ( ( rule__OrExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2351:3: ( rule__OrExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2352:3: ( rule__OrExpression__Group__0 )
            // InternalOpenCypherParser.g:2352:4: rule__OrExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__OrExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleOrExpression"


    // $ANTLR start "entryRuleXorExpression"
    // InternalOpenCypherParser.g:2361:1: entryRuleXorExpression : ruleXorExpression EOF ;
    public final void entryRuleXorExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2362:1: ( ruleXorExpression EOF )
            // InternalOpenCypherParser.g:2363:1: ruleXorExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXorExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleXorExpression"


    // $ANTLR start "ruleXorExpression"
    // InternalOpenCypherParser.g:2370:1: ruleXorExpression : ( ( rule__XorExpression__Group__0 ) ) ;
    public final void ruleXorExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2374:2: ( ( ( rule__XorExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2375:2: ( ( rule__XorExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2375:2: ( ( rule__XorExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2376:3: ( rule__XorExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2377:3: ( rule__XorExpression__Group__0 )
            // InternalOpenCypherParser.g:2377:4: rule__XorExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__XorExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleXorExpression"


    // $ANTLR start "entryRuleAndExpression"
    // InternalOpenCypherParser.g:2386:1: entryRuleAndExpression : ruleAndExpression EOF ;
    public final void entryRuleAndExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2387:1: ( ruleAndExpression EOF )
            // InternalOpenCypherParser.g:2388:1: ruleAndExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleAndExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleAndExpression"


    // $ANTLR start "ruleAndExpression"
    // InternalOpenCypherParser.g:2395:1: ruleAndExpression : ( ( rule__AndExpression__Group__0 ) ) ;
    public final void ruleAndExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2399:2: ( ( ( rule__AndExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2400:2: ( ( rule__AndExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2400:2: ( ( rule__AndExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2401:3: ( rule__AndExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2402:3: ( rule__AndExpression__Group__0 )
            // InternalOpenCypherParser.g:2402:4: rule__AndExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__AndExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAndExpression"


    // $ANTLR start "entryRuleNotExpression"
    // InternalOpenCypherParser.g:2411:1: entryRuleNotExpression : ruleNotExpression EOF ;
    public final void entryRuleNotExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2412:1: ( ruleNotExpression EOF )
            // InternalOpenCypherParser.g:2413:1: ruleNotExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNotExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNotExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNotExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNotExpression"


    // $ANTLR start "ruleNotExpression"
    // InternalOpenCypherParser.g:2420:1: ruleNotExpression : ( ( rule__NotExpression__Alternatives ) ) ;
    public final void ruleNotExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2424:2: ( ( ( rule__NotExpression__Alternatives ) ) )
            // InternalOpenCypherParser.g:2425:2: ( ( rule__NotExpression__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2425:2: ( ( rule__NotExpression__Alternatives ) )
            // InternalOpenCypherParser.g:2426:3: ( rule__NotExpression__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNotExpressionAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2427:3: ( rule__NotExpression__Alternatives )
            // InternalOpenCypherParser.g:2427:4: rule__NotExpression__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__NotExpression__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNotExpressionAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNotExpression"


    // $ANTLR start "entryRuleComparisonExpression"
    // InternalOpenCypherParser.g:2436:1: entryRuleComparisonExpression : ruleComparisonExpression EOF ;
    public final void entryRuleComparisonExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2437:1: ( ruleComparisonExpression EOF )
            // InternalOpenCypherParser.g:2438:1: ruleComparisonExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getComparisonExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleComparisonExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getComparisonExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleComparisonExpression"


    // $ANTLR start "ruleComparisonExpression"
    // InternalOpenCypherParser.g:2445:1: ruleComparisonExpression : ( ( rule__ComparisonExpression__Group__0 ) ) ;
    public final void ruleComparisonExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2449:2: ( ( ( rule__ComparisonExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2450:2: ( ( rule__ComparisonExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2450:2: ( ( rule__ComparisonExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2451:3: ( rule__ComparisonExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getComparisonExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2452:3: ( rule__ComparisonExpression__Group__0 )
            // InternalOpenCypherParser.g:2452:4: rule__ComparisonExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ComparisonExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getComparisonExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleComparisonExpression"


    // $ANTLR start "entryRuleAddOrSubtractExpression"
    // InternalOpenCypherParser.g:2461:1: entryRuleAddOrSubtractExpression : ruleAddOrSubtractExpression EOF ;
    public final void entryRuleAddOrSubtractExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2462:1: ( ruleAddOrSubtractExpression EOF )
            // InternalOpenCypherParser.g:2463:1: ruleAddOrSubtractExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAddOrSubtractExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAddOrSubtractExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleAddOrSubtractExpression"


    // $ANTLR start "ruleAddOrSubtractExpression"
    // InternalOpenCypherParser.g:2470:1: ruleAddOrSubtractExpression : ( ( rule__AddOrSubtractExpression__Group__0 ) ) ;
    public final void ruleAddOrSubtractExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2474:2: ( ( ( rule__AddOrSubtractExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2475:2: ( ( rule__AddOrSubtractExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2475:2: ( ( rule__AddOrSubtractExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2476:3: ( rule__AddOrSubtractExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAddOrSubtractExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2477:3: ( rule__AddOrSubtractExpression__Group__0 )
            // InternalOpenCypherParser.g:2477:4: rule__AddOrSubtractExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__AddOrSubtractExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAddOrSubtractExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAddOrSubtractExpression"


    // $ANTLR start "entryRuleMultiplyDivideModuloExpression"
    // InternalOpenCypherParser.g:2486:1: entryRuleMultiplyDivideModuloExpression : ruleMultiplyDivideModuloExpression EOF ;
    public final void entryRuleMultiplyDivideModuloExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2487:1: ( ruleMultiplyDivideModuloExpression EOF )
            // InternalOpenCypherParser.g:2488:1: ruleMultiplyDivideModuloExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiplyDivideModuloExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMultiplyDivideModuloExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiplyDivideModuloExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMultiplyDivideModuloExpression"


    // $ANTLR start "ruleMultiplyDivideModuloExpression"
    // InternalOpenCypherParser.g:2495:1: ruleMultiplyDivideModuloExpression : ( ( rule__MultiplyDivideModuloExpression__Group__0 ) ) ;
    public final void ruleMultiplyDivideModuloExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2499:2: ( ( ( rule__MultiplyDivideModuloExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2500:2: ( ( rule__MultiplyDivideModuloExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2500:2: ( ( rule__MultiplyDivideModuloExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2501:3: ( rule__MultiplyDivideModuloExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2502:3: ( rule__MultiplyDivideModuloExpression__Group__0 )
            // InternalOpenCypherParser.g:2502:4: rule__MultiplyDivideModuloExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDivideModuloExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMultiplyDivideModuloExpression"


    // $ANTLR start "entryRulePowerOfExpression"
    // InternalOpenCypherParser.g:2511:1: entryRulePowerOfExpression : rulePowerOfExpression EOF ;
    public final void entryRulePowerOfExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2512:1: ( rulePowerOfExpression EOF )
            // InternalOpenCypherParser.g:2513:1: rulePowerOfExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOfExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePowerOfExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOfExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePowerOfExpression"


    // $ANTLR start "rulePowerOfExpression"
    // InternalOpenCypherParser.g:2520:1: rulePowerOfExpression : ( ( rule__PowerOfExpression__Group__0 ) ) ;
    public final void rulePowerOfExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2524:2: ( ( ( rule__PowerOfExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2525:2: ( ( rule__PowerOfExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2525:2: ( ( rule__PowerOfExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2526:3: ( rule__PowerOfExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOfExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2527:3: ( rule__PowerOfExpression__Group__0 )
            // InternalOpenCypherParser.g:2527:4: rule__PowerOfExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PowerOfExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOfExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePowerOfExpression"


    // $ANTLR start "entryRuleUnaryAddOrSubtractExpression"
    // InternalOpenCypherParser.g:2536:1: entryRuleUnaryAddOrSubtractExpression : ruleUnaryAddOrSubtractExpression EOF ;
    public final void entryRuleUnaryAddOrSubtractExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2537:1: ( ruleUnaryAddOrSubtractExpression EOF )
            // InternalOpenCypherParser.g:2538:1: ruleUnaryAddOrSubtractExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnaryAddOrSubtractExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleUnaryAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnaryAddOrSubtractExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleUnaryAddOrSubtractExpression"


    // $ANTLR start "ruleUnaryAddOrSubtractExpression"
    // InternalOpenCypherParser.g:2545:1: ruleUnaryAddOrSubtractExpression : ( ( rule__UnaryAddOrSubtractExpression__Alternatives ) ) ;
    public final void ruleUnaryAddOrSubtractExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2549:2: ( ( ( rule__UnaryAddOrSubtractExpression__Alternatives ) ) )
            // InternalOpenCypherParser.g:2550:2: ( ( rule__UnaryAddOrSubtractExpression__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2550:2: ( ( rule__UnaryAddOrSubtractExpression__Alternatives ) )
            // InternalOpenCypherParser.g:2551:3: ( rule__UnaryAddOrSubtractExpression__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2552:3: ( rule__UnaryAddOrSubtractExpression__Alternatives )
            // InternalOpenCypherParser.g:2552:4: rule__UnaryAddOrSubtractExpression__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__UnaryAddOrSubtractExpression__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleUnaryAddOrSubtractExpression"


    // $ANTLR start "entryRuleStringListNullOperatorExpression"
    // InternalOpenCypherParser.g:2561:1: entryRuleStringListNullOperatorExpression : ruleStringListNullOperatorExpression EOF ;
    public final void entryRuleStringListNullOperatorExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2562:1: ( ruleStringListNullOperatorExpression EOF )
            // InternalOpenCypherParser.g:2563:1: ruleStringListNullOperatorExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringListNullOperatorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStringListNullOperatorExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringListNullOperatorExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStringListNullOperatorExpression"


    // $ANTLR start "ruleStringListNullOperatorExpression"
    // InternalOpenCypherParser.g:2570:1: ruleStringListNullOperatorExpression : ( ( rule__StringListNullOperatorExpression__Group__0 ) ) ;
    public final void ruleStringListNullOperatorExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2574:2: ( ( ( rule__StringListNullOperatorExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2575:2: ( ( rule__StringListNullOperatorExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2575:2: ( ( rule__StringListNullOperatorExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2576:3: ( rule__StringListNullOperatorExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2577:3: ( rule__StringListNullOperatorExpression__Group__0 )
            // InternalOpenCypherParser.g:2577:4: rule__StringListNullOperatorExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__StringListNullOperatorExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStringListNullOperatorExpression"


    // $ANTLR start "entryRuleListOperatorExpression"
    // InternalOpenCypherParser.g:2586:1: entryRuleListOperatorExpression : ruleListOperatorExpression EOF ;
    public final void entryRuleListOperatorExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2587:1: ( ruleListOperatorExpression EOF )
            // InternalOpenCypherParser.g:2588:1: ruleListOperatorExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleListOperatorExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleListOperatorExpression"


    // $ANTLR start "ruleListOperatorExpression"
    // InternalOpenCypherParser.g:2595:1: ruleListOperatorExpression : ( ( rule__ListOperatorExpression__Alternatives ) ) ;
    public final void ruleListOperatorExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2599:2: ( ( ( rule__ListOperatorExpression__Alternatives ) ) )
            // InternalOpenCypherParser.g:2600:2: ( ( rule__ListOperatorExpression__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2600:2: ( ( rule__ListOperatorExpression__Alternatives ) )
            // InternalOpenCypherParser.g:2601:3: ( rule__ListOperatorExpression__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2602:3: ( rule__ListOperatorExpression__Alternatives )
            // InternalOpenCypherParser.g:2602:4: rule__ListOperatorExpression__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleListOperatorExpression"


    // $ANTLR start "entryRuleStringOperatorExpression"
    // InternalOpenCypherParser.g:2611:1: entryRuleStringOperatorExpression : ruleStringOperatorExpression EOF ;
    public final void entryRuleStringOperatorExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2612:1: ( ruleStringOperatorExpression EOF )
            // InternalOpenCypherParser.g:2613:1: ruleStringOperatorExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStringOperatorExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStringOperatorExpression"


    // $ANTLR start "ruleStringOperatorExpression"
    // InternalOpenCypherParser.g:2620:1: ruleStringOperatorExpression : ( ( rule__StringOperatorExpression__Group__0 ) ) ;
    public final void ruleStringOperatorExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2624:2: ( ( ( rule__StringOperatorExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2625:2: ( ( rule__StringOperatorExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2625:2: ( ( rule__StringOperatorExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2626:3: ( rule__StringOperatorExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2627:3: ( rule__StringOperatorExpression__Group__0 )
            // InternalOpenCypherParser.g:2627:4: rule__StringOperatorExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStringOperatorExpression"


    // $ANTLR start "entryRuleNullOperatorExpression"
    // InternalOpenCypherParser.g:2636:1: entryRuleNullOperatorExpression : ruleNullOperatorExpression EOF ;
    public final void entryRuleNullOperatorExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2637:1: ( ruleNullOperatorExpression EOF )
            // InternalOpenCypherParser.g:2638:1: ruleNullOperatorExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNullOperatorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNullOperatorExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNullOperatorExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNullOperatorExpression"


    // $ANTLR start "ruleNullOperatorExpression"
    // InternalOpenCypherParser.g:2645:1: ruleNullOperatorExpression : ( ( rule__NullOperatorExpression__Alternatives ) ) ;
    public final void ruleNullOperatorExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2649:2: ( ( ( rule__NullOperatorExpression__Alternatives ) ) )
            // InternalOpenCypherParser.g:2650:2: ( ( rule__NullOperatorExpression__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2650:2: ( ( rule__NullOperatorExpression__Alternatives ) )
            // InternalOpenCypherParser.g:2651:3: ( rule__NullOperatorExpression__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNullOperatorExpressionAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2652:3: ( rule__NullOperatorExpression__Alternatives )
            // InternalOpenCypherParser.g:2652:4: rule__NullOperatorExpression__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__NullOperatorExpression__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNullOperatorExpressionAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNullOperatorExpression"


    // $ANTLR start "entryRulePropertyOrLabelsExpression"
    // InternalOpenCypherParser.g:2661:1: entryRulePropertyOrLabelsExpression : rulePropertyOrLabelsExpression EOF ;
    public final void entryRulePropertyOrLabelsExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2662:1: ( rulePropertyOrLabelsExpression EOF )
            // InternalOpenCypherParser.g:2663:1: rulePropertyOrLabelsExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePropertyOrLabelsExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePropertyOrLabelsExpression"


    // $ANTLR start "rulePropertyOrLabelsExpression"
    // InternalOpenCypherParser.g:2670:1: rulePropertyOrLabelsExpression : ( ( rule__PropertyOrLabelsExpression__Group__0 ) ) ;
    public final void rulePropertyOrLabelsExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2674:2: ( ( ( rule__PropertyOrLabelsExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2675:2: ( ( rule__PropertyOrLabelsExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2675:2: ( ( rule__PropertyOrLabelsExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2676:3: ( rule__PropertyOrLabelsExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2677:3: ( rule__PropertyOrLabelsExpression__Group__0 )
            // InternalOpenCypherParser.g:2677:4: rule__PropertyOrLabelsExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PropertyOrLabelsExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePropertyOrLabelsExpression"


    // $ANTLR start "entryRuleAtom"
    // InternalOpenCypherParser.g:2686:1: entryRuleAtom : ruleAtom EOF ;
    public final void entryRuleAtom() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2687:1: ( ruleAtom EOF )
            // InternalOpenCypherParser.g:2688:1: ruleAtom EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleAtom();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleAtom"


    // $ANTLR start "ruleAtom"
    // InternalOpenCypherParser.g:2695:1: ruleAtom : ( ( rule__Atom__Alternatives ) ) ;
    public final void ruleAtom() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2699:2: ( ( ( rule__Atom__Alternatives ) ) )
            // InternalOpenCypherParser.g:2700:2: ( ( rule__Atom__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2700:2: ( ( rule__Atom__Alternatives ) )
            // InternalOpenCypherParser.g:2701:3: ( rule__Atom__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2702:3: ( rule__Atom__Alternatives )
            // InternalOpenCypherParser.g:2702:4: rule__Atom__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAtom"


    // $ANTLR start "entryRuleLiteral"
    // InternalOpenCypherParser.g:2711:1: entryRuleLiteral : ruleLiteral EOF ;
    public final void entryRuleLiteral() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2712:1: ( ruleLiteral EOF )
            // InternalOpenCypherParser.g:2713:1: ruleLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLiteral"


    // $ANTLR start "ruleLiteral"
    // InternalOpenCypherParser.g:2720:1: ruleLiteral : ( ( rule__Literal__Alternatives ) ) ;
    public final void ruleLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2724:2: ( ( ( rule__Literal__Alternatives ) ) )
            // InternalOpenCypherParser.g:2725:2: ( ( rule__Literal__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2725:2: ( ( rule__Literal__Alternatives ) )
            // InternalOpenCypherParser.g:2726:3: ( rule__Literal__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2727:3: ( rule__Literal__Alternatives )
            // InternalOpenCypherParser.g:2727:4: rule__Literal__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Literal__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLiteral"


    // $ANTLR start "entryRuleBooleanLiteral"
    // InternalOpenCypherParser.g:2736:1: entryRuleBooleanLiteral : ruleBooleanLiteral EOF ;
    public final void entryRuleBooleanLiteral() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2737:1: ( ruleBooleanLiteral EOF )
            // InternalOpenCypherParser.g:2738:1: ruleBooleanLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBooleanLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBooleanLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleBooleanLiteral"


    // $ANTLR start "ruleBooleanLiteral"
    // InternalOpenCypherParser.g:2745:1: ruleBooleanLiteral : ( ( rule__BooleanLiteral__Group__0 ) ) ;
    public final void ruleBooleanLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2749:2: ( ( ( rule__BooleanLiteral__Group__0 ) ) )
            // InternalOpenCypherParser.g:2750:2: ( ( rule__BooleanLiteral__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2750:2: ( ( rule__BooleanLiteral__Group__0 ) )
            // InternalOpenCypherParser.g:2751:3: ( rule__BooleanLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBooleanLiteralAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2752:3: ( rule__BooleanLiteral__Group__0 )
            // InternalOpenCypherParser.g:2752:4: rule__BooleanLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__BooleanLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBooleanLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleBooleanLiteral"


    // $ANTLR start "entryRuleListLiteral"
    // InternalOpenCypherParser.g:2761:1: entryRuleListLiteral : ruleListLiteral EOF ;
    public final void entryRuleListLiteral() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2762:1: ( ruleListLiteral EOF )
            // InternalOpenCypherParser.g:2763:1: ruleListLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleListLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleListLiteral"


    // $ANTLR start "ruleListLiteral"
    // InternalOpenCypherParser.g:2770:1: ruleListLiteral : ( ( rule__ListLiteral__Group__0 ) ) ;
    public final void ruleListLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2774:2: ( ( ( rule__ListLiteral__Group__0 ) ) )
            // InternalOpenCypherParser.g:2775:2: ( ( rule__ListLiteral__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2775:2: ( ( rule__ListLiteral__Group__0 ) )
            // InternalOpenCypherParser.g:2776:3: ( rule__ListLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2777:3: ( rule__ListLiteral__Group__0 )
            // InternalOpenCypherParser.g:2777:4: rule__ListLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ListLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleListLiteral"


    // $ANTLR start "entryRuleReduce"
    // InternalOpenCypherParser.g:2786:1: entryRuleReduce : ruleReduce EOF ;
    public final void entryRuleReduce() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2787:1: ( ruleReduce EOF )
            // InternalOpenCypherParser.g:2788:1: ruleReduce EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReduce();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReduce"


    // $ANTLR start "ruleReduce"
    // InternalOpenCypherParser.g:2795:1: ruleReduce : ( ( rule__Reduce__Group__0 ) ) ;
    public final void ruleReduce() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2799:2: ( ( ( rule__Reduce__Group__0 ) ) )
            // InternalOpenCypherParser.g:2800:2: ( ( rule__Reduce__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2800:2: ( ( rule__Reduce__Group__0 ) )
            // InternalOpenCypherParser.g:2801:3: ( rule__Reduce__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2802:3: ( rule__Reduce__Group__0 )
            // InternalOpenCypherParser.g:2802:4: rule__Reduce__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReduce"


    // $ANTLR start "entryRuleParenthesizedExpression"
    // InternalOpenCypherParser.g:2811:1: entryRuleParenthesizedExpression : ruleParenthesizedExpression EOF ;
    public final void entryRuleParenthesizedExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2812:1: ( ruleParenthesizedExpression EOF )
            // InternalOpenCypherParser.g:2813:1: ruleParenthesizedExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleParenthesizedExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleParenthesizedExpression"


    // $ANTLR start "ruleParenthesizedExpression"
    // InternalOpenCypherParser.g:2820:1: ruleParenthesizedExpression : ( ( rule__ParenthesizedExpression__Group__0 ) ) ;
    public final void ruleParenthesizedExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2824:2: ( ( ( rule__ParenthesizedExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2825:2: ( ( rule__ParenthesizedExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2825:2: ( ( rule__ParenthesizedExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2826:3: ( rule__ParenthesizedExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2827:3: ( rule__ParenthesizedExpression__Group__0 )
            // InternalOpenCypherParser.g:2827:4: rule__ParenthesizedExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ParenthesizedExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleParenthesizedExpression"


    // $ANTLR start "entryRuleRelationshipsPattern"
    // InternalOpenCypherParser.g:2836:1: entryRuleRelationshipsPattern : ruleRelationshipsPattern EOF ;
    public final void entryRuleRelationshipsPattern() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2837:1: ( ruleRelationshipsPattern EOF )
            // InternalOpenCypherParser.g:2838:1: ruleRelationshipsPattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipsPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipsPattern"


    // $ANTLR start "ruleRelationshipsPattern"
    // InternalOpenCypherParser.g:2845:1: ruleRelationshipsPattern : ( ( rule__RelationshipsPattern__Group__0 ) ) ;
    public final void ruleRelationshipsPattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2849:2: ( ( ( rule__RelationshipsPattern__Group__0 ) ) )
            // InternalOpenCypherParser.g:2850:2: ( ( rule__RelationshipsPattern__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2850:2: ( ( rule__RelationshipsPattern__Group__0 ) )
            // InternalOpenCypherParser.g:2851:3: ( rule__RelationshipsPattern__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2852:3: ( rule__RelationshipsPattern__Group__0 )
            // InternalOpenCypherParser.g:2852:4: rule__RelationshipsPattern__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipsPattern__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipsPattern"


    // $ANTLR start "entryRuleFilterExpression"
    // InternalOpenCypherParser.g:2861:1: entryRuleFilterExpression : ruleFilterExpression EOF ;
    public final void entryRuleFilterExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2862:1: ( ruleFilterExpression EOF )
            // InternalOpenCypherParser.g:2863:1: ruleFilterExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleFilterExpression"


    // $ANTLR start "ruleFilterExpression"
    // InternalOpenCypherParser.g:2870:1: ruleFilterExpression : ( ( rule__FilterExpression__Group__0 ) ) ;
    public final void ruleFilterExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2874:2: ( ( ( rule__FilterExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2875:2: ( ( rule__FilterExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2875:2: ( ( rule__FilterExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2876:3: ( rule__FilterExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2877:3: ( rule__FilterExpression__Group__0 )
            // InternalOpenCypherParser.g:2877:4: rule__FilterExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__FilterExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleFilterExpression"


    // $ANTLR start "entryRuleIdInColl"
    // InternalOpenCypherParser.g:2886:1: entryRuleIdInColl : ruleIdInColl EOF ;
    public final void entryRuleIdInColl() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2887:1: ( ruleIdInColl EOF )
            // InternalOpenCypherParser.g:2888:1: ruleIdInColl EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIdInColl();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIdInColl"


    // $ANTLR start "ruleIdInColl"
    // InternalOpenCypherParser.g:2895:1: ruleIdInColl : ( ( rule__IdInColl__Group__0 ) ) ;
    public final void ruleIdInColl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2899:2: ( ( ( rule__IdInColl__Group__0 ) ) )
            // InternalOpenCypherParser.g:2900:2: ( ( rule__IdInColl__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2900:2: ( ( rule__IdInColl__Group__0 ) )
            // InternalOpenCypherParser.g:2901:3: ( rule__IdInColl__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2902:3: ( rule__IdInColl__Group__0 )
            // InternalOpenCypherParser.g:2902:4: rule__IdInColl__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IdInColl__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIdInColl"


    // $ANTLR start "entryRuleFunctionInvocation"
    // InternalOpenCypherParser.g:2911:1: entryRuleFunctionInvocation : ruleFunctionInvocation EOF ;
    public final void entryRuleFunctionInvocation() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2912:1: ( ruleFunctionInvocation EOF )
            // InternalOpenCypherParser.g:2913:1: ruleFunctionInvocation EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFunctionInvocation();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleFunctionInvocation"


    // $ANTLR start "ruleFunctionInvocation"
    // InternalOpenCypherParser.g:2920:1: ruleFunctionInvocation : ( ( rule__FunctionInvocation__Group__0 ) ) ;
    public final void ruleFunctionInvocation() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2924:2: ( ( ( rule__FunctionInvocation__Group__0 ) ) )
            // InternalOpenCypherParser.g:2925:2: ( ( rule__FunctionInvocation__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2925:2: ( ( rule__FunctionInvocation__Group__0 ) )
            // InternalOpenCypherParser.g:2926:3: ( rule__FunctionInvocation__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2927:3: ( rule__FunctionInvocation__Group__0 )
            // InternalOpenCypherParser.g:2927:4: rule__FunctionInvocation__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleFunctionInvocation"


    // $ANTLR start "entryRuleFunctionName"
    // InternalOpenCypherParser.g:2936:1: entryRuleFunctionName : ruleFunctionName EOF ;
    public final void entryRuleFunctionName() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2937:1: ( ruleFunctionName EOF )
            // InternalOpenCypherParser.g:2938:1: ruleFunctionName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionNameRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFunctionName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleFunctionName"


    // $ANTLR start "ruleFunctionName"
    // InternalOpenCypherParser.g:2945:1: ruleFunctionName : ( ruleSYMBOLIC_NAME_X ) ;
    public final void ruleFunctionName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2949:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:2950:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:2950:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:2951:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleFunctionName"


    // $ANTLR start "entryRuleExplicitProcedureInvocation"
    // InternalOpenCypherParser.g:2961:1: entryRuleExplicitProcedureInvocation : ruleExplicitProcedureInvocation EOF ;
    public final void entryRuleExplicitProcedureInvocation() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2962:1: ( ruleExplicitProcedureInvocation EOF )
            // InternalOpenCypherParser.g:2963:1: ruleExplicitProcedureInvocation EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExplicitProcedureInvocation"


    // $ANTLR start "ruleExplicitProcedureInvocation"
    // InternalOpenCypherParser.g:2970:1: ruleExplicitProcedureInvocation : ( ( rule__ExplicitProcedureInvocation__Group__0 ) ) ;
    public final void ruleExplicitProcedureInvocation() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2974:2: ( ( ( rule__ExplicitProcedureInvocation__Group__0 ) ) )
            // InternalOpenCypherParser.g:2975:2: ( ( rule__ExplicitProcedureInvocation__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2975:2: ( ( rule__ExplicitProcedureInvocation__Group__0 ) )
            // InternalOpenCypherParser.g:2976:3: ( rule__ExplicitProcedureInvocation__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2977:3: ( rule__ExplicitProcedureInvocation__Group__0 )
            // InternalOpenCypherParser.g:2977:4: rule__ExplicitProcedureInvocation__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExplicitProcedureInvocation"


    // $ANTLR start "entryRuleImplicitProcedureInvocation"
    // InternalOpenCypherParser.g:2986:1: entryRuleImplicitProcedureInvocation : ruleImplicitProcedureInvocation EOF ;
    public final void entryRuleImplicitProcedureInvocation() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2987:1: ( ruleImplicitProcedureInvocation EOF )
            // InternalOpenCypherParser.g:2988:1: ruleImplicitProcedureInvocation EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImplicitProcedureInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleImplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImplicitProcedureInvocationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleImplicitProcedureInvocation"


    // $ANTLR start "ruleImplicitProcedureInvocation"
    // InternalOpenCypherParser.g:2995:1: ruleImplicitProcedureInvocation : ( ( rule__ImplicitProcedureInvocation__Group__0 ) ) ;
    public final void ruleImplicitProcedureInvocation() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2999:2: ( ( ( rule__ImplicitProcedureInvocation__Group__0 ) ) )
            // InternalOpenCypherParser.g:3000:2: ( ( rule__ImplicitProcedureInvocation__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3000:2: ( ( rule__ImplicitProcedureInvocation__Group__0 ) )
            // InternalOpenCypherParser.g:3001:3: ( rule__ImplicitProcedureInvocation__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImplicitProcedureInvocationAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3002:3: ( rule__ImplicitProcedureInvocation__Group__0 )
            // InternalOpenCypherParser.g:3002:4: rule__ImplicitProcedureInvocation__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ImplicitProcedureInvocation__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getImplicitProcedureInvocationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleImplicitProcedureInvocation"


    // $ANTLR start "entryRuleProcedureResultField"
    // InternalOpenCypherParser.g:3011:1: entryRuleProcedureResultField : ruleProcedureResultField EOF ;
    public final void entryRuleProcedureResultField() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3012:1: ( ruleProcedureResultField EOF )
            // InternalOpenCypherParser.g:3013:1: ruleProcedureResultField EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureResultFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleProcedureResultField();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureResultFieldRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleProcedureResultField"


    // $ANTLR start "ruleProcedureResultField"
    // InternalOpenCypherParser.g:3020:1: ruleProcedureResultField : ( ruleSYMBOLIC_NAME_X ) ;
    public final void ruleProcedureResultField() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3024:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:3025:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:3025:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:3026:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureResultFieldAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureResultFieldAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleProcedureResultField"


    // $ANTLR start "entryRuleProcedureName"
    // InternalOpenCypherParser.g:3036:1: entryRuleProcedureName : ruleProcedureName EOF ;
    public final void entryRuleProcedureName() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3037:1: ( ruleProcedureName EOF )
            // InternalOpenCypherParser.g:3038:1: ruleProcedureName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleProcedureName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleProcedureName"


    // $ANTLR start "ruleProcedureName"
    // InternalOpenCypherParser.g:3045:1: ruleProcedureName : ( ( rule__ProcedureName__Group__0 ) ) ;
    public final void ruleProcedureName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3049:2: ( ( ( rule__ProcedureName__Group__0 ) ) )
            // InternalOpenCypherParser.g:3050:2: ( ( rule__ProcedureName__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3050:2: ( ( rule__ProcedureName__Group__0 ) )
            // InternalOpenCypherParser.g:3051:3: ( rule__ProcedureName__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3052:3: ( rule__ProcedureName__Group__0 )
            // InternalOpenCypherParser.g:3052:4: rule__ProcedureName__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ProcedureName__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleProcedureName"


    // $ANTLR start "entryRuleNamespace"
    // InternalOpenCypherParser.g:3061:1: entryRuleNamespace : ruleNamespace EOF ;
    public final void entryRuleNamespace() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3062:1: ( ruleNamespace EOF )
            // InternalOpenCypherParser.g:3063:1: ruleNamespace EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNamespaceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNamespace();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNamespaceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNamespace"


    // $ANTLR start "ruleNamespace"
    // InternalOpenCypherParser.g:3070:1: ruleNamespace : ( ( rule__Namespace__Group__0 )* ) ;
    public final void ruleNamespace() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3074:2: ( ( ( rule__Namespace__Group__0 )* ) )
            // InternalOpenCypherParser.g:3075:2: ( ( rule__Namespace__Group__0 )* )
            {
            // InternalOpenCypherParser.g:3075:2: ( ( rule__Namespace__Group__0 )* )
            // InternalOpenCypherParser.g:3076:3: ( rule__Namespace__Group__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNamespaceAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3077:3: ( rule__Namespace__Group__0 )*
            loop2:
            do {
                int alt2=2;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // InternalOpenCypherParser.g:3077:4: rule__Namespace__Group__0
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__Namespace__Group__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNamespaceAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNamespace"


    // $ANTLR start "entryRuleListComprehension"
    // InternalOpenCypherParser.g:3086:1: entryRuleListComprehension : ruleListComprehension EOF ;
    public final void entryRuleListComprehension() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3087:1: ( ruleListComprehension EOF )
            // InternalOpenCypherParser.g:3088:1: ruleListComprehension EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleListComprehension();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleListComprehension"


    // $ANTLR start "ruleListComprehension"
    // InternalOpenCypherParser.g:3095:1: ruleListComprehension : ( ( rule__ListComprehension__Group__0 ) ) ;
    public final void ruleListComprehension() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3099:2: ( ( ( rule__ListComprehension__Group__0 ) ) )
            // InternalOpenCypherParser.g:3100:2: ( ( rule__ListComprehension__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3100:2: ( ( rule__ListComprehension__Group__0 ) )
            // InternalOpenCypherParser.g:3101:3: ( rule__ListComprehension__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3102:3: ( rule__ListComprehension__Group__0 )
            // InternalOpenCypherParser.g:3102:4: rule__ListComprehension__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleListComprehension"


    // $ANTLR start "entryRulePatternComprehension"
    // InternalOpenCypherParser.g:3111:1: entryRulePatternComprehension : rulePatternComprehension EOF ;
    public final void entryRulePatternComprehension() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3112:1: ( rulePatternComprehension EOF )
            // InternalOpenCypherParser.g:3113:1: rulePatternComprehension EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePatternComprehension();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePatternComprehension"


    // $ANTLR start "rulePatternComprehension"
    // InternalOpenCypherParser.g:3120:1: rulePatternComprehension : ( ( rule__PatternComprehension__Group__0 ) ) ;
    public final void rulePatternComprehension() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3124:2: ( ( ( rule__PatternComprehension__Group__0 ) ) )
            // InternalOpenCypherParser.g:3125:2: ( ( rule__PatternComprehension__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3125:2: ( ( rule__PatternComprehension__Group__0 ) )
            // InternalOpenCypherParser.g:3126:3: ( rule__PatternComprehension__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3127:3: ( rule__PatternComprehension__Group__0 )
            // InternalOpenCypherParser.g:3127:4: rule__PatternComprehension__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePatternComprehension"


    // $ANTLR start "entryRulePropertyLookup"
    // InternalOpenCypherParser.g:3136:1: entryRulePropertyLookup : rulePropertyLookup EOF ;
    public final void entryRulePropertyLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3137:1: ( rulePropertyLookup EOF )
            // InternalOpenCypherParser.g:3138:1: rulePropertyLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePropertyLookup"


    // $ANTLR start "rulePropertyLookup"
    // InternalOpenCypherParser.g:3145:1: rulePropertyLookup : ( ( rule__PropertyLookup__Group__0 ) ) ;
    public final void rulePropertyLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3149:2: ( ( ( rule__PropertyLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:3150:2: ( ( rule__PropertyLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3150:2: ( ( rule__PropertyLookup__Group__0 ) )
            // InternalOpenCypherParser.g:3151:3: ( rule__PropertyLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3152:3: ( rule__PropertyLookup__Group__0 )
            // InternalOpenCypherParser.g:3152:4: rule__PropertyLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePropertyLookup"


    // $ANTLR start "entryRuleCaseExpression"
    // InternalOpenCypherParser.g:3161:1: entryRuleCaseExpression : ruleCaseExpression EOF ;
    public final void entryRuleCaseExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3162:1: ( ruleCaseExpression EOF )
            // InternalOpenCypherParser.g:3163:1: ruleCaseExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCaseExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCaseExpression"


    // $ANTLR start "ruleCaseExpression"
    // InternalOpenCypherParser.g:3170:1: ruleCaseExpression : ( ( rule__CaseExpression__Group__0 ) ) ;
    public final void ruleCaseExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3174:2: ( ( ( rule__CaseExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:3175:2: ( ( rule__CaseExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3175:2: ( ( rule__CaseExpression__Group__0 ) )
            // InternalOpenCypherParser.g:3176:3: ( rule__CaseExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3177:3: ( rule__CaseExpression__Group__0 )
            // InternalOpenCypherParser.g:3177:4: rule__CaseExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCaseExpression"


    // $ANTLR start "entryRuleCaseAlternatives"
    // InternalOpenCypherParser.g:3186:1: entryRuleCaseAlternatives : ruleCaseAlternatives EOF ;
    public final void entryRuleCaseAlternatives() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3187:1: ( ruleCaseAlternatives EOF )
            // InternalOpenCypherParser.g:3188:1: ruleCaseAlternatives EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCaseAlternatives();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCaseAlternatives"


    // $ANTLR start "ruleCaseAlternatives"
    // InternalOpenCypherParser.g:3195:1: ruleCaseAlternatives : ( ( rule__CaseAlternatives__Group__0 ) ) ;
    public final void ruleCaseAlternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3199:2: ( ( ( rule__CaseAlternatives__Group__0 ) ) )
            // InternalOpenCypherParser.g:3200:2: ( ( rule__CaseAlternatives__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3200:2: ( ( rule__CaseAlternatives__Group__0 ) )
            // InternalOpenCypherParser.g:3201:3: ( rule__CaseAlternatives__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3202:3: ( rule__CaseAlternatives__Group__0 )
            // InternalOpenCypherParser.g:3202:4: rule__CaseAlternatives__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCaseAlternatives"


    // $ANTLR start "entryRuleVariableDeclaration"
    // InternalOpenCypherParser.g:3211:1: entryRuleVariableDeclaration : ruleVariableDeclaration EOF ;
    public final void entryRuleVariableDeclaration() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3212:1: ( ruleVariableDeclaration EOF )
            // InternalOpenCypherParser.g:3213:1: ruleVariableDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getVariableDeclarationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleVariableDeclaration"


    // $ANTLR start "ruleVariableDeclaration"
    // InternalOpenCypherParser.g:3220:1: ruleVariableDeclaration : ( ( rule__VariableDeclaration__Group__0 ) ) ;
    public final void ruleVariableDeclaration() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3224:2: ( ( ( rule__VariableDeclaration__Group__0 ) ) )
            // InternalOpenCypherParser.g:3225:2: ( ( rule__VariableDeclaration__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3225:2: ( ( rule__VariableDeclaration__Group__0 ) )
            // InternalOpenCypherParser.g:3226:3: ( rule__VariableDeclaration__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVariableDeclarationAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3227:3: ( rule__VariableDeclaration__Group__0 )
            // InternalOpenCypherParser.g:3227:4: rule__VariableDeclaration__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__VariableDeclaration__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getVariableDeclarationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleVariableDeclaration"


    // $ANTLR start "entryRuleStringLiteral"
    // InternalOpenCypherParser.g:3236:1: entryRuleStringLiteral : ruleStringLiteral EOF ;
    public final void entryRuleStringLiteral() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3237:1: ( ruleStringLiteral EOF )
            // InternalOpenCypherParser.g:3238:1: ruleStringLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStringLiteral"


    // $ANTLR start "ruleStringLiteral"
    // InternalOpenCypherParser.g:3245:1: ruleStringLiteral : ( ( rule__StringLiteral__ValueAssignment ) ) ;
    public final void ruleStringLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3249:2: ( ( ( rule__StringLiteral__ValueAssignment ) ) )
            // InternalOpenCypherParser.g:3250:2: ( ( rule__StringLiteral__ValueAssignment ) )
            {
            // InternalOpenCypherParser.g:3250:2: ( ( rule__StringLiteral__ValueAssignment ) )
            // InternalOpenCypherParser.g:3251:3: ( rule__StringLiteral__ValueAssignment )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringLiteralAccess().getValueAssignment()); 
            }
            // InternalOpenCypherParser.g:3252:3: ( rule__StringLiteral__ValueAssignment )
            // InternalOpenCypherParser.g:3252:4: rule__StringLiteral__ValueAssignment
            {
            pushFollow(FOLLOW_2);
            rule__StringLiteral__ValueAssignment();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringLiteralAccess().getValueAssignment()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStringLiteral"


    // $ANTLR start "entryRuleNumberLiteral"
    // InternalOpenCypherParser.g:3261:1: entryRuleNumberLiteral : ruleNumberLiteral EOF ;
    public final void entryRuleNumberLiteral() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3262:1: ( ruleNumberLiteral EOF )
            // InternalOpenCypherParser.g:3263:1: ruleNumberLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNumberLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNumberLiteral"


    // $ANTLR start "ruleNumberLiteral"
    // InternalOpenCypherParser.g:3270:1: ruleNumberLiteral : ( ( rule__NumberLiteral__ValueAssignment ) ) ;
    public final void ruleNumberLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3274:2: ( ( ( rule__NumberLiteral__ValueAssignment ) ) )
            // InternalOpenCypherParser.g:3275:2: ( ( rule__NumberLiteral__ValueAssignment ) )
            {
            // InternalOpenCypherParser.g:3275:2: ( ( rule__NumberLiteral__ValueAssignment ) )
            // InternalOpenCypherParser.g:3276:3: ( rule__NumberLiteral__ValueAssignment )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); 
            }
            // InternalOpenCypherParser.g:3277:3: ( rule__NumberLiteral__ValueAssignment )
            // InternalOpenCypherParser.g:3277:4: rule__NumberLiteral__ValueAssignment
            {
            pushFollow(FOLLOW_2);
            rule__NumberLiteral__ValueAssignment();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNumberLiteral"


    // $ANTLR start "entryRuleMapLiteral"
    // InternalOpenCypherParser.g:3286:1: entryRuleMapLiteral : ruleMapLiteral EOF ;
    public final void entryRuleMapLiteral() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3287:1: ( ruleMapLiteral EOF )
            // InternalOpenCypherParser.g:3288:1: ruleMapLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMapLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMapLiteral"


    // $ANTLR start "ruleMapLiteral"
    // InternalOpenCypherParser.g:3295:1: ruleMapLiteral : ( ( rule__MapLiteral__Group__0 ) ) ;
    public final void ruleMapLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3299:2: ( ( ( rule__MapLiteral__Group__0 ) ) )
            // InternalOpenCypherParser.g:3300:2: ( ( rule__MapLiteral__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3300:2: ( ( rule__MapLiteral__Group__0 ) )
            // InternalOpenCypherParser.g:3301:3: ( rule__MapLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3302:3: ( rule__MapLiteral__Group__0 )
            // InternalOpenCypherParser.g:3302:4: rule__MapLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMapLiteral"


    // $ANTLR start "entryRuleMapLiteralEntry"
    // InternalOpenCypherParser.g:3311:1: entryRuleMapLiteralEntry : ruleMapLiteralEntry EOF ;
    public final void entryRuleMapLiteralEntry() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3312:1: ( ruleMapLiteralEntry EOF )
            // InternalOpenCypherParser.g:3313:1: ruleMapLiteralEntry EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMapLiteralEntry();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMapLiteralEntry"


    // $ANTLR start "ruleMapLiteralEntry"
    // InternalOpenCypherParser.g:3320:1: ruleMapLiteralEntry : ( ( rule__MapLiteralEntry__Group__0 ) ) ;
    public final void ruleMapLiteralEntry() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3324:2: ( ( ( rule__MapLiteralEntry__Group__0 ) ) )
            // InternalOpenCypherParser.g:3325:2: ( ( rule__MapLiteralEntry__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3325:2: ( ( rule__MapLiteralEntry__Group__0 ) )
            // InternalOpenCypherParser.g:3326:3: ( rule__MapLiteralEntry__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3327:3: ( rule__MapLiteralEntry__Group__0 )
            // InternalOpenCypherParser.g:3327:4: rule__MapLiteralEntry__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMapLiteralEntry"


    // $ANTLR start "entryRuleLegacyParameter"
    // InternalOpenCypherParser.g:3336:1: entryRuleLegacyParameter : ruleLegacyParameter EOF ;
    public final void entryRuleLegacyParameter() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3337:1: ( ruleLegacyParameter EOF )
            // InternalOpenCypherParser.g:3338:1: ruleLegacyParameter EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLegacyParameter();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLegacyParameter"


    // $ANTLR start "ruleLegacyParameter"
    // InternalOpenCypherParser.g:3345:1: ruleLegacyParameter : ( ( rule__LegacyParameter__Group__0 ) ) ;
    public final void ruleLegacyParameter() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3349:2: ( ( ( rule__LegacyParameter__Group__0 ) ) )
            // InternalOpenCypherParser.g:3350:2: ( ( rule__LegacyParameter__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3350:2: ( ( rule__LegacyParameter__Group__0 ) )
            // InternalOpenCypherParser.g:3351:3: ( rule__LegacyParameter__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3352:3: ( rule__LegacyParameter__Group__0 )
            // InternalOpenCypherParser.g:3352:4: rule__LegacyParameter__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLegacyParameter"


    // $ANTLR start "entryRuleParameter"
    // InternalOpenCypherParser.g:3361:1: entryRuleParameter : ruleParameter EOF ;
    public final void entryRuleParameter() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3362:1: ( ruleParameter EOF )
            // InternalOpenCypherParser.g:3363:1: ruleParameter EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParameterRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleParameter"


    // $ANTLR start "ruleParameter"
    // InternalOpenCypherParser.g:3370:1: ruleParameter : ( ( rule__Parameter__Group__0 ) ) ;
    public final void ruleParameter() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3374:2: ( ( ( rule__Parameter__Group__0 ) ) )
            // InternalOpenCypherParser.g:3375:2: ( ( rule__Parameter__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3375:2: ( ( rule__Parameter__Group__0 ) )
            // InternalOpenCypherParser.g:3376:3: ( rule__Parameter__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParameterAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3377:3: ( rule__Parameter__Group__0 )
            // InternalOpenCypherParser.g:3377:4: rule__Parameter__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getParameterAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleParameter"


    // $ANTLR start "entryRulePropertyExpression"
    // InternalOpenCypherParser.g:3386:1: entryRulePropertyExpression : rulePropertyExpression EOF ;
    public final void entryRulePropertyExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3387:1: ( rulePropertyExpression EOF )
            // InternalOpenCypherParser.g:3388:1: rulePropertyExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePropertyExpression"


    // $ANTLR start "rulePropertyExpression"
    // InternalOpenCypherParser.g:3395:1: rulePropertyExpression : ( ( rule__PropertyExpression__Group__0 ) ) ;
    public final void rulePropertyExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3399:2: ( ( ( rule__PropertyExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:3400:2: ( ( rule__PropertyExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3400:2: ( ( rule__PropertyExpression__Group__0 ) )
            // InternalOpenCypherParser.g:3401:3: ( rule__PropertyExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3402:3: ( rule__PropertyExpression__Group__0 )
            // InternalOpenCypherParser.g:3402:4: rule__PropertyExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PropertyExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePropertyExpression"


    // $ANTLR start "entryRulePropertyKeyName"
    // InternalOpenCypherParser.g:3411:1: entryRulePropertyKeyName : rulePropertyKeyName EOF ;
    public final void entryRulePropertyKeyName() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3412:1: ( rulePropertyKeyName EOF )
            // InternalOpenCypherParser.g:3413:1: rulePropertyKeyName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyKeyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyKeyNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePropertyKeyName"


    // $ANTLR start "rulePropertyKeyName"
    // InternalOpenCypherParser.g:3420:1: rulePropertyKeyName : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rulePropertyKeyName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3424:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:3425:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:3425:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:3426:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePropertyKeyName"


    // $ANTLR start "entryRuleLeftArrowHead"
    // InternalOpenCypherParser.g:3436:1: entryRuleLeftArrowHead : ruleLeftArrowHead EOF ;
    public final void entryRuleLeftArrowHead() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3437:1: ( ruleLeftArrowHead EOF )
            // InternalOpenCypherParser.g:3438:1: ruleLeftArrowHead EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLeftArrowHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLeftArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLeftArrowHeadRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLeftArrowHead"


    // $ANTLR start "ruleLeftArrowHead"
    // InternalOpenCypherParser.g:3445:1: ruleLeftArrowHead : ( LessThanSign ) ;
    public final void ruleLeftArrowHead() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3449:2: ( ( LessThanSign ) )
            // InternalOpenCypherParser.g:3450:2: ( LessThanSign )
            {
            // InternalOpenCypherParser.g:3450:2: ( LessThanSign )
            // InternalOpenCypherParser.g:3451:3: LessThanSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLeftArrowHeadAccess().getLessThanSignKeyword()); 
            }
            match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLeftArrowHeadAccess().getLessThanSignKeyword()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLeftArrowHead"


    // $ANTLR start "entryRuleRightArrowHead"
    // InternalOpenCypherParser.g:3461:1: entryRuleRightArrowHead : ruleRightArrowHead EOF ;
    public final void entryRuleRightArrowHead() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3462:1: ( ruleRightArrowHead EOF )
            // InternalOpenCypherParser.g:3463:1: ruleRightArrowHead EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRightArrowHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRightArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRightArrowHeadRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRightArrowHead"


    // $ANTLR start "ruleRightArrowHead"
    // InternalOpenCypherParser.g:3470:1: ruleRightArrowHead : ( GreaterThanSign ) ;
    public final void ruleRightArrowHead() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3474:2: ( ( GreaterThanSign ) )
            // InternalOpenCypherParser.g:3475:2: ( GreaterThanSign )
            {
            // InternalOpenCypherParser.g:3475:2: ( GreaterThanSign )
            // InternalOpenCypherParser.g:3476:3: GreaterThanSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRightArrowHeadAccess().getGreaterThanSignKeyword()); 
            }
            match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRightArrowHeadAccess().getGreaterThanSignKeyword()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRightArrowHead"


    // $ANTLR start "entryRuleDash"
    // InternalOpenCypherParser.g:3486:1: entryRuleDash : ruleDash EOF ;
    public final void entryRuleDash() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3487:1: ( ruleDash EOF )
            // InternalOpenCypherParser.g:3488:1: ruleDash EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDashRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDash();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDashRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDash"


    // $ANTLR start "ruleDash"
    // InternalOpenCypherParser.g:3495:1: ruleDash : ( HyphenMinus ) ;
    public final void ruleDash() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3499:2: ( ( HyphenMinus ) )
            // InternalOpenCypherParser.g:3500:2: ( HyphenMinus )
            {
            // InternalOpenCypherParser.g:3500:2: ( HyphenMinus )
            // InternalOpenCypherParser.g:3501:3: HyphenMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDashAccess().getHyphenMinusKeyword()); 
            }
            match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDashAccess().getHyphenMinusKeyword()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDash"


    // $ANTLR start "entryRuleDecimalInteger"
    // InternalOpenCypherParser.g:3511:1: entryRuleDecimalInteger : ruleDecimalInteger EOF ;
    public final void entryRuleDecimalInteger() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3512:1: ( ruleDecimalInteger EOF )
            // InternalOpenCypherParser.g:3513:1: ruleDecimalInteger EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDecimalIntegerRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDecimalIntegerRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDecimalInteger"


    // $ANTLR start "ruleDecimalInteger"
    // InternalOpenCypherParser.g:3520:1: ruleDecimalInteger : ( ( rule__DecimalInteger__Group__0 ) ) ;
    public final void ruleDecimalInteger() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3524:2: ( ( ( rule__DecimalInteger__Group__0 ) ) )
            // InternalOpenCypherParser.g:3525:2: ( ( rule__DecimalInteger__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3525:2: ( ( rule__DecimalInteger__Group__0 ) )
            // InternalOpenCypherParser.g:3526:3: ( rule__DecimalInteger__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDecimalIntegerAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3527:3: ( rule__DecimalInteger__Group__0 )
            // InternalOpenCypherParser.g:3527:4: rule__DecimalInteger__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DecimalInteger__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDecimalIntegerAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDecimalInteger"


    // $ANTLR start "entryRuleNumber"
    // InternalOpenCypherParser.g:3536:1: entryRuleNumber : ruleNumber EOF ;
    public final void entryRuleNumber() throws RecognitionException {
         
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:3540:1: ( ruleNumber EOF )
            // InternalOpenCypherParser.g:3541:1: ruleNumber EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "entryRuleNumber"


    // $ANTLR start "ruleNumber"
    // InternalOpenCypherParser.g:3551:1: ruleNumber : ( ( rule__Number__Alternatives ) ) ;
    public final void ruleNumber() throws RecognitionException {

        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3556:2: ( ( ( rule__Number__Alternatives ) ) )
            // InternalOpenCypherParser.g:3557:2: ( ( rule__Number__Alternatives ) )
            {
            // InternalOpenCypherParser.g:3557:2: ( ( rule__Number__Alternatives ) )
            // InternalOpenCypherParser.g:3558:3: ( rule__Number__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:3559:3: ( rule__Number__Alternatives )
            // InternalOpenCypherParser.g:3559:4: rule__Number__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);
            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "ruleNumber"


    // $ANTLR start "entryRuleSYMBOLIC_NAME_X"
    // InternalOpenCypherParser.g:3569:1: entryRuleSYMBOLIC_NAME_X : ruleSYMBOLIC_NAME_X EOF ;
    public final void entryRuleSYMBOLIC_NAME_X() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3570:1: ( ruleSYMBOLIC_NAME_X EOF )
            // InternalOpenCypherParser.g:3571:1: ruleSYMBOLIC_NAME_X EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSYMBOLIC_NAME_XRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSYMBOLIC_NAME_XRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSYMBOLIC_NAME_X"


    // $ANTLR start "ruleSYMBOLIC_NAME_X"
    // InternalOpenCypherParser.g:3578:1: ruleSYMBOLIC_NAME_X : ( ( rule__SYMBOLIC_NAME_X__Alternatives ) ) ;
    public final void ruleSYMBOLIC_NAME_X() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3582:2: ( ( ( rule__SYMBOLIC_NAME_X__Alternatives ) ) )
            // InternalOpenCypherParser.g:3583:2: ( ( rule__SYMBOLIC_NAME_X__Alternatives ) )
            {
            // InternalOpenCypherParser.g:3583:2: ( ( rule__SYMBOLIC_NAME_X__Alternatives ) )
            // InternalOpenCypherParser.g:3584:3: ( rule__SYMBOLIC_NAME_X__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSYMBOLIC_NAME_XAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:3585:3: ( rule__SYMBOLIC_NAME_X__Alternatives )
            // InternalOpenCypherParser.g:3585:4: rule__SYMBOLIC_NAME_X__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__SYMBOLIC_NAME_X__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSYMBOLIC_NAME_XAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSYMBOLIC_NAME_X"


    // $ANTLR start "rule__Statement__Alternatives"
    // InternalOpenCypherParser.g:3593:1: rule__Statement__Alternatives : ( ( ruleCommand ) | ( ruleQuery ) );
    public final void rule__Statement__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3597:1: ( ( ruleCommand ) | ( ruleQuery ) )
            int alt3=2;
            switch ( input.LA(1) ) {
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case ALLSHORTESTPATHS:
                case FIELDTERMINATOR:
                case RELATIONSHIP:
                case SHORTESTPATH:
                case DESCENDING:
                case ASCENDING:
                case CONTAINS:
                case DISTINCT:
                case OPTIONAL:
                case PERIODIC:
                case EXPLAIN:
                case EXTRACT:
                case FOREACH:
                case HEADERS:
                case PROFILE:
                case ASSERT:
                case COMMIT:
                case CREATE:
                case CYPHER:
                case DELETE:
                case DETACH:
                case EXISTS:
                case FILTER:
                case REDUCE:
                case REMOVE:
                case RETURN:
                case SINGLE:
                case STARTS:
                case UNIQUE:
                case UNWIND:
                case COUNT:
                case FALSE:
                case LIMIT:
                case MATCH:
                case MERGE:
                case ORDER:
                case START:
                case UNION:
                case USING:
                case WHERE:
                case CASE:
                case DESC:
                case DROP:
                case ELSE:
                case ENDS:
                case FROM:
                case JOIN:
                case LOAD:
                case NODE:
                case NONE:
                case NULL:
                case SCAN:
                case SKIP:
                case THEN:
                case TRUE:
                case WHEN:
                case WITH:
                case ALL:
                case AND:
                case ANY:
                case ASC:
                case CSV:
                case END:
                case NOT:
                case REL:
                case SET:
                case XOR:
                case AS:
                case BY:
                case IN:
                case IS:
                case ON:
                case OR:
                case LeftParenthesis:
                case RULE_ID:
                    {
                    alt3=2;
                    }
                    break;
                case INDEX:
                    {
                    int LA3_4 = input.LA(3);

                    if ( (LA3_4==ON) ) {
                        alt3=1;
                    }
                    else if ( (LA3_4==EqualsSign) ) {
                        alt3=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 3, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case CONSTRAINT:
                    {
                    int LA3_5 = input.LA(3);

                    if ( (LA3_5==ON) ) {
                        alt3=1;
                    }
                    else if ( (LA3_5==EqualsSign) ) {
                        alt3=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 3, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 3, 1, input);

                    throw nvae;
                }

                }
                break;
            case DROP:
                {
                alt3=1;
                }
                break;
            case OPTIONAL:
            case FOREACH:
            case DELETE:
            case DETACH:
            case REMOVE:
            case RETURN:
            case UNWIND:
            case MATCH:
            case MERGE:
            case START:
            case USING:
            case CALL:
            case LOAD:
            case WITH:
            case SET:
                {
                alt3=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }

            switch (alt3) {
                case 1 :
                    // InternalOpenCypherParser.g:3598:2: ( ruleCommand )
                    {
                    // InternalOpenCypherParser.g:3598:2: ( ruleCommand )
                    // InternalOpenCypherParser.g:3599:3: ruleCommand
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStatementAccess().getCommandParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCommand();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStatementAccess().getCommandParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3604:2: ( ruleQuery )
                    {
                    // InternalOpenCypherParser.g:3604:2: ( ruleQuery )
                    // InternalOpenCypherParser.g:3605:3: ruleQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStatementAccess().getQueryParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStatementAccess().getQueryParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Statement__Alternatives"


    // $ANTLR start "rule__Query__Alternatives"
    // InternalOpenCypherParser.g:3614:1: rule__Query__Alternatives : ( ( ruleRegularQuery ) | ( ruleStandaloneCall ) | ( ruleBulkImportQuery ) );
    public final void rule__Query__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3618:1: ( ( ruleRegularQuery ) | ( ruleStandaloneCall ) | ( ruleBulkImportQuery ) )
            int alt4=3;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    // InternalOpenCypherParser.g:3619:2: ( ruleRegularQuery )
                    {
                    // InternalOpenCypherParser.g:3619:2: ( ruleRegularQuery )
                    // InternalOpenCypherParser.g:3620:3: ruleRegularQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRegularQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3625:2: ( ruleStandaloneCall )
                    {
                    // InternalOpenCypherParser.g:3625:2: ( ruleStandaloneCall )
                    // InternalOpenCypherParser.g:3626:3: ruleStandaloneCall
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryAccess().getStandaloneCallParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleStandaloneCall();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryAccess().getStandaloneCallParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3631:2: ( ruleBulkImportQuery )
                    {
                    // InternalOpenCypherParser.g:3631:2: ( ruleBulkImportQuery )
                    // InternalOpenCypherParser.g:3632:3: ruleBulkImportQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryAccess().getBulkImportQueryParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleBulkImportQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryAccess().getBulkImportQueryParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Query__Alternatives"


    // $ANTLR start "rule__SingleQuery__Alternatives"
    // InternalOpenCypherParser.g:3641:1: rule__SingleQuery__Alternatives : ( ( ruleMultiPartQuery ) | ( ruleSinglePartQuery ) );
    public final void rule__SingleQuery__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3645:1: ( ( ruleMultiPartQuery ) | ( ruleSinglePartQuery ) )
            int alt5=2;
            alt5 = dfa5.predict(input);
            switch (alt5) {
                case 1 :
                    // InternalOpenCypherParser.g:3646:2: ( ruleMultiPartQuery )
                    {
                    // InternalOpenCypherParser.g:3646:2: ( ruleMultiPartQuery )
                    // InternalOpenCypherParser.g:3647:3: ruleMultiPartQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSingleQueryAccess().getMultiPartQueryParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleMultiPartQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSingleQueryAccess().getMultiPartQueryParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3652:2: ( ruleSinglePartQuery )
                    {
                    // InternalOpenCypherParser.g:3652:2: ( ruleSinglePartQuery )
                    // InternalOpenCypherParser.g:3653:3: ruleSinglePartQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSingleQueryAccess().getSinglePartQueryParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSinglePartQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSingleQueryAccess().getSinglePartQueryParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SingleQuery__Alternatives"


    // $ANTLR start "rule__SinglePartQuery__Alternatives"
    // InternalOpenCypherParser.g:3662:1: rule__SinglePartQuery__Alternatives : ( ( ( rule__SinglePartQuery__Group_0__0 ) ) | ( ( rule__SinglePartQuery__Group_1__0 ) ) );
    public final void rule__SinglePartQuery__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3666:1: ( ( ( rule__SinglePartQuery__Group_0__0 ) ) | ( ( rule__SinglePartQuery__Group_1__0 ) ) )
            int alt6=2;
            alt6 = dfa6.predict(input);
            switch (alt6) {
                case 1 :
                    // InternalOpenCypherParser.g:3667:2: ( ( rule__SinglePartQuery__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3667:2: ( ( rule__SinglePartQuery__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3668:3: ( rule__SinglePartQuery__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSinglePartQueryAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3669:3: ( rule__SinglePartQuery__Group_0__0 )
                    // InternalOpenCypherParser.g:3669:4: rule__SinglePartQuery__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SinglePartQuery__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSinglePartQueryAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3673:2: ( ( rule__SinglePartQuery__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:3673:2: ( ( rule__SinglePartQuery__Group_1__0 ) )
                    // InternalOpenCypherParser.g:3674:3: ( rule__SinglePartQuery__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSinglePartQueryAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:3675:3: ( rule__SinglePartQuery__Group_1__0 )
                    // InternalOpenCypherParser.g:3675:4: rule__SinglePartQuery__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SinglePartQuery__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSinglePartQueryAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Alternatives"


    // $ANTLR start "rule__UpdatingClause__Alternatives"
    // InternalOpenCypherParser.g:3683:1: rule__UpdatingClause__Alternatives : ( ( ruleCreate ) | ( ruleMerge ) | ( ruleForeach ) | ( ruleDelete ) | ( ruleSet ) | ( ruleRemove ) );
    public final void rule__UpdatingClause__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3687:1: ( ( ruleCreate ) | ( ruleMerge ) | ( ruleForeach ) | ( ruleDelete ) | ( ruleSet ) | ( ruleRemove ) )
            int alt7=6;
            switch ( input.LA(1) ) {
            case CREATE:
                {
                alt7=1;
                }
                break;
            case MERGE:
                {
                alt7=2;
                }
                break;
            case FOREACH:
                {
                alt7=3;
                }
                break;
            case DELETE:
            case DETACH:
                {
                alt7=4;
                }
                break;
            case SET:
                {
                alt7=5;
                }
                break;
            case REMOVE:
                {
                alt7=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // InternalOpenCypherParser.g:3688:2: ( ruleCreate )
                    {
                    // InternalOpenCypherParser.g:3688:2: ( ruleCreate )
                    // InternalOpenCypherParser.g:3689:3: ruleCreate
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUpdatingClauseAccess().getCreateParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCreate();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUpdatingClauseAccess().getCreateParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3694:2: ( ruleMerge )
                    {
                    // InternalOpenCypherParser.g:3694:2: ( ruleMerge )
                    // InternalOpenCypherParser.g:3695:3: ruleMerge
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUpdatingClauseAccess().getMergeParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleMerge();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUpdatingClauseAccess().getMergeParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3700:2: ( ruleForeach )
                    {
                    // InternalOpenCypherParser.g:3700:2: ( ruleForeach )
                    // InternalOpenCypherParser.g:3701:3: ruleForeach
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUpdatingClauseAccess().getForeachParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleForeach();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUpdatingClauseAccess().getForeachParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:3706:2: ( ruleDelete )
                    {
                    // InternalOpenCypherParser.g:3706:2: ( ruleDelete )
                    // InternalOpenCypherParser.g:3707:3: ruleDelete
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUpdatingClauseAccess().getDeleteParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleDelete();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUpdatingClauseAccess().getDeleteParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:3712:2: ( ruleSet )
                    {
                    // InternalOpenCypherParser.g:3712:2: ( ruleSet )
                    // InternalOpenCypherParser.g:3713:3: ruleSet
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUpdatingClauseAccess().getSetParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSet();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUpdatingClauseAccess().getSetParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:3718:2: ( ruleRemove )
                    {
                    // InternalOpenCypherParser.g:3718:2: ( ruleRemove )
                    // InternalOpenCypherParser.g:3719:3: ruleRemove
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUpdatingClauseAccess().getRemoveParserRuleCall_5()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRemove();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUpdatingClauseAccess().getRemoveParserRuleCall_5()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UpdatingClause__Alternatives"


    // $ANTLR start "rule__ReadingClause__Alternatives"
    // InternalOpenCypherParser.g:3728:1: rule__ReadingClause__Alternatives : ( ( ruleLoadCSV ) | ( ruleStart ) | ( ruleMatch ) | ( ruleUnwind ) | ( ruleInQueryCall ) );
    public final void rule__ReadingClause__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3732:1: ( ( ruleLoadCSV ) | ( ruleStart ) | ( ruleMatch ) | ( ruleUnwind ) | ( ruleInQueryCall ) )
            int alt8=5;
            switch ( input.LA(1) ) {
            case LOAD:
                {
                alt8=1;
                }
                break;
            case START:
                {
                alt8=2;
                }
                break;
            case OPTIONAL:
            case MATCH:
                {
                alt8=3;
                }
                break;
            case UNWIND:
                {
                alt8=4;
                }
                break;
            case CALL:
                {
                alt8=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // InternalOpenCypherParser.g:3733:2: ( ruleLoadCSV )
                    {
                    // InternalOpenCypherParser.g:3733:2: ( ruleLoadCSV )
                    // InternalOpenCypherParser.g:3734:3: ruleLoadCSV
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getReadingClauseAccess().getLoadCSVParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleLoadCSV();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getReadingClauseAccess().getLoadCSVParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3739:2: ( ruleStart )
                    {
                    // InternalOpenCypherParser.g:3739:2: ( ruleStart )
                    // InternalOpenCypherParser.g:3740:3: ruleStart
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getReadingClauseAccess().getStartParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleStart();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getReadingClauseAccess().getStartParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3745:2: ( ruleMatch )
                    {
                    // InternalOpenCypherParser.g:3745:2: ( ruleMatch )
                    // InternalOpenCypherParser.g:3746:3: ruleMatch
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getReadingClauseAccess().getMatchParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleMatch();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getReadingClauseAccess().getMatchParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:3751:2: ( ruleUnwind )
                    {
                    // InternalOpenCypherParser.g:3751:2: ( ruleUnwind )
                    // InternalOpenCypherParser.g:3752:3: ruleUnwind
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getReadingClauseAccess().getUnwindParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleUnwind();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getReadingClauseAccess().getUnwindParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:3757:2: ( ruleInQueryCall )
                    {
                    // InternalOpenCypherParser.g:3757:2: ( ruleInQueryCall )
                    // InternalOpenCypherParser.g:3758:3: ruleInQueryCall
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getReadingClauseAccess().getInQueryCallParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleInQueryCall();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getReadingClauseAccess().getInQueryCallParserRuleCall_4()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReadingClause__Alternatives"


    // $ANTLR start "rule__Command__Alternatives"
    // InternalOpenCypherParser.g:3767:1: rule__Command__Alternatives : ( ( ruleCreateIndex ) | ( ruleDropIndex ) | ( ruleCreateUniqueConstraint ) | ( ruleDropUniqueConstraint ) | ( ruleCreateNodePropertyExistenceConstraint ) | ( ruleDropNodePropertyExistenceConstraint ) | ( ruleCreateRelationshipPropertyExistenceConstraint ) | ( ruleDropRelationshipPropertyExistenceConstraint ) );
    public final void rule__Command__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3771:1: ( ( ruleCreateIndex ) | ( ruleDropIndex ) | ( ruleCreateUniqueConstraint ) | ( ruleDropUniqueConstraint ) | ( ruleCreateNodePropertyExistenceConstraint ) | ( ruleDropNodePropertyExistenceConstraint ) | ( ruleCreateRelationshipPropertyExistenceConstraint ) | ( ruleDropRelationshipPropertyExistenceConstraint ) )
            int alt9=8;
            alt9 = dfa9.predict(input);
            switch (alt9) {
                case 1 :
                    // InternalOpenCypherParser.g:3772:2: ( ruleCreateIndex )
                    {
                    // InternalOpenCypherParser.g:3772:2: ( ruleCreateIndex )
                    // InternalOpenCypherParser.g:3773:3: ruleCreateIndex
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCreateIndex();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3778:2: ( ruleDropIndex )
                    {
                    // InternalOpenCypherParser.g:3778:2: ( ruleDropIndex )
                    // InternalOpenCypherParser.g:3779:3: ruleDropIndex
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleDropIndex();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3784:2: ( ruleCreateUniqueConstraint )
                    {
                    // InternalOpenCypherParser.g:3784:2: ( ruleCreateUniqueConstraint )
                    // InternalOpenCypherParser.g:3785:3: ruleCreateUniqueConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCreateUniqueConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:3790:2: ( ruleDropUniqueConstraint )
                    {
                    // InternalOpenCypherParser.g:3790:2: ( ruleDropUniqueConstraint )
                    // InternalOpenCypherParser.g:3791:3: ruleDropUniqueConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleDropUniqueConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:3796:2: ( ruleCreateNodePropertyExistenceConstraint )
                    {
                    // InternalOpenCypherParser.g:3796:2: ( ruleCreateNodePropertyExistenceConstraint )
                    // InternalOpenCypherParser.g:3797:3: ruleCreateNodePropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCreateNodePropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:3802:2: ( ruleDropNodePropertyExistenceConstraint )
                    {
                    // InternalOpenCypherParser.g:3802:2: ( ruleDropNodePropertyExistenceConstraint )
                    // InternalOpenCypherParser.g:3803:3: ruleDropNodePropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleDropNodePropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:3808:2: ( ruleCreateRelationshipPropertyExistenceConstraint )
                    {
                    // InternalOpenCypherParser.g:3808:2: ( ruleCreateRelationshipPropertyExistenceConstraint )
                    // InternalOpenCypherParser.g:3809:3: ruleCreateRelationshipPropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCreateRelationshipPropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:3814:2: ( ruleDropRelationshipPropertyExistenceConstraint )
                    {
                    // InternalOpenCypherParser.g:3814:2: ( ruleDropRelationshipPropertyExistenceConstraint )
                    // InternalOpenCypherParser.g:3815:3: ruleDropRelationshipPropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getDropRelationshipPropertyExistenceConstraintParserRuleCall_7()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleDropRelationshipPropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getDropRelationshipPropertyExistenceConstraintParserRuleCall_7()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Command__Alternatives"


    // $ANTLR start "rule__MergeAction__ActionAlternatives_1_0"
    // InternalOpenCypherParser.g:3824:1: rule__MergeAction__ActionAlternatives_1_0 : ( ( MATCH ) | ( CREATE ) );
    public final void rule__MergeAction__ActionAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3828:1: ( ( MATCH ) | ( CREATE ) )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==MATCH) ) {
                alt10=1;
            }
            else if ( (LA10_0==CREATE) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // InternalOpenCypherParser.g:3829:2: ( MATCH )
                    {
                    // InternalOpenCypherParser.g:3829:2: ( MATCH )
                    // InternalOpenCypherParser.g:3830:3: MATCH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getMergeActionAccess().getActionMATCHKeyword_1_0_0()); 
                    }
                    match(input,MATCH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getMergeActionAccess().getActionMATCHKeyword_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3835:2: ( CREATE )
                    {
                    // InternalOpenCypherParser.g:3835:2: ( CREATE )
                    // InternalOpenCypherParser.g:3836:3: CREATE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getMergeActionAccess().getActionCREATEKeyword_1_0_1()); 
                    }
                    match(input,CREATE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getMergeActionAccess().getActionCREATEKeyword_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__ActionAlternatives_1_0"


    // $ANTLR start "rule__SetItem__Alternatives"
    // InternalOpenCypherParser.g:3845:1: rule__SetItem__Alternatives : ( ( ( rule__SetItem__Group_0__0 ) ) | ( ( rule__SetItem__Group_1__0 ) ) | ( ( rule__SetItem__Group_2__0 ) ) | ( ( rule__SetItem__Group_3__0 ) ) );
    public final void rule__SetItem__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3849:1: ( ( ( rule__SetItem__Group_0__0 ) ) | ( ( rule__SetItem__Group_1__0 ) ) | ( ( rule__SetItem__Group_2__0 ) ) | ( ( rule__SetItem__Group_3__0 ) ) )
            int alt11=4;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    // InternalOpenCypherParser.g:3850:2: ( ( rule__SetItem__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3850:2: ( ( rule__SetItem__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3851:3: ( rule__SetItem__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSetItemAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3852:3: ( rule__SetItem__Group_0__0 )
                    // InternalOpenCypherParser.g:3852:4: rule__SetItem__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SetItem__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSetItemAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3856:2: ( ( rule__SetItem__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:3856:2: ( ( rule__SetItem__Group_1__0 ) )
                    // InternalOpenCypherParser.g:3857:3: ( rule__SetItem__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSetItemAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:3858:3: ( rule__SetItem__Group_1__0 )
                    // InternalOpenCypherParser.g:3858:4: rule__SetItem__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SetItem__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSetItemAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3862:2: ( ( rule__SetItem__Group_2__0 ) )
                    {
                    // InternalOpenCypherParser.g:3862:2: ( ( rule__SetItem__Group_2__0 ) )
                    // InternalOpenCypherParser.g:3863:3: ( rule__SetItem__Group_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSetItemAccess().getGroup_2()); 
                    }
                    // InternalOpenCypherParser.g:3864:3: ( rule__SetItem__Group_2__0 )
                    // InternalOpenCypherParser.g:3864:4: rule__SetItem__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SetItem__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSetItemAccess().getGroup_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:3868:2: ( ( rule__SetItem__Group_3__0 ) )
                    {
                    // InternalOpenCypherParser.g:3868:2: ( ( rule__SetItem__Group_3__0 ) )
                    // InternalOpenCypherParser.g:3869:3: ( rule__SetItem__Group_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSetItemAccess().getGroup_3()); 
                    }
                    // InternalOpenCypherParser.g:3870:3: ( rule__SetItem__Group_3__0 )
                    // InternalOpenCypherParser.g:3870:4: rule__SetItem__Group_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SetItem__Group_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSetItemAccess().getGroup_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Alternatives"


    // $ANTLR start "rule__RemoveItem__Alternatives"
    // InternalOpenCypherParser.g:3878:1: rule__RemoveItem__Alternatives : ( ( ( rule__RemoveItem__Group_0__0 ) ) | ( ( rule__RemoveItem__Group_1__0 ) ) );
    public final void rule__RemoveItem__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3882:1: ( ( ( rule__RemoveItem__Group_0__0 ) ) | ( ( rule__RemoveItem__Group_1__0 ) ) )
            int alt12=2;
            alt12 = dfa12.predict(input);
            switch (alt12) {
                case 1 :
                    // InternalOpenCypherParser.g:3883:2: ( ( rule__RemoveItem__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3883:2: ( ( rule__RemoveItem__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3884:3: ( rule__RemoveItem__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRemoveItemAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3885:3: ( rule__RemoveItem__Group_0__0 )
                    // InternalOpenCypherParser.g:3885:4: rule__RemoveItem__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RemoveItem__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRemoveItemAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3889:2: ( ( rule__RemoveItem__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:3889:2: ( ( rule__RemoveItem__Group_1__0 ) )
                    // InternalOpenCypherParser.g:3890:3: ( rule__RemoveItem__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRemoveItemAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:3891:3: ( rule__RemoveItem__Group_1__0 )
                    // InternalOpenCypherParser.g:3891:4: rule__RemoveItem__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RemoveItem__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRemoveItemAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Alternatives"


    // $ANTLR start "rule__StandaloneCall__InvocationAlternatives_1_0"
    // InternalOpenCypherParser.g:3899:1: rule__StandaloneCall__InvocationAlternatives_1_0 : ( ( ruleExplicitProcedureInvocation ) | ( ruleImplicitProcedureInvocation ) );
    public final void rule__StandaloneCall__InvocationAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3903:1: ( ( ruleExplicitProcedureInvocation ) | ( ruleImplicitProcedureInvocation ) )
            int alt13=2;
            alt13 = dfa13.predict(input);
            switch (alt13) {
                case 1 :
                    // InternalOpenCypherParser.g:3904:2: ( ruleExplicitProcedureInvocation )
                    {
                    // InternalOpenCypherParser.g:3904:2: ( ruleExplicitProcedureInvocation )
                    // InternalOpenCypherParser.g:3905:3: ruleExplicitProcedureInvocation
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStandaloneCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleExplicitProcedureInvocation();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStandaloneCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3910:2: ( ruleImplicitProcedureInvocation )
                    {
                    // InternalOpenCypherParser.g:3910:2: ( ruleImplicitProcedureInvocation )
                    // InternalOpenCypherParser.g:3911:3: ruleImplicitProcedureInvocation
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStandaloneCallAccess().getInvocationImplicitProcedureInvocationParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleImplicitProcedureInvocation();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStandaloneCallAccess().getInvocationImplicitProcedureInvocationParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__InvocationAlternatives_1_0"


    // $ANTLR start "rule__YieldItems__Alternatives_1"
    // InternalOpenCypherParser.g:3920:1: rule__YieldItems__Alternatives_1 : ( ( ( rule__YieldItems__Group_1_0__0 ) ) | ( HyphenMinus ) );
    public final void rule__YieldItems__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3924:1: ( ( ( rule__YieldItems__Group_1_0__0 ) ) | ( HyphenMinus ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( ((LA14_0>=ALLSHORTESTPATHS && LA14_0<=WHERE)||(LA14_0>=CASE && LA14_0<=XOR)||(LA14_0>=AS && LA14_0<=OR)||LA14_0==RULE_ID) ) {
                alt14=1;
            }
            else if ( (LA14_0==HyphenMinus) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // InternalOpenCypherParser.g:3925:2: ( ( rule__YieldItems__Group_1_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3925:2: ( ( rule__YieldItems__Group_1_0__0 ) )
                    // InternalOpenCypherParser.g:3926:3: ( rule__YieldItems__Group_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getYieldItemsAccess().getGroup_1_0()); 
                    }
                    // InternalOpenCypherParser.g:3927:3: ( rule__YieldItems__Group_1_0__0 )
                    // InternalOpenCypherParser.g:3927:4: rule__YieldItems__Group_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__YieldItems__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getYieldItemsAccess().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3931:2: ( HyphenMinus )
                    {
                    // InternalOpenCypherParser.g:3931:2: ( HyphenMinus )
                    // InternalOpenCypherParser.g:3932:3: HyphenMinus
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getYieldItemsAccess().getHyphenMinusKeyword_1_1()); 
                    }
                    match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getYieldItemsAccess().getHyphenMinusKeyword_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Alternatives_1"


    // $ANTLR start "rule__ReturnItems__Alternatives"
    // InternalOpenCypherParser.g:3941:1: rule__ReturnItems__Alternatives : ( ( ( rule__ReturnItems__Group_0__0 ) ) | ( ( rule__ReturnItems__Group_1__0 ) ) );
    public final void rule__ReturnItems__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3945:1: ( ( ( rule__ReturnItems__Group_0__0 ) ) | ( ( rule__ReturnItems__Group_1__0 ) ) )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==Asterisk) ) {
                alt15=1;
            }
            else if ( ((LA15_0>=ALLSHORTESTPATHS && LA15_0<=WHERE)||(LA15_0>=CASE && LA15_0<=XOR)||(LA15_0>=AS && LA15_0<=OR)||LA15_0==DollarSign||LA15_0==LeftParenthesis||LA15_0==PlusSign||LA15_0==HyphenMinus||LA15_0==LeftSquareBracket||LA15_0==LeftCurlyBracket||LA15_0==RULE_ID||(LA15_0>=RULE_STRING_LITERAL && LA15_0<=RULE_DECIMAL)) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // InternalOpenCypherParser.g:3946:2: ( ( rule__ReturnItems__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3946:2: ( ( rule__ReturnItems__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3947:3: ( rule__ReturnItems__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getReturnItemsAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3948:3: ( rule__ReturnItems__Group_0__0 )
                    // InternalOpenCypherParser.g:3948:4: rule__ReturnItems__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnItems__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getReturnItemsAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3952:2: ( ( rule__ReturnItems__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:3952:2: ( ( rule__ReturnItems__Group_1__0 ) )
                    // InternalOpenCypherParser.g:3953:3: ( rule__ReturnItems__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getReturnItemsAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:3954:3: ( rule__ReturnItems__Group_1__0 )
                    // InternalOpenCypherParser.g:3954:4: rule__ReturnItems__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnItems__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getReturnItemsAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Alternatives"


    // $ANTLR start "rule__SortItem__SortAlternatives_1_0"
    // InternalOpenCypherParser.g:3962:1: rule__SortItem__SortAlternatives_1_0 : ( ( DESCENDING ) | ( DESC ) | ( ASCENDING ) | ( ASC ) );
    public final void rule__SortItem__SortAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3966:1: ( ( DESCENDING ) | ( DESC ) | ( ASCENDING ) | ( ASC ) )
            int alt16=4;
            switch ( input.LA(1) ) {
            case DESCENDING:
                {
                alt16=1;
                }
                break;
            case DESC:
                {
                alt16=2;
                }
                break;
            case ASCENDING:
                {
                alt16=3;
                }
                break;
            case ASC:
                {
                alt16=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // InternalOpenCypherParser.g:3967:2: ( DESCENDING )
                    {
                    // InternalOpenCypherParser.g:3967:2: ( DESCENDING )
                    // InternalOpenCypherParser.g:3968:3: DESCENDING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSortItemAccess().getSortDESCENDINGKeyword_1_0_0()); 
                    }
                    match(input,DESCENDING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSortItemAccess().getSortDESCENDINGKeyword_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3973:2: ( DESC )
                    {
                    // InternalOpenCypherParser.g:3973:2: ( DESC )
                    // InternalOpenCypherParser.g:3974:3: DESC
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSortItemAccess().getSortDESCKeyword_1_0_1()); 
                    }
                    match(input,DESC,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSortItemAccess().getSortDESCKeyword_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3979:2: ( ASCENDING )
                    {
                    // InternalOpenCypherParser.g:3979:2: ( ASCENDING )
                    // InternalOpenCypherParser.g:3980:3: ASCENDING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSortItemAccess().getSortASCENDINGKeyword_1_0_2()); 
                    }
                    match(input,ASCENDING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSortItemAccess().getSortASCENDINGKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:3985:2: ( ASC )
                    {
                    // InternalOpenCypherParser.g:3985:2: ( ASC )
                    // InternalOpenCypherParser.g:3986:3: ASC
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSortItemAccess().getSortASCKeyword_1_0_3()); 
                    }
                    match(input,ASC,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSortItemAccess().getSortASCKeyword_1_0_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__SortAlternatives_1_0"


    // $ANTLR start "rule__Hint__Alternatives"
    // InternalOpenCypherParser.g:3995:1: rule__Hint__Alternatives : ( ( ( rule__Hint__Group_0__0 ) ) | ( ( rule__Hint__Group_1__0 ) ) | ( ( rule__Hint__Group_2__0 ) ) );
    public final void rule__Hint__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3999:1: ( ( ( rule__Hint__Group_0__0 ) ) | ( ( rule__Hint__Group_1__0 ) ) | ( ( rule__Hint__Group_2__0 ) ) )
            int alt17=3;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==USING) ) {
                int LA17_1 = input.LA(2);

                if ( (LA17_1==RULE_WS) ) {
                    switch ( input.LA(3) ) {
                    case JOIN:
                        {
                        alt17=2;
                        }
                        break;
                    case SCAN:
                        {
                        alt17=3;
                        }
                        break;
                    case INDEX:
                        {
                        alt17=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 17, 2, input);

                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // InternalOpenCypherParser.g:4000:2: ( ( rule__Hint__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4000:2: ( ( rule__Hint__Group_0__0 ) )
                    // InternalOpenCypherParser.g:4001:3: ( rule__Hint__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHintAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:4002:3: ( rule__Hint__Group_0__0 )
                    // InternalOpenCypherParser.g:4002:4: rule__Hint__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Hint__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHintAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4006:2: ( ( rule__Hint__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4006:2: ( ( rule__Hint__Group_1__0 ) )
                    // InternalOpenCypherParser.g:4007:3: ( rule__Hint__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHintAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:4008:3: ( rule__Hint__Group_1__0 )
                    // InternalOpenCypherParser.g:4008:4: rule__Hint__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Hint__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHintAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4012:2: ( ( rule__Hint__Group_2__0 ) )
                    {
                    // InternalOpenCypherParser.g:4012:2: ( ( rule__Hint__Group_2__0 ) )
                    // InternalOpenCypherParser.g:4013:3: ( rule__Hint__Group_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHintAccess().getGroup_2()); 
                    }
                    // InternalOpenCypherParser.g:4014:3: ( rule__Hint__Group_2__0 )
                    // InternalOpenCypherParser.g:4014:4: rule__Hint__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Hint__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHintAccess().getGroup_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Alternatives"


    // $ANTLR start "rule__Lookup__Alternatives"
    // InternalOpenCypherParser.g:4022:1: rule__Lookup__Alternatives : ( ( ruleNodeLookup ) | ( ruleRelationshipLookup ) );
    public final void rule__Lookup__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4026:1: ( ( ruleNodeLookup ) | ( ruleRelationshipLookup ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==NODE) ) {
                alt18=1;
            }
            else if ( (LA18_0==RELATIONSHIP||LA18_0==REL) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // InternalOpenCypherParser.g:4027:2: ( ruleNodeLookup )
                    {
                    // InternalOpenCypherParser.g:4027:2: ( ruleNodeLookup )
                    // InternalOpenCypherParser.g:4028:3: ruleNodeLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLookupAccess().getNodeLookupParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleNodeLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLookupAccess().getNodeLookupParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4033:2: ( ruleRelationshipLookup )
                    {
                    // InternalOpenCypherParser.g:4033:2: ( ruleRelationshipLookup )
                    // InternalOpenCypherParser.g:4034:3: ruleRelationshipLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLookupAccess().getRelationshipLookupParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRelationshipLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLookupAccess().getRelationshipLookupParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Lookup__Alternatives"


    // $ANTLR start "rule__NodeLookup__Alternatives_1"
    // InternalOpenCypherParser.g:4043:1: rule__NodeLookup__Alternatives_1 : ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) );
    public final void rule__NodeLookup__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4047:1: ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) )
            int alt19=3;
            alt19 = dfa19.predict(input);
            switch (alt19) {
                case 1 :
                    // InternalOpenCypherParser.g:4048:2: ( ruleIdentifiedIndexLookup )
                    {
                    // InternalOpenCypherParser.g:4048:2: ( ruleIdentifiedIndexLookup )
                    // InternalOpenCypherParser.g:4049:3: ruleIdentifiedIndexLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNodeLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIdentifiedIndexLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNodeLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4054:2: ( ruleIndexQuery )
                    {
                    // InternalOpenCypherParser.g:4054:2: ( ruleIndexQuery )
                    // InternalOpenCypherParser.g:4055:3: ruleIndexQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNodeLookupAccess().getIndexQueryParserRuleCall_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIndexQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNodeLookupAccess().getIndexQueryParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4060:2: ( ruleIdLookup )
                    {
                    // InternalOpenCypherParser.g:4060:2: ( ruleIdLookup )
                    // InternalOpenCypherParser.g:4061:3: ruleIdLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNodeLookupAccess().getIdLookupParserRuleCall_1_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIdLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNodeLookupAccess().getIdLookupParserRuleCall_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLookup__Alternatives_1"


    // $ANTLR start "rule__RelationshipLookup__Alternatives_0"
    // InternalOpenCypherParser.g:4070:1: rule__RelationshipLookup__Alternatives_0 : ( ( RELATIONSHIP ) | ( REL ) );
    public final void rule__RelationshipLookup__Alternatives_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4074:1: ( ( RELATIONSHIP ) | ( REL ) )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==RELATIONSHIP) ) {
                alt20=1;
            }
            else if ( (LA20_0==REL) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // InternalOpenCypherParser.g:4075:2: ( RELATIONSHIP )
                    {
                    // InternalOpenCypherParser.g:4075:2: ( RELATIONSHIP )
                    // InternalOpenCypherParser.g:4076:3: RELATIONSHIP
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRelationshipLookupAccess().getRELATIONSHIPKeyword_0_0()); 
                    }
                    match(input,RELATIONSHIP,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRelationshipLookupAccess().getRELATIONSHIPKeyword_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4081:2: ( REL )
                    {
                    // InternalOpenCypherParser.g:4081:2: ( REL )
                    // InternalOpenCypherParser.g:4082:3: REL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRelationshipLookupAccess().getRELKeyword_0_1()); 
                    }
                    match(input,REL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRelationshipLookupAccess().getRELKeyword_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Alternatives_0"


    // $ANTLR start "rule__RelationshipLookup__Alternatives_1"
    // InternalOpenCypherParser.g:4091:1: rule__RelationshipLookup__Alternatives_1 : ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) );
    public final void rule__RelationshipLookup__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4095:1: ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) )
            int alt21=3;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // InternalOpenCypherParser.g:4096:2: ( ruleIdentifiedIndexLookup )
                    {
                    // InternalOpenCypherParser.g:4096:2: ( ruleIdentifiedIndexLookup )
                    // InternalOpenCypherParser.g:4097:3: ruleIdentifiedIndexLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRelationshipLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIdentifiedIndexLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRelationshipLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4102:2: ( ruleIndexQuery )
                    {
                    // InternalOpenCypherParser.g:4102:2: ( ruleIndexQuery )
                    // InternalOpenCypherParser.g:4103:3: ruleIndexQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRelationshipLookupAccess().getIndexQueryParserRuleCall_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIndexQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRelationshipLookupAccess().getIndexQueryParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4108:2: ( ruleIdLookup )
                    {
                    // InternalOpenCypherParser.g:4108:2: ( ruleIdLookup )
                    // InternalOpenCypherParser.g:4109:3: ruleIdLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRelationshipLookupAccess().getIdLookupParserRuleCall_1_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIdLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRelationshipLookupAccess().getIdLookupParserRuleCall_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Alternatives_1"


    // $ANTLR start "rule__IdentifiedIndexLookup__Alternatives_5"
    // InternalOpenCypherParser.g:4118:1: rule__IdentifiedIndexLookup__Alternatives_5 : ( ( ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 ) ) | ( ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 ) ) );
    public final void rule__IdentifiedIndexLookup__Alternatives_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4122:1: ( ( ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 ) ) | ( ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 ) ) )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==RULE_STRING_LITERAL) ) {
                alt22=1;
            }
            else if ( (LA22_0==LeftCurlyBracket) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;
            }
            switch (alt22) {
                case 1 :
                    // InternalOpenCypherParser.g:4123:2: ( ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 ) )
                    {
                    // InternalOpenCypherParser.g:4123:2: ( ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 ) )
                    // InternalOpenCypherParser.g:4124:3: ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIdentifiedIndexLookupAccess().getValueAssignment_5_0()); 
                    }
                    // InternalOpenCypherParser.g:4125:3: ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 )
                    // InternalOpenCypherParser.g:4125:4: rule__IdentifiedIndexLookup__ValueAssignment_5_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__IdentifiedIndexLookup__ValueAssignment_5_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIdentifiedIndexLookupAccess().getValueAssignment_5_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4129:2: ( ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 ) )
                    {
                    // InternalOpenCypherParser.g:4129:2: ( ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 ) )
                    // InternalOpenCypherParser.g:4130:3: ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterAssignment_5_1()); 
                    }
                    // InternalOpenCypherParser.g:4131:3: ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 )
                    // InternalOpenCypherParser.g:4131:4: rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterAssignment_5_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Alternatives_5"


    // $ANTLR start "rule__IndexQuery__Alternatives_3"
    // InternalOpenCypherParser.g:4139:1: rule__IndexQuery__Alternatives_3 : ( ( ( rule__IndexQuery__QueryAssignment_3_0 ) ) | ( ( rule__IndexQuery__ParameterAssignment_3_1 ) ) );
    public final void rule__IndexQuery__Alternatives_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4143:1: ( ( ( rule__IndexQuery__QueryAssignment_3_0 ) ) | ( ( rule__IndexQuery__ParameterAssignment_3_1 ) ) )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==RULE_STRING_LITERAL) ) {
                alt23=1;
            }
            else if ( (LA23_0==DollarSign) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // InternalOpenCypherParser.g:4144:2: ( ( rule__IndexQuery__QueryAssignment_3_0 ) )
                    {
                    // InternalOpenCypherParser.g:4144:2: ( ( rule__IndexQuery__QueryAssignment_3_0 ) )
                    // InternalOpenCypherParser.g:4145:3: ( rule__IndexQuery__QueryAssignment_3_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIndexQueryAccess().getQueryAssignment_3_0()); 
                    }
                    // InternalOpenCypherParser.g:4146:3: ( rule__IndexQuery__QueryAssignment_3_0 )
                    // InternalOpenCypherParser.g:4146:4: rule__IndexQuery__QueryAssignment_3_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__IndexQuery__QueryAssignment_3_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIndexQueryAccess().getQueryAssignment_3_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4150:2: ( ( rule__IndexQuery__ParameterAssignment_3_1 ) )
                    {
                    // InternalOpenCypherParser.g:4150:2: ( ( rule__IndexQuery__ParameterAssignment_3_1 ) )
                    // InternalOpenCypherParser.g:4151:3: ( rule__IndexQuery__ParameterAssignment_3_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIndexQueryAccess().getParameterAssignment_3_1()); 
                    }
                    // InternalOpenCypherParser.g:4152:3: ( rule__IndexQuery__ParameterAssignment_3_1 )
                    // InternalOpenCypherParser.g:4152:4: rule__IndexQuery__ParameterAssignment_3_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__IndexQuery__ParameterAssignment_3_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIndexQueryAccess().getParameterAssignment_3_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Alternatives_3"


    // $ANTLR start "rule__IdLookup__Alternatives_1"
    // InternalOpenCypherParser.g:4160:1: rule__IdLookup__Alternatives_1 : ( ( ( rule__IdLookup__IdsAssignment_1_0 ) ) | ( ( rule__IdLookup__LegacyParameterAssignment_1_1 ) ) | ( ( rule__IdLookup__WildcardAssignment_1_2 ) ) );
    public final void rule__IdLookup__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4164:1: ( ( ( rule__IdLookup__IdsAssignment_1_0 ) ) | ( ( rule__IdLookup__LegacyParameterAssignment_1_1 ) ) | ( ( rule__IdLookup__WildcardAssignment_1_2 ) ) )
            int alt24=3;
            switch ( input.LA(1) ) {
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
                {
                alt24=1;
                }
                break;
            case DollarSign:
                {
                alt24=2;
                }
                break;
            case Asterisk:
                {
                alt24=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // InternalOpenCypherParser.g:4165:2: ( ( rule__IdLookup__IdsAssignment_1_0 ) )
                    {
                    // InternalOpenCypherParser.g:4165:2: ( ( rule__IdLookup__IdsAssignment_1_0 ) )
                    // InternalOpenCypherParser.g:4166:3: ( rule__IdLookup__IdsAssignment_1_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIdLookupAccess().getIdsAssignment_1_0()); 
                    }
                    // InternalOpenCypherParser.g:4167:3: ( rule__IdLookup__IdsAssignment_1_0 )
                    // InternalOpenCypherParser.g:4167:4: rule__IdLookup__IdsAssignment_1_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__IdLookup__IdsAssignment_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIdLookupAccess().getIdsAssignment_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4171:2: ( ( rule__IdLookup__LegacyParameterAssignment_1_1 ) )
                    {
                    // InternalOpenCypherParser.g:4171:2: ( ( rule__IdLookup__LegacyParameterAssignment_1_1 ) )
                    // InternalOpenCypherParser.g:4172:3: ( rule__IdLookup__LegacyParameterAssignment_1_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIdLookupAccess().getLegacyParameterAssignment_1_1()); 
                    }
                    // InternalOpenCypherParser.g:4173:3: ( rule__IdLookup__LegacyParameterAssignment_1_1 )
                    // InternalOpenCypherParser.g:4173:4: rule__IdLookup__LegacyParameterAssignment_1_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__IdLookup__LegacyParameterAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIdLookupAccess().getLegacyParameterAssignment_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4177:2: ( ( rule__IdLookup__WildcardAssignment_1_2 ) )
                    {
                    // InternalOpenCypherParser.g:4177:2: ( ( rule__IdLookup__WildcardAssignment_1_2 ) )
                    // InternalOpenCypherParser.g:4178:3: ( rule__IdLookup__WildcardAssignment_1_2 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIdLookupAccess().getWildcardAssignment_1_2()); 
                    }
                    // InternalOpenCypherParser.g:4179:3: ( rule__IdLookup__WildcardAssignment_1_2 )
                    // InternalOpenCypherParser.g:4179:4: rule__IdLookup__WildcardAssignment_1_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__IdLookup__WildcardAssignment_1_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIdLookupAccess().getWildcardAssignment_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Alternatives_1"


    // $ANTLR start "rule__PatternPart__Alternatives"
    // InternalOpenCypherParser.g:4187:1: rule__PatternPart__Alternatives : ( ( ( rule__PatternPart__Group_0__0 ) ) | ( ruleAnonymousPatternPart ) );
    public final void rule__PatternPart__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4191:1: ( ( ( rule__PatternPart__Group_0__0 ) ) | ( ruleAnonymousPatternPart ) )
            int alt25=2;
            switch ( input.LA(1) ) {
            case FIELDTERMINATOR:
            case RELATIONSHIP:
            case CONSTRAINT:
            case DESCENDING:
            case ASCENDING:
            case CONTAINS:
            case DISTINCT:
            case OPTIONAL:
            case PERIODIC:
            case EXPLAIN:
            case EXTRACT:
            case FOREACH:
            case HEADERS:
            case PROFILE:
            case ASSERT:
            case COMMIT:
            case CREATE:
            case CYPHER:
            case DELETE:
            case DETACH:
            case EXISTS:
            case FILTER:
            case REDUCE:
            case REMOVE:
            case RETURN:
            case SINGLE:
            case STARTS:
            case UNIQUE:
            case UNWIND:
            case COUNT:
            case FALSE:
            case INDEX:
            case LIMIT:
            case MATCH:
            case MERGE:
            case ORDER:
            case START:
            case UNION:
            case USING:
            case WHERE:
            case CASE:
            case DESC:
            case DROP:
            case ELSE:
            case ENDS:
            case FROM:
            case JOIN:
            case LOAD:
            case NODE:
            case NONE:
            case NULL:
            case SCAN:
            case SKIP:
            case THEN:
            case TRUE:
            case WHEN:
            case WITH:
            case ALL:
            case AND:
            case ANY:
            case ASC:
            case CSV:
            case END:
            case NOT:
            case REL:
            case SET:
            case XOR:
            case AS:
            case BY:
            case IN:
            case IS:
            case ON:
            case OR:
            case RULE_ID:
                {
                alt25=1;
                }
                break;
            case SHORTESTPATH:
                {
                int LA25_2 = input.LA(2);

                if ( (LA25_2==LeftParenthesis) ) {
                    alt25=2;
                }
                else if ( (LA25_2==EqualsSign) ) {
                    alt25=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 25, 2, input);

                    throw nvae;
                }
                }
                break;
            case ALLSHORTESTPATHS:
                {
                int LA25_3 = input.LA(2);

                if ( (LA25_3==EqualsSign) ) {
                    alt25=1;
                }
                else if ( (LA25_3==LeftParenthesis) ) {
                    alt25=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 25, 3, input);

                    throw nvae;
                }
                }
                break;
            case LeftParenthesis:
                {
                alt25=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }

            switch (alt25) {
                case 1 :
                    // InternalOpenCypherParser.g:4192:2: ( ( rule__PatternPart__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4192:2: ( ( rule__PatternPart__Group_0__0 ) )
                    // InternalOpenCypherParser.g:4193:3: ( rule__PatternPart__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPatternPartAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:4194:3: ( rule__PatternPart__Group_0__0 )
                    // InternalOpenCypherParser.g:4194:4: rule__PatternPart__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PatternPart__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPatternPartAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4198:2: ( ruleAnonymousPatternPart )
                    {
                    // InternalOpenCypherParser.g:4198:2: ( ruleAnonymousPatternPart )
                    // InternalOpenCypherParser.g:4199:3: ruleAnonymousPatternPart
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPatternPartAccess().getAnonymousPatternPartParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleAnonymousPatternPart();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPatternPartAccess().getAnonymousPatternPartParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Alternatives"


    // $ANTLR start "rule__AnonymousPatternPart__Alternatives"
    // InternalOpenCypherParser.g:4208:1: rule__AnonymousPatternPart__Alternatives : ( ( ruleShortestPathPattern ) | ( rulePatternElement ) );
    public final void rule__AnonymousPatternPart__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4212:1: ( ( ruleShortestPathPattern ) | ( rulePatternElement ) )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==ALLSHORTESTPATHS||LA26_0==SHORTESTPATH) ) {
                alt26=1;
            }
            else if ( (LA26_0==LeftParenthesis) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // InternalOpenCypherParser.g:4213:2: ( ruleShortestPathPattern )
                    {
                    // InternalOpenCypherParser.g:4213:2: ( ruleShortestPathPattern )
                    // InternalOpenCypherParser.g:4214:3: ruleShortestPathPattern
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAnonymousPatternPartAccess().getShortestPathPatternParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleShortestPathPattern();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAnonymousPatternPartAccess().getShortestPathPatternParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4219:2: ( rulePatternElement )
                    {
                    // InternalOpenCypherParser.g:4219:2: ( rulePatternElement )
                    // InternalOpenCypherParser.g:4220:3: rulePatternElement
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAnonymousPatternPartAccess().getPatternElementParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    rulePatternElement();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAnonymousPatternPartAccess().getPatternElementParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AnonymousPatternPart__Alternatives"


    // $ANTLR start "rule__ShortestPathPattern__Alternatives"
    // InternalOpenCypherParser.g:4229:1: rule__ShortestPathPattern__Alternatives : ( ( ( rule__ShortestPathPattern__Group_0__0 ) ) | ( ( rule__ShortestPathPattern__Group_1__0 ) ) );
    public final void rule__ShortestPathPattern__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4233:1: ( ( ( rule__ShortestPathPattern__Group_0__0 ) ) | ( ( rule__ShortestPathPattern__Group_1__0 ) ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==SHORTESTPATH) ) {
                alt27=1;
            }
            else if ( (LA27_0==ALLSHORTESTPATHS) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // InternalOpenCypherParser.g:4234:2: ( ( rule__ShortestPathPattern__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4234:2: ( ( rule__ShortestPathPattern__Group_0__0 ) )
                    // InternalOpenCypherParser.g:4235:3: ( rule__ShortestPathPattern__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getShortestPathPatternAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:4236:3: ( rule__ShortestPathPattern__Group_0__0 )
                    // InternalOpenCypherParser.g:4236:4: rule__ShortestPathPattern__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ShortestPathPattern__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getShortestPathPatternAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4240:2: ( ( rule__ShortestPathPattern__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4240:2: ( ( rule__ShortestPathPattern__Group_1__0 ) )
                    // InternalOpenCypherParser.g:4241:3: ( rule__ShortestPathPattern__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getShortestPathPatternAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:4242:3: ( rule__ShortestPathPattern__Group_1__0 )
                    // InternalOpenCypherParser.g:4242:4: rule__ShortestPathPattern__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ShortestPathPattern__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getShortestPathPatternAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Alternatives"


    // $ANTLR start "rule__PatternElement__Alternatives"
    // InternalOpenCypherParser.g:4250:1: rule__PatternElement__Alternatives : ( ( ( rule__PatternElement__Group_0__0 ) ) | ( ( rule__PatternElement__Group_1__0 ) ) );
    public final void rule__PatternElement__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4254:1: ( ( ( rule__PatternElement__Group_0__0 ) ) | ( ( rule__PatternElement__Group_1__0 ) ) )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==LeftParenthesis) ) {
                int LA28_1 = input.LA(2);

                if ( (LA28_1==LeftParenthesis) ) {
                    alt28=2;
                }
                else if ( ((LA28_1>=ALLSHORTESTPATHS && LA28_1<=WHERE)||(LA28_1>=CASE && LA28_1<=XOR)||(LA28_1>=AS && LA28_1<=OR)||LA28_1==DollarSign||LA28_1==RightParenthesis||LA28_1==Colon||LA28_1==LeftCurlyBracket||LA28_1==RULE_ID) ) {
                    alt28=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 28, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // InternalOpenCypherParser.g:4255:2: ( ( rule__PatternElement__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4255:2: ( ( rule__PatternElement__Group_0__0 ) )
                    // InternalOpenCypherParser.g:4256:3: ( rule__PatternElement__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPatternElementAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:4257:3: ( rule__PatternElement__Group_0__0 )
                    // InternalOpenCypherParser.g:4257:4: rule__PatternElement__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PatternElement__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPatternElementAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4261:2: ( ( rule__PatternElement__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4261:2: ( ( rule__PatternElement__Group_1__0 ) )
                    // InternalOpenCypherParser.g:4262:3: ( rule__PatternElement__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPatternElementAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:4263:3: ( rule__PatternElement__Group_1__0 )
                    // InternalOpenCypherParser.g:4263:4: rule__PatternElement__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PatternElement__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPatternElementAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Alternatives"


    // $ANTLR start "rule__Properties__Alternatives"
    // InternalOpenCypherParser.g:4271:1: rule__Properties__Alternatives : ( ( ruleMapLiteral ) | ( ruleParameter ) | ( ruleLegacyParameter ) );
    public final void rule__Properties__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4275:1: ( ( ruleMapLiteral ) | ( ruleParameter ) | ( ruleLegacyParameter ) )
            int alt29=3;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // InternalOpenCypherParser.g:4276:2: ( ruleMapLiteral )
                    {
                    // InternalOpenCypherParser.g:4276:2: ( ruleMapLiteral )
                    // InternalOpenCypherParser.g:4277:3: ruleMapLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertiesAccess().getMapLiteralParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleMapLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertiesAccess().getMapLiteralParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4282:2: ( ruleParameter )
                    {
                    // InternalOpenCypherParser.g:4282:2: ( ruleParameter )
                    // InternalOpenCypherParser.g:4283:3: ruleParameter
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertiesAccess().getParameterParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleParameter();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertiesAccess().getParameterParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4288:2: ( ruleLegacyParameter )
                    {
                    // InternalOpenCypherParser.g:4288:2: ( ruleLegacyParameter )
                    // InternalOpenCypherParser.g:4289:3: ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertiesAccess().getLegacyParameterParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertiesAccess().getLegacyParameterParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Properties__Alternatives"


    // $ANTLR start "rule__NotExpression__Alternatives"
    // InternalOpenCypherParser.g:4298:1: rule__NotExpression__Alternatives : ( ( ( rule__NotExpression__Group_0__0 ) ) | ( ruleComparisonExpression ) );
    public final void rule__NotExpression__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4302:1: ( ( ( rule__NotExpression__Group_0__0 ) ) | ( ruleComparisonExpression ) )
            int alt30=2;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // InternalOpenCypherParser.g:4303:2: ( ( rule__NotExpression__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4303:2: ( ( rule__NotExpression__Group_0__0 ) )
                    // InternalOpenCypherParser.g:4304:3: ( rule__NotExpression__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNotExpressionAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:4305:3: ( rule__NotExpression__Group_0__0 )
                    // InternalOpenCypherParser.g:4305:4: rule__NotExpression__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__NotExpression__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNotExpressionAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4309:2: ( ruleComparisonExpression )
                    {
                    // InternalOpenCypherParser.g:4309:2: ( ruleComparisonExpression )
                    // InternalOpenCypherParser.g:4310:3: ruleComparisonExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNotExpressionAccess().getComparisonExpressionParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleComparisonExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNotExpressionAccess().getComparisonExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NotExpression__Alternatives"


    // $ANTLR start "rule__ComparisonExpression__OperatorAlternatives_1_1_0"
    // InternalOpenCypherParser.g:4319:1: rule__ComparisonExpression__OperatorAlternatives_1_1_0 : ( ( EqualsSign ) | ( LessThanSignGreaterThanSign ) | ( LessThanSign ) | ( GreaterThanSign ) | ( LessThanSignEqualsSign ) | ( GreaterThanSignEqualsSign ) );
    public final void rule__ComparisonExpression__OperatorAlternatives_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4323:1: ( ( EqualsSign ) | ( LessThanSignGreaterThanSign ) | ( LessThanSign ) | ( GreaterThanSign ) | ( LessThanSignEqualsSign ) | ( GreaterThanSignEqualsSign ) )
            int alt31=6;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt31=1;
                }
                break;
            case LessThanSignGreaterThanSign:
                {
                alt31=2;
                }
                break;
            case LessThanSign:
                {
                alt31=3;
                }
                break;
            case GreaterThanSign:
                {
                alt31=4;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt31=5;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt31=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // InternalOpenCypherParser.g:4324:2: ( EqualsSign )
                    {
                    // InternalOpenCypherParser.g:4324:2: ( EqualsSign )
                    // InternalOpenCypherParser.g:4325:3: EqualsSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignKeyword_1_1_0_0()); 
                    }
                    match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignKeyword_1_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4330:2: ( LessThanSignGreaterThanSign )
                    {
                    // InternalOpenCypherParser.g:4330:2: ( LessThanSignGreaterThanSign )
                    // InternalOpenCypherParser.g:4331:3: LessThanSignGreaterThanSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1()); 
                    }
                    match(input,LessThanSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4336:2: ( LessThanSign )
                    {
                    // InternalOpenCypherParser.g:4336:2: ( LessThanSign )
                    // InternalOpenCypherParser.g:4337:3: LessThanSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_2()); 
                    }
                    match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:4342:2: ( GreaterThanSign )
                    {
                    // InternalOpenCypherParser.g:4342:2: ( GreaterThanSign )
                    // InternalOpenCypherParser.g:4343:3: GreaterThanSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_3()); 
                    }
                    match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:4348:2: ( LessThanSignEqualsSign )
                    {
                    // InternalOpenCypherParser.g:4348:2: ( LessThanSignEqualsSign )
                    // InternalOpenCypherParser.g:4349:3: LessThanSignEqualsSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4()); 
                    }
                    match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:4354:2: ( GreaterThanSignEqualsSign )
                    {
                    // InternalOpenCypherParser.g:4354:2: ( GreaterThanSignEqualsSign )
                    // InternalOpenCypherParser.g:4355:3: GreaterThanSignEqualsSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5()); 
                    }
                    match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__OperatorAlternatives_1_1_0"


    // $ANTLR start "rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0"
    // InternalOpenCypherParser.g:4364:1: rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0 : ( ( PlusSign ) | ( HyphenMinus ) );
    public final void rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4368:1: ( ( PlusSign ) | ( HyphenMinus ) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==PlusSign) ) {
                alt32=1;
            }
            else if ( (LA32_0==HyphenMinus) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // InternalOpenCypherParser.g:4369:2: ( PlusSign )
                    {
                    // InternalOpenCypherParser.g:4369:2: ( PlusSign )
                    // InternalOpenCypherParser.g:4370:3: PlusSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); 
                    }
                    match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4375:2: ( HyphenMinus )
                    {
                    // InternalOpenCypherParser.g:4375:2: ( HyphenMinus )
                    // InternalOpenCypherParser.g:4376:3: HyphenMinus
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); 
                    }
                    match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0"
    // InternalOpenCypherParser.g:4385:1: rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0 : ( ( Asterisk ) | ( Solidus ) | ( PercentSign ) );
    public final void rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4389:1: ( ( Asterisk ) | ( Solidus ) | ( PercentSign ) )
            int alt33=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt33=1;
                }
                break;
            case Solidus:
                {
                alt33=2;
                }
                break;
            case PercentSign:
                {
                alt33=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }

            switch (alt33) {
                case 1 :
                    // InternalOpenCypherParser.g:4390:2: ( Asterisk )
                    {
                    // InternalOpenCypherParser.g:4390:2: ( Asterisk )
                    // InternalOpenCypherParser.g:4391:3: Asterisk
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0()); 
                    }
                    match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4396:2: ( Solidus )
                    {
                    // InternalOpenCypherParser.g:4396:2: ( Solidus )
                    // InternalOpenCypherParser.g:4397:3: Solidus
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorSolidusKeyword_1_1_0_1()); 
                    }
                    match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorSolidusKeyword_1_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4402:2: ( PercentSign )
                    {
                    // InternalOpenCypherParser.g:4402:2: ( PercentSign )
                    // InternalOpenCypherParser.g:4403:3: PercentSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2()); 
                    }
                    match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0"


    // $ANTLR start "rule__UnaryAddOrSubtractExpression__Alternatives"
    // InternalOpenCypherParser.g:4412:1: rule__UnaryAddOrSubtractExpression__Alternatives : ( ( ruleStringListNullOperatorExpression ) | ( ( rule__UnaryAddOrSubtractExpression__Group_1__0 ) ) );
    public final void rule__UnaryAddOrSubtractExpression__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4416:1: ( ( ruleStringListNullOperatorExpression ) | ( ( rule__UnaryAddOrSubtractExpression__Group_1__0 ) ) )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( ((LA34_0>=ALLSHORTESTPATHS && LA34_0<=WHERE)||(LA34_0>=CASE && LA34_0<=XOR)||(LA34_0>=AS && LA34_0<=OR)||LA34_0==DollarSign||LA34_0==LeftParenthesis||LA34_0==LeftSquareBracket||LA34_0==LeftCurlyBracket||LA34_0==RULE_ID||(LA34_0>=RULE_STRING_LITERAL && LA34_0<=RULE_DECIMAL)) ) {
                alt34=1;
            }
            else if ( (LA34_0==PlusSign||LA34_0==HyphenMinus) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // InternalOpenCypherParser.g:4417:2: ( ruleStringListNullOperatorExpression )
                    {
                    // InternalOpenCypherParser.g:4417:2: ( ruleStringListNullOperatorExpression )
                    // InternalOpenCypherParser.g:4418:3: ruleStringListNullOperatorExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getStringListNullOperatorExpressionParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleStringListNullOperatorExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getStringListNullOperatorExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4423:2: ( ( rule__UnaryAddOrSubtractExpression__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4423:2: ( ( rule__UnaryAddOrSubtractExpression__Group_1__0 ) )
                    // InternalOpenCypherParser.g:4424:3: ( rule__UnaryAddOrSubtractExpression__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:4425:3: ( rule__UnaryAddOrSubtractExpression__Group_1__0 )
                    // InternalOpenCypherParser.g:4425:4: rule__UnaryAddOrSubtractExpression__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__UnaryAddOrSubtractExpression__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryAddOrSubtractExpression__Alternatives"


    // $ANTLR start "rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0"
    // InternalOpenCypherParser.g:4433:1: rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0 : ( ( PlusSign ) | ( HyphenMinus ) );
    public final void rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4437:1: ( ( PlusSign ) | ( HyphenMinus ) )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==PlusSign) ) {
                alt35=1;
            }
            else if ( (LA35_0==HyphenMinus) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }
            switch (alt35) {
                case 1 :
                    // InternalOpenCypherParser.g:4438:2: ( PlusSign )
                    {
                    // InternalOpenCypherParser.g:4438:2: ( PlusSign )
                    // InternalOpenCypherParser.g:4439:3: PlusSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); 
                    }
                    match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4444:2: ( HyphenMinus )
                    {
                    // InternalOpenCypherParser.g:4444:2: ( HyphenMinus )
                    // InternalOpenCypherParser.g:4445:3: HyphenMinus
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); 
                    }
                    match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0"


    // $ANTLR start "rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0"
    // InternalOpenCypherParser.g:4454:1: rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0 : ( ( ruleStringOperatorExpression ) | ( ruleListOperatorExpression ) | ( ruleNullOperatorExpression ) );
    public final void rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4458:1: ( ( ruleStringOperatorExpression ) | ( ruleListOperatorExpression ) | ( ruleNullOperatorExpression ) )
            int alt36=3;
            switch ( input.LA(1) ) {
            case CONTAINS:
            case STARTS:
            case ENDS:
            case EqualsSignTilde:
            case IN:
                {
                alt36=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt36=2;
                }
                break;
            case IS:
                {
                alt36=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }

            switch (alt36) {
                case 1 :
                    // InternalOpenCypherParser.g:4459:2: ( ruleStringOperatorExpression )
                    {
                    // InternalOpenCypherParser.g:4459:2: ( ruleStringOperatorExpression )
                    // InternalOpenCypherParser.g:4460:3: ruleStringOperatorExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleStringOperatorExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsStringOperatorExpressionParserRuleCall_1_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4465:2: ( ruleListOperatorExpression )
                    {
                    // InternalOpenCypherParser.g:4465:2: ( ruleListOperatorExpression )
                    // InternalOpenCypherParser.g:4466:3: ruleListOperatorExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsListOperatorExpressionParserRuleCall_1_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleListOperatorExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsListOperatorExpressionParserRuleCall_1_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4471:2: ( ruleNullOperatorExpression )
                    {
                    // InternalOpenCypherParser.g:4471:2: ( ruleNullOperatorExpression )
                    // InternalOpenCypherParser.g:4472:3: ruleNullOperatorExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsNullOperatorExpressionParserRuleCall_1_1_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleNullOperatorExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsNullOperatorExpressionParserRuleCall_1_1_0_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0"


    // $ANTLR start "rule__ListOperatorExpression__Alternatives"
    // InternalOpenCypherParser.g:4481:1: rule__ListOperatorExpression__Alternatives : ( ( ( rule__ListOperatorExpression__Group_0__0 ) ) | ( ( rule__ListOperatorExpression__Group_1__0 ) ) );
    public final void rule__ListOperatorExpression__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4485:1: ( ( ( rule__ListOperatorExpression__Group_0__0 ) ) | ( ( rule__ListOperatorExpression__Group_1__0 ) ) )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==LeftSquareBracket) ) {
                int LA37_1 = input.LA(2);

                if ( (synpred66_InternalOpenCypherParser()) ) {
                    alt37=1;
                }
                else if ( (true) ) {
                    alt37=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // InternalOpenCypherParser.g:4486:2: ( ( rule__ListOperatorExpression__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4486:2: ( ( rule__ListOperatorExpression__Group_0__0 ) )
                    // InternalOpenCypherParser.g:4487:3: ( rule__ListOperatorExpression__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getListOperatorExpressionAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:4488:3: ( rule__ListOperatorExpression__Group_0__0 )
                    // InternalOpenCypherParser.g:4488:4: rule__ListOperatorExpression__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ListOperatorExpression__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getListOperatorExpressionAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4492:2: ( ( rule__ListOperatorExpression__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4492:2: ( ( rule__ListOperatorExpression__Group_1__0 ) )
                    // InternalOpenCypherParser.g:4493:3: ( rule__ListOperatorExpression__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getListOperatorExpressionAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:4494:3: ( rule__ListOperatorExpression__Group_1__0 )
                    // InternalOpenCypherParser.g:4494:4: rule__ListOperatorExpression__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ListOperatorExpression__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getListOperatorExpressionAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Alternatives"


    // $ANTLR start "rule__StringOperatorExpression__Alternatives_0"
    // InternalOpenCypherParser.g:4502:1: rule__StringOperatorExpression__Alternatives_0 : ( ( ( rule__StringOperatorExpression__Group_0_0__0 ) ) | ( ( rule__StringOperatorExpression__Group_0_1__0 ) ) | ( ( rule__StringOperatorExpression__Group_0_2__0 ) ) | ( ( rule__StringOperatorExpression__Group_0_3__0 ) ) | ( ( rule__StringOperatorExpression__Group_0_4__0 ) ) );
    public final void rule__StringOperatorExpression__Alternatives_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4506:1: ( ( ( rule__StringOperatorExpression__Group_0_0__0 ) ) | ( ( rule__StringOperatorExpression__Group_0_1__0 ) ) | ( ( rule__StringOperatorExpression__Group_0_2__0 ) ) | ( ( rule__StringOperatorExpression__Group_0_3__0 ) ) | ( ( rule__StringOperatorExpression__Group_0_4__0 ) ) )
            int alt38=5;
            switch ( input.LA(1) ) {
            case EqualsSignTilde:
                {
                alt38=1;
                }
                break;
            case IN:
                {
                alt38=2;
                }
                break;
            case STARTS:
                {
                alt38=3;
                }
                break;
            case ENDS:
                {
                alt38=4;
                }
                break;
            case CONTAINS:
                {
                alt38=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }

            switch (alt38) {
                case 1 :
                    // InternalOpenCypherParser.g:4507:2: ( ( rule__StringOperatorExpression__Group_0_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4507:2: ( ( rule__StringOperatorExpression__Group_0_0__0 ) )
                    // InternalOpenCypherParser.g:4508:3: ( rule__StringOperatorExpression__Group_0_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_0()); 
                    }
                    // InternalOpenCypherParser.g:4509:3: ( rule__StringOperatorExpression__Group_0_0__0 )
                    // InternalOpenCypherParser.g:4509:4: rule__StringOperatorExpression__Group_0_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__StringOperatorExpression__Group_0_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4513:2: ( ( rule__StringOperatorExpression__Group_0_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4513:2: ( ( rule__StringOperatorExpression__Group_0_1__0 ) )
                    // InternalOpenCypherParser.g:4514:3: ( rule__StringOperatorExpression__Group_0_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_1()); 
                    }
                    // InternalOpenCypherParser.g:4515:3: ( rule__StringOperatorExpression__Group_0_1__0 )
                    // InternalOpenCypherParser.g:4515:4: rule__StringOperatorExpression__Group_0_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__StringOperatorExpression__Group_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4519:2: ( ( rule__StringOperatorExpression__Group_0_2__0 ) )
                    {
                    // InternalOpenCypherParser.g:4519:2: ( ( rule__StringOperatorExpression__Group_0_2__0 ) )
                    // InternalOpenCypherParser.g:4520:3: ( rule__StringOperatorExpression__Group_0_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_2()); 
                    }
                    // InternalOpenCypherParser.g:4521:3: ( rule__StringOperatorExpression__Group_0_2__0 )
                    // InternalOpenCypherParser.g:4521:4: rule__StringOperatorExpression__Group_0_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__StringOperatorExpression__Group_0_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:4525:2: ( ( rule__StringOperatorExpression__Group_0_3__0 ) )
                    {
                    // InternalOpenCypherParser.g:4525:2: ( ( rule__StringOperatorExpression__Group_0_3__0 ) )
                    // InternalOpenCypherParser.g:4526:3: ( rule__StringOperatorExpression__Group_0_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_3()); 
                    }
                    // InternalOpenCypherParser.g:4527:3: ( rule__StringOperatorExpression__Group_0_3__0 )
                    // InternalOpenCypherParser.g:4527:4: rule__StringOperatorExpression__Group_0_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__StringOperatorExpression__Group_0_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:4531:2: ( ( rule__StringOperatorExpression__Group_0_4__0 ) )
                    {
                    // InternalOpenCypherParser.g:4531:2: ( ( rule__StringOperatorExpression__Group_0_4__0 ) )
                    // InternalOpenCypherParser.g:4532:3: ( rule__StringOperatorExpression__Group_0_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_4()); 
                    }
                    // InternalOpenCypherParser.g:4533:3: ( rule__StringOperatorExpression__Group_0_4__0 )
                    // InternalOpenCypherParser.g:4533:4: rule__StringOperatorExpression__Group_0_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__StringOperatorExpression__Group_0_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStringOperatorExpressionAccess().getGroup_0_4()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Alternatives_0"


    // $ANTLR start "rule__NullOperatorExpression__Alternatives"
    // InternalOpenCypherParser.g:4541:1: rule__NullOperatorExpression__Alternatives : ( ( ( rule__NullOperatorExpression__Group_0__0 ) ) | ( ( rule__NullOperatorExpression__Group_1__0 ) ) );
    public final void rule__NullOperatorExpression__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4545:1: ( ( ( rule__NullOperatorExpression__Group_0__0 ) ) | ( ( rule__NullOperatorExpression__Group_1__0 ) ) )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==IS) ) {
                int LA39_1 = input.LA(2);

                if ( (LA39_1==NOT) ) {
                    alt39=2;
                }
                else if ( (LA39_1==NULL) ) {
                    alt39=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // InternalOpenCypherParser.g:4546:2: ( ( rule__NullOperatorExpression__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4546:2: ( ( rule__NullOperatorExpression__Group_0__0 ) )
                    // InternalOpenCypherParser.g:4547:3: ( rule__NullOperatorExpression__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNullOperatorExpressionAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:4548:3: ( rule__NullOperatorExpression__Group_0__0 )
                    // InternalOpenCypherParser.g:4548:4: rule__NullOperatorExpression__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__NullOperatorExpression__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNullOperatorExpressionAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4552:2: ( ( rule__NullOperatorExpression__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4552:2: ( ( rule__NullOperatorExpression__Group_1__0 ) )
                    // InternalOpenCypherParser.g:4553:3: ( rule__NullOperatorExpression__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNullOperatorExpressionAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:4554:3: ( rule__NullOperatorExpression__Group_1__0 )
                    // InternalOpenCypherParser.g:4554:4: rule__NullOperatorExpression__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__NullOperatorExpression__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNullOperatorExpressionAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Alternatives"


    // $ANTLR start "rule__Atom__Alternatives"
    // InternalOpenCypherParser.g:4562:1: rule__Atom__Alternatives : ( ( ruleLiteral ) | ( ruleParameter ) | ( ruleLegacyParameter ) | ( ruleCaseExpression ) | ( ( rule__Atom__Group_4__0 ) ) | ( ruleListComprehension ) | ( rulePatternComprehension ) | ( ( rule__Atom__Group_7__0 ) ) | ( ( rule__Atom__Group_8__0 ) ) | ( ruleReduce ) | ( ( rule__Atom__Group_10__0 ) ) | ( ( rule__Atom__Group_11__0 ) ) | ( ( rule__Atom__Group_12__0 ) ) | ( ( rule__Atom__Group_13__0 ) ) | ( ruleShortestPathPattern ) | ( ruleRelationshipsPattern ) | ( ruleParenthesizedExpression ) | ( ruleFunctionInvocation ) | ( ( rule__Atom__Group_18__0 ) ) );
    public final void rule__Atom__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4566:1: ( ( ruleLiteral ) | ( ruleParameter ) | ( ruleLegacyParameter ) | ( ruleCaseExpression ) | ( ( rule__Atom__Group_4__0 ) ) | ( ruleListComprehension ) | ( rulePatternComprehension ) | ( ( rule__Atom__Group_7__0 ) ) | ( ( rule__Atom__Group_8__0 ) ) | ( ruleReduce ) | ( ( rule__Atom__Group_10__0 ) ) | ( ( rule__Atom__Group_11__0 ) ) | ( ( rule__Atom__Group_12__0 ) ) | ( ( rule__Atom__Group_13__0 ) ) | ( ruleShortestPathPattern ) | ( ruleRelationshipsPattern ) | ( ruleParenthesizedExpression ) | ( ruleFunctionInvocation ) | ( ( rule__Atom__Group_18__0 ) ) )
            int alt40=19;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // InternalOpenCypherParser.g:4567:2: ( ruleLiteral )
                    {
                    // InternalOpenCypherParser.g:4567:2: ( ruleLiteral )
                    // InternalOpenCypherParser.g:4568:3: ruleLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getLiteralParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getLiteralParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4573:2: ( ruleParameter )
                    {
                    // InternalOpenCypherParser.g:4573:2: ( ruleParameter )
                    // InternalOpenCypherParser.g:4574:3: ruleParameter
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getParameterParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleParameter();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getParameterParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4579:2: ( ruleLegacyParameter )
                    {
                    // InternalOpenCypherParser.g:4579:2: ( ruleLegacyParameter )
                    // InternalOpenCypherParser.g:4580:3: ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:4585:2: ( ruleCaseExpression )
                    {
                    // InternalOpenCypherParser.g:4585:2: ( ruleCaseExpression )
                    // InternalOpenCypherParser.g:4586:3: ruleCaseExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getCaseExpressionParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCaseExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getCaseExpressionParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:4591:2: ( ( rule__Atom__Group_4__0 ) )
                    {
                    // InternalOpenCypherParser.g:4591:2: ( ( rule__Atom__Group_4__0 ) )
                    // InternalOpenCypherParser.g:4592:3: ( rule__Atom__Group_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_4()); 
                    }
                    // InternalOpenCypherParser.g:4593:3: ( rule__Atom__Group_4__0 )
                    // InternalOpenCypherParser.g:4593:4: rule__Atom__Group_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:4597:2: ( ruleListComprehension )
                    {
                    // InternalOpenCypherParser.g:4597:2: ( ruleListComprehension )
                    // InternalOpenCypherParser.g:4598:3: ruleListComprehension
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_5()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleListComprehension();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:4603:2: ( rulePatternComprehension )
                    {
                    // InternalOpenCypherParser.g:4603:2: ( rulePatternComprehension )
                    // InternalOpenCypherParser.g:4604:3: rulePatternComprehension
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getPatternComprehensionParserRuleCall_6()); 
                    }
                    pushFollow(FOLLOW_2);
                    rulePatternComprehension();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getPatternComprehensionParserRuleCall_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:4609:2: ( ( rule__Atom__Group_7__0 ) )
                    {
                    // InternalOpenCypherParser.g:4609:2: ( ( rule__Atom__Group_7__0 ) )
                    // InternalOpenCypherParser.g:4610:3: ( rule__Atom__Group_7__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_7()); 
                    }
                    // InternalOpenCypherParser.g:4611:3: ( rule__Atom__Group_7__0 )
                    // InternalOpenCypherParser.g:4611:4: rule__Atom__Group_7__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:4615:2: ( ( rule__Atom__Group_8__0 ) )
                    {
                    // InternalOpenCypherParser.g:4615:2: ( ( rule__Atom__Group_8__0 ) )
                    // InternalOpenCypherParser.g:4616:3: ( rule__Atom__Group_8__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_8()); 
                    }
                    // InternalOpenCypherParser.g:4617:3: ( rule__Atom__Group_8__0 )
                    // InternalOpenCypherParser.g:4617:4: rule__Atom__Group_8__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_8__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:4621:2: ( ruleReduce )
                    {
                    // InternalOpenCypherParser.g:4621:2: ( ruleReduce )
                    // InternalOpenCypherParser.g:4622:3: ruleReduce
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getReduceParserRuleCall_9()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleReduce();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getReduceParserRuleCall_9()); 
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:4627:2: ( ( rule__Atom__Group_10__0 ) )
                    {
                    // InternalOpenCypherParser.g:4627:2: ( ( rule__Atom__Group_10__0 ) )
                    // InternalOpenCypherParser.g:4628:3: ( rule__Atom__Group_10__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_10()); 
                    }
                    // InternalOpenCypherParser.g:4629:3: ( rule__Atom__Group_10__0 )
                    // InternalOpenCypherParser.g:4629:4: rule__Atom__Group_10__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_10__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:4633:2: ( ( rule__Atom__Group_11__0 ) )
                    {
                    // InternalOpenCypherParser.g:4633:2: ( ( rule__Atom__Group_11__0 ) )
                    // InternalOpenCypherParser.g:4634:3: ( rule__Atom__Group_11__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_11()); 
                    }
                    // InternalOpenCypherParser.g:4635:3: ( rule__Atom__Group_11__0 )
                    // InternalOpenCypherParser.g:4635:4: rule__Atom__Group_11__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_11__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalOpenCypherParser.g:4639:2: ( ( rule__Atom__Group_12__0 ) )
                    {
                    // InternalOpenCypherParser.g:4639:2: ( ( rule__Atom__Group_12__0 ) )
                    // InternalOpenCypherParser.g:4640:3: ( rule__Atom__Group_12__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_12()); 
                    }
                    // InternalOpenCypherParser.g:4641:3: ( rule__Atom__Group_12__0 )
                    // InternalOpenCypherParser.g:4641:4: rule__Atom__Group_12__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_12__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_12()); 
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalOpenCypherParser.g:4645:2: ( ( rule__Atom__Group_13__0 ) )
                    {
                    // InternalOpenCypherParser.g:4645:2: ( ( rule__Atom__Group_13__0 ) )
                    // InternalOpenCypherParser.g:4646:3: ( rule__Atom__Group_13__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_13()); 
                    }
                    // InternalOpenCypherParser.g:4647:3: ( rule__Atom__Group_13__0 )
                    // InternalOpenCypherParser.g:4647:4: rule__Atom__Group_13__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_13__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_13()); 
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalOpenCypherParser.g:4651:2: ( ruleShortestPathPattern )
                    {
                    // InternalOpenCypherParser.g:4651:2: ( ruleShortestPathPattern )
                    // InternalOpenCypherParser.g:4652:3: ruleShortestPathPattern
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_14()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleShortestPathPattern();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_14()); 
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalOpenCypherParser.g:4657:2: ( ruleRelationshipsPattern )
                    {
                    // InternalOpenCypherParser.g:4657:2: ( ruleRelationshipsPattern )
                    // InternalOpenCypherParser.g:4658:3: ruleRelationshipsPattern
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_15()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRelationshipsPattern();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_15()); 
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalOpenCypherParser.g:4663:2: ( ruleParenthesizedExpression )
                    {
                    // InternalOpenCypherParser.g:4663:2: ( ruleParenthesizedExpression )
                    // InternalOpenCypherParser.g:4664:3: ruleParenthesizedExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_16()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleParenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_16()); 
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalOpenCypherParser.g:4669:2: ( ruleFunctionInvocation )
                    {
                    // InternalOpenCypherParser.g:4669:2: ( ruleFunctionInvocation )
                    // InternalOpenCypherParser.g:4670:3: ruleFunctionInvocation
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_17()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleFunctionInvocation();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_17()); 
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalOpenCypherParser.g:4675:2: ( ( rule__Atom__Group_18__0 ) )
                    {
                    // InternalOpenCypherParser.g:4675:2: ( ( rule__Atom__Group_18__0 ) )
                    // InternalOpenCypherParser.g:4676:3: ( rule__Atom__Group_18__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_18()); 
                    }
                    // InternalOpenCypherParser.g:4677:3: ( rule__Atom__Group_18__0 )
                    // InternalOpenCypherParser.g:4677:4: rule__Atom__Group_18__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_18__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_18()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Alternatives"


    // $ANTLR start "rule__Literal__Alternatives"
    // InternalOpenCypherParser.g:4685:1: rule__Literal__Alternatives : ( ( ruleNumberLiteral ) | ( ruleStringLiteral ) | ( ( rule__Literal__Group_2__0 ) ) | ( ruleBooleanLiteral ) | ( ruleMapLiteral ) | ( ruleListLiteral ) );
    public final void rule__Literal__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4689:1: ( ( ruleNumberLiteral ) | ( ruleStringLiteral ) | ( ( rule__Literal__Group_2__0 ) ) | ( ruleBooleanLiteral ) | ( ruleMapLiteral ) | ( ruleListLiteral ) )
            int alt41=6;
            switch ( input.LA(1) ) {
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
                {
                alt41=1;
                }
                break;
            case RULE_STRING_LITERAL:
                {
                alt41=2;
                }
                break;
            case NULL:
                {
                alt41=3;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt41=4;
                }
                break;
            case LeftCurlyBracket:
                {
                alt41=5;
                }
                break;
            case LeftSquareBracket:
                {
                alt41=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }

            switch (alt41) {
                case 1 :
                    // InternalOpenCypherParser.g:4690:2: ( ruleNumberLiteral )
                    {
                    // InternalOpenCypherParser.g:4690:2: ( ruleNumberLiteral )
                    // InternalOpenCypherParser.g:4691:3: ruleNumberLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleNumberLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4696:2: ( ruleStringLiteral )
                    {
                    // InternalOpenCypherParser.g:4696:2: ( ruleStringLiteral )
                    // InternalOpenCypherParser.g:4697:3: ruleStringLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4702:2: ( ( rule__Literal__Group_2__0 ) )
                    {
                    // InternalOpenCypherParser.g:4702:2: ( ( rule__Literal__Group_2__0 ) )
                    // InternalOpenCypherParser.g:4703:3: ( rule__Literal__Group_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLiteralAccess().getGroup_2()); 
                    }
                    // InternalOpenCypherParser.g:4704:3: ( rule__Literal__Group_2__0 )
                    // InternalOpenCypherParser.g:4704:4: rule__Literal__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Literal__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLiteralAccess().getGroup_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:4708:2: ( ruleBooleanLiteral )
                    {
                    // InternalOpenCypherParser.g:4708:2: ( ruleBooleanLiteral )
                    // InternalOpenCypherParser.g:4709:3: ruleBooleanLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:4714:2: ( ruleMapLiteral )
                    {
                    // InternalOpenCypherParser.g:4714:2: ( ruleMapLiteral )
                    // InternalOpenCypherParser.g:4715:3: ruleMapLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLiteralAccess().getMapLiteralParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleMapLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLiteralAccess().getMapLiteralParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:4720:2: ( ruleListLiteral )
                    {
                    // InternalOpenCypherParser.g:4720:2: ( ruleListLiteral )
                    // InternalOpenCypherParser.g:4721:3: ruleListLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLiteralAccess().getListLiteralParserRuleCall_5()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleListLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLiteralAccess().getListLiteralParserRuleCall_5()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Literal__Alternatives"


    // $ANTLR start "rule__BooleanLiteral__ValueAlternatives_1_0"
    // InternalOpenCypherParser.g:4730:1: rule__BooleanLiteral__ValueAlternatives_1_0 : ( ( TRUE ) | ( FALSE ) );
    public final void rule__BooleanLiteral__ValueAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4734:1: ( ( TRUE ) | ( FALSE ) )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==TRUE) ) {
                alt42=1;
            }
            else if ( (LA42_0==FALSE) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // InternalOpenCypherParser.g:4735:2: ( TRUE )
                    {
                    // InternalOpenCypherParser.g:4735:2: ( TRUE )
                    // InternalOpenCypherParser.g:4736:3: TRUE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_1_0_0()); 
                    }
                    match(input,TRUE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBooleanLiteralAccess().getValueTRUEKeyword_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4741:2: ( FALSE )
                    {
                    // InternalOpenCypherParser.g:4741:2: ( FALSE )
                    // InternalOpenCypherParser.g:4742:3: FALSE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_1_0_1()); 
                    }
                    match(input,FALSE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBooleanLiteralAccess().getValueFALSEKeyword_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BooleanLiteral__ValueAlternatives_1_0"


    // $ANTLR start "rule__PropertyLookup__Alternatives_1"
    // InternalOpenCypherParser.g:4751:1: rule__PropertyLookup__Alternatives_1 : ( ( ( rule__PropertyLookup__Group_1_0__0 ) ) | ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 ) ) );
    public final void rule__PropertyLookup__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4755:1: ( ( ( rule__PropertyLookup__Group_1_0__0 ) ) | ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 ) ) )
            int alt43=2;
            alt43 = dfa43.predict(input);
            switch (alt43) {
                case 1 :
                    // InternalOpenCypherParser.g:4756:2: ( ( rule__PropertyLookup__Group_1_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4756:2: ( ( rule__PropertyLookup__Group_1_0__0 ) )
                    // InternalOpenCypherParser.g:4757:3: ( rule__PropertyLookup__Group_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertyLookupAccess().getGroup_1_0()); 
                    }
                    // InternalOpenCypherParser.g:4758:3: ( rule__PropertyLookup__Group_1_0__0 )
                    // InternalOpenCypherParser.g:4758:4: rule__PropertyLookup__Group_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PropertyLookup__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertyLookupAccess().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4762:2: ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 ) )
                    {
                    // InternalOpenCypherParser.g:4762:2: ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 ) )
                    // InternalOpenCypherParser.g:4763:3: ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_1()); 
                    }
                    // InternalOpenCypherParser.g:4764:3: ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 )
                    // InternalOpenCypherParser.g:4764:4: rule__PropertyLookup__PropertyKeyNameAssignment_1_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__PropertyLookup__PropertyKeyNameAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Alternatives_1"


    // $ANTLR start "rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0"
    // InternalOpenCypherParser.g:4772:1: rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 : ( ( QuestionMark ) | ( ExclamationMark ) );
    public final void rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4776:1: ( ( QuestionMark ) | ( ExclamationMark ) )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==QuestionMark) ) {
                alt44=1;
            }
            else if ( (LA44_0==ExclamationMark) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // InternalOpenCypherParser.g:4777:2: ( QuestionMark )
                    {
                    // InternalOpenCypherParser.g:4777:2: ( QuestionMark )
                    // InternalOpenCypherParser.g:4778:3: QuestionMark
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorQuestionMarkKeyword_1_0_1_0_0()); 
                    }
                    match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorQuestionMarkKeyword_1_0_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4783:2: ( ExclamationMark )
                    {
                    // InternalOpenCypherParser.g:4783:2: ( ExclamationMark )
                    // InternalOpenCypherParser.g:4784:3: ExclamationMark
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorExclamationMarkKeyword_1_0_1_0_1()); 
                    }
                    match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorExclamationMarkKeyword_1_0_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0"


    // $ANTLR start "rule__CaseExpression__Alternatives_0"
    // InternalOpenCypherParser.g:4793:1: rule__CaseExpression__Alternatives_0 : ( ( ( rule__CaseExpression__Group_0_0__0 ) ) | ( ( rule__CaseExpression__Group_0_1__0 ) ) );
    public final void rule__CaseExpression__Alternatives_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4797:1: ( ( ( rule__CaseExpression__Group_0_0__0 ) ) | ( ( rule__CaseExpression__Group_0_1__0 ) ) )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==CASE) ) {
                int LA45_1 = input.LA(2);

                if ( (synpred98_InternalOpenCypherParser()) ) {
                    alt45=1;
                }
                else if ( (true) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // InternalOpenCypherParser.g:4798:2: ( ( rule__CaseExpression__Group_0_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4798:2: ( ( rule__CaseExpression__Group_0_0__0 ) )
                    // InternalOpenCypherParser.g:4799:3: ( rule__CaseExpression__Group_0_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCaseExpressionAccess().getGroup_0_0()); 
                    }
                    // InternalOpenCypherParser.g:4800:3: ( rule__CaseExpression__Group_0_0__0 )
                    // InternalOpenCypherParser.g:4800:4: rule__CaseExpression__Group_0_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__CaseExpression__Group_0_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCaseExpressionAccess().getGroup_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4804:2: ( ( rule__CaseExpression__Group_0_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4804:2: ( ( rule__CaseExpression__Group_0_1__0 ) )
                    // InternalOpenCypherParser.g:4805:3: ( rule__CaseExpression__Group_0_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCaseExpressionAccess().getGroup_0_1()); 
                    }
                    // InternalOpenCypherParser.g:4806:3: ( rule__CaseExpression__Group_0_1__0 )
                    // InternalOpenCypherParser.g:4806:4: rule__CaseExpression__Group_0_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__CaseExpression__Group_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCaseExpressionAccess().getGroup_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Alternatives_0"


    // $ANTLR start "rule__LegacyParameter__ParameterAlternatives_1_0"
    // InternalOpenCypherParser.g:4814:1: rule__LegacyParameter__ParameterAlternatives_1_0 : ( ( ruleSYMBOLIC_NAME_X ) | ( ruleNumber ) );
    public final void rule__LegacyParameter__ParameterAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4818:1: ( ( ruleSYMBOLIC_NAME_X ) | ( ruleNumber ) )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( ((LA46_0>=ALLSHORTESTPATHS && LA46_0<=WHERE)||(LA46_0>=CASE && LA46_0<=XOR)||(LA46_0>=AS && LA46_0<=OR)||LA46_0==RULE_ID) ) {
                alt46=1;
            }
            else if ( ((LA46_0>=RULE_HEX && LA46_0<=RULE_DECIMAL)) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // InternalOpenCypherParser.g:4819:2: ( ruleSYMBOLIC_NAME_X )
                    {
                    // InternalOpenCypherParser.g:4819:2: ( ruleSYMBOLIC_NAME_X )
                    // InternalOpenCypherParser.g:4820:3: ruleSYMBOLIC_NAME_X
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLegacyParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSYMBOLIC_NAME_X();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLegacyParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4825:2: ( ruleNumber )
                    {
                    // InternalOpenCypherParser.g:4825:2: ( ruleNumber )
                    // InternalOpenCypherParser.g:4826:3: ruleNumber
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLegacyParameterAccess().getParameterNumberParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleNumber();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLegacyParameterAccess().getParameterNumberParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__ParameterAlternatives_1_0"


    // $ANTLR start "rule__Parameter__ParameterAlternatives_1_0"
    // InternalOpenCypherParser.g:4835:1: rule__Parameter__ParameterAlternatives_1_0 : ( ( ruleSYMBOLIC_NAME_X ) | ( ruleNumber ) );
    public final void rule__Parameter__ParameterAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4839:1: ( ( ruleSYMBOLIC_NAME_X ) | ( ruleNumber ) )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( ((LA47_0>=ALLSHORTESTPATHS && LA47_0<=WHERE)||(LA47_0>=CASE && LA47_0<=XOR)||(LA47_0>=AS && LA47_0<=OR)||LA47_0==RULE_ID) ) {
                alt47=1;
            }
            else if ( ((LA47_0>=RULE_HEX && LA47_0<=RULE_DECIMAL)) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // InternalOpenCypherParser.g:4840:2: ( ruleSYMBOLIC_NAME_X )
                    {
                    // InternalOpenCypherParser.g:4840:2: ( ruleSYMBOLIC_NAME_X )
                    // InternalOpenCypherParser.g:4841:3: ruleSYMBOLIC_NAME_X
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSYMBOLIC_NAME_X();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4846:2: ( ruleNumber )
                    {
                    // InternalOpenCypherParser.g:4846:2: ( ruleNumber )
                    // InternalOpenCypherParser.g:4847:3: ruleNumber
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getParameterAccess().getParameterNumberParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleNumber();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getParameterAccess().getParameterNumberParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__ParameterAlternatives_1_0"


    // $ANTLR start "rule__Number__Alternatives"
    // InternalOpenCypherParser.g:4856:1: rule__Number__Alternatives : ( ( RULE_HEX ) | ( ( rule__Number__Group_1__0 ) ) );
    public final void rule__Number__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4860:1: ( ( RULE_HEX ) | ( ( rule__Number__Group_1__0 ) ) )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==RULE_HEX) ) {
                alt48=1;
            }
            else if ( ((LA48_0>=RULE_INT && LA48_0<=RULE_DECIMAL)) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // InternalOpenCypherParser.g:4861:2: ( RULE_HEX )
                    {
                    // InternalOpenCypherParser.g:4861:2: ( RULE_HEX )
                    // InternalOpenCypherParser.g:4862:3: RULE_HEX
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
                    }
                    match(input,RULE_HEX,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4867:2: ( ( rule__Number__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4867:2: ( ( rule__Number__Group_1__0 ) )
                    // InternalOpenCypherParser.g:4868:3: ( rule__Number__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:4869:3: ( rule__Number__Group_1__0 )
                    // InternalOpenCypherParser.g:4869:4: rule__Number__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Number__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Alternatives"


    // $ANTLR start "rule__Number__Alternatives_1_0"
    // InternalOpenCypherParser.g:4877:1: rule__Number__Alternatives_1_0 : ( ( RULE_INT ) | ( RULE_DECIMAL ) );
    public final void rule__Number__Alternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4881:1: ( ( RULE_INT ) | ( RULE_DECIMAL ) )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==RULE_INT) ) {
                alt49=1;
            }
            else if ( (LA49_0==RULE_DECIMAL) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // InternalOpenCypherParser.g:4882:2: ( RULE_INT )
                    {
                    // InternalOpenCypherParser.g:4882:2: ( RULE_INT )
                    // InternalOpenCypherParser.g:4883:3: RULE_INT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
                    }
                    match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4888:2: ( RULE_DECIMAL )
                    {
                    // InternalOpenCypherParser.g:4888:2: ( RULE_DECIMAL )
                    // InternalOpenCypherParser.g:4889:3: RULE_DECIMAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
                    }
                    match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Alternatives_1_0"


    // $ANTLR start "rule__Number__Alternatives_1_1_1"
    // InternalOpenCypherParser.g:4898:1: rule__Number__Alternatives_1_1_1 : ( ( RULE_INT ) | ( RULE_DECIMAL ) );
    public final void rule__Number__Alternatives_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4902:1: ( ( RULE_INT ) | ( RULE_DECIMAL ) )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==RULE_INT) ) {
                alt50=1;
            }
            else if ( (LA50_0==RULE_DECIMAL) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // InternalOpenCypherParser.g:4903:2: ( RULE_INT )
                    {
                    // InternalOpenCypherParser.g:4903:2: ( RULE_INT )
                    // InternalOpenCypherParser.g:4904:3: RULE_INT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
                    }
                    match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4909:2: ( RULE_DECIMAL )
                    {
                    // InternalOpenCypherParser.g:4909:2: ( RULE_DECIMAL )
                    // InternalOpenCypherParser.g:4910:3: RULE_DECIMAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
                    }
                    match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Alternatives_1_1_1"


    // $ANTLR start "rule__SYMBOLIC_NAME_X__Alternatives"
    // InternalOpenCypherParser.g:4919:1: rule__SYMBOLIC_NAME_X__Alternatives : ( ( RULE_ID ) | ( CYPHER ) | ( EXPLAIN ) | ( PROFILE ) | ( USING ) | ( PERIODIC ) | ( COMMIT ) | ( UNION ) | ( ALL ) | ( CREATE ) | ( INDEX ) | ( ON ) | ( DROP ) | ( CONSTRAINT ) | ( ASSERT ) | ( IS ) | ( UNIQUE ) | ( EXISTS ) | ( LOAD ) | ( CSV ) | ( WITH ) | ( HEADERS ) | ( FROM ) | ( AS ) | ( FIELDTERMINATOR ) | ( OPTIONAL ) | ( MATCH ) | ( UNWIND ) | ( MERGE ) | ( SET ) | ( DELETE ) | ( DETACH ) | ( REMOVE ) | ( FOREACH ) | ( IN ) | ( DISTINCT ) | ( RETURN ) | ( ORDER ) | ( BY ) | ( SKIP ) | ( LIMIT ) | ( DESCENDING ) | ( DESC ) | ( ASCENDING ) | ( ASC ) | ( JOIN ) | ( SCAN ) | ( START ) | ( NODE ) | ( RELATIONSHIP ) | ( REL ) | ( WHERE ) | ( SHORTESTPATH ) | ( ALLSHORTESTPATHS ) | ( OR ) | ( XOR ) | ( AND ) | ( NOT ) | ( STARTS ) | ( ENDS ) | ( CONTAINS ) | ( NULL ) | ( TRUE ) | ( FALSE ) | ( COUNT ) | ( FILTER ) | ( EXTRACT ) | ( ANY ) | ( NONE ) | ( SINGLE ) | ( REDUCE ) | ( CASE ) | ( ELSE ) | ( END ) | ( WHEN ) | ( THEN ) );
    public final void rule__SYMBOLIC_NAME_X__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4923:1: ( ( RULE_ID ) | ( CYPHER ) | ( EXPLAIN ) | ( PROFILE ) | ( USING ) | ( PERIODIC ) | ( COMMIT ) | ( UNION ) | ( ALL ) | ( CREATE ) | ( INDEX ) | ( ON ) | ( DROP ) | ( CONSTRAINT ) | ( ASSERT ) | ( IS ) | ( UNIQUE ) | ( EXISTS ) | ( LOAD ) | ( CSV ) | ( WITH ) | ( HEADERS ) | ( FROM ) | ( AS ) | ( FIELDTERMINATOR ) | ( OPTIONAL ) | ( MATCH ) | ( UNWIND ) | ( MERGE ) | ( SET ) | ( DELETE ) | ( DETACH ) | ( REMOVE ) | ( FOREACH ) | ( IN ) | ( DISTINCT ) | ( RETURN ) | ( ORDER ) | ( BY ) | ( SKIP ) | ( LIMIT ) | ( DESCENDING ) | ( DESC ) | ( ASCENDING ) | ( ASC ) | ( JOIN ) | ( SCAN ) | ( START ) | ( NODE ) | ( RELATIONSHIP ) | ( REL ) | ( WHERE ) | ( SHORTESTPATH ) | ( ALLSHORTESTPATHS ) | ( OR ) | ( XOR ) | ( AND ) | ( NOT ) | ( STARTS ) | ( ENDS ) | ( CONTAINS ) | ( NULL ) | ( TRUE ) | ( FALSE ) | ( COUNT ) | ( FILTER ) | ( EXTRACT ) | ( ANY ) | ( NONE ) | ( SINGLE ) | ( REDUCE ) | ( CASE ) | ( ELSE ) | ( END ) | ( WHEN ) | ( THEN ) )
            int alt51=76;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt51=1;
                }
                break;
            case CYPHER:
                {
                alt51=2;
                }
                break;
            case EXPLAIN:
                {
                alt51=3;
                }
                break;
            case PROFILE:
                {
                alt51=4;
                }
                break;
            case USING:
                {
                alt51=5;
                }
                break;
            case PERIODIC:
                {
                alt51=6;
                }
                break;
            case COMMIT:
                {
                alt51=7;
                }
                break;
            case UNION:
                {
                alt51=8;
                }
                break;
            case ALL:
                {
                alt51=9;
                }
                break;
            case CREATE:
                {
                alt51=10;
                }
                break;
            case INDEX:
                {
                alt51=11;
                }
                break;
            case ON:
                {
                alt51=12;
                }
                break;
            case DROP:
                {
                alt51=13;
                }
                break;
            case CONSTRAINT:
                {
                alt51=14;
                }
                break;
            case ASSERT:
                {
                alt51=15;
                }
                break;
            case IS:
                {
                alt51=16;
                }
                break;
            case UNIQUE:
                {
                alt51=17;
                }
                break;
            case EXISTS:
                {
                alt51=18;
                }
                break;
            case LOAD:
                {
                alt51=19;
                }
                break;
            case CSV:
                {
                alt51=20;
                }
                break;
            case WITH:
                {
                alt51=21;
                }
                break;
            case HEADERS:
                {
                alt51=22;
                }
                break;
            case FROM:
                {
                alt51=23;
                }
                break;
            case AS:
                {
                alt51=24;
                }
                break;
            case FIELDTERMINATOR:
                {
                alt51=25;
                }
                break;
            case OPTIONAL:
                {
                alt51=26;
                }
                break;
            case MATCH:
                {
                alt51=27;
                }
                break;
            case UNWIND:
                {
                alt51=28;
                }
                break;
            case MERGE:
                {
                alt51=29;
                }
                break;
            case SET:
                {
                alt51=30;
                }
                break;
            case DELETE:
                {
                alt51=31;
                }
                break;
            case DETACH:
                {
                alt51=32;
                }
                break;
            case REMOVE:
                {
                alt51=33;
                }
                break;
            case FOREACH:
                {
                alt51=34;
                }
                break;
            case IN:
                {
                alt51=35;
                }
                break;
            case DISTINCT:
                {
                alt51=36;
                }
                break;
            case RETURN:
                {
                alt51=37;
                }
                break;
            case ORDER:
                {
                alt51=38;
                }
                break;
            case BY:
                {
                alt51=39;
                }
                break;
            case SKIP:
                {
                alt51=40;
                }
                break;
            case LIMIT:
                {
                alt51=41;
                }
                break;
            case DESCENDING:
                {
                alt51=42;
                }
                break;
            case DESC:
                {
                alt51=43;
                }
                break;
            case ASCENDING:
                {
                alt51=44;
                }
                break;
            case ASC:
                {
                alt51=45;
                }
                break;
            case JOIN:
                {
                alt51=46;
                }
                break;
            case SCAN:
                {
                alt51=47;
                }
                break;
            case START:
                {
                alt51=48;
                }
                break;
            case NODE:
                {
                alt51=49;
                }
                break;
            case RELATIONSHIP:
                {
                alt51=50;
                }
                break;
            case REL:
                {
                alt51=51;
                }
                break;
            case WHERE:
                {
                alt51=52;
                }
                break;
            case SHORTESTPATH:
                {
                alt51=53;
                }
                break;
            case ALLSHORTESTPATHS:
                {
                alt51=54;
                }
                break;
            case OR:
                {
                alt51=55;
                }
                break;
            case XOR:
                {
                alt51=56;
                }
                break;
            case AND:
                {
                alt51=57;
                }
                break;
            case NOT:
                {
                alt51=58;
                }
                break;
            case STARTS:
                {
                alt51=59;
                }
                break;
            case ENDS:
                {
                alt51=60;
                }
                break;
            case CONTAINS:
                {
                alt51=61;
                }
                break;
            case NULL:
                {
                alt51=62;
                }
                break;
            case TRUE:
                {
                alt51=63;
                }
                break;
            case FALSE:
                {
                alt51=64;
                }
                break;
            case COUNT:
                {
                alt51=65;
                }
                break;
            case FILTER:
                {
                alt51=66;
                }
                break;
            case EXTRACT:
                {
                alt51=67;
                }
                break;
            case ANY:
                {
                alt51=68;
                }
                break;
            case NONE:
                {
                alt51=69;
                }
                break;
            case SINGLE:
                {
                alt51=70;
                }
                break;
            case REDUCE:
                {
                alt51=71;
                }
                break;
            case CASE:
                {
                alt51=72;
                }
                break;
            case ELSE:
                {
                alt51=73;
                }
                break;
            case END:
                {
                alt51=74;
                }
                break;
            case WHEN:
                {
                alt51=75;
                }
                break;
            case THEN:
                {
                alt51=76;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }

            switch (alt51) {
                case 1 :
                    // InternalOpenCypherParser.g:4924:2: ( RULE_ID )
                    {
                    // InternalOpenCypherParser.g:4924:2: ( RULE_ID )
                    // InternalOpenCypherParser.g:4925:3: RULE_ID
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall_0()); 
                    }
                    match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4930:2: ( CYPHER )
                    {
                    // InternalOpenCypherParser.g:4930:2: ( CYPHER )
                    // InternalOpenCypherParser.g:4931:3: CYPHER
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCYPHERKeyword_1()); 
                    }
                    match(input,CYPHER,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCYPHERKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4936:2: ( EXPLAIN )
                    {
                    // InternalOpenCypherParser.g:4936:2: ( EXPLAIN )
                    // InternalOpenCypherParser.g:4937:3: EXPLAIN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXPLAINKeyword_2()); 
                    }
                    match(input,EXPLAIN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXPLAINKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:4942:2: ( PROFILE )
                    {
                    // InternalOpenCypherParser.g:4942:2: ( PROFILE )
                    // InternalOpenCypherParser.g:4943:3: PROFILE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getPROFILEKeyword_3()); 
                    }
                    match(input,PROFILE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getPROFILEKeyword_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:4948:2: ( USING )
                    {
                    // InternalOpenCypherParser.g:4948:2: ( USING )
                    // InternalOpenCypherParser.g:4949:3: USING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUSINGKeyword_4()); 
                    }
                    match(input,USING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUSINGKeyword_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:4954:2: ( PERIODIC )
                    {
                    // InternalOpenCypherParser.g:4954:2: ( PERIODIC )
                    // InternalOpenCypherParser.g:4955:3: PERIODIC
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getPERIODICKeyword_5()); 
                    }
                    match(input,PERIODIC,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getPERIODICKeyword_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:4960:2: ( COMMIT )
                    {
                    // InternalOpenCypherParser.g:4960:2: ( COMMIT )
                    // InternalOpenCypherParser.g:4961:3: COMMIT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOMMITKeyword_6()); 
                    }
                    match(input,COMMIT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOMMITKeyword_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:4966:2: ( UNION )
                    {
                    // InternalOpenCypherParser.g:4966:2: ( UNION )
                    // InternalOpenCypherParser.g:4967:3: UNION
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIONKeyword_7()); 
                    }
                    match(input,UNION,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIONKeyword_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:4972:2: ( ALL )
                    {
                    // InternalOpenCypherParser.g:4972:2: ( ALL )
                    // InternalOpenCypherParser.g:4973:3: ALL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLKeyword_8()); 
                    }
                    match(input,ALL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLKeyword_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:4978:2: ( CREATE )
                    {
                    // InternalOpenCypherParser.g:4978:2: ( CREATE )
                    // InternalOpenCypherParser.g:4979:3: CREATE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCREATEKeyword_9()); 
                    }
                    match(input,CREATE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCREATEKeyword_9()); 
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:4984:2: ( INDEX )
                    {
                    // InternalOpenCypherParser.g:4984:2: ( INDEX )
                    // InternalOpenCypherParser.g:4985:3: INDEX
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getINDEXKeyword_10()); 
                    }
                    match(input,INDEX,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getINDEXKeyword_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:4990:2: ( ON )
                    {
                    // InternalOpenCypherParser.g:4990:2: ( ON )
                    // InternalOpenCypherParser.g:4991:3: ON
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getONKeyword_11()); 
                    }
                    match(input,ON,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getONKeyword_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalOpenCypherParser.g:4996:2: ( DROP )
                    {
                    // InternalOpenCypherParser.g:4996:2: ( DROP )
                    // InternalOpenCypherParser.g:4997:3: DROP
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDROPKeyword_12()); 
                    }
                    match(input,DROP,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDROPKeyword_12()); 
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalOpenCypherParser.g:5002:2: ( CONSTRAINT )
                    {
                    // InternalOpenCypherParser.g:5002:2: ( CONSTRAINT )
                    // InternalOpenCypherParser.g:5003:3: CONSTRAINT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONSTRAINTKeyword_13()); 
                    }
                    match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONSTRAINTKeyword_13()); 
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalOpenCypherParser.g:5008:2: ( ASSERT )
                    {
                    // InternalOpenCypherParser.g:5008:2: ( ASSERT )
                    // InternalOpenCypherParser.g:5009:3: ASSERT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASSERTKeyword_14()); 
                    }
                    match(input,ASSERT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASSERTKeyword_14()); 
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalOpenCypherParser.g:5014:2: ( IS )
                    {
                    // InternalOpenCypherParser.g:5014:2: ( IS )
                    // InternalOpenCypherParser.g:5015:3: IS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getISKeyword_15()); 
                    }
                    match(input,IS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getISKeyword_15()); 
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalOpenCypherParser.g:5020:2: ( UNIQUE )
                    {
                    // InternalOpenCypherParser.g:5020:2: ( UNIQUE )
                    // InternalOpenCypherParser.g:5021:3: UNIQUE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIQUEKeyword_16()); 
                    }
                    match(input,UNIQUE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIQUEKeyword_16()); 
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalOpenCypherParser.g:5026:2: ( EXISTS )
                    {
                    // InternalOpenCypherParser.g:5026:2: ( EXISTS )
                    // InternalOpenCypherParser.g:5027:3: EXISTS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXISTSKeyword_17()); 
                    }
                    match(input,EXISTS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXISTSKeyword_17()); 
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalOpenCypherParser.g:5032:2: ( LOAD )
                    {
                    // InternalOpenCypherParser.g:5032:2: ( LOAD )
                    // InternalOpenCypherParser.g:5033:3: LOAD
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getLOADKeyword_18()); 
                    }
                    match(input,LOAD,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getLOADKeyword_18()); 
                    }

                    }


                    }
                    break;
                case 20 :
                    // InternalOpenCypherParser.g:5038:2: ( CSV )
                    {
                    // InternalOpenCypherParser.g:5038:2: ( CSV )
                    // InternalOpenCypherParser.g:5039:3: CSV
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCSVKeyword_19()); 
                    }
                    match(input,CSV,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCSVKeyword_19()); 
                    }

                    }


                    }
                    break;
                case 21 :
                    // InternalOpenCypherParser.g:5044:2: ( WITH )
                    {
                    // InternalOpenCypherParser.g:5044:2: ( WITH )
                    // InternalOpenCypherParser.g:5045:3: WITH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getWITHKeyword_20()); 
                    }
                    match(input,WITH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getWITHKeyword_20()); 
                    }

                    }


                    }
                    break;
                case 22 :
                    // InternalOpenCypherParser.g:5050:2: ( HEADERS )
                    {
                    // InternalOpenCypherParser.g:5050:2: ( HEADERS )
                    // InternalOpenCypherParser.g:5051:3: HEADERS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getHEADERSKeyword_21()); 
                    }
                    match(input,HEADERS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getHEADERSKeyword_21()); 
                    }

                    }


                    }
                    break;
                case 23 :
                    // InternalOpenCypherParser.g:5056:2: ( FROM )
                    {
                    // InternalOpenCypherParser.g:5056:2: ( FROM )
                    // InternalOpenCypherParser.g:5057:3: FROM
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFROMKeyword_22()); 
                    }
                    match(input,FROM,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFROMKeyword_22()); 
                    }

                    }


                    }
                    break;
                case 24 :
                    // InternalOpenCypherParser.g:5062:2: ( AS )
                    {
                    // InternalOpenCypherParser.g:5062:2: ( AS )
                    // InternalOpenCypherParser.g:5063:3: AS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASKeyword_23()); 
                    }
                    match(input,AS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASKeyword_23()); 
                    }

                    }


                    }
                    break;
                case 25 :
                    // InternalOpenCypherParser.g:5068:2: ( FIELDTERMINATOR )
                    {
                    // InternalOpenCypherParser.g:5068:2: ( FIELDTERMINATOR )
                    // InternalOpenCypherParser.g:5069:3: FIELDTERMINATOR
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFIELDTERMINATORKeyword_24()); 
                    }
                    match(input,FIELDTERMINATOR,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFIELDTERMINATORKeyword_24()); 
                    }

                    }


                    }
                    break;
                case 26 :
                    // InternalOpenCypherParser.g:5074:2: ( OPTIONAL )
                    {
                    // InternalOpenCypherParser.g:5074:2: ( OPTIONAL )
                    // InternalOpenCypherParser.g:5075:3: OPTIONAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getOPTIONALKeyword_25()); 
                    }
                    match(input,OPTIONAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getOPTIONALKeyword_25()); 
                    }

                    }


                    }
                    break;
                case 27 :
                    // InternalOpenCypherParser.g:5080:2: ( MATCH )
                    {
                    // InternalOpenCypherParser.g:5080:2: ( MATCH )
                    // InternalOpenCypherParser.g:5081:3: MATCH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getMATCHKeyword_26()); 
                    }
                    match(input,MATCH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getMATCHKeyword_26()); 
                    }

                    }


                    }
                    break;
                case 28 :
                    // InternalOpenCypherParser.g:5086:2: ( UNWIND )
                    {
                    // InternalOpenCypherParser.g:5086:2: ( UNWIND )
                    // InternalOpenCypherParser.g:5087:3: UNWIND
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNWINDKeyword_27()); 
                    }
                    match(input,UNWIND,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNWINDKeyword_27()); 
                    }

                    }


                    }
                    break;
                case 29 :
                    // InternalOpenCypherParser.g:5092:2: ( MERGE )
                    {
                    // InternalOpenCypherParser.g:5092:2: ( MERGE )
                    // InternalOpenCypherParser.g:5093:3: MERGE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getMERGEKeyword_28()); 
                    }
                    match(input,MERGE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getMERGEKeyword_28()); 
                    }

                    }


                    }
                    break;
                case 30 :
                    // InternalOpenCypherParser.g:5098:2: ( SET )
                    {
                    // InternalOpenCypherParser.g:5098:2: ( SET )
                    // InternalOpenCypherParser.g:5099:3: SET
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSETKeyword_29()); 
                    }
                    match(input,SET,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSETKeyword_29()); 
                    }

                    }


                    }
                    break;
                case 31 :
                    // InternalOpenCypherParser.g:5104:2: ( DELETE )
                    {
                    // InternalOpenCypherParser.g:5104:2: ( DELETE )
                    // InternalOpenCypherParser.g:5105:3: DELETE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDELETEKeyword_30()); 
                    }
                    match(input,DELETE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDELETEKeyword_30()); 
                    }

                    }


                    }
                    break;
                case 32 :
                    // InternalOpenCypherParser.g:5110:2: ( DETACH )
                    {
                    // InternalOpenCypherParser.g:5110:2: ( DETACH )
                    // InternalOpenCypherParser.g:5111:3: DETACH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDETACHKeyword_31()); 
                    }
                    match(input,DETACH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDETACHKeyword_31()); 
                    }

                    }


                    }
                    break;
                case 33 :
                    // InternalOpenCypherParser.g:5116:2: ( REMOVE )
                    {
                    // InternalOpenCypherParser.g:5116:2: ( REMOVE )
                    // InternalOpenCypherParser.g:5117:3: REMOVE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getREMOVEKeyword_32()); 
                    }
                    match(input,REMOVE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getREMOVEKeyword_32()); 
                    }

                    }


                    }
                    break;
                case 34 :
                    // InternalOpenCypherParser.g:5122:2: ( FOREACH )
                    {
                    // InternalOpenCypherParser.g:5122:2: ( FOREACH )
                    // InternalOpenCypherParser.g:5123:3: FOREACH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFOREACHKeyword_33()); 
                    }
                    match(input,FOREACH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFOREACHKeyword_33()); 
                    }

                    }


                    }
                    break;
                case 35 :
                    // InternalOpenCypherParser.g:5128:2: ( IN )
                    {
                    // InternalOpenCypherParser.g:5128:2: ( IN )
                    // InternalOpenCypherParser.g:5129:3: IN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getINKeyword_34()); 
                    }
                    match(input,IN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getINKeyword_34()); 
                    }

                    }


                    }
                    break;
                case 36 :
                    // InternalOpenCypherParser.g:5134:2: ( DISTINCT )
                    {
                    // InternalOpenCypherParser.g:5134:2: ( DISTINCT )
                    // InternalOpenCypherParser.g:5135:3: DISTINCT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDISTINCTKeyword_35()); 
                    }
                    match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDISTINCTKeyword_35()); 
                    }

                    }


                    }
                    break;
                case 37 :
                    // InternalOpenCypherParser.g:5140:2: ( RETURN )
                    {
                    // InternalOpenCypherParser.g:5140:2: ( RETURN )
                    // InternalOpenCypherParser.g:5141:3: RETURN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getRETURNKeyword_36()); 
                    }
                    match(input,RETURN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getRETURNKeyword_36()); 
                    }

                    }


                    }
                    break;
                case 38 :
                    // InternalOpenCypherParser.g:5146:2: ( ORDER )
                    {
                    // InternalOpenCypherParser.g:5146:2: ( ORDER )
                    // InternalOpenCypherParser.g:5147:3: ORDER
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getORDERKeyword_37()); 
                    }
                    match(input,ORDER,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getORDERKeyword_37()); 
                    }

                    }


                    }
                    break;
                case 39 :
                    // InternalOpenCypherParser.g:5152:2: ( BY )
                    {
                    // InternalOpenCypherParser.g:5152:2: ( BY )
                    // InternalOpenCypherParser.g:5153:3: BY
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getBYKeyword_38()); 
                    }
                    match(input,BY,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getBYKeyword_38()); 
                    }

                    }


                    }
                    break;
                case 40 :
                    // InternalOpenCypherParser.g:5158:2: ( SKIP )
                    {
                    // InternalOpenCypherParser.g:5158:2: ( SKIP )
                    // InternalOpenCypherParser.g:5159:3: SKIP
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSKIPKeyword_39()); 
                    }
                    match(input,SKIP,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSKIPKeyword_39()); 
                    }

                    }


                    }
                    break;
                case 41 :
                    // InternalOpenCypherParser.g:5164:2: ( LIMIT )
                    {
                    // InternalOpenCypherParser.g:5164:2: ( LIMIT )
                    // InternalOpenCypherParser.g:5165:3: LIMIT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getLIMITKeyword_40()); 
                    }
                    match(input,LIMIT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getLIMITKeyword_40()); 
                    }

                    }


                    }
                    break;
                case 42 :
                    // InternalOpenCypherParser.g:5170:2: ( DESCENDING )
                    {
                    // InternalOpenCypherParser.g:5170:2: ( DESCENDING )
                    // InternalOpenCypherParser.g:5171:3: DESCENDING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCENDINGKeyword_41()); 
                    }
                    match(input,DESCENDING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCENDINGKeyword_41()); 
                    }

                    }


                    }
                    break;
                case 43 :
                    // InternalOpenCypherParser.g:5176:2: ( DESC )
                    {
                    // InternalOpenCypherParser.g:5176:2: ( DESC )
                    // InternalOpenCypherParser.g:5177:3: DESC
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCKeyword_42()); 
                    }
                    match(input,DESC,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCKeyword_42()); 
                    }

                    }


                    }
                    break;
                case 44 :
                    // InternalOpenCypherParser.g:5182:2: ( ASCENDING )
                    {
                    // InternalOpenCypherParser.g:5182:2: ( ASCENDING )
                    // InternalOpenCypherParser.g:5183:3: ASCENDING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCENDINGKeyword_43()); 
                    }
                    match(input,ASCENDING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCENDINGKeyword_43()); 
                    }

                    }


                    }
                    break;
                case 45 :
                    // InternalOpenCypherParser.g:5188:2: ( ASC )
                    {
                    // InternalOpenCypherParser.g:5188:2: ( ASC )
                    // InternalOpenCypherParser.g:5189:3: ASC
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCKeyword_44()); 
                    }
                    match(input,ASC,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCKeyword_44()); 
                    }

                    }


                    }
                    break;
                case 46 :
                    // InternalOpenCypherParser.g:5194:2: ( JOIN )
                    {
                    // InternalOpenCypherParser.g:5194:2: ( JOIN )
                    // InternalOpenCypherParser.g:5195:3: JOIN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getJOINKeyword_45()); 
                    }
                    match(input,JOIN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getJOINKeyword_45()); 
                    }

                    }


                    }
                    break;
                case 47 :
                    // InternalOpenCypherParser.g:5200:2: ( SCAN )
                    {
                    // InternalOpenCypherParser.g:5200:2: ( SCAN )
                    // InternalOpenCypherParser.g:5201:3: SCAN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSCANKeyword_46()); 
                    }
                    match(input,SCAN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSCANKeyword_46()); 
                    }

                    }


                    }
                    break;
                case 48 :
                    // InternalOpenCypherParser.g:5206:2: ( START )
                    {
                    // InternalOpenCypherParser.g:5206:2: ( START )
                    // InternalOpenCypherParser.g:5207:3: START
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTKeyword_47()); 
                    }
                    match(input,START,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTKeyword_47()); 
                    }

                    }


                    }
                    break;
                case 49 :
                    // InternalOpenCypherParser.g:5212:2: ( NODE )
                    {
                    // InternalOpenCypherParser.g:5212:2: ( NODE )
                    // InternalOpenCypherParser.g:5213:3: NODE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNODEKeyword_48()); 
                    }
                    match(input,NODE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNODEKeyword_48()); 
                    }

                    }


                    }
                    break;
                case 50 :
                    // InternalOpenCypherParser.g:5218:2: ( RELATIONSHIP )
                    {
                    // InternalOpenCypherParser.g:5218:2: ( RELATIONSHIP )
                    // InternalOpenCypherParser.g:5219:3: RELATIONSHIP
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELATIONSHIPKeyword_49()); 
                    }
                    match(input,RELATIONSHIP,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELATIONSHIPKeyword_49()); 
                    }

                    }


                    }
                    break;
                case 51 :
                    // InternalOpenCypherParser.g:5224:2: ( REL )
                    {
                    // InternalOpenCypherParser.g:5224:2: ( REL )
                    // InternalOpenCypherParser.g:5225:3: REL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELKeyword_50()); 
                    }
                    match(input,REL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELKeyword_50()); 
                    }

                    }


                    }
                    break;
                case 52 :
                    // InternalOpenCypherParser.g:5230:2: ( WHERE )
                    {
                    // InternalOpenCypherParser.g:5230:2: ( WHERE )
                    // InternalOpenCypherParser.g:5231:3: WHERE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHEREKeyword_51()); 
                    }
                    match(input,WHERE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHEREKeyword_51()); 
                    }

                    }


                    }
                    break;
                case 53 :
                    // InternalOpenCypherParser.g:5236:2: ( SHORTESTPATH )
                    {
                    // InternalOpenCypherParser.g:5236:2: ( SHORTESTPATH )
                    // InternalOpenCypherParser.g:5237:3: SHORTESTPATH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSHORTESTPATHKeyword_52()); 
                    }
                    match(input,SHORTESTPATH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSHORTESTPATHKeyword_52()); 
                    }

                    }


                    }
                    break;
                case 54 :
                    // InternalOpenCypherParser.g:5242:2: ( ALLSHORTESTPATHS )
                    {
                    // InternalOpenCypherParser.g:5242:2: ( ALLSHORTESTPATHS )
                    // InternalOpenCypherParser.g:5243:3: ALLSHORTESTPATHS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLSHORTESTPATHSKeyword_53()); 
                    }
                    match(input,ALLSHORTESTPATHS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLSHORTESTPATHSKeyword_53()); 
                    }

                    }


                    }
                    break;
                case 55 :
                    // InternalOpenCypherParser.g:5248:2: ( OR )
                    {
                    // InternalOpenCypherParser.g:5248:2: ( OR )
                    // InternalOpenCypherParser.g:5249:3: OR
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getORKeyword_54()); 
                    }
                    match(input,OR,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getORKeyword_54()); 
                    }

                    }


                    }
                    break;
                case 56 :
                    // InternalOpenCypherParser.g:5254:2: ( XOR )
                    {
                    // InternalOpenCypherParser.g:5254:2: ( XOR )
                    // InternalOpenCypherParser.g:5255:3: XOR
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getXORKeyword_55()); 
                    }
                    match(input,XOR,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getXORKeyword_55()); 
                    }

                    }


                    }
                    break;
                case 57 :
                    // InternalOpenCypherParser.g:5260:2: ( AND )
                    {
                    // InternalOpenCypherParser.g:5260:2: ( AND )
                    // InternalOpenCypherParser.g:5261:3: AND
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getANDKeyword_56()); 
                    }
                    match(input,AND,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getANDKeyword_56()); 
                    }

                    }


                    }
                    break;
                case 58 :
                    // InternalOpenCypherParser.g:5266:2: ( NOT )
                    {
                    // InternalOpenCypherParser.g:5266:2: ( NOT )
                    // InternalOpenCypherParser.g:5267:3: NOT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNOTKeyword_57()); 
                    }
                    match(input,NOT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNOTKeyword_57()); 
                    }

                    }


                    }
                    break;
                case 59 :
                    // InternalOpenCypherParser.g:5272:2: ( STARTS )
                    {
                    // InternalOpenCypherParser.g:5272:2: ( STARTS )
                    // InternalOpenCypherParser.g:5273:3: STARTS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTSKeyword_58()); 
                    }
                    match(input,STARTS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTSKeyword_58()); 
                    }

                    }


                    }
                    break;
                case 60 :
                    // InternalOpenCypherParser.g:5278:2: ( ENDS )
                    {
                    // InternalOpenCypherParser.g:5278:2: ( ENDS )
                    // InternalOpenCypherParser.g:5279:3: ENDS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDSKeyword_59()); 
                    }
                    match(input,ENDS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDSKeyword_59()); 
                    }

                    }


                    }
                    break;
                case 61 :
                    // InternalOpenCypherParser.g:5284:2: ( CONTAINS )
                    {
                    // InternalOpenCypherParser.g:5284:2: ( CONTAINS )
                    // InternalOpenCypherParser.g:5285:3: CONTAINS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONTAINSKeyword_60()); 
                    }
                    match(input,CONTAINS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONTAINSKeyword_60()); 
                    }

                    }


                    }
                    break;
                case 62 :
                    // InternalOpenCypherParser.g:5290:2: ( NULL )
                    {
                    // InternalOpenCypherParser.g:5290:2: ( NULL )
                    // InternalOpenCypherParser.g:5291:3: NULL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNULLKeyword_61()); 
                    }
                    match(input,NULL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNULLKeyword_61()); 
                    }

                    }


                    }
                    break;
                case 63 :
                    // InternalOpenCypherParser.g:5296:2: ( TRUE )
                    {
                    // InternalOpenCypherParser.g:5296:2: ( TRUE )
                    // InternalOpenCypherParser.g:5297:3: TRUE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getTRUEKeyword_62()); 
                    }
                    match(input,TRUE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getTRUEKeyword_62()); 
                    }

                    }


                    }
                    break;
                case 64 :
                    // InternalOpenCypherParser.g:5302:2: ( FALSE )
                    {
                    // InternalOpenCypherParser.g:5302:2: ( FALSE )
                    // InternalOpenCypherParser.g:5303:3: FALSE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFALSEKeyword_63()); 
                    }
                    match(input,FALSE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFALSEKeyword_63()); 
                    }

                    }


                    }
                    break;
                case 65 :
                    // InternalOpenCypherParser.g:5308:2: ( COUNT )
                    {
                    // InternalOpenCypherParser.g:5308:2: ( COUNT )
                    // InternalOpenCypherParser.g:5309:3: COUNT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOUNTKeyword_64()); 
                    }
                    match(input,COUNT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOUNTKeyword_64()); 
                    }

                    }


                    }
                    break;
                case 66 :
                    // InternalOpenCypherParser.g:5314:2: ( FILTER )
                    {
                    // InternalOpenCypherParser.g:5314:2: ( FILTER )
                    // InternalOpenCypherParser.g:5315:3: FILTER
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFILTERKeyword_65()); 
                    }
                    match(input,FILTER,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFILTERKeyword_65()); 
                    }

                    }


                    }
                    break;
                case 67 :
                    // InternalOpenCypherParser.g:5320:2: ( EXTRACT )
                    {
                    // InternalOpenCypherParser.g:5320:2: ( EXTRACT )
                    // InternalOpenCypherParser.g:5321:3: EXTRACT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXTRACTKeyword_66()); 
                    }
                    match(input,EXTRACT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXTRACTKeyword_66()); 
                    }

                    }


                    }
                    break;
                case 68 :
                    // InternalOpenCypherParser.g:5326:2: ( ANY )
                    {
                    // InternalOpenCypherParser.g:5326:2: ( ANY )
                    // InternalOpenCypherParser.g:5327:3: ANY
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getANYKeyword_67()); 
                    }
                    match(input,ANY,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getANYKeyword_67()); 
                    }

                    }


                    }
                    break;
                case 69 :
                    // InternalOpenCypherParser.g:5332:2: ( NONE )
                    {
                    // InternalOpenCypherParser.g:5332:2: ( NONE )
                    // InternalOpenCypherParser.g:5333:3: NONE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNONEKeyword_68()); 
                    }
                    match(input,NONE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNONEKeyword_68()); 
                    }

                    }


                    }
                    break;
                case 70 :
                    // InternalOpenCypherParser.g:5338:2: ( SINGLE )
                    {
                    // InternalOpenCypherParser.g:5338:2: ( SINGLE )
                    // InternalOpenCypherParser.g:5339:3: SINGLE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSINGLEKeyword_69()); 
                    }
                    match(input,SINGLE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSINGLEKeyword_69()); 
                    }

                    }


                    }
                    break;
                case 71 :
                    // InternalOpenCypherParser.g:5344:2: ( REDUCE )
                    {
                    // InternalOpenCypherParser.g:5344:2: ( REDUCE )
                    // InternalOpenCypherParser.g:5345:3: REDUCE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getREDUCEKeyword_70()); 
                    }
                    match(input,REDUCE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getREDUCEKeyword_70()); 
                    }

                    }


                    }
                    break;
                case 72 :
                    // InternalOpenCypherParser.g:5350:2: ( CASE )
                    {
                    // InternalOpenCypherParser.g:5350:2: ( CASE )
                    // InternalOpenCypherParser.g:5351:3: CASE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCASEKeyword_71()); 
                    }
                    match(input,CASE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCASEKeyword_71()); 
                    }

                    }


                    }
                    break;
                case 73 :
                    // InternalOpenCypherParser.g:5356:2: ( ELSE )
                    {
                    // InternalOpenCypherParser.g:5356:2: ( ELSE )
                    // InternalOpenCypherParser.g:5357:3: ELSE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getELSEKeyword_72()); 
                    }
                    match(input,ELSE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getELSEKeyword_72()); 
                    }

                    }


                    }
                    break;
                case 74 :
                    // InternalOpenCypherParser.g:5362:2: ( END )
                    {
                    // InternalOpenCypherParser.g:5362:2: ( END )
                    // InternalOpenCypherParser.g:5363:3: END
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDKeyword_73()); 
                    }
                    match(input,END,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDKeyword_73()); 
                    }

                    }


                    }
                    break;
                case 75 :
                    // InternalOpenCypherParser.g:5368:2: ( WHEN )
                    {
                    // InternalOpenCypherParser.g:5368:2: ( WHEN )
                    // InternalOpenCypherParser.g:5369:3: WHEN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHENKeyword_74()); 
                    }
                    match(input,WHEN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHENKeyword_74()); 
                    }

                    }


                    }
                    break;
                case 76 :
                    // InternalOpenCypherParser.g:5374:2: ( THEN )
                    {
                    // InternalOpenCypherParser.g:5374:2: ( THEN )
                    // InternalOpenCypherParser.g:5375:3: THEN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getTHENKeyword_75()); 
                    }
                    match(input,THEN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getTHENKeyword_75()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SYMBOLIC_NAME_X__Alternatives"


    // $ANTLR start "rule__Cypher__Group__0"
    // InternalOpenCypherParser.g:5384:1: rule__Cypher__Group__0 : rule__Cypher__Group__0__Impl rule__Cypher__Group__1 ;
    public final void rule__Cypher__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5388:1: ( rule__Cypher__Group__0__Impl rule__Cypher__Group__1 )
            // InternalOpenCypherParser.g:5389:2: rule__Cypher__Group__0__Impl rule__Cypher__Group__1
            {
            pushFollow(FOLLOW_5);
            rule__Cypher__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Cypher__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__0"


    // $ANTLR start "rule__Cypher__Group__0__Impl"
    // InternalOpenCypherParser.g:5396:1: rule__Cypher__Group__0__Impl : ( () ) ;
    public final void rule__Cypher__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5400:1: ( ( () ) )
            // InternalOpenCypherParser.g:5401:1: ( () )
            {
            // InternalOpenCypherParser.g:5401:1: ( () )
            // InternalOpenCypherParser.g:5402:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getCypherAction_0()); 
            }
            // InternalOpenCypherParser.g:5403:2: ()
            // InternalOpenCypherParser.g:5403:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getCypherAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__0__Impl"


    // $ANTLR start "rule__Cypher__Group__1"
    // InternalOpenCypherParser.g:5411:1: rule__Cypher__Group__1 : rule__Cypher__Group__1__Impl rule__Cypher__Group__2 ;
    public final void rule__Cypher__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5415:1: ( rule__Cypher__Group__1__Impl rule__Cypher__Group__2 )
            // InternalOpenCypherParser.g:5416:2: rule__Cypher__Group__1__Impl rule__Cypher__Group__2
            {
            pushFollow(FOLLOW_6);
            rule__Cypher__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Cypher__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__1"


    // $ANTLR start "rule__Cypher__Group__1__Impl"
    // InternalOpenCypherParser.g:5423:1: rule__Cypher__Group__1__Impl : ( ( rule__Cypher__QueryOptionsAssignment_1 ) ) ;
    public final void rule__Cypher__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5427:1: ( ( ( rule__Cypher__QueryOptionsAssignment_1 ) ) )
            // InternalOpenCypherParser.g:5428:1: ( ( rule__Cypher__QueryOptionsAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:5428:1: ( ( rule__Cypher__QueryOptionsAssignment_1 ) )
            // InternalOpenCypherParser.g:5429:2: ( rule__Cypher__QueryOptionsAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getQueryOptionsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:5430:2: ( rule__Cypher__QueryOptionsAssignment_1 )
            // InternalOpenCypherParser.g:5430:3: rule__Cypher__QueryOptionsAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Cypher__QueryOptionsAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getQueryOptionsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__1__Impl"


    // $ANTLR start "rule__Cypher__Group__2"
    // InternalOpenCypherParser.g:5438:1: rule__Cypher__Group__2 : rule__Cypher__Group__2__Impl rule__Cypher__Group__3 ;
    public final void rule__Cypher__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5442:1: ( rule__Cypher__Group__2__Impl rule__Cypher__Group__3 )
            // InternalOpenCypherParser.g:5443:2: rule__Cypher__Group__2__Impl rule__Cypher__Group__3
            {
            pushFollow(FOLLOW_6);
            rule__Cypher__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Cypher__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__2"


    // $ANTLR start "rule__Cypher__Group__2__Impl"
    // InternalOpenCypherParser.g:5450:1: rule__Cypher__Group__2__Impl : ( ( rule__Cypher__StatementsAssignment_2 )* ) ;
    public final void rule__Cypher__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5454:1: ( ( ( rule__Cypher__StatementsAssignment_2 )* ) )
            // InternalOpenCypherParser.g:5455:1: ( ( rule__Cypher__StatementsAssignment_2 )* )
            {
            // InternalOpenCypherParser.g:5455:1: ( ( rule__Cypher__StatementsAssignment_2 )* )
            // InternalOpenCypherParser.g:5456:2: ( rule__Cypher__StatementsAssignment_2 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getStatementsAssignment_2()); 
            }
            // InternalOpenCypherParser.g:5457:2: ( rule__Cypher__StatementsAssignment_2 )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==OPTIONAL||LA52_0==FOREACH||LA52_0==CREATE||(LA52_0>=DELETE && LA52_0<=DETACH)||(LA52_0>=REMOVE && LA52_0<=RETURN)||LA52_0==UNWIND||(LA52_0>=MATCH && LA52_0<=MERGE)||LA52_0==START||LA52_0==USING||LA52_0==CALL||LA52_0==DROP||LA52_0==LOAD||LA52_0==WITH||LA52_0==SET) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5457:3: rule__Cypher__StatementsAssignment_2
            	    {
            	    pushFollow(FOLLOW_7);
            	    rule__Cypher__StatementsAssignment_2();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getStatementsAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__2__Impl"


    // $ANTLR start "rule__Cypher__Group__3"
    // InternalOpenCypherParser.g:5465:1: rule__Cypher__Group__3 : rule__Cypher__Group__3__Impl ;
    public final void rule__Cypher__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5469:1: ( rule__Cypher__Group__3__Impl )
            // InternalOpenCypherParser.g:5470:2: rule__Cypher__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Cypher__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__3"


    // $ANTLR start "rule__Cypher__Group__3__Impl"
    // InternalOpenCypherParser.g:5476:1: rule__Cypher__Group__3__Impl : ( ( Semicolon )? ) ;
    public final void rule__Cypher__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5480:1: ( ( ( Semicolon )? ) )
            // InternalOpenCypherParser.g:5481:1: ( ( Semicolon )? )
            {
            // InternalOpenCypherParser.g:5481:1: ( ( Semicolon )? )
            // InternalOpenCypherParser.g:5482:2: ( Semicolon )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getSemicolonKeyword_3()); 
            }
            // InternalOpenCypherParser.g:5483:2: ( Semicolon )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==Semicolon) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // InternalOpenCypherParser.g:5483:3: Semicolon
                    {
                    match(input,Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getSemicolonKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__3__Impl"


    // $ANTLR start "rule__QueryOptions__Group__0"
    // InternalOpenCypherParser.g:5492:1: rule__QueryOptions__Group__0 : rule__QueryOptions__Group__0__Impl rule__QueryOptions__Group__1 ;
    public final void rule__QueryOptions__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5496:1: ( rule__QueryOptions__Group__0__Impl rule__QueryOptions__Group__1 )
            // InternalOpenCypherParser.g:5497:2: rule__QueryOptions__Group__0__Impl rule__QueryOptions__Group__1
            {
            pushFollow(FOLLOW_5);
            rule__QueryOptions__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__QueryOptions__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__Group__0"


    // $ANTLR start "rule__QueryOptions__Group__0__Impl"
    // InternalOpenCypherParser.g:5504:1: rule__QueryOptions__Group__0__Impl : ( () ) ;
    public final void rule__QueryOptions__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5508:1: ( ( () ) )
            // InternalOpenCypherParser.g:5509:1: ( () )
            {
            // InternalOpenCypherParser.g:5509:1: ( () )
            // InternalOpenCypherParser.g:5510:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getAllOptionsAction_0()); 
            }
            // InternalOpenCypherParser.g:5511:2: ()
            // InternalOpenCypherParser.g:5511:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getAllOptionsAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__Group__0__Impl"


    // $ANTLR start "rule__QueryOptions__Group__1"
    // InternalOpenCypherParser.g:5519:1: rule__QueryOptions__Group__1 : rule__QueryOptions__Group__1__Impl ;
    public final void rule__QueryOptions__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5523:1: ( rule__QueryOptions__Group__1__Impl )
            // InternalOpenCypherParser.g:5524:2: rule__QueryOptions__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__QueryOptions__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__Group__1"


    // $ANTLR start "rule__QueryOptions__Group__1__Impl"
    // InternalOpenCypherParser.g:5530:1: rule__QueryOptions__Group__1__Impl : ( ( rule__QueryOptions__UnorderedGroup_1 ) ) ;
    public final void rule__QueryOptions__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5534:1: ( ( ( rule__QueryOptions__UnorderedGroup_1 ) ) )
            // InternalOpenCypherParser.g:5535:1: ( ( rule__QueryOptions__UnorderedGroup_1 ) )
            {
            // InternalOpenCypherParser.g:5535:1: ( ( rule__QueryOptions__UnorderedGroup_1 ) )
            // InternalOpenCypherParser.g:5536:2: ( rule__QueryOptions__UnorderedGroup_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()); 
            }
            // InternalOpenCypherParser.g:5537:2: ( rule__QueryOptions__UnorderedGroup_1 )
            // InternalOpenCypherParser.g:5537:3: rule__QueryOptions__UnorderedGroup_1
            {
            pushFollow(FOLLOW_2);
            rule__QueryOptions__UnorderedGroup_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__Group__1__Impl"


    // $ANTLR start "rule__CypherOption__Group__0"
    // InternalOpenCypherParser.g:5546:1: rule__CypherOption__Group__0 : rule__CypherOption__Group__0__Impl rule__CypherOption__Group__1 ;
    public final void rule__CypherOption__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5550:1: ( rule__CypherOption__Group__0__Impl rule__CypherOption__Group__1 )
            // InternalOpenCypherParser.g:5551:2: rule__CypherOption__Group__0__Impl rule__CypherOption__Group__1
            {
            pushFollow(FOLLOW_5);
            rule__CypherOption__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CypherOption__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__0"


    // $ANTLR start "rule__CypherOption__Group__0__Impl"
    // InternalOpenCypherParser.g:5558:1: rule__CypherOption__Group__0__Impl : ( () ) ;
    public final void rule__CypherOption__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5562:1: ( ( () ) )
            // InternalOpenCypherParser.g:5563:1: ( () )
            {
            // InternalOpenCypherParser.g:5563:1: ( () )
            // InternalOpenCypherParser.g:5564:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getCypherOptionAction_0()); 
            }
            // InternalOpenCypherParser.g:5565:2: ()
            // InternalOpenCypherParser.g:5565:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getCypherOptionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__0__Impl"


    // $ANTLR start "rule__CypherOption__Group__1"
    // InternalOpenCypherParser.g:5573:1: rule__CypherOption__Group__1 : rule__CypherOption__Group__1__Impl rule__CypherOption__Group__2 ;
    public final void rule__CypherOption__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5577:1: ( rule__CypherOption__Group__1__Impl rule__CypherOption__Group__2 )
            // InternalOpenCypherParser.g:5578:2: rule__CypherOption__Group__1__Impl rule__CypherOption__Group__2
            {
            pushFollow(FOLLOW_8);
            rule__CypherOption__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CypherOption__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__1"


    // $ANTLR start "rule__CypherOption__Group__1__Impl"
    // InternalOpenCypherParser.g:5585:1: rule__CypherOption__Group__1__Impl : ( CYPHER ) ;
    public final void rule__CypherOption__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5589:1: ( ( CYPHER ) )
            // InternalOpenCypherParser.g:5590:1: ( CYPHER )
            {
            // InternalOpenCypherParser.g:5590:1: ( CYPHER )
            // InternalOpenCypherParser.g:5591:2: CYPHER
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getCYPHERKeyword_1()); 
            }
            match(input,CYPHER,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getCYPHERKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__1__Impl"


    // $ANTLR start "rule__CypherOption__Group__2"
    // InternalOpenCypherParser.g:5600:1: rule__CypherOption__Group__2 : rule__CypherOption__Group__2__Impl rule__CypherOption__Group__3 ;
    public final void rule__CypherOption__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5604:1: ( rule__CypherOption__Group__2__Impl rule__CypherOption__Group__3 )
            // InternalOpenCypherParser.g:5605:2: rule__CypherOption__Group__2__Impl rule__CypherOption__Group__3
            {
            pushFollow(FOLLOW_8);
            rule__CypherOption__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CypherOption__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__2"


    // $ANTLR start "rule__CypherOption__Group__2__Impl"
    // InternalOpenCypherParser.g:5612:1: rule__CypherOption__Group__2__Impl : ( ( rule__CypherOption__VersionNumberAssignment_2 )? ) ;
    public final void rule__CypherOption__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5616:1: ( ( ( rule__CypherOption__VersionNumberAssignment_2 )? ) )
            // InternalOpenCypherParser.g:5617:1: ( ( rule__CypherOption__VersionNumberAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:5617:1: ( ( rule__CypherOption__VersionNumberAssignment_2 )? )
            // InternalOpenCypherParser.g:5618:2: ( rule__CypherOption__VersionNumberAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getVersionNumberAssignment_2()); 
            }
            // InternalOpenCypherParser.g:5619:2: ( rule__CypherOption__VersionNumberAssignment_2 )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( ((LA54_0>=RULE_HEX && LA54_0<=RULE_DECIMAL)) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // InternalOpenCypherParser.g:5619:3: rule__CypherOption__VersionNumberAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__CypherOption__VersionNumberAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getVersionNumberAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__2__Impl"


    // $ANTLR start "rule__CypherOption__Group__3"
    // InternalOpenCypherParser.g:5627:1: rule__CypherOption__Group__3 : rule__CypherOption__Group__3__Impl ;
    public final void rule__CypherOption__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5631:1: ( rule__CypherOption__Group__3__Impl )
            // InternalOpenCypherParser.g:5632:2: rule__CypherOption__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CypherOption__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__3"


    // $ANTLR start "rule__CypherOption__Group__3__Impl"
    // InternalOpenCypherParser.g:5638:1: rule__CypherOption__Group__3__Impl : ( ( rule__CypherOption__ConfigurationOptionAssignment_3 )* ) ;
    public final void rule__CypherOption__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5642:1: ( ( ( rule__CypherOption__ConfigurationOptionAssignment_3 )* ) )
            // InternalOpenCypherParser.g:5643:1: ( ( rule__CypherOption__ConfigurationOptionAssignment_3 )* )
            {
            // InternalOpenCypherParser.g:5643:1: ( ( rule__CypherOption__ConfigurationOptionAssignment_3 )* )
            // InternalOpenCypherParser.g:5644:2: ( rule__CypherOption__ConfigurationOptionAssignment_3 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getConfigurationOptionAssignment_3()); 
            }
            // InternalOpenCypherParser.g:5645:2: ( rule__CypherOption__ConfigurationOptionAssignment_3 )*
            loop55:
            do {
                int alt55=2;
                alt55 = dfa55.predict(input);
                switch (alt55) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5645:3: rule__CypherOption__ConfigurationOptionAssignment_3
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__CypherOption__ConfigurationOptionAssignment_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getConfigurationOptionAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__3__Impl"


    // $ANTLR start "rule__ConfigurationOption__Group__0"
    // InternalOpenCypherParser.g:5654:1: rule__ConfigurationOption__Group__0 : rule__ConfigurationOption__Group__0__Impl rule__ConfigurationOption__Group__1 ;
    public final void rule__ConfigurationOption__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5658:1: ( rule__ConfigurationOption__Group__0__Impl rule__ConfigurationOption__Group__1 )
            // InternalOpenCypherParser.g:5659:2: rule__ConfigurationOption__Group__0__Impl rule__ConfigurationOption__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__ConfigurationOption__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__0"


    // $ANTLR start "rule__ConfigurationOption__Group__0__Impl"
    // InternalOpenCypherParser.g:5666:1: rule__ConfigurationOption__Group__0__Impl : ( ( rule__ConfigurationOption__KeyAssignment_0 ) ) ;
    public final void rule__ConfigurationOption__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5670:1: ( ( ( rule__ConfigurationOption__KeyAssignment_0 ) ) )
            // InternalOpenCypherParser.g:5671:1: ( ( rule__ConfigurationOption__KeyAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:5671:1: ( ( rule__ConfigurationOption__KeyAssignment_0 ) )
            // InternalOpenCypherParser.g:5672:2: ( rule__ConfigurationOption__KeyAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getKeyAssignment_0()); 
            }
            // InternalOpenCypherParser.g:5673:2: ( rule__ConfigurationOption__KeyAssignment_0 )
            // InternalOpenCypherParser.g:5673:3: rule__ConfigurationOption__KeyAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__KeyAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getKeyAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__0__Impl"


    // $ANTLR start "rule__ConfigurationOption__Group__1"
    // InternalOpenCypherParser.g:5681:1: rule__ConfigurationOption__Group__1 : rule__ConfigurationOption__Group__1__Impl rule__ConfigurationOption__Group__2 ;
    public final void rule__ConfigurationOption__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5685:1: ( rule__ConfigurationOption__Group__1__Impl rule__ConfigurationOption__Group__2 )
            // InternalOpenCypherParser.g:5686:2: rule__ConfigurationOption__Group__1__Impl rule__ConfigurationOption__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__ConfigurationOption__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__1"


    // $ANTLR start "rule__ConfigurationOption__Group__1__Impl"
    // InternalOpenCypherParser.g:5693:1: rule__ConfigurationOption__Group__1__Impl : ( EqualsSign ) ;
    public final void rule__ConfigurationOption__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5697:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:5698:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:5698:1: ( EqualsSign )
            // InternalOpenCypherParser.g:5699:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getEqualsSignKeyword_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getEqualsSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__1__Impl"


    // $ANTLR start "rule__ConfigurationOption__Group__2"
    // InternalOpenCypherParser.g:5708:1: rule__ConfigurationOption__Group__2 : rule__ConfigurationOption__Group__2__Impl ;
    public final void rule__ConfigurationOption__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5712:1: ( rule__ConfigurationOption__Group__2__Impl )
            // InternalOpenCypherParser.g:5713:2: rule__ConfigurationOption__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__2"


    // $ANTLR start "rule__ConfigurationOption__Group__2__Impl"
    // InternalOpenCypherParser.g:5719:1: rule__ConfigurationOption__Group__2__Impl : ( ( rule__ConfigurationOption__ValueAssignment_2 ) ) ;
    public final void rule__ConfigurationOption__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5723:1: ( ( ( rule__ConfigurationOption__ValueAssignment_2 ) ) )
            // InternalOpenCypherParser.g:5724:1: ( ( rule__ConfigurationOption__ValueAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:5724:1: ( ( rule__ConfigurationOption__ValueAssignment_2 ) )
            // InternalOpenCypherParser.g:5725:2: ( rule__ConfigurationOption__ValueAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getValueAssignment_2()); 
            }
            // InternalOpenCypherParser.g:5726:2: ( rule__ConfigurationOption__ValueAssignment_2 )
            // InternalOpenCypherParser.g:5726:3: rule__ConfigurationOption__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__ValueAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getValueAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__2__Impl"


    // $ANTLR start "rule__RegularQuery__Group__0"
    // InternalOpenCypherParser.g:5735:1: rule__RegularQuery__Group__0 : rule__RegularQuery__Group__0__Impl rule__RegularQuery__Group__1 ;
    public final void rule__RegularQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5739:1: ( rule__RegularQuery__Group__0__Impl rule__RegularQuery__Group__1 )
            // InternalOpenCypherParser.g:5740:2: rule__RegularQuery__Group__0__Impl rule__RegularQuery__Group__1
            {
            pushFollow(FOLLOW_11);
            rule__RegularQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RegularQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group__0"


    // $ANTLR start "rule__RegularQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:5747:1: rule__RegularQuery__Group__0__Impl : ( ruleSingleQuery ) ;
    public final void rule__RegularQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5751:1: ( ( ruleSingleQuery ) )
            // InternalOpenCypherParser.g:5752:1: ( ruleSingleQuery )
            {
            // InternalOpenCypherParser.g:5752:1: ( ruleSingleQuery )
            // InternalOpenCypherParser.g:5753:2: ruleSingleQuery
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getSingleQueryParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSingleQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getSingleQueryParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group__0__Impl"


    // $ANTLR start "rule__RegularQuery__Group__1"
    // InternalOpenCypherParser.g:5762:1: rule__RegularQuery__Group__1 : rule__RegularQuery__Group__1__Impl ;
    public final void rule__RegularQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5766:1: ( rule__RegularQuery__Group__1__Impl )
            // InternalOpenCypherParser.g:5767:2: rule__RegularQuery__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RegularQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group__1"


    // $ANTLR start "rule__RegularQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:5773:1: rule__RegularQuery__Group__1__Impl : ( ( rule__RegularQuery__Group_1__0 )? ) ;
    public final void rule__RegularQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5777:1: ( ( ( rule__RegularQuery__Group_1__0 )? ) )
            // InternalOpenCypherParser.g:5778:1: ( ( rule__RegularQuery__Group_1__0 )? )
            {
            // InternalOpenCypherParser.g:5778:1: ( ( rule__RegularQuery__Group_1__0 )? )
            // InternalOpenCypherParser.g:5779:2: ( rule__RegularQuery__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:5780:2: ( rule__RegularQuery__Group_1__0 )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==UNION) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // InternalOpenCypherParser.g:5780:3: rule__RegularQuery__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RegularQuery__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group__1__Impl"


    // $ANTLR start "rule__RegularQuery__Group_1__0"
    // InternalOpenCypherParser.g:5789:1: rule__RegularQuery__Group_1__0 : rule__RegularQuery__Group_1__0__Impl rule__RegularQuery__Group_1__1 ;
    public final void rule__RegularQuery__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5793:1: ( rule__RegularQuery__Group_1__0__Impl rule__RegularQuery__Group_1__1 )
            // InternalOpenCypherParser.g:5794:2: rule__RegularQuery__Group_1__0__Impl rule__RegularQuery__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__RegularQuery__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RegularQuery__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group_1__0"


    // $ANTLR start "rule__RegularQuery__Group_1__0__Impl"
    // InternalOpenCypherParser.g:5801:1: rule__RegularQuery__Group_1__0__Impl : ( () ) ;
    public final void rule__RegularQuery__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5805:1: ( ( () ) )
            // InternalOpenCypherParser.g:5806:1: ( () )
            {
            // InternalOpenCypherParser.g:5806:1: ( () )
            // InternalOpenCypherParser.g:5807:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getCombinedQuerySingleQueryAction_1_0()); 
            }
            // InternalOpenCypherParser.g:5808:2: ()
            // InternalOpenCypherParser.g:5808:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getCombinedQuerySingleQueryAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group_1__0__Impl"


    // $ANTLR start "rule__RegularQuery__Group_1__1"
    // InternalOpenCypherParser.g:5816:1: rule__RegularQuery__Group_1__1 : rule__RegularQuery__Group_1__1__Impl ;
    public final void rule__RegularQuery__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5820:1: ( rule__RegularQuery__Group_1__1__Impl )
            // InternalOpenCypherParser.g:5821:2: rule__RegularQuery__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RegularQuery__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group_1__1"


    // $ANTLR start "rule__RegularQuery__Group_1__1__Impl"
    // InternalOpenCypherParser.g:5827:1: rule__RegularQuery__Group_1__1__Impl : ( ( ( rule__RegularQuery__UnionAssignment_1_1 ) ) ( ( rule__RegularQuery__UnionAssignment_1_1 )* ) ) ;
    public final void rule__RegularQuery__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5831:1: ( ( ( ( rule__RegularQuery__UnionAssignment_1_1 ) ) ( ( rule__RegularQuery__UnionAssignment_1_1 )* ) ) )
            // InternalOpenCypherParser.g:5832:1: ( ( ( rule__RegularQuery__UnionAssignment_1_1 ) ) ( ( rule__RegularQuery__UnionAssignment_1_1 )* ) )
            {
            // InternalOpenCypherParser.g:5832:1: ( ( ( rule__RegularQuery__UnionAssignment_1_1 ) ) ( ( rule__RegularQuery__UnionAssignment_1_1 )* ) )
            // InternalOpenCypherParser.g:5833:2: ( ( rule__RegularQuery__UnionAssignment_1_1 ) ) ( ( rule__RegularQuery__UnionAssignment_1_1 )* )
            {
            // InternalOpenCypherParser.g:5833:2: ( ( rule__RegularQuery__UnionAssignment_1_1 ) )
            // InternalOpenCypherParser.g:5834:3: ( rule__RegularQuery__UnionAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:5835:3: ( rule__RegularQuery__UnionAssignment_1_1 )
            // InternalOpenCypherParser.g:5835:4: rule__RegularQuery__UnionAssignment_1_1
            {
            pushFollow(FOLLOW_12);
            rule__RegularQuery__UnionAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); 
            }

            }

            // InternalOpenCypherParser.g:5838:2: ( ( rule__RegularQuery__UnionAssignment_1_1 )* )
            // InternalOpenCypherParser.g:5839:3: ( rule__RegularQuery__UnionAssignment_1_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:5840:3: ( rule__RegularQuery__UnionAssignment_1_1 )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==UNION) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5840:4: rule__RegularQuery__UnionAssignment_1_1
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__RegularQuery__UnionAssignment_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group_1__1__Impl"


    // $ANTLR start "rule__BulkImportQuery__Group__0"
    // InternalOpenCypherParser.g:5850:1: rule__BulkImportQuery__Group__0 : rule__BulkImportQuery__Group__0__Impl rule__BulkImportQuery__Group__1 ;
    public final void rule__BulkImportQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5854:1: ( rule__BulkImportQuery__Group__0__Impl rule__BulkImportQuery__Group__1 )
            // InternalOpenCypherParser.g:5855:2: rule__BulkImportQuery__Group__0__Impl rule__BulkImportQuery__Group__1
            {
            pushFollow(FOLLOW_13);
            rule__BulkImportQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__BulkImportQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__Group__0"


    // $ANTLR start "rule__BulkImportQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:5862:1: rule__BulkImportQuery__Group__0__Impl : ( ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 ) ) ;
    public final void rule__BulkImportQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5866:1: ( ( ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 ) ) )
            // InternalOpenCypherParser.g:5867:1: ( ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:5867:1: ( ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 ) )
            // InternalOpenCypherParser.g:5868:2: ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintAssignment_0()); 
            }
            // InternalOpenCypherParser.g:5869:2: ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 )
            // InternalOpenCypherParser.g:5869:3: rule__BulkImportQuery__PeriodicCommitHintAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__BulkImportQuery__PeriodicCommitHintAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__Group__0__Impl"


    // $ANTLR start "rule__BulkImportQuery__Group__1"
    // InternalOpenCypherParser.g:5877:1: rule__BulkImportQuery__Group__1 : rule__BulkImportQuery__Group__1__Impl ;
    public final void rule__BulkImportQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5881:1: ( rule__BulkImportQuery__Group__1__Impl )
            // InternalOpenCypherParser.g:5882:2: rule__BulkImportQuery__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__BulkImportQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__Group__1"


    // $ANTLR start "rule__BulkImportQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:5888:1: rule__BulkImportQuery__Group__1__Impl : ( ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 ) ) ;
    public final void rule__BulkImportQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5892:1: ( ( ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 ) ) )
            // InternalOpenCypherParser.g:5893:1: ( ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:5893:1: ( ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 ) )
            // InternalOpenCypherParser.g:5894:2: ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryAssignment_1()); 
            }
            // InternalOpenCypherParser.g:5895:2: ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 )
            // InternalOpenCypherParser.g:5895:3: rule__BulkImportQuery__LoadCSVQueryAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__BulkImportQuery__LoadCSVQueryAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__Group__1__Impl"


    // $ANTLR start "rule__PeriodicCommitHint__Group__0"
    // InternalOpenCypherParser.g:5904:1: rule__PeriodicCommitHint__Group__0 : rule__PeriodicCommitHint__Group__0__Impl rule__PeriodicCommitHint__Group__1 ;
    public final void rule__PeriodicCommitHint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5908:1: ( rule__PeriodicCommitHint__Group__0__Impl rule__PeriodicCommitHint__Group__1 )
            // InternalOpenCypherParser.g:5909:2: rule__PeriodicCommitHint__Group__0__Impl rule__PeriodicCommitHint__Group__1
            {
            pushFollow(FOLLOW_14);
            rule__PeriodicCommitHint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__0"


    // $ANTLR start "rule__PeriodicCommitHint__Group__0__Impl"
    // InternalOpenCypherParser.g:5916:1: rule__PeriodicCommitHint__Group__0__Impl : ( () ) ;
    public final void rule__PeriodicCommitHint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5920:1: ( ( () ) )
            // InternalOpenCypherParser.g:5921:1: ( () )
            {
            // InternalOpenCypherParser.g:5921:1: ( () )
            // InternalOpenCypherParser.g:5922:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getPeriodicCommitHintAction_0()); 
            }
            // InternalOpenCypherParser.g:5923:2: ()
            // InternalOpenCypherParser.g:5923:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getPeriodicCommitHintAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__0__Impl"


    // $ANTLR start "rule__PeriodicCommitHint__Group__1"
    // InternalOpenCypherParser.g:5931:1: rule__PeriodicCommitHint__Group__1 : rule__PeriodicCommitHint__Group__1__Impl rule__PeriodicCommitHint__Group__2 ;
    public final void rule__PeriodicCommitHint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5935:1: ( rule__PeriodicCommitHint__Group__1__Impl rule__PeriodicCommitHint__Group__2 )
            // InternalOpenCypherParser.g:5936:2: rule__PeriodicCommitHint__Group__1__Impl rule__PeriodicCommitHint__Group__2
            {
            pushFollow(FOLLOW_15);
            rule__PeriodicCommitHint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__1"


    // $ANTLR start "rule__PeriodicCommitHint__Group__1__Impl"
    // InternalOpenCypherParser.g:5943:1: rule__PeriodicCommitHint__Group__1__Impl : ( USING ) ;
    public final void rule__PeriodicCommitHint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5947:1: ( ( USING ) )
            // InternalOpenCypherParser.g:5948:1: ( USING )
            {
            // InternalOpenCypherParser.g:5948:1: ( USING )
            // InternalOpenCypherParser.g:5949:2: USING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getUSINGKeyword_1()); 
            }
            match(input,USING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getUSINGKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__1__Impl"


    // $ANTLR start "rule__PeriodicCommitHint__Group__2"
    // InternalOpenCypherParser.g:5958:1: rule__PeriodicCommitHint__Group__2 : rule__PeriodicCommitHint__Group__2__Impl rule__PeriodicCommitHint__Group__3 ;
    public final void rule__PeriodicCommitHint__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5962:1: ( rule__PeriodicCommitHint__Group__2__Impl rule__PeriodicCommitHint__Group__3 )
            // InternalOpenCypherParser.g:5963:2: rule__PeriodicCommitHint__Group__2__Impl rule__PeriodicCommitHint__Group__3
            {
            pushFollow(FOLLOW_16);
            rule__PeriodicCommitHint__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__2"


    // $ANTLR start "rule__PeriodicCommitHint__Group__2__Impl"
    // InternalOpenCypherParser.g:5970:1: rule__PeriodicCommitHint__Group__2__Impl : ( PERIODIC ) ;
    public final void rule__PeriodicCommitHint__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5974:1: ( ( PERIODIC ) )
            // InternalOpenCypherParser.g:5975:1: ( PERIODIC )
            {
            // InternalOpenCypherParser.g:5975:1: ( PERIODIC )
            // InternalOpenCypherParser.g:5976:2: PERIODIC
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getPERIODICKeyword_2()); 
            }
            match(input,PERIODIC,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getPERIODICKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__2__Impl"


    // $ANTLR start "rule__PeriodicCommitHint__Group__3"
    // InternalOpenCypherParser.g:5985:1: rule__PeriodicCommitHint__Group__3 : rule__PeriodicCommitHint__Group__3__Impl rule__PeriodicCommitHint__Group__4 ;
    public final void rule__PeriodicCommitHint__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5989:1: ( rule__PeriodicCommitHint__Group__3__Impl rule__PeriodicCommitHint__Group__4 )
            // InternalOpenCypherParser.g:5990:2: rule__PeriodicCommitHint__Group__3__Impl rule__PeriodicCommitHint__Group__4
            {
            pushFollow(FOLLOW_17);
            rule__PeriodicCommitHint__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__3"


    // $ANTLR start "rule__PeriodicCommitHint__Group__3__Impl"
    // InternalOpenCypherParser.g:5997:1: rule__PeriodicCommitHint__Group__3__Impl : ( COMMIT ) ;
    public final void rule__PeriodicCommitHint__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6001:1: ( ( COMMIT ) )
            // InternalOpenCypherParser.g:6002:1: ( COMMIT )
            {
            // InternalOpenCypherParser.g:6002:1: ( COMMIT )
            // InternalOpenCypherParser.g:6003:2: COMMIT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getCOMMITKeyword_3()); 
            }
            match(input,COMMIT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getCOMMITKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__3__Impl"


    // $ANTLR start "rule__PeriodicCommitHint__Group__4"
    // InternalOpenCypherParser.g:6012:1: rule__PeriodicCommitHint__Group__4 : rule__PeriodicCommitHint__Group__4__Impl ;
    public final void rule__PeriodicCommitHint__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6016:1: ( rule__PeriodicCommitHint__Group__4__Impl )
            // InternalOpenCypherParser.g:6017:2: rule__PeriodicCommitHint__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__4"


    // $ANTLR start "rule__PeriodicCommitHint__Group__4__Impl"
    // InternalOpenCypherParser.g:6023:1: rule__PeriodicCommitHint__Group__4__Impl : ( ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )? ) ;
    public final void rule__PeriodicCommitHint__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6027:1: ( ( ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )? ) )
            // InternalOpenCypherParser.g:6028:1: ( ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )? )
            {
            // InternalOpenCypherParser.g:6028:1: ( ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )? )
            // InternalOpenCypherParser.g:6029:2: ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitAssignment_4()); 
            }
            // InternalOpenCypherParser.g:6030:2: ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( ((LA58_0>=RULE_HEX && LA58_0<=RULE_DECIMAL)) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // InternalOpenCypherParser.g:6030:3: rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__4__Impl"


    // $ANTLR start "rule__LoadCSVQuery__Group__0"
    // InternalOpenCypherParser.g:6039:1: rule__LoadCSVQuery__Group__0 : rule__LoadCSVQuery__Group__0__Impl rule__LoadCSVQuery__Group__1 ;
    public final void rule__LoadCSVQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6043:1: ( rule__LoadCSVQuery__Group__0__Impl rule__LoadCSVQuery__Group__1 )
            // InternalOpenCypherParser.g:6044:2: rule__LoadCSVQuery__Group__0__Impl rule__LoadCSVQuery__Group__1
            {
            pushFollow(FOLLOW_18);
            rule__LoadCSVQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSVQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__Group__0"


    // $ANTLR start "rule__LoadCSVQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:6051:1: rule__LoadCSVQuery__Group__0__Impl : ( ( rule__LoadCSVQuery__LoadCSVAssignment_0 ) ) ;
    public final void rule__LoadCSVQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6055:1: ( ( ( rule__LoadCSVQuery__LoadCSVAssignment_0 ) ) )
            // InternalOpenCypherParser.g:6056:1: ( ( rule__LoadCSVQuery__LoadCSVAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:6056:1: ( ( rule__LoadCSVQuery__LoadCSVAssignment_0 ) )
            // InternalOpenCypherParser.g:6057:2: ( rule__LoadCSVQuery__LoadCSVAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryAccess().getLoadCSVAssignment_0()); 
            }
            // InternalOpenCypherParser.g:6058:2: ( rule__LoadCSVQuery__LoadCSVAssignment_0 )
            // InternalOpenCypherParser.g:6058:3: rule__LoadCSVQuery__LoadCSVAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVQuery__LoadCSVAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryAccess().getLoadCSVAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__Group__0__Impl"


    // $ANTLR start "rule__LoadCSVQuery__Group__1"
    // InternalOpenCypherParser.g:6066:1: rule__LoadCSVQuery__Group__1 : rule__LoadCSVQuery__Group__1__Impl ;
    public final void rule__LoadCSVQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6070:1: ( rule__LoadCSVQuery__Group__1__Impl )
            // InternalOpenCypherParser.g:6071:2: rule__LoadCSVQuery__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__Group__1"


    // $ANTLR start "rule__LoadCSVQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:6077:1: rule__LoadCSVQuery__Group__1__Impl : ( ( rule__LoadCSVQuery__SingleQueryAssignment_1 ) ) ;
    public final void rule__LoadCSVQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6081:1: ( ( ( rule__LoadCSVQuery__SingleQueryAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6082:1: ( ( rule__LoadCSVQuery__SingleQueryAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6082:1: ( ( rule__LoadCSVQuery__SingleQueryAssignment_1 ) )
            // InternalOpenCypherParser.g:6083:2: ( rule__LoadCSVQuery__SingleQueryAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryAccess().getSingleQueryAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6084:2: ( rule__LoadCSVQuery__SingleQueryAssignment_1 )
            // InternalOpenCypherParser.g:6084:3: rule__LoadCSVQuery__SingleQueryAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVQuery__SingleQueryAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryAccess().getSingleQueryAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__Group__1__Impl"


    // $ANTLR start "rule__Union__Group__0"
    // InternalOpenCypherParser.g:6093:1: rule__Union__Group__0 : rule__Union__Group__0__Impl rule__Union__Group__1 ;
    public final void rule__Union__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6097:1: ( rule__Union__Group__0__Impl rule__Union__Group__1 )
            // InternalOpenCypherParser.g:6098:2: rule__Union__Group__0__Impl rule__Union__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__Union__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Union__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__0"


    // $ANTLR start "rule__Union__Group__0__Impl"
    // InternalOpenCypherParser.g:6105:1: rule__Union__Group__0__Impl : ( UNION ) ;
    public final void rule__Union__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6109:1: ( ( UNION ) )
            // InternalOpenCypherParser.g:6110:1: ( UNION )
            {
            // InternalOpenCypherParser.g:6110:1: ( UNION )
            // InternalOpenCypherParser.g:6111:2: UNION
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getUNIONKeyword_0()); 
            }
            match(input,UNION,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getUNIONKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__0__Impl"


    // $ANTLR start "rule__Union__Group__1"
    // InternalOpenCypherParser.g:6120:1: rule__Union__Group__1 : rule__Union__Group__1__Impl rule__Union__Group__2 ;
    public final void rule__Union__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6124:1: ( rule__Union__Group__1__Impl rule__Union__Group__2 )
            // InternalOpenCypherParser.g:6125:2: rule__Union__Group__1__Impl rule__Union__Group__2
            {
            pushFollow(FOLLOW_19);
            rule__Union__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Union__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__1"


    // $ANTLR start "rule__Union__Group__1__Impl"
    // InternalOpenCypherParser.g:6132:1: rule__Union__Group__1__Impl : ( ( rule__Union__AllAssignment_1 )? ) ;
    public final void rule__Union__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6136:1: ( ( ( rule__Union__AllAssignment_1 )? ) )
            // InternalOpenCypherParser.g:6137:1: ( ( rule__Union__AllAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:6137:1: ( ( rule__Union__AllAssignment_1 )? )
            // InternalOpenCypherParser.g:6138:2: ( rule__Union__AllAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getAllAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6139:2: ( rule__Union__AllAssignment_1 )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==ALL) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // InternalOpenCypherParser.g:6139:3: rule__Union__AllAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Union__AllAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getAllAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__1__Impl"


    // $ANTLR start "rule__Union__Group__2"
    // InternalOpenCypherParser.g:6147:1: rule__Union__Group__2 : rule__Union__Group__2__Impl ;
    public final void rule__Union__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6151:1: ( rule__Union__Group__2__Impl )
            // InternalOpenCypherParser.g:6152:2: rule__Union__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Union__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__2"


    // $ANTLR start "rule__Union__Group__2__Impl"
    // InternalOpenCypherParser.g:6158:1: rule__Union__Group__2__Impl : ( ( rule__Union__SingleQueryAssignment_2 ) ) ;
    public final void rule__Union__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6162:1: ( ( ( rule__Union__SingleQueryAssignment_2 ) ) )
            // InternalOpenCypherParser.g:6163:1: ( ( rule__Union__SingleQueryAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:6163:1: ( ( rule__Union__SingleQueryAssignment_2 ) )
            // InternalOpenCypherParser.g:6164:2: ( rule__Union__SingleQueryAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getSingleQueryAssignment_2()); 
            }
            // InternalOpenCypherParser.g:6165:2: ( rule__Union__SingleQueryAssignment_2 )
            // InternalOpenCypherParser.g:6165:3: rule__Union__SingleQueryAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Union__SingleQueryAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getSingleQueryAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__2__Impl"


    // $ANTLR start "rule__SinglePartQuery__Group_0__0"
    // InternalOpenCypherParser.g:6174:1: rule__SinglePartQuery__Group_0__0 : rule__SinglePartQuery__Group_0__0__Impl rule__SinglePartQuery__Group_0__1 ;
    public final void rule__SinglePartQuery__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6178:1: ( rule__SinglePartQuery__Group_0__0__Impl rule__SinglePartQuery__Group_0__1 )
            // InternalOpenCypherParser.g:6179:2: rule__SinglePartQuery__Group_0__0__Impl rule__SinglePartQuery__Group_0__1
            {
            pushFollow(FOLLOW_20);
            rule__SinglePartQuery__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SinglePartQuery__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Group_0__0"


    // $ANTLR start "rule__SinglePartQuery__Group_0__0__Impl"
    // InternalOpenCypherParser.g:6186:1: rule__SinglePartQuery__Group_0__0__Impl : ( ( rule__SinglePartQuery__ReadingClausesAssignment_0_0 )* ) ;
    public final void rule__SinglePartQuery__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6190:1: ( ( ( rule__SinglePartQuery__ReadingClausesAssignment_0_0 )* ) )
            // InternalOpenCypherParser.g:6191:1: ( ( rule__SinglePartQuery__ReadingClausesAssignment_0_0 )* )
            {
            // InternalOpenCypherParser.g:6191:1: ( ( rule__SinglePartQuery__ReadingClausesAssignment_0_0 )* )
            // InternalOpenCypherParser.g:6192:2: ( rule__SinglePartQuery__ReadingClausesAssignment_0_0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getReadingClausesAssignment_0_0()); 
            }
            // InternalOpenCypherParser.g:6193:2: ( rule__SinglePartQuery__ReadingClausesAssignment_0_0 )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==OPTIONAL||LA60_0==UNWIND||LA60_0==MATCH||LA60_0==START||LA60_0==CALL||LA60_0==LOAD) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6193:3: rule__SinglePartQuery__ReadingClausesAssignment_0_0
            	    {
            	    pushFollow(FOLLOW_21);
            	    rule__SinglePartQuery__ReadingClausesAssignment_0_0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getReadingClausesAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Group_0__0__Impl"


    // $ANTLR start "rule__SinglePartQuery__Group_0__1"
    // InternalOpenCypherParser.g:6201:1: rule__SinglePartQuery__Group_0__1 : rule__SinglePartQuery__Group_0__1__Impl ;
    public final void rule__SinglePartQuery__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6205:1: ( rule__SinglePartQuery__Group_0__1__Impl )
            // InternalOpenCypherParser.g:6206:2: rule__SinglePartQuery__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SinglePartQuery__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Group_0__1"


    // $ANTLR start "rule__SinglePartQuery__Group_0__1__Impl"
    // InternalOpenCypherParser.g:6212:1: rule__SinglePartQuery__Group_0__1__Impl : ( ( rule__SinglePartQuery__ReturnAssignment_0_1 ) ) ;
    public final void rule__SinglePartQuery__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6216:1: ( ( ( rule__SinglePartQuery__ReturnAssignment_0_1 ) ) )
            // InternalOpenCypherParser.g:6217:1: ( ( rule__SinglePartQuery__ReturnAssignment_0_1 ) )
            {
            // InternalOpenCypherParser.g:6217:1: ( ( rule__SinglePartQuery__ReturnAssignment_0_1 ) )
            // InternalOpenCypherParser.g:6218:2: ( rule__SinglePartQuery__ReturnAssignment_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getReturnAssignment_0_1()); 
            }
            // InternalOpenCypherParser.g:6219:2: ( rule__SinglePartQuery__ReturnAssignment_0_1 )
            // InternalOpenCypherParser.g:6219:3: rule__SinglePartQuery__ReturnAssignment_0_1
            {
            pushFollow(FOLLOW_2);
            rule__SinglePartQuery__ReturnAssignment_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getReturnAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Group_0__1__Impl"


    // $ANTLR start "rule__SinglePartQuery__Group_1__0"
    // InternalOpenCypherParser.g:6228:1: rule__SinglePartQuery__Group_1__0 : rule__SinglePartQuery__Group_1__0__Impl rule__SinglePartQuery__Group_1__1 ;
    public final void rule__SinglePartQuery__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6232:1: ( rule__SinglePartQuery__Group_1__0__Impl rule__SinglePartQuery__Group_1__1 )
            // InternalOpenCypherParser.g:6233:2: rule__SinglePartQuery__Group_1__0__Impl rule__SinglePartQuery__Group_1__1
            {
            pushFollow(FOLLOW_18);
            rule__SinglePartQuery__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SinglePartQuery__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Group_1__0"


    // $ANTLR start "rule__SinglePartQuery__Group_1__0__Impl"
    // InternalOpenCypherParser.g:6240:1: rule__SinglePartQuery__Group_1__0__Impl : ( ( rule__SinglePartQuery__ReadingClausesAssignment_1_0 )* ) ;
    public final void rule__SinglePartQuery__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6244:1: ( ( ( rule__SinglePartQuery__ReadingClausesAssignment_1_0 )* ) )
            // InternalOpenCypherParser.g:6245:1: ( ( rule__SinglePartQuery__ReadingClausesAssignment_1_0 )* )
            {
            // InternalOpenCypherParser.g:6245:1: ( ( rule__SinglePartQuery__ReadingClausesAssignment_1_0 )* )
            // InternalOpenCypherParser.g:6246:2: ( rule__SinglePartQuery__ReadingClausesAssignment_1_0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getReadingClausesAssignment_1_0()); 
            }
            // InternalOpenCypherParser.g:6247:2: ( rule__SinglePartQuery__ReadingClausesAssignment_1_0 )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==OPTIONAL||LA61_0==UNWIND||LA61_0==MATCH||LA61_0==START||LA61_0==CALL||LA61_0==LOAD) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6247:3: rule__SinglePartQuery__ReadingClausesAssignment_1_0
            	    {
            	    pushFollow(FOLLOW_21);
            	    rule__SinglePartQuery__ReadingClausesAssignment_1_0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getReadingClausesAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Group_1__0__Impl"


    // $ANTLR start "rule__SinglePartQuery__Group_1__1"
    // InternalOpenCypherParser.g:6255:1: rule__SinglePartQuery__Group_1__1 : rule__SinglePartQuery__Group_1__1__Impl rule__SinglePartQuery__Group_1__2 ;
    public final void rule__SinglePartQuery__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6259:1: ( rule__SinglePartQuery__Group_1__1__Impl rule__SinglePartQuery__Group_1__2 )
            // InternalOpenCypherParser.g:6260:2: rule__SinglePartQuery__Group_1__1__Impl rule__SinglePartQuery__Group_1__2
            {
            pushFollow(FOLLOW_20);
            rule__SinglePartQuery__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SinglePartQuery__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Group_1__1"


    // $ANTLR start "rule__SinglePartQuery__Group_1__1__Impl"
    // InternalOpenCypherParser.g:6267:1: rule__SinglePartQuery__Group_1__1__Impl : ( ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 ) ) ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )* ) ) ;
    public final void rule__SinglePartQuery__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6271:1: ( ( ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 ) ) ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )* ) ) )
            // InternalOpenCypherParser.g:6272:1: ( ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 ) ) ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )* ) )
            {
            // InternalOpenCypherParser.g:6272:1: ( ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 ) ) ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )* ) )
            // InternalOpenCypherParser.g:6273:2: ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 ) ) ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )* )
            {
            // InternalOpenCypherParser.g:6273:2: ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 ) )
            // InternalOpenCypherParser.g:6274:3: ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:6275:3: ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )
            // InternalOpenCypherParser.g:6275:4: rule__SinglePartQuery__UpdatingClausesAssignment_1_1
            {
            pushFollow(FOLLOW_22);
            rule__SinglePartQuery__UpdatingClausesAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesAssignment_1_1()); 
            }

            }

            // InternalOpenCypherParser.g:6278:2: ( ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )* )
            // InternalOpenCypherParser.g:6279:3: ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:6280:3: ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )*
            loop62:
            do {
                int alt62=2;
                alt62 = dfa62.predict(input);
                switch (alt62) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6280:4: rule__SinglePartQuery__UpdatingClausesAssignment_1_1
            	    {
            	    pushFollow(FOLLOW_22);
            	    rule__SinglePartQuery__UpdatingClausesAssignment_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesAssignment_1_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Group_1__1__Impl"


    // $ANTLR start "rule__SinglePartQuery__Group_1__2"
    // InternalOpenCypherParser.g:6289:1: rule__SinglePartQuery__Group_1__2 : rule__SinglePartQuery__Group_1__2__Impl ;
    public final void rule__SinglePartQuery__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6293:1: ( rule__SinglePartQuery__Group_1__2__Impl )
            // InternalOpenCypherParser.g:6294:2: rule__SinglePartQuery__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SinglePartQuery__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Group_1__2"


    // $ANTLR start "rule__SinglePartQuery__Group_1__2__Impl"
    // InternalOpenCypherParser.g:6300:1: rule__SinglePartQuery__Group_1__2__Impl : ( ( rule__SinglePartQuery__ReturnAssignment_1_2 )? ) ;
    public final void rule__SinglePartQuery__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6304:1: ( ( ( rule__SinglePartQuery__ReturnAssignment_1_2 )? ) )
            // InternalOpenCypherParser.g:6305:1: ( ( rule__SinglePartQuery__ReturnAssignment_1_2 )? )
            {
            // InternalOpenCypherParser.g:6305:1: ( ( rule__SinglePartQuery__ReturnAssignment_1_2 )? )
            // InternalOpenCypherParser.g:6306:2: ( rule__SinglePartQuery__ReturnAssignment_1_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getReturnAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:6307:2: ( rule__SinglePartQuery__ReturnAssignment_1_2 )?
            int alt63=2;
            alt63 = dfa63.predict(input);
            switch (alt63) {
                case 1 :
                    // InternalOpenCypherParser.g:6307:3: rule__SinglePartQuery__ReturnAssignment_1_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__SinglePartQuery__ReturnAssignment_1_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getReturnAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__Group_1__2__Impl"


    // $ANTLR start "rule__MultiPartQuery__Group__0"
    // InternalOpenCypherParser.g:6316:1: rule__MultiPartQuery__Group__0 : rule__MultiPartQuery__Group__0__Impl rule__MultiPartQuery__Group__1 ;
    public final void rule__MultiPartQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6320:1: ( rule__MultiPartQuery__Group__0__Impl rule__MultiPartQuery__Group__1 )
            // InternalOpenCypherParser.g:6321:2: rule__MultiPartQuery__Group__0__Impl rule__MultiPartQuery__Group__1
            {
            pushFollow(FOLLOW_18);
            rule__MultiPartQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MultiPartQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartQuery__Group__0"


    // $ANTLR start "rule__MultiPartQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:6328:1: rule__MultiPartQuery__Group__0__Impl : ( ( ( rule__MultiPartQuery__SubQueriesAssignment_0 ) ) ( ( rule__MultiPartQuery__SubQueriesAssignment_0 )* ) ) ;
    public final void rule__MultiPartQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6332:1: ( ( ( ( rule__MultiPartQuery__SubQueriesAssignment_0 ) ) ( ( rule__MultiPartQuery__SubQueriesAssignment_0 )* ) ) )
            // InternalOpenCypherParser.g:6333:1: ( ( ( rule__MultiPartQuery__SubQueriesAssignment_0 ) ) ( ( rule__MultiPartQuery__SubQueriesAssignment_0 )* ) )
            {
            // InternalOpenCypherParser.g:6333:1: ( ( ( rule__MultiPartQuery__SubQueriesAssignment_0 ) ) ( ( rule__MultiPartQuery__SubQueriesAssignment_0 )* ) )
            // InternalOpenCypherParser.g:6334:2: ( ( rule__MultiPartQuery__SubQueriesAssignment_0 ) ) ( ( rule__MultiPartQuery__SubQueriesAssignment_0 )* )
            {
            // InternalOpenCypherParser.g:6334:2: ( ( rule__MultiPartQuery__SubQueriesAssignment_0 ) )
            // InternalOpenCypherParser.g:6335:3: ( rule__MultiPartQuery__SubQueriesAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartQueryAccess().getSubQueriesAssignment_0()); 
            }
            // InternalOpenCypherParser.g:6336:3: ( rule__MultiPartQuery__SubQueriesAssignment_0 )
            // InternalOpenCypherParser.g:6336:4: rule__MultiPartQuery__SubQueriesAssignment_0
            {
            pushFollow(FOLLOW_23);
            rule__MultiPartQuery__SubQueriesAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartQueryAccess().getSubQueriesAssignment_0()); 
            }

            }

            // InternalOpenCypherParser.g:6339:2: ( ( rule__MultiPartQuery__SubQueriesAssignment_0 )* )
            // InternalOpenCypherParser.g:6340:3: ( rule__MultiPartQuery__SubQueriesAssignment_0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartQueryAccess().getSubQueriesAssignment_0()); 
            }
            // InternalOpenCypherParser.g:6341:3: ( rule__MultiPartQuery__SubQueriesAssignment_0 )*
            loop64:
            do {
                int alt64=2;
                alt64 = dfa64.predict(input);
                switch (alt64) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6341:4: rule__MultiPartQuery__SubQueriesAssignment_0
            	    {
            	    pushFollow(FOLLOW_23);
            	    rule__MultiPartQuery__SubQueriesAssignment_0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartQueryAccess().getSubQueriesAssignment_0()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartQuery__Group__0__Impl"


    // $ANTLR start "rule__MultiPartQuery__Group__1"
    // InternalOpenCypherParser.g:6350:1: rule__MultiPartQuery__Group__1 : rule__MultiPartQuery__Group__1__Impl ;
    public final void rule__MultiPartQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6354:1: ( rule__MultiPartQuery__Group__1__Impl )
            // InternalOpenCypherParser.g:6355:2: rule__MultiPartQuery__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MultiPartQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartQuery__Group__1"


    // $ANTLR start "rule__MultiPartQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:6361:1: rule__MultiPartQuery__Group__1__Impl : ( ( rule__MultiPartQuery__SinglePartQueryAssignment_1 ) ) ;
    public final void rule__MultiPartQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6365:1: ( ( ( rule__MultiPartQuery__SinglePartQueryAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6366:1: ( ( rule__MultiPartQuery__SinglePartQueryAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6366:1: ( ( rule__MultiPartQuery__SinglePartQueryAssignment_1 ) )
            // InternalOpenCypherParser.g:6367:2: ( rule__MultiPartQuery__SinglePartQueryAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartQueryAccess().getSinglePartQueryAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6368:2: ( rule__MultiPartQuery__SinglePartQueryAssignment_1 )
            // InternalOpenCypherParser.g:6368:3: rule__MultiPartQuery__SinglePartQueryAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__MultiPartQuery__SinglePartQueryAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartQueryAccess().getSinglePartQueryAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartQuery__Group__1__Impl"


    // $ANTLR start "rule__MultiPartSubQuery__Group__0"
    // InternalOpenCypherParser.g:6377:1: rule__MultiPartSubQuery__Group__0 : rule__MultiPartSubQuery__Group__0__Impl rule__MultiPartSubQuery__Group__1 ;
    public final void rule__MultiPartSubQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6381:1: ( rule__MultiPartSubQuery__Group__0__Impl rule__MultiPartSubQuery__Group__1 )
            // InternalOpenCypherParser.g:6382:2: rule__MultiPartSubQuery__Group__0__Impl rule__MultiPartSubQuery__Group__1
            {
            pushFollow(FOLLOW_24);
            rule__MultiPartSubQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MultiPartSubQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartSubQuery__Group__0"


    // $ANTLR start "rule__MultiPartSubQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:6389:1: rule__MultiPartSubQuery__Group__0__Impl : ( ( rule__MultiPartSubQuery__ReadingClausesAssignment_0 )* ) ;
    public final void rule__MultiPartSubQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6393:1: ( ( ( rule__MultiPartSubQuery__ReadingClausesAssignment_0 )* ) )
            // InternalOpenCypherParser.g:6394:1: ( ( rule__MultiPartSubQuery__ReadingClausesAssignment_0 )* )
            {
            // InternalOpenCypherParser.g:6394:1: ( ( rule__MultiPartSubQuery__ReadingClausesAssignment_0 )* )
            // InternalOpenCypherParser.g:6395:2: ( rule__MultiPartSubQuery__ReadingClausesAssignment_0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartSubQueryAccess().getReadingClausesAssignment_0()); 
            }
            // InternalOpenCypherParser.g:6396:2: ( rule__MultiPartSubQuery__ReadingClausesAssignment_0 )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==OPTIONAL||LA65_0==UNWIND||LA65_0==MATCH||LA65_0==START||LA65_0==CALL||LA65_0==LOAD) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6396:3: rule__MultiPartSubQuery__ReadingClausesAssignment_0
            	    {
            	    pushFollow(FOLLOW_21);
            	    rule__MultiPartSubQuery__ReadingClausesAssignment_0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartSubQueryAccess().getReadingClausesAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartSubQuery__Group__0__Impl"


    // $ANTLR start "rule__MultiPartSubQuery__Group__1"
    // InternalOpenCypherParser.g:6404:1: rule__MultiPartSubQuery__Group__1 : rule__MultiPartSubQuery__Group__1__Impl rule__MultiPartSubQuery__Group__2 ;
    public final void rule__MultiPartSubQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6408:1: ( rule__MultiPartSubQuery__Group__1__Impl rule__MultiPartSubQuery__Group__2 )
            // InternalOpenCypherParser.g:6409:2: rule__MultiPartSubQuery__Group__1__Impl rule__MultiPartSubQuery__Group__2
            {
            pushFollow(FOLLOW_24);
            rule__MultiPartSubQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MultiPartSubQuery__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartSubQuery__Group__1"


    // $ANTLR start "rule__MultiPartSubQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:6416:1: rule__MultiPartSubQuery__Group__1__Impl : ( ( rule__MultiPartSubQuery__UpdatingClausesAssignment_1 )* ) ;
    public final void rule__MultiPartSubQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6420:1: ( ( ( rule__MultiPartSubQuery__UpdatingClausesAssignment_1 )* ) )
            // InternalOpenCypherParser.g:6421:1: ( ( rule__MultiPartSubQuery__UpdatingClausesAssignment_1 )* )
            {
            // InternalOpenCypherParser.g:6421:1: ( ( rule__MultiPartSubQuery__UpdatingClausesAssignment_1 )* )
            // InternalOpenCypherParser.g:6422:2: ( rule__MultiPartSubQuery__UpdatingClausesAssignment_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartSubQueryAccess().getUpdatingClausesAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6423:2: ( rule__MultiPartSubQuery__UpdatingClausesAssignment_1 )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==FOREACH||LA66_0==CREATE||(LA66_0>=DELETE && LA66_0<=DETACH)||LA66_0==REMOVE||LA66_0==MERGE||LA66_0==SET) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6423:3: rule__MultiPartSubQuery__UpdatingClausesAssignment_1
            	    {
            	    pushFollow(FOLLOW_25);
            	    rule__MultiPartSubQuery__UpdatingClausesAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartSubQueryAccess().getUpdatingClausesAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartSubQuery__Group__1__Impl"


    // $ANTLR start "rule__MultiPartSubQuery__Group__2"
    // InternalOpenCypherParser.g:6431:1: rule__MultiPartSubQuery__Group__2 : rule__MultiPartSubQuery__Group__2__Impl ;
    public final void rule__MultiPartSubQuery__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6435:1: ( rule__MultiPartSubQuery__Group__2__Impl )
            // InternalOpenCypherParser.g:6436:2: rule__MultiPartSubQuery__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MultiPartSubQuery__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartSubQuery__Group__2"


    // $ANTLR start "rule__MultiPartSubQuery__Group__2__Impl"
    // InternalOpenCypherParser.g:6442:1: rule__MultiPartSubQuery__Group__2__Impl : ( ( rule__MultiPartSubQuery__WithPartAssignment_2 ) ) ;
    public final void rule__MultiPartSubQuery__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6446:1: ( ( ( rule__MultiPartSubQuery__WithPartAssignment_2 ) ) )
            // InternalOpenCypherParser.g:6447:1: ( ( rule__MultiPartSubQuery__WithPartAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:6447:1: ( ( rule__MultiPartSubQuery__WithPartAssignment_2 ) )
            // InternalOpenCypherParser.g:6448:2: ( rule__MultiPartSubQuery__WithPartAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartSubQueryAccess().getWithPartAssignment_2()); 
            }
            // InternalOpenCypherParser.g:6449:2: ( rule__MultiPartSubQuery__WithPartAssignment_2 )
            // InternalOpenCypherParser.g:6449:3: rule__MultiPartSubQuery__WithPartAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__MultiPartSubQuery__WithPartAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartSubQueryAccess().getWithPartAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartSubQuery__Group__2__Impl"


    // $ANTLR start "rule__CreateUniqueConstraint__Group__0"
    // InternalOpenCypherParser.g:6458:1: rule__CreateUniqueConstraint__Group__0 : rule__CreateUniqueConstraint__Group__0__Impl rule__CreateUniqueConstraint__Group__1 ;
    public final void rule__CreateUniqueConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6462:1: ( rule__CreateUniqueConstraint__Group__0__Impl rule__CreateUniqueConstraint__Group__1 )
            // InternalOpenCypherParser.g:6463:2: rule__CreateUniqueConstraint__Group__0__Impl rule__CreateUniqueConstraint__Group__1
            {
            pushFollow(FOLLOW_26);
            rule__CreateUniqueConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateUniqueConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateUniqueConstraint__Group__0"


    // $ANTLR start "rule__CreateUniqueConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6470:1: rule__CreateUniqueConstraint__Group__0__Impl : ( CREATE ) ;
    public final void rule__CreateUniqueConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6474:1: ( ( CREATE ) )
            // InternalOpenCypherParser.g:6475:1: ( CREATE )
            {
            // InternalOpenCypherParser.g:6475:1: ( CREATE )
            // InternalOpenCypherParser.g:6476:2: CREATE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateUniqueConstraintAccess().getCREATEKeyword_0()); 
            }
            match(input,CREATE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateUniqueConstraintAccess().getCREATEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateUniqueConstraint__Group__0__Impl"


    // $ANTLR start "rule__CreateUniqueConstraint__Group__1"
    // InternalOpenCypherParser.g:6485:1: rule__CreateUniqueConstraint__Group__1 : rule__CreateUniqueConstraint__Group__1__Impl ;
    public final void rule__CreateUniqueConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6489:1: ( rule__CreateUniqueConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:6490:2: rule__CreateUniqueConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CreateUniqueConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateUniqueConstraint__Group__1"


    // $ANTLR start "rule__CreateUniqueConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6496:1: rule__CreateUniqueConstraint__Group__1__Impl : ( ruleUniqueConstraint ) ;
    public final void rule__CreateUniqueConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6500:1: ( ( ruleUniqueConstraint ) )
            // InternalOpenCypherParser.g:6501:1: ( ruleUniqueConstraint )
            {
            // InternalOpenCypherParser.g:6501:1: ( ruleUniqueConstraint )
            // InternalOpenCypherParser.g:6502:2: ruleUniqueConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateUniqueConstraintAccess().getUniqueConstraintParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateUniqueConstraintAccess().getUniqueConstraintParserRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateUniqueConstraint__Group__1__Impl"


    // $ANTLR start "rule__CreateNodePropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:6512:1: rule__CreateNodePropertyExistenceConstraint__Group__0 : rule__CreateNodePropertyExistenceConstraint__Group__0__Impl rule__CreateNodePropertyExistenceConstraint__Group__1 ;
    public final void rule__CreateNodePropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6516:1: ( rule__CreateNodePropertyExistenceConstraint__Group__0__Impl rule__CreateNodePropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:6517:2: rule__CreateNodePropertyExistenceConstraint__Group__0__Impl rule__CreateNodePropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_26);
            rule__CreateNodePropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateNodePropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateNodePropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__CreateNodePropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6524:1: rule__CreateNodePropertyExistenceConstraint__Group__0__Impl : ( CREATE ) ;
    public final void rule__CreateNodePropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6528:1: ( ( CREATE ) )
            // InternalOpenCypherParser.g:6529:1: ( CREATE )
            {
            // InternalOpenCypherParser.g:6529:1: ( CREATE )
            // InternalOpenCypherParser.g:6530:2: CREATE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getCREATEKeyword_0()); 
            }
            match(input,CREATE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getCREATEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateNodePropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__CreateNodePropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:6539:1: rule__CreateNodePropertyExistenceConstraint__Group__1 : rule__CreateNodePropertyExistenceConstraint__Group__1__Impl ;
    public final void rule__CreateNodePropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6543:1: ( rule__CreateNodePropertyExistenceConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:6544:2: rule__CreateNodePropertyExistenceConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CreateNodePropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateNodePropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__CreateNodePropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6550:1: rule__CreateNodePropertyExistenceConstraint__Group__1__Impl : ( ruleNodePropertyExistenceConstraint ) ;
    public final void rule__CreateNodePropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6554:1: ( ( ruleNodePropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:6555:1: ( ruleNodePropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:6555:1: ( ruleNodePropertyExistenceConstraint )
            // InternalOpenCypherParser.g:6556:2: ruleNodePropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintParserRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateNodePropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__CreateRelationshipPropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:6566:1: rule__CreateRelationshipPropertyExistenceConstraint__Group__0 : rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl rule__CreateRelationshipPropertyExistenceConstraint__Group__1 ;
    public final void rule__CreateRelationshipPropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6570:1: ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl rule__CreateRelationshipPropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:6571:2: rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl rule__CreateRelationshipPropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_26);
            rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateRelationshipPropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateRelationshipPropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6578:1: rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl : ( CREATE ) ;
    public final void rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6582:1: ( ( CREATE ) )
            // InternalOpenCypherParser.g:6583:1: ( CREATE )
            {
            // InternalOpenCypherParser.g:6583:1: ( CREATE )
            // InternalOpenCypherParser.g:6584:2: CREATE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getCREATEKeyword_0()); 
            }
            match(input,CREATE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getCREATEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__CreateRelationshipPropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:6593:1: rule__CreateRelationshipPropertyExistenceConstraint__Group__1 : rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl ;
    public final void rule__CreateRelationshipPropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6597:1: ( rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:6598:2: rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateRelationshipPropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6604:1: rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl : ( ruleRelationshipPropertyExistenceConstraint ) ;
    public final void rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6608:1: ( ( ruleRelationshipPropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:6609:1: ( ruleRelationshipPropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:6609:1: ( ruleRelationshipPropertyExistenceConstraint )
            // InternalOpenCypherParser.g:6610:2: ruleRelationshipPropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintParserRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__CreateIndex__Group__0"
    // InternalOpenCypherParser.g:6620:1: rule__CreateIndex__Group__0 : rule__CreateIndex__Group__0__Impl rule__CreateIndex__Group__1 ;
    public final void rule__CreateIndex__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6624:1: ( rule__CreateIndex__Group__0__Impl rule__CreateIndex__Group__1 )
            // InternalOpenCypherParser.g:6625:2: rule__CreateIndex__Group__0__Impl rule__CreateIndex__Group__1
            {
            pushFollow(FOLLOW_27);
            rule__CreateIndex__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateIndex__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateIndex__Group__0"


    // $ANTLR start "rule__CreateIndex__Group__0__Impl"
    // InternalOpenCypherParser.g:6632:1: rule__CreateIndex__Group__0__Impl : ( CREATE ) ;
    public final void rule__CreateIndex__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6636:1: ( ( CREATE ) )
            // InternalOpenCypherParser.g:6637:1: ( CREATE )
            {
            // InternalOpenCypherParser.g:6637:1: ( CREATE )
            // InternalOpenCypherParser.g:6638:2: CREATE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateIndexAccess().getCREATEKeyword_0()); 
            }
            match(input,CREATE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateIndexAccess().getCREATEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateIndex__Group__0__Impl"


    // $ANTLR start "rule__CreateIndex__Group__1"
    // InternalOpenCypherParser.g:6647:1: rule__CreateIndex__Group__1 : rule__CreateIndex__Group__1__Impl ;
    public final void rule__CreateIndex__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6651:1: ( rule__CreateIndex__Group__1__Impl )
            // InternalOpenCypherParser.g:6652:2: rule__CreateIndex__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CreateIndex__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateIndex__Group__1"


    // $ANTLR start "rule__CreateIndex__Group__1__Impl"
    // InternalOpenCypherParser.g:6658:1: rule__CreateIndex__Group__1__Impl : ( ( rule__CreateIndex__IndexAssignment_1 ) ) ;
    public final void rule__CreateIndex__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6662:1: ( ( ( rule__CreateIndex__IndexAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6663:1: ( ( rule__CreateIndex__IndexAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6663:1: ( ( rule__CreateIndex__IndexAssignment_1 ) )
            // InternalOpenCypherParser.g:6664:2: ( rule__CreateIndex__IndexAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateIndexAccess().getIndexAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6665:2: ( rule__CreateIndex__IndexAssignment_1 )
            // InternalOpenCypherParser.g:6665:3: rule__CreateIndex__IndexAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__CreateIndex__IndexAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateIndexAccess().getIndexAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateIndex__Group__1__Impl"


    // $ANTLR start "rule__DropUniqueConstraint__Group__0"
    // InternalOpenCypherParser.g:6674:1: rule__DropUniqueConstraint__Group__0 : rule__DropUniqueConstraint__Group__0__Impl rule__DropUniqueConstraint__Group__1 ;
    public final void rule__DropUniqueConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6678:1: ( rule__DropUniqueConstraint__Group__0__Impl rule__DropUniqueConstraint__Group__1 )
            // InternalOpenCypherParser.g:6679:2: rule__DropUniqueConstraint__Group__0__Impl rule__DropUniqueConstraint__Group__1
            {
            pushFollow(FOLLOW_26);
            rule__DropUniqueConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DropUniqueConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropUniqueConstraint__Group__0"


    // $ANTLR start "rule__DropUniqueConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6686:1: rule__DropUniqueConstraint__Group__0__Impl : ( DROP ) ;
    public final void rule__DropUniqueConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6690:1: ( ( DROP ) )
            // InternalOpenCypherParser.g:6691:1: ( DROP )
            {
            // InternalOpenCypherParser.g:6691:1: ( DROP )
            // InternalOpenCypherParser.g:6692:2: DROP
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropUniqueConstraintAccess().getDROPKeyword_0()); 
            }
            match(input,DROP,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropUniqueConstraintAccess().getDROPKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropUniqueConstraint__Group__0__Impl"


    // $ANTLR start "rule__DropUniqueConstraint__Group__1"
    // InternalOpenCypherParser.g:6701:1: rule__DropUniqueConstraint__Group__1 : rule__DropUniqueConstraint__Group__1__Impl ;
    public final void rule__DropUniqueConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6705:1: ( rule__DropUniqueConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:6706:2: rule__DropUniqueConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DropUniqueConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropUniqueConstraint__Group__1"


    // $ANTLR start "rule__DropUniqueConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6712:1: rule__DropUniqueConstraint__Group__1__Impl : ( ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 ) ) ;
    public final void rule__DropUniqueConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6716:1: ( ( ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6717:1: ( ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6717:1: ( ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 ) )
            // InternalOpenCypherParser.g:6718:2: ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6719:2: ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 )
            // InternalOpenCypherParser.g:6719:3: rule__DropUniqueConstraint__UniqueConstraintAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DropUniqueConstraint__UniqueConstraintAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropUniqueConstraint__Group__1__Impl"


    // $ANTLR start "rule__DropNodePropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:6728:1: rule__DropNodePropertyExistenceConstraint__Group__0 : rule__DropNodePropertyExistenceConstraint__Group__0__Impl rule__DropNodePropertyExistenceConstraint__Group__1 ;
    public final void rule__DropNodePropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6732:1: ( rule__DropNodePropertyExistenceConstraint__Group__0__Impl rule__DropNodePropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:6733:2: rule__DropNodePropertyExistenceConstraint__Group__0__Impl rule__DropNodePropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_26);
            rule__DropNodePropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DropNodePropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropNodePropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__DropNodePropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6740:1: rule__DropNodePropertyExistenceConstraint__Group__0__Impl : ( DROP ) ;
    public final void rule__DropNodePropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6744:1: ( ( DROP ) )
            // InternalOpenCypherParser.g:6745:1: ( DROP )
            {
            // InternalOpenCypherParser.g:6745:1: ( DROP )
            // InternalOpenCypherParser.g:6746:2: DROP
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getDROPKeyword_0()); 
            }
            match(input,DROP,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getDROPKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropNodePropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__DropNodePropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:6755:1: rule__DropNodePropertyExistenceConstraint__Group__1 : rule__DropNodePropertyExistenceConstraint__Group__1__Impl ;
    public final void rule__DropNodePropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6759:1: ( rule__DropNodePropertyExistenceConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:6760:2: rule__DropNodePropertyExistenceConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DropNodePropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropNodePropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__DropNodePropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6766:1: rule__DropNodePropertyExistenceConstraint__Group__1__Impl : ( ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 ) ) ;
    public final void rule__DropNodePropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6770:1: ( ( ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6771:1: ( ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6771:1: ( ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 ) )
            // InternalOpenCypherParser.g:6772:2: ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6773:2: ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 )
            // InternalOpenCypherParser.g:6773:3: rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropNodePropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__DropRelationshipPropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:6782:1: rule__DropRelationshipPropertyExistenceConstraint__Group__0 : rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl rule__DropRelationshipPropertyExistenceConstraint__Group__1 ;
    public final void rule__DropRelationshipPropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6786:1: ( rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl rule__DropRelationshipPropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:6787:2: rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl rule__DropRelationshipPropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_26);
            rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DropRelationshipPropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropRelationshipPropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6794:1: rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl : ( DROP ) ;
    public final void rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6798:1: ( ( DROP ) )
            // InternalOpenCypherParser.g:6799:1: ( DROP )
            {
            // InternalOpenCypherParser.g:6799:1: ( DROP )
            // InternalOpenCypherParser.g:6800:2: DROP
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getDROPKeyword_0()); 
            }
            match(input,DROP,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getDROPKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__DropRelationshipPropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:6809:1: rule__DropRelationshipPropertyExistenceConstraint__Group__1 : rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl ;
    public final void rule__DropRelationshipPropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6813:1: ( rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:6814:2: rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropRelationshipPropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6820:1: rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl : ( ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 ) ) ;
    public final void rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6824:1: ( ( ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6825:1: ( ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6825:1: ( ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 ) )
            // InternalOpenCypherParser.g:6826:2: ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6827:2: ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 )
            // InternalOpenCypherParser.g:6827:3: rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__DropIndex__Group__0"
    // InternalOpenCypherParser.g:6836:1: rule__DropIndex__Group__0 : rule__DropIndex__Group__0__Impl rule__DropIndex__Group__1 ;
    public final void rule__DropIndex__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6840:1: ( rule__DropIndex__Group__0__Impl rule__DropIndex__Group__1 )
            // InternalOpenCypherParser.g:6841:2: rule__DropIndex__Group__0__Impl rule__DropIndex__Group__1
            {
            pushFollow(FOLLOW_27);
            rule__DropIndex__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DropIndex__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropIndex__Group__0"


    // $ANTLR start "rule__DropIndex__Group__0__Impl"
    // InternalOpenCypherParser.g:6848:1: rule__DropIndex__Group__0__Impl : ( DROP ) ;
    public final void rule__DropIndex__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6852:1: ( ( DROP ) )
            // InternalOpenCypherParser.g:6853:1: ( DROP )
            {
            // InternalOpenCypherParser.g:6853:1: ( DROP )
            // InternalOpenCypherParser.g:6854:2: DROP
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropIndexAccess().getDROPKeyword_0()); 
            }
            match(input,DROP,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropIndexAccess().getDROPKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropIndex__Group__0__Impl"


    // $ANTLR start "rule__DropIndex__Group__1"
    // InternalOpenCypherParser.g:6863:1: rule__DropIndex__Group__1 : rule__DropIndex__Group__1__Impl ;
    public final void rule__DropIndex__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6867:1: ( rule__DropIndex__Group__1__Impl )
            // InternalOpenCypherParser.g:6868:2: rule__DropIndex__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DropIndex__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropIndex__Group__1"


    // $ANTLR start "rule__DropIndex__Group__1__Impl"
    // InternalOpenCypherParser.g:6874:1: rule__DropIndex__Group__1__Impl : ( ( rule__DropIndex__IndexAssignment_1 ) ) ;
    public final void rule__DropIndex__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6878:1: ( ( ( rule__DropIndex__IndexAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6879:1: ( ( rule__DropIndex__IndexAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6879:1: ( ( rule__DropIndex__IndexAssignment_1 ) )
            // InternalOpenCypherParser.g:6880:2: ( rule__DropIndex__IndexAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropIndexAccess().getIndexAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6881:2: ( rule__DropIndex__IndexAssignment_1 )
            // InternalOpenCypherParser.g:6881:3: rule__DropIndex__IndexAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DropIndex__IndexAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropIndexAccess().getIndexAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropIndex__Group__1__Impl"


    // $ANTLR start "rule__Index__Group__0"
    // InternalOpenCypherParser.g:6890:1: rule__Index__Group__0 : rule__Index__Group__0__Impl rule__Index__Group__1 ;
    public final void rule__Index__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6894:1: ( rule__Index__Group__0__Impl rule__Index__Group__1 )
            // InternalOpenCypherParser.g:6895:2: rule__Index__Group__0__Impl rule__Index__Group__1
            {
            pushFollow(FOLLOW_28);
            rule__Index__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Index__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__0"


    // $ANTLR start "rule__Index__Group__0__Impl"
    // InternalOpenCypherParser.g:6902:1: rule__Index__Group__0__Impl : ( INDEX ) ;
    public final void rule__Index__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6906:1: ( ( INDEX ) )
            // InternalOpenCypherParser.g:6907:1: ( INDEX )
            {
            // InternalOpenCypherParser.g:6907:1: ( INDEX )
            // InternalOpenCypherParser.g:6908:2: INDEX
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getINDEXKeyword_0()); 
            }
            match(input,INDEX,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getINDEXKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__0__Impl"


    // $ANTLR start "rule__Index__Group__1"
    // InternalOpenCypherParser.g:6917:1: rule__Index__Group__1 : rule__Index__Group__1__Impl rule__Index__Group__2 ;
    public final void rule__Index__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6921:1: ( rule__Index__Group__1__Impl rule__Index__Group__2 )
            // InternalOpenCypherParser.g:6922:2: rule__Index__Group__1__Impl rule__Index__Group__2
            {
            pushFollow(FOLLOW_29);
            rule__Index__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Index__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__1"


    // $ANTLR start "rule__Index__Group__1__Impl"
    // InternalOpenCypherParser.g:6929:1: rule__Index__Group__1__Impl : ( ON ) ;
    public final void rule__Index__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6933:1: ( ( ON ) )
            // InternalOpenCypherParser.g:6934:1: ( ON )
            {
            // InternalOpenCypherParser.g:6934:1: ( ON )
            // InternalOpenCypherParser.g:6935:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getONKeyword_1()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getONKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__1__Impl"


    // $ANTLR start "rule__Index__Group__2"
    // InternalOpenCypherParser.g:6944:1: rule__Index__Group__2 : rule__Index__Group__2__Impl rule__Index__Group__3 ;
    public final void rule__Index__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6948:1: ( rule__Index__Group__2__Impl rule__Index__Group__3 )
            // InternalOpenCypherParser.g:6949:2: rule__Index__Group__2__Impl rule__Index__Group__3
            {
            pushFollow(FOLLOW_30);
            rule__Index__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Index__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__2"


    // $ANTLR start "rule__Index__Group__2__Impl"
    // InternalOpenCypherParser.g:6956:1: rule__Index__Group__2__Impl : ( ( rule__Index__NodeLabelAssignment_2 ) ) ;
    public final void rule__Index__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6960:1: ( ( ( rule__Index__NodeLabelAssignment_2 ) ) )
            // InternalOpenCypherParser.g:6961:1: ( ( rule__Index__NodeLabelAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:6961:1: ( ( rule__Index__NodeLabelAssignment_2 ) )
            // InternalOpenCypherParser.g:6962:2: ( rule__Index__NodeLabelAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getNodeLabelAssignment_2()); 
            }
            // InternalOpenCypherParser.g:6963:2: ( rule__Index__NodeLabelAssignment_2 )
            // InternalOpenCypherParser.g:6963:3: rule__Index__NodeLabelAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Index__NodeLabelAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getNodeLabelAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__2__Impl"


    // $ANTLR start "rule__Index__Group__3"
    // InternalOpenCypherParser.g:6971:1: rule__Index__Group__3 : rule__Index__Group__3__Impl rule__Index__Group__4 ;
    public final void rule__Index__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6975:1: ( rule__Index__Group__3__Impl rule__Index__Group__4 )
            // InternalOpenCypherParser.g:6976:2: rule__Index__Group__3__Impl rule__Index__Group__4
            {
            pushFollow(FOLLOW_10);
            rule__Index__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Index__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__3"


    // $ANTLR start "rule__Index__Group__3__Impl"
    // InternalOpenCypherParser.g:6983:1: rule__Index__Group__3__Impl : ( LeftParenthesis ) ;
    public final void rule__Index__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6987:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:6988:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:6988:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:6989:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getLeftParenthesisKeyword_3()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getLeftParenthesisKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__3__Impl"


    // $ANTLR start "rule__Index__Group__4"
    // InternalOpenCypherParser.g:6998:1: rule__Index__Group__4 : rule__Index__Group__4__Impl rule__Index__Group__5 ;
    public final void rule__Index__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7002:1: ( rule__Index__Group__4__Impl rule__Index__Group__5 )
            // InternalOpenCypherParser.g:7003:2: rule__Index__Group__4__Impl rule__Index__Group__5
            {
            pushFollow(FOLLOW_31);
            rule__Index__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Index__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__4"


    // $ANTLR start "rule__Index__Group__4__Impl"
    // InternalOpenCypherParser.g:7010:1: rule__Index__Group__4__Impl : ( ( rule__Index__PropertyKeyNameAssignment_4 ) ) ;
    public final void rule__Index__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7014:1: ( ( ( rule__Index__PropertyKeyNameAssignment_4 ) ) )
            // InternalOpenCypherParser.g:7015:1: ( ( rule__Index__PropertyKeyNameAssignment_4 ) )
            {
            // InternalOpenCypherParser.g:7015:1: ( ( rule__Index__PropertyKeyNameAssignment_4 ) )
            // InternalOpenCypherParser.g:7016:2: ( rule__Index__PropertyKeyNameAssignment_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getPropertyKeyNameAssignment_4()); 
            }
            // InternalOpenCypherParser.g:7017:2: ( rule__Index__PropertyKeyNameAssignment_4 )
            // InternalOpenCypherParser.g:7017:3: rule__Index__PropertyKeyNameAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__Index__PropertyKeyNameAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getPropertyKeyNameAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__4__Impl"


    // $ANTLR start "rule__Index__Group__5"
    // InternalOpenCypherParser.g:7025:1: rule__Index__Group__5 : rule__Index__Group__5__Impl ;
    public final void rule__Index__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7029:1: ( rule__Index__Group__5__Impl )
            // InternalOpenCypherParser.g:7030:2: rule__Index__Group__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Index__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__5"


    // $ANTLR start "rule__Index__Group__5__Impl"
    // InternalOpenCypherParser.g:7036:1: rule__Index__Group__5__Impl : ( RightParenthesis ) ;
    public final void rule__Index__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7040:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:7041:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:7041:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:7042:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getRightParenthesisKeyword_5()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getRightParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__5__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__0"
    // InternalOpenCypherParser.g:7052:1: rule__UniqueConstraint__Group__0 : rule__UniqueConstraint__Group__0__Impl rule__UniqueConstraint__Group__1 ;
    public final void rule__UniqueConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7056:1: ( rule__UniqueConstraint__Group__0__Impl rule__UniqueConstraint__Group__1 )
            // InternalOpenCypherParser.g:7057:2: rule__UniqueConstraint__Group__0__Impl rule__UniqueConstraint__Group__1
            {
            pushFollow(FOLLOW_28);
            rule__UniqueConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__0"


    // $ANTLR start "rule__UniqueConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:7064:1: rule__UniqueConstraint__Group__0__Impl : ( CONSTRAINT ) ;
    public final void rule__UniqueConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7068:1: ( ( CONSTRAINT ) )
            // InternalOpenCypherParser.g:7069:1: ( CONSTRAINT )
            {
            // InternalOpenCypherParser.g:7069:1: ( CONSTRAINT )
            // InternalOpenCypherParser.g:7070:2: CONSTRAINT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getCONSTRAINTKeyword_0()); 
            }
            match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getCONSTRAINTKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__0__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__1"
    // InternalOpenCypherParser.g:7079:1: rule__UniqueConstraint__Group__1 : rule__UniqueConstraint__Group__1__Impl rule__UniqueConstraint__Group__2 ;
    public final void rule__UniqueConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7083:1: ( rule__UniqueConstraint__Group__1__Impl rule__UniqueConstraint__Group__2 )
            // InternalOpenCypherParser.g:7084:2: rule__UniqueConstraint__Group__1__Impl rule__UniqueConstraint__Group__2
            {
            pushFollow(FOLLOW_30);
            rule__UniqueConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__1"


    // $ANTLR start "rule__UniqueConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:7091:1: rule__UniqueConstraint__Group__1__Impl : ( ON ) ;
    public final void rule__UniqueConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7095:1: ( ( ON ) )
            // InternalOpenCypherParser.g:7096:1: ( ON )
            {
            // InternalOpenCypherParser.g:7096:1: ( ON )
            // InternalOpenCypherParser.g:7097:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getONKeyword_1()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getONKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__1__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__2"
    // InternalOpenCypherParser.g:7106:1: rule__UniqueConstraint__Group__2 : rule__UniqueConstraint__Group__2__Impl rule__UniqueConstraint__Group__3 ;
    public final void rule__UniqueConstraint__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7110:1: ( rule__UniqueConstraint__Group__2__Impl rule__UniqueConstraint__Group__3 )
            // InternalOpenCypherParser.g:7111:2: rule__UniqueConstraint__Group__2__Impl rule__UniqueConstraint__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__UniqueConstraint__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__2"


    // $ANTLR start "rule__UniqueConstraint__Group__2__Impl"
    // InternalOpenCypherParser.g:7118:1: rule__UniqueConstraint__Group__2__Impl : ( LeftParenthesis ) ;
    public final void rule__UniqueConstraint__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7122:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:7123:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:7123:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:7124:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__2__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__3"
    // InternalOpenCypherParser.g:7133:1: rule__UniqueConstraint__Group__3 : rule__UniqueConstraint__Group__3__Impl rule__UniqueConstraint__Group__4 ;
    public final void rule__UniqueConstraint__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7137:1: ( rule__UniqueConstraint__Group__3__Impl rule__UniqueConstraint__Group__4 )
            // InternalOpenCypherParser.g:7138:2: rule__UniqueConstraint__Group__3__Impl rule__UniqueConstraint__Group__4
            {
            pushFollow(FOLLOW_29);
            rule__UniqueConstraint__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__3"


    // $ANTLR start "rule__UniqueConstraint__Group__3__Impl"
    // InternalOpenCypherParser.g:7145:1: rule__UniqueConstraint__Group__3__Impl : ( ( rule__UniqueConstraint__VariableAssignment_3 ) ) ;
    public final void rule__UniqueConstraint__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7149:1: ( ( ( rule__UniqueConstraint__VariableAssignment_3 ) ) )
            // InternalOpenCypherParser.g:7150:1: ( ( rule__UniqueConstraint__VariableAssignment_3 ) )
            {
            // InternalOpenCypherParser.g:7150:1: ( ( rule__UniqueConstraint__VariableAssignment_3 ) )
            // InternalOpenCypherParser.g:7151:2: ( rule__UniqueConstraint__VariableAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getVariableAssignment_3()); 
            }
            // InternalOpenCypherParser.g:7152:2: ( rule__UniqueConstraint__VariableAssignment_3 )
            // InternalOpenCypherParser.g:7152:3: rule__UniqueConstraint__VariableAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__VariableAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getVariableAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__3__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__4"
    // InternalOpenCypherParser.g:7160:1: rule__UniqueConstraint__Group__4 : rule__UniqueConstraint__Group__4__Impl rule__UniqueConstraint__Group__5 ;
    public final void rule__UniqueConstraint__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7164:1: ( rule__UniqueConstraint__Group__4__Impl rule__UniqueConstraint__Group__5 )
            // InternalOpenCypherParser.g:7165:2: rule__UniqueConstraint__Group__4__Impl rule__UniqueConstraint__Group__5
            {
            pushFollow(FOLLOW_31);
            rule__UniqueConstraint__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__4"


    // $ANTLR start "rule__UniqueConstraint__Group__4__Impl"
    // InternalOpenCypherParser.g:7172:1: rule__UniqueConstraint__Group__4__Impl : ( ( rule__UniqueConstraint__NodeLabelAssignment_4 ) ) ;
    public final void rule__UniqueConstraint__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7176:1: ( ( ( rule__UniqueConstraint__NodeLabelAssignment_4 ) ) )
            // InternalOpenCypherParser.g:7177:1: ( ( rule__UniqueConstraint__NodeLabelAssignment_4 ) )
            {
            // InternalOpenCypherParser.g:7177:1: ( ( rule__UniqueConstraint__NodeLabelAssignment_4 ) )
            // InternalOpenCypherParser.g:7178:2: ( rule__UniqueConstraint__NodeLabelAssignment_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getNodeLabelAssignment_4()); 
            }
            // InternalOpenCypherParser.g:7179:2: ( rule__UniqueConstraint__NodeLabelAssignment_4 )
            // InternalOpenCypherParser.g:7179:3: rule__UniqueConstraint__NodeLabelAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__NodeLabelAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getNodeLabelAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__4__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__5"
    // InternalOpenCypherParser.g:7187:1: rule__UniqueConstraint__Group__5 : rule__UniqueConstraint__Group__5__Impl rule__UniqueConstraint__Group__6 ;
    public final void rule__UniqueConstraint__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7191:1: ( rule__UniqueConstraint__Group__5__Impl rule__UniqueConstraint__Group__6 )
            // InternalOpenCypherParser.g:7192:2: rule__UniqueConstraint__Group__5__Impl rule__UniqueConstraint__Group__6
            {
            pushFollow(FOLLOW_32);
            rule__UniqueConstraint__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__5"


    // $ANTLR start "rule__UniqueConstraint__Group__5__Impl"
    // InternalOpenCypherParser.g:7199:1: rule__UniqueConstraint__Group__5__Impl : ( RightParenthesis ) ;
    public final void rule__UniqueConstraint__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7203:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:7204:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:7204:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:7205:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getRightParenthesisKeyword_5()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getRightParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__5__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__6"
    // InternalOpenCypherParser.g:7214:1: rule__UniqueConstraint__Group__6 : rule__UniqueConstraint__Group__6__Impl rule__UniqueConstraint__Group__7 ;
    public final void rule__UniqueConstraint__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7218:1: ( rule__UniqueConstraint__Group__6__Impl rule__UniqueConstraint__Group__7 )
            // InternalOpenCypherParser.g:7219:2: rule__UniqueConstraint__Group__6__Impl rule__UniqueConstraint__Group__7
            {
            pushFollow(FOLLOW_33);
            rule__UniqueConstraint__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__6"


    // $ANTLR start "rule__UniqueConstraint__Group__6__Impl"
    // InternalOpenCypherParser.g:7226:1: rule__UniqueConstraint__Group__6__Impl : ( ASSERT ) ;
    public final void rule__UniqueConstraint__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7230:1: ( ( ASSERT ) )
            // InternalOpenCypherParser.g:7231:1: ( ASSERT )
            {
            // InternalOpenCypherParser.g:7231:1: ( ASSERT )
            // InternalOpenCypherParser.g:7232:2: ASSERT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getASSERTKeyword_6()); 
            }
            match(input,ASSERT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getASSERTKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__6__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__7"
    // InternalOpenCypherParser.g:7241:1: rule__UniqueConstraint__Group__7 : rule__UniqueConstraint__Group__7__Impl rule__UniqueConstraint__Group__8 ;
    public final void rule__UniqueConstraint__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7245:1: ( rule__UniqueConstraint__Group__7__Impl rule__UniqueConstraint__Group__8 )
            // InternalOpenCypherParser.g:7246:2: rule__UniqueConstraint__Group__7__Impl rule__UniqueConstraint__Group__8
            {
            pushFollow(FOLLOW_34);
            rule__UniqueConstraint__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__7"


    // $ANTLR start "rule__UniqueConstraint__Group__7__Impl"
    // InternalOpenCypherParser.g:7253:1: rule__UniqueConstraint__Group__7__Impl : ( ( rule__UniqueConstraint__PropertyExpressionAssignment_7 ) ) ;
    public final void rule__UniqueConstraint__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7257:1: ( ( ( rule__UniqueConstraint__PropertyExpressionAssignment_7 ) ) )
            // InternalOpenCypherParser.g:7258:1: ( ( rule__UniqueConstraint__PropertyExpressionAssignment_7 ) )
            {
            // InternalOpenCypherParser.g:7258:1: ( ( rule__UniqueConstraint__PropertyExpressionAssignment_7 ) )
            // InternalOpenCypherParser.g:7259:2: ( rule__UniqueConstraint__PropertyExpressionAssignment_7 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionAssignment_7()); 
            }
            // InternalOpenCypherParser.g:7260:2: ( rule__UniqueConstraint__PropertyExpressionAssignment_7 )
            // InternalOpenCypherParser.g:7260:3: rule__UniqueConstraint__PropertyExpressionAssignment_7
            {
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__PropertyExpressionAssignment_7();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionAssignment_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__7__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__8"
    // InternalOpenCypherParser.g:7268:1: rule__UniqueConstraint__Group__8 : rule__UniqueConstraint__Group__8__Impl rule__UniqueConstraint__Group__9 ;
    public final void rule__UniqueConstraint__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7272:1: ( rule__UniqueConstraint__Group__8__Impl rule__UniqueConstraint__Group__9 )
            // InternalOpenCypherParser.g:7273:2: rule__UniqueConstraint__Group__8__Impl rule__UniqueConstraint__Group__9
            {
            pushFollow(FOLLOW_35);
            rule__UniqueConstraint__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__8"


    // $ANTLR start "rule__UniqueConstraint__Group__8__Impl"
    // InternalOpenCypherParser.g:7280:1: rule__UniqueConstraint__Group__8__Impl : ( IS ) ;
    public final void rule__UniqueConstraint__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7284:1: ( ( IS ) )
            // InternalOpenCypherParser.g:7285:1: ( IS )
            {
            // InternalOpenCypherParser.g:7285:1: ( IS )
            // InternalOpenCypherParser.g:7286:2: IS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getISKeyword_8()); 
            }
            match(input,IS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getISKeyword_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__8__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__9"
    // InternalOpenCypherParser.g:7295:1: rule__UniqueConstraint__Group__9 : rule__UniqueConstraint__Group__9__Impl ;
    public final void rule__UniqueConstraint__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7299:1: ( rule__UniqueConstraint__Group__9__Impl )
            // InternalOpenCypherParser.g:7300:2: rule__UniqueConstraint__Group__9__Impl
            {
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__9"


    // $ANTLR start "rule__UniqueConstraint__Group__9__Impl"
    // InternalOpenCypherParser.g:7306:1: rule__UniqueConstraint__Group__9__Impl : ( UNIQUE ) ;
    public final void rule__UniqueConstraint__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7310:1: ( ( UNIQUE ) )
            // InternalOpenCypherParser.g:7311:1: ( UNIQUE )
            {
            // InternalOpenCypherParser.g:7311:1: ( UNIQUE )
            // InternalOpenCypherParser.g:7312:2: UNIQUE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getUNIQUEKeyword_9()); 
            }
            match(input,UNIQUE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getUNIQUEKeyword_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__9__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:7322:1: rule__NodePropertyExistenceConstraint__Group__0 : rule__NodePropertyExistenceConstraint__Group__0__Impl rule__NodePropertyExistenceConstraint__Group__1 ;
    public final void rule__NodePropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7326:1: ( rule__NodePropertyExistenceConstraint__Group__0__Impl rule__NodePropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:7327:2: rule__NodePropertyExistenceConstraint__Group__0__Impl rule__NodePropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_28);
            rule__NodePropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:7334:1: rule__NodePropertyExistenceConstraint__Group__0__Impl : ( CONSTRAINT ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7338:1: ( ( CONSTRAINT ) )
            // InternalOpenCypherParser.g:7339:1: ( CONSTRAINT )
            {
            // InternalOpenCypherParser.g:7339:1: ( CONSTRAINT )
            // InternalOpenCypherParser.g:7340:2: CONSTRAINT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); 
            }
            match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:7349:1: rule__NodePropertyExistenceConstraint__Group__1 : rule__NodePropertyExistenceConstraint__Group__1__Impl rule__NodePropertyExistenceConstraint__Group__2 ;
    public final void rule__NodePropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7353:1: ( rule__NodePropertyExistenceConstraint__Group__1__Impl rule__NodePropertyExistenceConstraint__Group__2 )
            // InternalOpenCypherParser.g:7354:2: rule__NodePropertyExistenceConstraint__Group__1__Impl rule__NodePropertyExistenceConstraint__Group__2
            {
            pushFollow(FOLLOW_30);
            rule__NodePropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:7361:1: rule__NodePropertyExistenceConstraint__Group__1__Impl : ( ON ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7365:1: ( ( ON ) )
            // InternalOpenCypherParser.g:7366:1: ( ON )
            {
            // InternalOpenCypherParser.g:7366:1: ( ON )
            // InternalOpenCypherParser.g:7367:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getONKeyword_1()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getONKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__2"
    // InternalOpenCypherParser.g:7376:1: rule__NodePropertyExistenceConstraint__Group__2 : rule__NodePropertyExistenceConstraint__Group__2__Impl rule__NodePropertyExistenceConstraint__Group__3 ;
    public final void rule__NodePropertyExistenceConstraint__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7380:1: ( rule__NodePropertyExistenceConstraint__Group__2__Impl rule__NodePropertyExistenceConstraint__Group__3 )
            // InternalOpenCypherParser.g:7381:2: rule__NodePropertyExistenceConstraint__Group__2__Impl rule__NodePropertyExistenceConstraint__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__NodePropertyExistenceConstraint__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__2"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__2__Impl"
    // InternalOpenCypherParser.g:7388:1: rule__NodePropertyExistenceConstraint__Group__2__Impl : ( LeftParenthesis ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7392:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:7393:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:7393:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:7394:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__2__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__3"
    // InternalOpenCypherParser.g:7403:1: rule__NodePropertyExistenceConstraint__Group__3 : rule__NodePropertyExistenceConstraint__Group__3__Impl rule__NodePropertyExistenceConstraint__Group__4 ;
    public final void rule__NodePropertyExistenceConstraint__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7407:1: ( rule__NodePropertyExistenceConstraint__Group__3__Impl rule__NodePropertyExistenceConstraint__Group__4 )
            // InternalOpenCypherParser.g:7408:2: rule__NodePropertyExistenceConstraint__Group__3__Impl rule__NodePropertyExistenceConstraint__Group__4
            {
            pushFollow(FOLLOW_29);
            rule__NodePropertyExistenceConstraint__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__3"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__3__Impl"
    // InternalOpenCypherParser.g:7415:1: rule__NodePropertyExistenceConstraint__Group__3__Impl : ( ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 ) ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7419:1: ( ( ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 ) ) )
            // InternalOpenCypherParser.g:7420:1: ( ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 ) )
            {
            // InternalOpenCypherParser.g:7420:1: ( ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 ) )
            // InternalOpenCypherParser.g:7421:2: ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableAssignment_3()); 
            }
            // InternalOpenCypherParser.g:7422:2: ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 )
            // InternalOpenCypherParser.g:7422:3: rule__NodePropertyExistenceConstraint__VariableAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__VariableAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__3__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__4"
    // InternalOpenCypherParser.g:7430:1: rule__NodePropertyExistenceConstraint__Group__4 : rule__NodePropertyExistenceConstraint__Group__4__Impl rule__NodePropertyExistenceConstraint__Group__5 ;
    public final void rule__NodePropertyExistenceConstraint__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7434:1: ( rule__NodePropertyExistenceConstraint__Group__4__Impl rule__NodePropertyExistenceConstraint__Group__5 )
            // InternalOpenCypherParser.g:7435:2: rule__NodePropertyExistenceConstraint__Group__4__Impl rule__NodePropertyExistenceConstraint__Group__5
            {
            pushFollow(FOLLOW_31);
            rule__NodePropertyExistenceConstraint__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__4"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__4__Impl"
    // InternalOpenCypherParser.g:7442:1: rule__NodePropertyExistenceConstraint__Group__4__Impl : ( ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 ) ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7446:1: ( ( ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 ) ) )
            // InternalOpenCypherParser.g:7447:1: ( ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 ) )
            {
            // InternalOpenCypherParser.g:7447:1: ( ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 ) )
            // InternalOpenCypherParser.g:7448:2: ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelAssignment_4()); 
            }
            // InternalOpenCypherParser.g:7449:2: ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 )
            // InternalOpenCypherParser.g:7449:3: rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__4__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__5"
    // InternalOpenCypherParser.g:7457:1: rule__NodePropertyExistenceConstraint__Group__5 : rule__NodePropertyExistenceConstraint__Group__5__Impl rule__NodePropertyExistenceConstraint__Group__6 ;
    public final void rule__NodePropertyExistenceConstraint__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7461:1: ( rule__NodePropertyExistenceConstraint__Group__5__Impl rule__NodePropertyExistenceConstraint__Group__6 )
            // InternalOpenCypherParser.g:7462:2: rule__NodePropertyExistenceConstraint__Group__5__Impl rule__NodePropertyExistenceConstraint__Group__6
            {
            pushFollow(FOLLOW_32);
            rule__NodePropertyExistenceConstraint__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__5"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__5__Impl"
    // InternalOpenCypherParser.g:7469:1: rule__NodePropertyExistenceConstraint__Group__5__Impl : ( RightParenthesis ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7473:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:7474:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:7474:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:7475:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_5()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__5__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__6"
    // InternalOpenCypherParser.g:7484:1: rule__NodePropertyExistenceConstraint__Group__6 : rule__NodePropertyExistenceConstraint__Group__6__Impl rule__NodePropertyExistenceConstraint__Group__7 ;
    public final void rule__NodePropertyExistenceConstraint__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7488:1: ( rule__NodePropertyExistenceConstraint__Group__6__Impl rule__NodePropertyExistenceConstraint__Group__7 )
            // InternalOpenCypherParser.g:7489:2: rule__NodePropertyExistenceConstraint__Group__6__Impl rule__NodePropertyExistenceConstraint__Group__7
            {
            pushFollow(FOLLOW_36);
            rule__NodePropertyExistenceConstraint__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__6"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__6__Impl"
    // InternalOpenCypherParser.g:7496:1: rule__NodePropertyExistenceConstraint__Group__6__Impl : ( ASSERT ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7500:1: ( ( ASSERT ) )
            // InternalOpenCypherParser.g:7501:1: ( ASSERT )
            {
            // InternalOpenCypherParser.g:7501:1: ( ASSERT )
            // InternalOpenCypherParser.g:7502:2: ASSERT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getASSERTKeyword_6()); 
            }
            match(input,ASSERT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getASSERTKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__6__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__7"
    // InternalOpenCypherParser.g:7511:1: rule__NodePropertyExistenceConstraint__Group__7 : rule__NodePropertyExistenceConstraint__Group__7__Impl rule__NodePropertyExistenceConstraint__Group__8 ;
    public final void rule__NodePropertyExistenceConstraint__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7515:1: ( rule__NodePropertyExistenceConstraint__Group__7__Impl rule__NodePropertyExistenceConstraint__Group__8 )
            // InternalOpenCypherParser.g:7516:2: rule__NodePropertyExistenceConstraint__Group__7__Impl rule__NodePropertyExistenceConstraint__Group__8
            {
            pushFollow(FOLLOW_30);
            rule__NodePropertyExistenceConstraint__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__7"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__7__Impl"
    // InternalOpenCypherParser.g:7523:1: rule__NodePropertyExistenceConstraint__Group__7__Impl : ( EXISTS ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7527:1: ( ( EXISTS ) )
            // InternalOpenCypherParser.g:7528:1: ( EXISTS )
            {
            // InternalOpenCypherParser.g:7528:1: ( EXISTS )
            // InternalOpenCypherParser.g:7529:2: EXISTS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getEXISTSKeyword_7()); 
            }
            match(input,EXISTS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getEXISTSKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__7__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__8"
    // InternalOpenCypherParser.g:7538:1: rule__NodePropertyExistenceConstraint__Group__8 : rule__NodePropertyExistenceConstraint__Group__8__Impl rule__NodePropertyExistenceConstraint__Group__9 ;
    public final void rule__NodePropertyExistenceConstraint__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7542:1: ( rule__NodePropertyExistenceConstraint__Group__8__Impl rule__NodePropertyExistenceConstraint__Group__9 )
            // InternalOpenCypherParser.g:7543:2: rule__NodePropertyExistenceConstraint__Group__8__Impl rule__NodePropertyExistenceConstraint__Group__9
            {
            pushFollow(FOLLOW_33);
            rule__NodePropertyExistenceConstraint__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__8"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__8__Impl"
    // InternalOpenCypherParser.g:7550:1: rule__NodePropertyExistenceConstraint__Group__8__Impl : ( LeftParenthesis ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7554:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:7555:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:7555:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:7556:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_8()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__8__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__9"
    // InternalOpenCypherParser.g:7565:1: rule__NodePropertyExistenceConstraint__Group__9 : rule__NodePropertyExistenceConstraint__Group__9__Impl rule__NodePropertyExistenceConstraint__Group__10 ;
    public final void rule__NodePropertyExistenceConstraint__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7569:1: ( rule__NodePropertyExistenceConstraint__Group__9__Impl rule__NodePropertyExistenceConstraint__Group__10 )
            // InternalOpenCypherParser.g:7570:2: rule__NodePropertyExistenceConstraint__Group__9__Impl rule__NodePropertyExistenceConstraint__Group__10
            {
            pushFollow(FOLLOW_31);
            rule__NodePropertyExistenceConstraint__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__10();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__9"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__9__Impl"
    // InternalOpenCypherParser.g:7577:1: rule__NodePropertyExistenceConstraint__Group__9__Impl : ( ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 ) ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7581:1: ( ( ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 ) ) )
            // InternalOpenCypherParser.g:7582:1: ( ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 ) )
            {
            // InternalOpenCypherParser.g:7582:1: ( ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 ) )
            // InternalOpenCypherParser.g:7583:2: ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionAssignment_9()); 
            }
            // InternalOpenCypherParser.g:7584:2: ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 )
            // InternalOpenCypherParser.g:7584:3: rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9
            {
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionAssignment_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__9__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__10"
    // InternalOpenCypherParser.g:7592:1: rule__NodePropertyExistenceConstraint__Group__10 : rule__NodePropertyExistenceConstraint__Group__10__Impl ;
    public final void rule__NodePropertyExistenceConstraint__Group__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7596:1: ( rule__NodePropertyExistenceConstraint__Group__10__Impl )
            // InternalOpenCypherParser.g:7597:2: rule__NodePropertyExistenceConstraint__Group__10__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__10__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__10"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__10__Impl"
    // InternalOpenCypherParser.g:7603:1: rule__NodePropertyExistenceConstraint__Group__10__Impl : ( RightParenthesis ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__10__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7607:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:7608:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:7608:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:7609:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_10()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_10()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__10__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:7619:1: rule__RelationshipPropertyExistenceConstraint__Group__0 : rule__RelationshipPropertyExistenceConstraint__Group__0__Impl rule__RelationshipPropertyExistenceConstraint__Group__1 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7623:1: ( rule__RelationshipPropertyExistenceConstraint__Group__0__Impl rule__RelationshipPropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:7624:2: rule__RelationshipPropertyExistenceConstraint__Group__0__Impl rule__RelationshipPropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_28);
            rule__RelationshipPropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:7631:1: rule__RelationshipPropertyExistenceConstraint__Group__0__Impl : ( CONSTRAINT ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7635:1: ( ( CONSTRAINT ) )
            // InternalOpenCypherParser.g:7636:1: ( CONSTRAINT )
            {
            // InternalOpenCypherParser.g:7636:1: ( CONSTRAINT )
            // InternalOpenCypherParser.g:7637:2: CONSTRAINT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); 
            }
            match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:7646:1: rule__RelationshipPropertyExistenceConstraint__Group__1 : rule__RelationshipPropertyExistenceConstraint__Group__1__Impl rule__RelationshipPropertyExistenceConstraint__Group__2 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7650:1: ( rule__RelationshipPropertyExistenceConstraint__Group__1__Impl rule__RelationshipPropertyExistenceConstraint__Group__2 )
            // InternalOpenCypherParser.g:7651:2: rule__RelationshipPropertyExistenceConstraint__Group__1__Impl rule__RelationshipPropertyExistenceConstraint__Group__2
            {
            pushFollow(FOLLOW_30);
            rule__RelationshipPropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:7658:1: rule__RelationshipPropertyExistenceConstraint__Group__1__Impl : ( ON ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7662:1: ( ( ON ) )
            // InternalOpenCypherParser.g:7663:1: ( ON )
            {
            // InternalOpenCypherParser.g:7663:1: ( ON )
            // InternalOpenCypherParser.g:7664:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getONKeyword_1()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getONKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__2"
    // InternalOpenCypherParser.g:7673:1: rule__RelationshipPropertyExistenceConstraint__Group__2 : rule__RelationshipPropertyExistenceConstraint__Group__2__Impl rule__RelationshipPropertyExistenceConstraint__Group__3 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7677:1: ( rule__RelationshipPropertyExistenceConstraint__Group__2__Impl rule__RelationshipPropertyExistenceConstraint__Group__3 )
            // InternalOpenCypherParser.g:7678:2: rule__RelationshipPropertyExistenceConstraint__Group__2__Impl rule__RelationshipPropertyExistenceConstraint__Group__3
            {
            pushFollow(FOLLOW_32);
            rule__RelationshipPropertyExistenceConstraint__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__2"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__2__Impl"
    // InternalOpenCypherParser.g:7685:1: rule__RelationshipPropertyExistenceConstraint__Group__2__Impl : ( ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 ) ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7689:1: ( ( ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 ) ) )
            // InternalOpenCypherParser.g:7690:1: ( ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:7690:1: ( ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 ) )
            // InternalOpenCypherParser.g:7691:2: ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternAssignment_2()); 
            }
            // InternalOpenCypherParser.g:7692:2: ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 )
            // InternalOpenCypherParser.g:7692:3: rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__2__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__3"
    // InternalOpenCypherParser.g:7700:1: rule__RelationshipPropertyExistenceConstraint__Group__3 : rule__RelationshipPropertyExistenceConstraint__Group__3__Impl rule__RelationshipPropertyExistenceConstraint__Group__4 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7704:1: ( rule__RelationshipPropertyExistenceConstraint__Group__3__Impl rule__RelationshipPropertyExistenceConstraint__Group__4 )
            // InternalOpenCypherParser.g:7705:2: rule__RelationshipPropertyExistenceConstraint__Group__3__Impl rule__RelationshipPropertyExistenceConstraint__Group__4
            {
            pushFollow(FOLLOW_36);
            rule__RelationshipPropertyExistenceConstraint__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__3"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__3__Impl"
    // InternalOpenCypherParser.g:7712:1: rule__RelationshipPropertyExistenceConstraint__Group__3__Impl : ( ASSERT ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7716:1: ( ( ASSERT ) )
            // InternalOpenCypherParser.g:7717:1: ( ASSERT )
            {
            // InternalOpenCypherParser.g:7717:1: ( ASSERT )
            // InternalOpenCypherParser.g:7718:2: ASSERT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getASSERTKeyword_3()); 
            }
            match(input,ASSERT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getASSERTKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__3__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__4"
    // InternalOpenCypherParser.g:7727:1: rule__RelationshipPropertyExistenceConstraint__Group__4 : rule__RelationshipPropertyExistenceConstraint__Group__4__Impl rule__RelationshipPropertyExistenceConstraint__Group__5 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7731:1: ( rule__RelationshipPropertyExistenceConstraint__Group__4__Impl rule__RelationshipPropertyExistenceConstraint__Group__5 )
            // InternalOpenCypherParser.g:7732:2: rule__RelationshipPropertyExistenceConstraint__Group__4__Impl rule__RelationshipPropertyExistenceConstraint__Group__5
            {
            pushFollow(FOLLOW_30);
            rule__RelationshipPropertyExistenceConstraint__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__4"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__4__Impl"
    // InternalOpenCypherParser.g:7739:1: rule__RelationshipPropertyExistenceConstraint__Group__4__Impl : ( EXISTS ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7743:1: ( ( EXISTS ) )
            // InternalOpenCypherParser.g:7744:1: ( EXISTS )
            {
            // InternalOpenCypherParser.g:7744:1: ( EXISTS )
            // InternalOpenCypherParser.g:7745:2: EXISTS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getEXISTSKeyword_4()); 
            }
            match(input,EXISTS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getEXISTSKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__4__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__5"
    // InternalOpenCypherParser.g:7754:1: rule__RelationshipPropertyExistenceConstraint__Group__5 : rule__RelationshipPropertyExistenceConstraint__Group__5__Impl rule__RelationshipPropertyExistenceConstraint__Group__6 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7758:1: ( rule__RelationshipPropertyExistenceConstraint__Group__5__Impl rule__RelationshipPropertyExistenceConstraint__Group__6 )
            // InternalOpenCypherParser.g:7759:2: rule__RelationshipPropertyExistenceConstraint__Group__5__Impl rule__RelationshipPropertyExistenceConstraint__Group__6
            {
            pushFollow(FOLLOW_33);
            rule__RelationshipPropertyExistenceConstraint__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__5"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__5__Impl"
    // InternalOpenCypherParser.g:7766:1: rule__RelationshipPropertyExistenceConstraint__Group__5__Impl : ( LeftParenthesis ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7770:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:7771:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:7771:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:7772:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getLeftParenthesisKeyword_5()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getLeftParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__5__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__6"
    // InternalOpenCypherParser.g:7781:1: rule__RelationshipPropertyExistenceConstraint__Group__6 : rule__RelationshipPropertyExistenceConstraint__Group__6__Impl rule__RelationshipPropertyExistenceConstraint__Group__7 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7785:1: ( rule__RelationshipPropertyExistenceConstraint__Group__6__Impl rule__RelationshipPropertyExistenceConstraint__Group__7 )
            // InternalOpenCypherParser.g:7786:2: rule__RelationshipPropertyExistenceConstraint__Group__6__Impl rule__RelationshipPropertyExistenceConstraint__Group__7
            {
            pushFollow(FOLLOW_31);
            rule__RelationshipPropertyExistenceConstraint__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__6"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__6__Impl"
    // InternalOpenCypherParser.g:7793:1: rule__RelationshipPropertyExistenceConstraint__Group__6__Impl : ( ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 ) ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7797:1: ( ( ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 ) ) )
            // InternalOpenCypherParser.g:7798:1: ( ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 ) )
            {
            // InternalOpenCypherParser.g:7798:1: ( ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 ) )
            // InternalOpenCypherParser.g:7799:2: ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionAssignment_6()); 
            }
            // InternalOpenCypherParser.g:7800:2: ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 )
            // InternalOpenCypherParser.g:7800:3: rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionAssignment_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__6__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__7"
    // InternalOpenCypherParser.g:7808:1: rule__RelationshipPropertyExistenceConstraint__Group__7 : rule__RelationshipPropertyExistenceConstraint__Group__7__Impl ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7812:1: ( rule__RelationshipPropertyExistenceConstraint__Group__7__Impl )
            // InternalOpenCypherParser.g:7813:2: rule__RelationshipPropertyExistenceConstraint__Group__7__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__7"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__7__Impl"
    // InternalOpenCypherParser.g:7819:1: rule__RelationshipPropertyExistenceConstraint__Group__7__Impl : ( RightParenthesis ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7823:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:7824:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:7824:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:7825:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRightParenthesisKeyword_7()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRightParenthesisKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__7__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__0"
    // InternalOpenCypherParser.g:7835:1: rule__RelationshipPatternSyntax__Group__0 : rule__RelationshipPatternSyntax__Group__0__Impl rule__RelationshipPatternSyntax__Group__1 ;
    public final void rule__RelationshipPatternSyntax__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7839:1: ( rule__RelationshipPatternSyntax__Group__0__Impl rule__RelationshipPatternSyntax__Group__1 )
            // InternalOpenCypherParser.g:7840:2: rule__RelationshipPatternSyntax__Group__0__Impl rule__RelationshipPatternSyntax__Group__1
            {
            pushFollow(FOLLOW_31);
            rule__RelationshipPatternSyntax__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__0"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__0__Impl"
    // InternalOpenCypherParser.g:7847:1: rule__RelationshipPatternSyntax__Group__0__Impl : ( LeftParenthesis ) ;
    public final void rule__RelationshipPatternSyntax__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7851:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:7852:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:7852:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:7853:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__0__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__1"
    // InternalOpenCypherParser.g:7862:1: rule__RelationshipPatternSyntax__Group__1 : rule__RelationshipPatternSyntax__Group__1__Impl rule__RelationshipPatternSyntax__Group__2 ;
    public final void rule__RelationshipPatternSyntax__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7866:1: ( rule__RelationshipPatternSyntax__Group__1__Impl rule__RelationshipPatternSyntax__Group__2 )
            // InternalOpenCypherParser.g:7867:2: rule__RelationshipPatternSyntax__Group__1__Impl rule__RelationshipPatternSyntax__Group__2
            {
            pushFollow(FOLLOW_37);
            rule__RelationshipPatternSyntax__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__1"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__1__Impl"
    // InternalOpenCypherParser.g:7874:1: rule__RelationshipPatternSyntax__Group__1__Impl : ( RightParenthesis ) ;
    public final void rule__RelationshipPatternSyntax__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7878:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:7879:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:7879:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:7880:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_1()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__1__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__2"
    // InternalOpenCypherParser.g:7889:1: rule__RelationshipPatternSyntax__Group__2 : rule__RelationshipPatternSyntax__Group__2__Impl rule__RelationshipPatternSyntax__Group__3 ;
    public final void rule__RelationshipPatternSyntax__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7893:1: ( rule__RelationshipPatternSyntax__Group__2__Impl rule__RelationshipPatternSyntax__Group__3 )
            // InternalOpenCypherParser.g:7894:2: rule__RelationshipPatternSyntax__Group__2__Impl rule__RelationshipPatternSyntax__Group__3
            {
            pushFollow(FOLLOW_37);
            rule__RelationshipPatternSyntax__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__2"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__2__Impl"
    // InternalOpenCypherParser.g:7901:1: rule__RelationshipPatternSyntax__Group__2__Impl : ( ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )? ) ;
    public final void rule__RelationshipPatternSyntax__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7905:1: ( ( ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )? ) )
            // InternalOpenCypherParser.g:7906:1: ( ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:7906:1: ( ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )? )
            // InternalOpenCypherParser.g:7907:2: ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingAssignment_2()); 
            }
            // InternalOpenCypherParser.g:7908:2: ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LessThanSign) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // InternalOpenCypherParser.g:7908:3: rule__RelationshipPatternSyntax__IncomingAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipPatternSyntax__IncomingAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__2__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__3"
    // InternalOpenCypherParser.g:7916:1: rule__RelationshipPatternSyntax__Group__3 : rule__RelationshipPatternSyntax__Group__3__Impl rule__RelationshipPatternSyntax__Group__4 ;
    public final void rule__RelationshipPatternSyntax__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7920:1: ( rule__RelationshipPatternSyntax__Group__3__Impl rule__RelationshipPatternSyntax__Group__4 )
            // InternalOpenCypherParser.g:7921:2: rule__RelationshipPatternSyntax__Group__3__Impl rule__RelationshipPatternSyntax__Group__4
            {
            pushFollow(FOLLOW_38);
            rule__RelationshipPatternSyntax__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__3"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__3__Impl"
    // InternalOpenCypherParser.g:7928:1: rule__RelationshipPatternSyntax__Group__3__Impl : ( ruleDash ) ;
    public final void rule__RelationshipPatternSyntax__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7932:1: ( ( ruleDash ) )
            // InternalOpenCypherParser.g:7933:1: ( ruleDash )
            {
            // InternalOpenCypherParser.g:7933:1: ( ruleDash )
            // InternalOpenCypherParser.g:7934:2: ruleDash
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_3()); 
            }
            pushFollow(FOLLOW_2);
            ruleDash();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__3__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__4"
    // InternalOpenCypherParser.g:7943:1: rule__RelationshipPatternSyntax__Group__4 : rule__RelationshipPatternSyntax__Group__4__Impl rule__RelationshipPatternSyntax__Group__5 ;
    public final void rule__RelationshipPatternSyntax__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7947:1: ( rule__RelationshipPatternSyntax__Group__4__Impl rule__RelationshipPatternSyntax__Group__5 )
            // InternalOpenCypherParser.g:7948:2: rule__RelationshipPatternSyntax__Group__4__Impl rule__RelationshipPatternSyntax__Group__5
            {
            pushFollow(FOLLOW_10);
            rule__RelationshipPatternSyntax__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__4"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__4__Impl"
    // InternalOpenCypherParser.g:7955:1: rule__RelationshipPatternSyntax__Group__4__Impl : ( LeftSquareBracket ) ;
    public final void rule__RelationshipPatternSyntax__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7959:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:7960:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:7960:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:7961:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftSquareBracketKeyword_4()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftSquareBracketKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__4__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__5"
    // InternalOpenCypherParser.g:7970:1: rule__RelationshipPatternSyntax__Group__5 : rule__RelationshipPatternSyntax__Group__5__Impl rule__RelationshipPatternSyntax__Group__6 ;
    public final void rule__RelationshipPatternSyntax__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7974:1: ( rule__RelationshipPatternSyntax__Group__5__Impl rule__RelationshipPatternSyntax__Group__6 )
            // InternalOpenCypherParser.g:7975:2: rule__RelationshipPatternSyntax__Group__5__Impl rule__RelationshipPatternSyntax__Group__6
            {
            pushFollow(FOLLOW_29);
            rule__RelationshipPatternSyntax__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__5"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__5__Impl"
    // InternalOpenCypherParser.g:7982:1: rule__RelationshipPatternSyntax__Group__5__Impl : ( ( rule__RelationshipPatternSyntax__VariableAssignment_5 ) ) ;
    public final void rule__RelationshipPatternSyntax__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7986:1: ( ( ( rule__RelationshipPatternSyntax__VariableAssignment_5 ) ) )
            // InternalOpenCypherParser.g:7987:1: ( ( rule__RelationshipPatternSyntax__VariableAssignment_5 ) )
            {
            // InternalOpenCypherParser.g:7987:1: ( ( rule__RelationshipPatternSyntax__VariableAssignment_5 ) )
            // InternalOpenCypherParser.g:7988:2: ( rule__RelationshipPatternSyntax__VariableAssignment_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableAssignment_5()); 
            }
            // InternalOpenCypherParser.g:7989:2: ( rule__RelationshipPatternSyntax__VariableAssignment_5 )
            // InternalOpenCypherParser.g:7989:3: rule__RelationshipPatternSyntax__VariableAssignment_5
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__VariableAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__5__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__6"
    // InternalOpenCypherParser.g:7997:1: rule__RelationshipPatternSyntax__Group__6 : rule__RelationshipPatternSyntax__Group__6__Impl rule__RelationshipPatternSyntax__Group__7 ;
    public final void rule__RelationshipPatternSyntax__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8001:1: ( rule__RelationshipPatternSyntax__Group__6__Impl rule__RelationshipPatternSyntax__Group__7 )
            // InternalOpenCypherParser.g:8002:2: rule__RelationshipPatternSyntax__Group__6__Impl rule__RelationshipPatternSyntax__Group__7
            {
            pushFollow(FOLLOW_39);
            rule__RelationshipPatternSyntax__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__6"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__6__Impl"
    // InternalOpenCypherParser.g:8009:1: rule__RelationshipPatternSyntax__Group__6__Impl : ( ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 ) ) ;
    public final void rule__RelationshipPatternSyntax__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8013:1: ( ( ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 ) ) )
            // InternalOpenCypherParser.g:8014:1: ( ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 ) )
            {
            // InternalOpenCypherParser.g:8014:1: ( ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 ) )
            // InternalOpenCypherParser.g:8015:2: ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeAssignment_6()); 
            }
            // InternalOpenCypherParser.g:8016:2: ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 )
            // InternalOpenCypherParser.g:8016:3: rule__RelationshipPatternSyntax__RelTypeAssignment_6
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__RelTypeAssignment_6();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeAssignment_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__6__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__7"
    // InternalOpenCypherParser.g:8024:1: rule__RelationshipPatternSyntax__Group__7 : rule__RelationshipPatternSyntax__Group__7__Impl rule__RelationshipPatternSyntax__Group__8 ;
    public final void rule__RelationshipPatternSyntax__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8028:1: ( rule__RelationshipPatternSyntax__Group__7__Impl rule__RelationshipPatternSyntax__Group__8 )
            // InternalOpenCypherParser.g:8029:2: rule__RelationshipPatternSyntax__Group__7__Impl rule__RelationshipPatternSyntax__Group__8
            {
            pushFollow(FOLLOW_37);
            rule__RelationshipPatternSyntax__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__7"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__7__Impl"
    // InternalOpenCypherParser.g:8036:1: rule__RelationshipPatternSyntax__Group__7__Impl : ( RightSquareBracket ) ;
    public final void rule__RelationshipPatternSyntax__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8040:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:8041:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:8041:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:8042:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getRightSquareBracketKeyword_7()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getRightSquareBracketKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__7__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__8"
    // InternalOpenCypherParser.g:8051:1: rule__RelationshipPatternSyntax__Group__8 : rule__RelationshipPatternSyntax__Group__8__Impl rule__RelationshipPatternSyntax__Group__9 ;
    public final void rule__RelationshipPatternSyntax__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8055:1: ( rule__RelationshipPatternSyntax__Group__8__Impl rule__RelationshipPatternSyntax__Group__9 )
            // InternalOpenCypherParser.g:8056:2: rule__RelationshipPatternSyntax__Group__8__Impl rule__RelationshipPatternSyntax__Group__9
            {
            pushFollow(FOLLOW_40);
            rule__RelationshipPatternSyntax__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__8"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__8__Impl"
    // InternalOpenCypherParser.g:8063:1: rule__RelationshipPatternSyntax__Group__8__Impl : ( ruleDash ) ;
    public final void rule__RelationshipPatternSyntax__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8067:1: ( ( ruleDash ) )
            // InternalOpenCypherParser.g:8068:1: ( ruleDash )
            {
            // InternalOpenCypherParser.g:8068:1: ( ruleDash )
            // InternalOpenCypherParser.g:8069:2: ruleDash
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_8()); 
            }
            pushFollow(FOLLOW_2);
            ruleDash();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__8__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__9"
    // InternalOpenCypherParser.g:8078:1: rule__RelationshipPatternSyntax__Group__9 : rule__RelationshipPatternSyntax__Group__9__Impl rule__RelationshipPatternSyntax__Group__10 ;
    public final void rule__RelationshipPatternSyntax__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8082:1: ( rule__RelationshipPatternSyntax__Group__9__Impl rule__RelationshipPatternSyntax__Group__10 )
            // InternalOpenCypherParser.g:8083:2: rule__RelationshipPatternSyntax__Group__9__Impl rule__RelationshipPatternSyntax__Group__10
            {
            pushFollow(FOLLOW_40);
            rule__RelationshipPatternSyntax__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__10();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__9"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__9__Impl"
    // InternalOpenCypherParser.g:8090:1: rule__RelationshipPatternSyntax__Group__9__Impl : ( ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )? ) ;
    public final void rule__RelationshipPatternSyntax__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8094:1: ( ( ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )? ) )
            // InternalOpenCypherParser.g:8095:1: ( ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )? )
            {
            // InternalOpenCypherParser.g:8095:1: ( ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )? )
            // InternalOpenCypherParser.g:8096:2: ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingAssignment_9()); 
            }
            // InternalOpenCypherParser.g:8097:2: ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==GreaterThanSign) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // InternalOpenCypherParser.g:8097:3: rule__RelationshipPatternSyntax__OutgoingAssignment_9
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipPatternSyntax__OutgoingAssignment_9();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingAssignment_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__9__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__10"
    // InternalOpenCypherParser.g:8105:1: rule__RelationshipPatternSyntax__Group__10 : rule__RelationshipPatternSyntax__Group__10__Impl rule__RelationshipPatternSyntax__Group__11 ;
    public final void rule__RelationshipPatternSyntax__Group__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8109:1: ( rule__RelationshipPatternSyntax__Group__10__Impl rule__RelationshipPatternSyntax__Group__11 )
            // InternalOpenCypherParser.g:8110:2: rule__RelationshipPatternSyntax__Group__10__Impl rule__RelationshipPatternSyntax__Group__11
            {
            pushFollow(FOLLOW_31);
            rule__RelationshipPatternSyntax__Group__10__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__11();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__10"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__10__Impl"
    // InternalOpenCypherParser.g:8117:1: rule__RelationshipPatternSyntax__Group__10__Impl : ( LeftParenthesis ) ;
    public final void rule__RelationshipPatternSyntax__Group__10__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8121:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:8122:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:8122:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:8123:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_10()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_10()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__10__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__11"
    // InternalOpenCypherParser.g:8132:1: rule__RelationshipPatternSyntax__Group__11 : rule__RelationshipPatternSyntax__Group__11__Impl ;
    public final void rule__RelationshipPatternSyntax__Group__11() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8136:1: ( rule__RelationshipPatternSyntax__Group__11__Impl )
            // InternalOpenCypherParser.g:8137:2: rule__RelationshipPatternSyntax__Group__11__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__11__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__11"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__11__Impl"
    // InternalOpenCypherParser.g:8143:1: rule__RelationshipPatternSyntax__Group__11__Impl : ( RightParenthesis ) ;
    public final void rule__RelationshipPatternSyntax__Group__11__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8147:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:8148:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:8148:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:8149:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_11()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_11()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__11__Impl"


    // $ANTLR start "rule__LoadCSV__Group__0"
    // InternalOpenCypherParser.g:8159:1: rule__LoadCSV__Group__0 : rule__LoadCSV__Group__0__Impl rule__LoadCSV__Group__1 ;
    public final void rule__LoadCSV__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8163:1: ( rule__LoadCSV__Group__0__Impl rule__LoadCSV__Group__1 )
            // InternalOpenCypherParser.g:8164:2: rule__LoadCSV__Group__0__Impl rule__LoadCSV__Group__1
            {
            pushFollow(FOLLOW_13);
            rule__LoadCSV__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__0"


    // $ANTLR start "rule__LoadCSV__Group__0__Impl"
    // InternalOpenCypherParser.g:8171:1: rule__LoadCSV__Group__0__Impl : ( () ) ;
    public final void rule__LoadCSV__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8175:1: ( ( () ) )
            // InternalOpenCypherParser.g:8176:1: ( () )
            {
            // InternalOpenCypherParser.g:8176:1: ( () )
            // InternalOpenCypherParser.g:8177:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getLoadCSVAction_0()); 
            }
            // InternalOpenCypherParser.g:8178:2: ()
            // InternalOpenCypherParser.g:8178:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getLoadCSVAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__0__Impl"


    // $ANTLR start "rule__LoadCSV__Group__1"
    // InternalOpenCypherParser.g:8186:1: rule__LoadCSV__Group__1 : rule__LoadCSV__Group__1__Impl rule__LoadCSV__Group__2 ;
    public final void rule__LoadCSV__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8190:1: ( rule__LoadCSV__Group__1__Impl rule__LoadCSV__Group__2 )
            // InternalOpenCypherParser.g:8191:2: rule__LoadCSV__Group__1__Impl rule__LoadCSV__Group__2
            {
            pushFollow(FOLLOW_41);
            rule__LoadCSV__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__1"


    // $ANTLR start "rule__LoadCSV__Group__1__Impl"
    // InternalOpenCypherParser.g:8198:1: rule__LoadCSV__Group__1__Impl : ( LOAD ) ;
    public final void rule__LoadCSV__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8202:1: ( ( LOAD ) )
            // InternalOpenCypherParser.g:8203:1: ( LOAD )
            {
            // InternalOpenCypherParser.g:8203:1: ( LOAD )
            // InternalOpenCypherParser.g:8204:2: LOAD
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getLOADKeyword_1()); 
            }
            match(input,LOAD,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getLOADKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__1__Impl"


    // $ANTLR start "rule__LoadCSV__Group__2"
    // InternalOpenCypherParser.g:8213:1: rule__LoadCSV__Group__2 : rule__LoadCSV__Group__2__Impl rule__LoadCSV__Group__3 ;
    public final void rule__LoadCSV__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8217:1: ( rule__LoadCSV__Group__2__Impl rule__LoadCSV__Group__3 )
            // InternalOpenCypherParser.g:8218:2: rule__LoadCSV__Group__2__Impl rule__LoadCSV__Group__3
            {
            pushFollow(FOLLOW_42);
            rule__LoadCSV__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__2"


    // $ANTLR start "rule__LoadCSV__Group__2__Impl"
    // InternalOpenCypherParser.g:8225:1: rule__LoadCSV__Group__2__Impl : ( CSV ) ;
    public final void rule__LoadCSV__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8229:1: ( ( CSV ) )
            // InternalOpenCypherParser.g:8230:1: ( CSV )
            {
            // InternalOpenCypherParser.g:8230:1: ( CSV )
            // InternalOpenCypherParser.g:8231:2: CSV
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getCSVKeyword_2()); 
            }
            match(input,CSV,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getCSVKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__2__Impl"


    // $ANTLR start "rule__LoadCSV__Group__3"
    // InternalOpenCypherParser.g:8240:1: rule__LoadCSV__Group__3 : rule__LoadCSV__Group__3__Impl rule__LoadCSV__Group__4 ;
    public final void rule__LoadCSV__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8244:1: ( rule__LoadCSV__Group__3__Impl rule__LoadCSV__Group__4 )
            // InternalOpenCypherParser.g:8245:2: rule__LoadCSV__Group__3__Impl rule__LoadCSV__Group__4
            {
            pushFollow(FOLLOW_42);
            rule__LoadCSV__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__3"


    // $ANTLR start "rule__LoadCSV__Group__3__Impl"
    // InternalOpenCypherParser.g:8252:1: rule__LoadCSV__Group__3__Impl : ( ( rule__LoadCSV__WithHeadersAssignment_3 )? ) ;
    public final void rule__LoadCSV__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8256:1: ( ( ( rule__LoadCSV__WithHeadersAssignment_3 )? ) )
            // InternalOpenCypherParser.g:8257:1: ( ( rule__LoadCSV__WithHeadersAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:8257:1: ( ( rule__LoadCSV__WithHeadersAssignment_3 )? )
            // InternalOpenCypherParser.g:8258:2: ( rule__LoadCSV__WithHeadersAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getWithHeadersAssignment_3()); 
            }
            // InternalOpenCypherParser.g:8259:2: ( rule__LoadCSV__WithHeadersAssignment_3 )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==WITH) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // InternalOpenCypherParser.g:8259:3: rule__LoadCSV__WithHeadersAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__LoadCSV__WithHeadersAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getWithHeadersAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__3__Impl"


    // $ANTLR start "rule__LoadCSV__Group__4"
    // InternalOpenCypherParser.g:8267:1: rule__LoadCSV__Group__4 : rule__LoadCSV__Group__4__Impl rule__LoadCSV__Group__5 ;
    public final void rule__LoadCSV__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8271:1: ( rule__LoadCSV__Group__4__Impl rule__LoadCSV__Group__5 )
            // InternalOpenCypherParser.g:8272:2: rule__LoadCSV__Group__4__Impl rule__LoadCSV__Group__5
            {
            pushFollow(FOLLOW_43);
            rule__LoadCSV__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__4"


    // $ANTLR start "rule__LoadCSV__Group__4__Impl"
    // InternalOpenCypherParser.g:8279:1: rule__LoadCSV__Group__4__Impl : ( FROM ) ;
    public final void rule__LoadCSV__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8283:1: ( ( FROM ) )
            // InternalOpenCypherParser.g:8284:1: ( FROM )
            {
            // InternalOpenCypherParser.g:8284:1: ( FROM )
            // InternalOpenCypherParser.g:8285:2: FROM
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getFROMKeyword_4()); 
            }
            match(input,FROM,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getFROMKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__4__Impl"


    // $ANTLR start "rule__LoadCSV__Group__5"
    // InternalOpenCypherParser.g:8294:1: rule__LoadCSV__Group__5 : rule__LoadCSV__Group__5__Impl rule__LoadCSV__Group__6 ;
    public final void rule__LoadCSV__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8298:1: ( rule__LoadCSV__Group__5__Impl rule__LoadCSV__Group__6 )
            // InternalOpenCypherParser.g:8299:2: rule__LoadCSV__Group__5__Impl rule__LoadCSV__Group__6
            {
            pushFollow(FOLLOW_44);
            rule__LoadCSV__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__5"


    // $ANTLR start "rule__LoadCSV__Group__5__Impl"
    // InternalOpenCypherParser.g:8306:1: rule__LoadCSV__Group__5__Impl : ( ( rule__LoadCSV__ExpressionAssignment_5 ) ) ;
    public final void rule__LoadCSV__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8310:1: ( ( ( rule__LoadCSV__ExpressionAssignment_5 ) ) )
            // InternalOpenCypherParser.g:8311:1: ( ( rule__LoadCSV__ExpressionAssignment_5 ) )
            {
            // InternalOpenCypherParser.g:8311:1: ( ( rule__LoadCSV__ExpressionAssignment_5 ) )
            // InternalOpenCypherParser.g:8312:2: ( rule__LoadCSV__ExpressionAssignment_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getExpressionAssignment_5()); 
            }
            // InternalOpenCypherParser.g:8313:2: ( rule__LoadCSV__ExpressionAssignment_5 )
            // InternalOpenCypherParser.g:8313:3: rule__LoadCSV__ExpressionAssignment_5
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__ExpressionAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getExpressionAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__5__Impl"


    // $ANTLR start "rule__LoadCSV__Group__6"
    // InternalOpenCypherParser.g:8321:1: rule__LoadCSV__Group__6 : rule__LoadCSV__Group__6__Impl rule__LoadCSV__Group__7 ;
    public final void rule__LoadCSV__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8325:1: ( rule__LoadCSV__Group__6__Impl rule__LoadCSV__Group__7 )
            // InternalOpenCypherParser.g:8326:2: rule__LoadCSV__Group__6__Impl rule__LoadCSV__Group__7
            {
            pushFollow(FOLLOW_10);
            rule__LoadCSV__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__6"


    // $ANTLR start "rule__LoadCSV__Group__6__Impl"
    // InternalOpenCypherParser.g:8333:1: rule__LoadCSV__Group__6__Impl : ( AS ) ;
    public final void rule__LoadCSV__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8337:1: ( ( AS ) )
            // InternalOpenCypherParser.g:8338:1: ( AS )
            {
            // InternalOpenCypherParser.g:8338:1: ( AS )
            // InternalOpenCypherParser.g:8339:2: AS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getASKeyword_6()); 
            }
            match(input,AS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getASKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__6__Impl"


    // $ANTLR start "rule__LoadCSV__Group__7"
    // InternalOpenCypherParser.g:8348:1: rule__LoadCSV__Group__7 : rule__LoadCSV__Group__7__Impl rule__LoadCSV__Group__8 ;
    public final void rule__LoadCSV__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8352:1: ( rule__LoadCSV__Group__7__Impl rule__LoadCSV__Group__8 )
            // InternalOpenCypherParser.g:8353:2: rule__LoadCSV__Group__7__Impl rule__LoadCSV__Group__8
            {
            pushFollow(FOLLOW_45);
            rule__LoadCSV__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__7"


    // $ANTLR start "rule__LoadCSV__Group__7__Impl"
    // InternalOpenCypherParser.g:8360:1: rule__LoadCSV__Group__7__Impl : ( ( rule__LoadCSV__VariableAssignment_7 ) ) ;
    public final void rule__LoadCSV__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8364:1: ( ( ( rule__LoadCSV__VariableAssignment_7 ) ) )
            // InternalOpenCypherParser.g:8365:1: ( ( rule__LoadCSV__VariableAssignment_7 ) )
            {
            // InternalOpenCypherParser.g:8365:1: ( ( rule__LoadCSV__VariableAssignment_7 ) )
            // InternalOpenCypherParser.g:8366:2: ( rule__LoadCSV__VariableAssignment_7 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getVariableAssignment_7()); 
            }
            // InternalOpenCypherParser.g:8367:2: ( rule__LoadCSV__VariableAssignment_7 )
            // InternalOpenCypherParser.g:8367:3: rule__LoadCSV__VariableAssignment_7
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__VariableAssignment_7();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getVariableAssignment_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__7__Impl"


    // $ANTLR start "rule__LoadCSV__Group__8"
    // InternalOpenCypherParser.g:8375:1: rule__LoadCSV__Group__8 : rule__LoadCSV__Group__8__Impl ;
    public final void rule__LoadCSV__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8379:1: ( rule__LoadCSV__Group__8__Impl )
            // InternalOpenCypherParser.g:8380:2: rule__LoadCSV__Group__8__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__8"


    // $ANTLR start "rule__LoadCSV__Group__8__Impl"
    // InternalOpenCypherParser.g:8386:1: rule__LoadCSV__Group__8__Impl : ( ( rule__LoadCSV__Group_8__0 )? ) ;
    public final void rule__LoadCSV__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8390:1: ( ( ( rule__LoadCSV__Group_8__0 )? ) )
            // InternalOpenCypherParser.g:8391:1: ( ( rule__LoadCSV__Group_8__0 )? )
            {
            // InternalOpenCypherParser.g:8391:1: ( ( rule__LoadCSV__Group_8__0 )? )
            // InternalOpenCypherParser.g:8392:2: ( rule__LoadCSV__Group_8__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getGroup_8()); 
            }
            // InternalOpenCypherParser.g:8393:2: ( rule__LoadCSV__Group_8__0 )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==FIELDTERMINATOR) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // InternalOpenCypherParser.g:8393:3: rule__LoadCSV__Group_8__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__LoadCSV__Group_8__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getGroup_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__8__Impl"


    // $ANTLR start "rule__LoadCSV__Group_8__0"
    // InternalOpenCypherParser.g:8402:1: rule__LoadCSV__Group_8__0 : rule__LoadCSV__Group_8__0__Impl rule__LoadCSV__Group_8__1 ;
    public final void rule__LoadCSV__Group_8__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8406:1: ( rule__LoadCSV__Group_8__0__Impl rule__LoadCSV__Group_8__1 )
            // InternalOpenCypherParser.g:8407:2: rule__LoadCSV__Group_8__0__Impl rule__LoadCSV__Group_8__1
            {
            pushFollow(FOLLOW_46);
            rule__LoadCSV__Group_8__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group_8__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group_8__0"


    // $ANTLR start "rule__LoadCSV__Group_8__0__Impl"
    // InternalOpenCypherParser.g:8414:1: rule__LoadCSV__Group_8__0__Impl : ( FIELDTERMINATOR ) ;
    public final void rule__LoadCSV__Group_8__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8418:1: ( ( FIELDTERMINATOR ) )
            // InternalOpenCypherParser.g:8419:1: ( FIELDTERMINATOR )
            {
            // InternalOpenCypherParser.g:8419:1: ( FIELDTERMINATOR )
            // InternalOpenCypherParser.g:8420:2: FIELDTERMINATOR
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getFIELDTERMINATORKeyword_8_0()); 
            }
            match(input,FIELDTERMINATOR,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getFIELDTERMINATORKeyword_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group_8__0__Impl"


    // $ANTLR start "rule__LoadCSV__Group_8__1"
    // InternalOpenCypherParser.g:8429:1: rule__LoadCSV__Group_8__1 : rule__LoadCSV__Group_8__1__Impl ;
    public final void rule__LoadCSV__Group_8__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8433:1: ( rule__LoadCSV__Group_8__1__Impl )
            // InternalOpenCypherParser.g:8434:2: rule__LoadCSV__Group_8__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group_8__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group_8__1"


    // $ANTLR start "rule__LoadCSV__Group_8__1__Impl"
    // InternalOpenCypherParser.g:8440:1: rule__LoadCSV__Group_8__1__Impl : ( ( rule__LoadCSV__FieldterminatorAssignment_8_1 ) ) ;
    public final void rule__LoadCSV__Group_8__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8444:1: ( ( ( rule__LoadCSV__FieldterminatorAssignment_8_1 ) ) )
            // InternalOpenCypherParser.g:8445:1: ( ( rule__LoadCSV__FieldterminatorAssignment_8_1 ) )
            {
            // InternalOpenCypherParser.g:8445:1: ( ( rule__LoadCSV__FieldterminatorAssignment_8_1 ) )
            // InternalOpenCypherParser.g:8446:2: ( rule__LoadCSV__FieldterminatorAssignment_8_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getFieldterminatorAssignment_8_1()); 
            }
            // InternalOpenCypherParser.g:8447:2: ( rule__LoadCSV__FieldterminatorAssignment_8_1 )
            // InternalOpenCypherParser.g:8447:3: rule__LoadCSV__FieldterminatorAssignment_8_1
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__FieldterminatorAssignment_8_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getFieldterminatorAssignment_8_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group_8__1__Impl"


    // $ANTLR start "rule__LoadCSVWithHeaders__Group__0"
    // InternalOpenCypherParser.g:8456:1: rule__LoadCSVWithHeaders__Group__0 : rule__LoadCSVWithHeaders__Group__0__Impl rule__LoadCSVWithHeaders__Group__1 ;
    public final void rule__LoadCSVWithHeaders__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8460:1: ( rule__LoadCSVWithHeaders__Group__0__Impl rule__LoadCSVWithHeaders__Group__1 )
            // InternalOpenCypherParser.g:8461:2: rule__LoadCSVWithHeaders__Group__0__Impl rule__LoadCSVWithHeaders__Group__1
            {
            pushFollow(FOLLOW_47);
            rule__LoadCSVWithHeaders__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSVWithHeaders__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVWithHeaders__Group__0"


    // $ANTLR start "rule__LoadCSVWithHeaders__Group__0__Impl"
    // InternalOpenCypherParser.g:8468:1: rule__LoadCSVWithHeaders__Group__0__Impl : ( WITH ) ;
    public final void rule__LoadCSVWithHeaders__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8472:1: ( ( WITH ) )
            // InternalOpenCypherParser.g:8473:1: ( WITH )
            {
            // InternalOpenCypherParser.g:8473:1: ( WITH )
            // InternalOpenCypherParser.g:8474:2: WITH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVWithHeadersAccess().getWITHKeyword_0()); 
            }
            match(input,WITH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVWithHeadersAccess().getWITHKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVWithHeaders__Group__0__Impl"


    // $ANTLR start "rule__LoadCSVWithHeaders__Group__1"
    // InternalOpenCypherParser.g:8483:1: rule__LoadCSVWithHeaders__Group__1 : rule__LoadCSVWithHeaders__Group__1__Impl ;
    public final void rule__LoadCSVWithHeaders__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8487:1: ( rule__LoadCSVWithHeaders__Group__1__Impl )
            // InternalOpenCypherParser.g:8488:2: rule__LoadCSVWithHeaders__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVWithHeaders__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVWithHeaders__Group__1"


    // $ANTLR start "rule__LoadCSVWithHeaders__Group__1__Impl"
    // InternalOpenCypherParser.g:8494:1: rule__LoadCSVWithHeaders__Group__1__Impl : ( HEADERS ) ;
    public final void rule__LoadCSVWithHeaders__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8498:1: ( ( HEADERS ) )
            // InternalOpenCypherParser.g:8499:1: ( HEADERS )
            {
            // InternalOpenCypherParser.g:8499:1: ( HEADERS )
            // InternalOpenCypherParser.g:8500:2: HEADERS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVWithHeadersAccess().getHEADERSKeyword_1()); 
            }
            match(input,HEADERS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVWithHeadersAccess().getHEADERSKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVWithHeaders__Group__1__Impl"


    // $ANTLR start "rule__Match__Group__0"
    // InternalOpenCypherParser.g:8510:1: rule__Match__Group__0 : rule__Match__Group__0__Impl rule__Match__Group__1 ;
    public final void rule__Match__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8514:1: ( rule__Match__Group__0__Impl rule__Match__Group__1 )
            // InternalOpenCypherParser.g:8515:2: rule__Match__Group__0__Impl rule__Match__Group__1
            {
            pushFollow(FOLLOW_48);
            rule__Match__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Match__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__0"


    // $ANTLR start "rule__Match__Group__0__Impl"
    // InternalOpenCypherParser.g:8522:1: rule__Match__Group__0__Impl : ( ( rule__Match__OptionalAssignment_0 )? ) ;
    public final void rule__Match__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8526:1: ( ( ( rule__Match__OptionalAssignment_0 )? ) )
            // InternalOpenCypherParser.g:8527:1: ( ( rule__Match__OptionalAssignment_0 )? )
            {
            // InternalOpenCypherParser.g:8527:1: ( ( rule__Match__OptionalAssignment_0 )? )
            // InternalOpenCypherParser.g:8528:2: ( rule__Match__OptionalAssignment_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getOptionalAssignment_0()); 
            }
            // InternalOpenCypherParser.g:8529:2: ( rule__Match__OptionalAssignment_0 )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==OPTIONAL) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // InternalOpenCypherParser.g:8529:3: rule__Match__OptionalAssignment_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Match__OptionalAssignment_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getOptionalAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__0__Impl"


    // $ANTLR start "rule__Match__Group__1"
    // InternalOpenCypherParser.g:8537:1: rule__Match__Group__1 : rule__Match__Group__1__Impl rule__Match__Group__2 ;
    public final void rule__Match__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8541:1: ( rule__Match__Group__1__Impl rule__Match__Group__2 )
            // InternalOpenCypherParser.g:8542:2: rule__Match__Group__1__Impl rule__Match__Group__2
            {
            pushFollow(FOLLOW_49);
            rule__Match__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Match__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__1"


    // $ANTLR start "rule__Match__Group__1__Impl"
    // InternalOpenCypherParser.g:8549:1: rule__Match__Group__1__Impl : ( MATCH ) ;
    public final void rule__Match__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8553:1: ( ( MATCH ) )
            // InternalOpenCypherParser.g:8554:1: ( MATCH )
            {
            // InternalOpenCypherParser.g:8554:1: ( MATCH )
            // InternalOpenCypherParser.g:8555:2: MATCH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getMATCHKeyword_1()); 
            }
            match(input,MATCH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getMATCHKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__1__Impl"


    // $ANTLR start "rule__Match__Group__2"
    // InternalOpenCypherParser.g:8564:1: rule__Match__Group__2 : rule__Match__Group__2__Impl rule__Match__Group__3 ;
    public final void rule__Match__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8568:1: ( rule__Match__Group__2__Impl rule__Match__Group__3 )
            // InternalOpenCypherParser.g:8569:2: rule__Match__Group__2__Impl rule__Match__Group__3
            {
            pushFollow(FOLLOW_50);
            rule__Match__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Match__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__2"


    // $ANTLR start "rule__Match__Group__2__Impl"
    // InternalOpenCypherParser.g:8576:1: rule__Match__Group__2__Impl : ( ( rule__Match__PatternAssignment_2 ) ) ;
    public final void rule__Match__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8580:1: ( ( ( rule__Match__PatternAssignment_2 ) ) )
            // InternalOpenCypherParser.g:8581:1: ( ( rule__Match__PatternAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:8581:1: ( ( rule__Match__PatternAssignment_2 ) )
            // InternalOpenCypherParser.g:8582:2: ( rule__Match__PatternAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getPatternAssignment_2()); 
            }
            // InternalOpenCypherParser.g:8583:2: ( rule__Match__PatternAssignment_2 )
            // InternalOpenCypherParser.g:8583:3: rule__Match__PatternAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Match__PatternAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getPatternAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__2__Impl"


    // $ANTLR start "rule__Match__Group__3"
    // InternalOpenCypherParser.g:8591:1: rule__Match__Group__3 : rule__Match__Group__3__Impl rule__Match__Group__4 ;
    public final void rule__Match__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8595:1: ( rule__Match__Group__3__Impl rule__Match__Group__4 )
            // InternalOpenCypherParser.g:8596:2: rule__Match__Group__3__Impl rule__Match__Group__4
            {
            pushFollow(FOLLOW_50);
            rule__Match__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Match__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__3"


    // $ANTLR start "rule__Match__Group__3__Impl"
    // InternalOpenCypherParser.g:8603:1: rule__Match__Group__3__Impl : ( ( rule__Match__HintsAssignment_3 )* ) ;
    public final void rule__Match__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8607:1: ( ( ( rule__Match__HintsAssignment_3 )* ) )
            // InternalOpenCypherParser.g:8608:1: ( ( rule__Match__HintsAssignment_3 )* )
            {
            // InternalOpenCypherParser.g:8608:1: ( ( rule__Match__HintsAssignment_3 )* )
            // InternalOpenCypherParser.g:8609:2: ( rule__Match__HintsAssignment_3 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getHintsAssignment_3()); 
            }
            // InternalOpenCypherParser.g:8610:2: ( rule__Match__HintsAssignment_3 )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==USING) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // InternalOpenCypherParser.g:8610:3: rule__Match__HintsAssignment_3
            	    {
            	    pushFollow(FOLLOW_51);
            	    rule__Match__HintsAssignment_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getHintsAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__3__Impl"


    // $ANTLR start "rule__Match__Group__4"
    // InternalOpenCypherParser.g:8618:1: rule__Match__Group__4 : rule__Match__Group__4__Impl ;
    public final void rule__Match__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8622:1: ( rule__Match__Group__4__Impl )
            // InternalOpenCypherParser.g:8623:2: rule__Match__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Match__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__4"


    // $ANTLR start "rule__Match__Group__4__Impl"
    // InternalOpenCypherParser.g:8629:1: rule__Match__Group__4__Impl : ( ( rule__Match__WhereAssignment_4 )? ) ;
    public final void rule__Match__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8633:1: ( ( ( rule__Match__WhereAssignment_4 )? ) )
            // InternalOpenCypherParser.g:8634:1: ( ( rule__Match__WhereAssignment_4 )? )
            {
            // InternalOpenCypherParser.g:8634:1: ( ( rule__Match__WhereAssignment_4 )? )
            // InternalOpenCypherParser.g:8635:2: ( rule__Match__WhereAssignment_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getWhereAssignment_4()); 
            }
            // InternalOpenCypherParser.g:8636:2: ( rule__Match__WhereAssignment_4 )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==WHERE) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // InternalOpenCypherParser.g:8636:3: rule__Match__WhereAssignment_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__Match__WhereAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getWhereAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__4__Impl"


    // $ANTLR start "rule__Unwind__Group__0"
    // InternalOpenCypherParser.g:8645:1: rule__Unwind__Group__0 : rule__Unwind__Group__0__Impl rule__Unwind__Group__1 ;
    public final void rule__Unwind__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8649:1: ( rule__Unwind__Group__0__Impl rule__Unwind__Group__1 )
            // InternalOpenCypherParser.g:8650:2: rule__Unwind__Group__0__Impl rule__Unwind__Group__1
            {
            pushFollow(FOLLOW_43);
            rule__Unwind__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Unwind__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__0"


    // $ANTLR start "rule__Unwind__Group__0__Impl"
    // InternalOpenCypherParser.g:8657:1: rule__Unwind__Group__0__Impl : ( UNWIND ) ;
    public final void rule__Unwind__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8661:1: ( ( UNWIND ) )
            // InternalOpenCypherParser.g:8662:1: ( UNWIND )
            {
            // InternalOpenCypherParser.g:8662:1: ( UNWIND )
            // InternalOpenCypherParser.g:8663:2: UNWIND
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getUNWINDKeyword_0()); 
            }
            match(input,UNWIND,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getUNWINDKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__0__Impl"


    // $ANTLR start "rule__Unwind__Group__1"
    // InternalOpenCypherParser.g:8672:1: rule__Unwind__Group__1 : rule__Unwind__Group__1__Impl rule__Unwind__Group__2 ;
    public final void rule__Unwind__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8676:1: ( rule__Unwind__Group__1__Impl rule__Unwind__Group__2 )
            // InternalOpenCypherParser.g:8677:2: rule__Unwind__Group__1__Impl rule__Unwind__Group__2
            {
            pushFollow(FOLLOW_44);
            rule__Unwind__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Unwind__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__1"


    // $ANTLR start "rule__Unwind__Group__1__Impl"
    // InternalOpenCypherParser.g:8684:1: rule__Unwind__Group__1__Impl : ( ( rule__Unwind__ExpressionAssignment_1 ) ) ;
    public final void rule__Unwind__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8688:1: ( ( ( rule__Unwind__ExpressionAssignment_1 ) ) )
            // InternalOpenCypherParser.g:8689:1: ( ( rule__Unwind__ExpressionAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:8689:1: ( ( rule__Unwind__ExpressionAssignment_1 ) )
            // InternalOpenCypherParser.g:8690:2: ( rule__Unwind__ExpressionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getExpressionAssignment_1()); 
            }
            // InternalOpenCypherParser.g:8691:2: ( rule__Unwind__ExpressionAssignment_1 )
            // InternalOpenCypherParser.g:8691:3: rule__Unwind__ExpressionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Unwind__ExpressionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getExpressionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__1__Impl"


    // $ANTLR start "rule__Unwind__Group__2"
    // InternalOpenCypherParser.g:8699:1: rule__Unwind__Group__2 : rule__Unwind__Group__2__Impl rule__Unwind__Group__3 ;
    public final void rule__Unwind__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8703:1: ( rule__Unwind__Group__2__Impl rule__Unwind__Group__3 )
            // InternalOpenCypherParser.g:8704:2: rule__Unwind__Group__2__Impl rule__Unwind__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__Unwind__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Unwind__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__2"


    // $ANTLR start "rule__Unwind__Group__2__Impl"
    // InternalOpenCypherParser.g:8711:1: rule__Unwind__Group__2__Impl : ( AS ) ;
    public final void rule__Unwind__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8715:1: ( ( AS ) )
            // InternalOpenCypherParser.g:8716:1: ( AS )
            {
            // InternalOpenCypherParser.g:8716:1: ( AS )
            // InternalOpenCypherParser.g:8717:2: AS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getASKeyword_2()); 
            }
            match(input,AS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getASKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__2__Impl"


    // $ANTLR start "rule__Unwind__Group__3"
    // InternalOpenCypherParser.g:8726:1: rule__Unwind__Group__3 : rule__Unwind__Group__3__Impl ;
    public final void rule__Unwind__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8730:1: ( rule__Unwind__Group__3__Impl )
            // InternalOpenCypherParser.g:8731:2: rule__Unwind__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Unwind__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__3"


    // $ANTLR start "rule__Unwind__Group__3__Impl"
    // InternalOpenCypherParser.g:8737:1: rule__Unwind__Group__3__Impl : ( ( rule__Unwind__VariableAssignment_3 ) ) ;
    public final void rule__Unwind__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8741:1: ( ( ( rule__Unwind__VariableAssignment_3 ) ) )
            // InternalOpenCypherParser.g:8742:1: ( ( rule__Unwind__VariableAssignment_3 ) )
            {
            // InternalOpenCypherParser.g:8742:1: ( ( rule__Unwind__VariableAssignment_3 ) )
            // InternalOpenCypherParser.g:8743:2: ( rule__Unwind__VariableAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getVariableAssignment_3()); 
            }
            // InternalOpenCypherParser.g:8744:2: ( rule__Unwind__VariableAssignment_3 )
            // InternalOpenCypherParser.g:8744:3: rule__Unwind__VariableAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__Unwind__VariableAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getVariableAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__3__Impl"


    // $ANTLR start "rule__Merge__Group__0"
    // InternalOpenCypherParser.g:8753:1: rule__Merge__Group__0 : rule__Merge__Group__0__Impl rule__Merge__Group__1 ;
    public final void rule__Merge__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8757:1: ( rule__Merge__Group__0__Impl rule__Merge__Group__1 )
            // InternalOpenCypherParser.g:8758:2: rule__Merge__Group__0__Impl rule__Merge__Group__1
            {
            pushFollow(FOLLOW_49);
            rule__Merge__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Merge__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__0"


    // $ANTLR start "rule__Merge__Group__0__Impl"
    // InternalOpenCypherParser.g:8765:1: rule__Merge__Group__0__Impl : ( MERGE ) ;
    public final void rule__Merge__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8769:1: ( ( MERGE ) )
            // InternalOpenCypherParser.g:8770:1: ( MERGE )
            {
            // InternalOpenCypherParser.g:8770:1: ( MERGE )
            // InternalOpenCypherParser.g:8771:2: MERGE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getMERGEKeyword_0()); 
            }
            match(input,MERGE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getMERGEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__0__Impl"


    // $ANTLR start "rule__Merge__Group__1"
    // InternalOpenCypherParser.g:8780:1: rule__Merge__Group__1 : rule__Merge__Group__1__Impl rule__Merge__Group__2 ;
    public final void rule__Merge__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8784:1: ( rule__Merge__Group__1__Impl rule__Merge__Group__2 )
            // InternalOpenCypherParser.g:8785:2: rule__Merge__Group__1__Impl rule__Merge__Group__2
            {
            pushFollow(FOLLOW_28);
            rule__Merge__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Merge__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__1"


    // $ANTLR start "rule__Merge__Group__1__Impl"
    // InternalOpenCypherParser.g:8792:1: rule__Merge__Group__1__Impl : ( ( rule__Merge__PatternPartAssignment_1 ) ) ;
    public final void rule__Merge__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8796:1: ( ( ( rule__Merge__PatternPartAssignment_1 ) ) )
            // InternalOpenCypherParser.g:8797:1: ( ( rule__Merge__PatternPartAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:8797:1: ( ( rule__Merge__PatternPartAssignment_1 ) )
            // InternalOpenCypherParser.g:8798:2: ( rule__Merge__PatternPartAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getPatternPartAssignment_1()); 
            }
            // InternalOpenCypherParser.g:8799:2: ( rule__Merge__PatternPartAssignment_1 )
            // InternalOpenCypherParser.g:8799:3: rule__Merge__PatternPartAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Merge__PatternPartAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getPatternPartAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__1__Impl"


    // $ANTLR start "rule__Merge__Group__2"
    // InternalOpenCypherParser.g:8807:1: rule__Merge__Group__2 : rule__Merge__Group__2__Impl ;
    public final void rule__Merge__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8811:1: ( rule__Merge__Group__2__Impl )
            // InternalOpenCypherParser.g:8812:2: rule__Merge__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Merge__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__2"


    // $ANTLR start "rule__Merge__Group__2__Impl"
    // InternalOpenCypherParser.g:8818:1: rule__Merge__Group__2__Impl : ( ( rule__Merge__MergeActionsAssignment_2 )* ) ;
    public final void rule__Merge__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8822:1: ( ( ( rule__Merge__MergeActionsAssignment_2 )* ) )
            // InternalOpenCypherParser.g:8823:1: ( ( rule__Merge__MergeActionsAssignment_2 )* )
            {
            // InternalOpenCypherParser.g:8823:1: ( ( rule__Merge__MergeActionsAssignment_2 )* )
            // InternalOpenCypherParser.g:8824:2: ( rule__Merge__MergeActionsAssignment_2 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getMergeActionsAssignment_2()); 
            }
            // InternalOpenCypherParser.g:8825:2: ( rule__Merge__MergeActionsAssignment_2 )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==ON) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // InternalOpenCypherParser.g:8825:3: rule__Merge__MergeActionsAssignment_2
            	    {
            	    pushFollow(FOLLOW_52);
            	    rule__Merge__MergeActionsAssignment_2();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getMergeActionsAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__2__Impl"


    // $ANTLR start "rule__MergeAction__Group__0"
    // InternalOpenCypherParser.g:8834:1: rule__MergeAction__Group__0 : rule__MergeAction__Group__0__Impl rule__MergeAction__Group__1 ;
    public final void rule__MergeAction__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8838:1: ( rule__MergeAction__Group__0__Impl rule__MergeAction__Group__1 )
            // InternalOpenCypherParser.g:8839:2: rule__MergeAction__Group__0__Impl rule__MergeAction__Group__1
            {
            pushFollow(FOLLOW_53);
            rule__MergeAction__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MergeAction__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__0"


    // $ANTLR start "rule__MergeAction__Group__0__Impl"
    // InternalOpenCypherParser.g:8846:1: rule__MergeAction__Group__0__Impl : ( ON ) ;
    public final void rule__MergeAction__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8850:1: ( ( ON ) )
            // InternalOpenCypherParser.g:8851:1: ( ON )
            {
            // InternalOpenCypherParser.g:8851:1: ( ON )
            // InternalOpenCypherParser.g:8852:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getONKeyword_0()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getONKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__0__Impl"


    // $ANTLR start "rule__MergeAction__Group__1"
    // InternalOpenCypherParser.g:8861:1: rule__MergeAction__Group__1 : rule__MergeAction__Group__1__Impl rule__MergeAction__Group__2 ;
    public final void rule__MergeAction__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8865:1: ( rule__MergeAction__Group__1__Impl rule__MergeAction__Group__2 )
            // InternalOpenCypherParser.g:8866:2: rule__MergeAction__Group__1__Impl rule__MergeAction__Group__2
            {
            pushFollow(FOLLOW_54);
            rule__MergeAction__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MergeAction__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__1"


    // $ANTLR start "rule__MergeAction__Group__1__Impl"
    // InternalOpenCypherParser.g:8873:1: rule__MergeAction__Group__1__Impl : ( ( rule__MergeAction__ActionAssignment_1 ) ) ;
    public final void rule__MergeAction__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8877:1: ( ( ( rule__MergeAction__ActionAssignment_1 ) ) )
            // InternalOpenCypherParser.g:8878:1: ( ( rule__MergeAction__ActionAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:8878:1: ( ( rule__MergeAction__ActionAssignment_1 ) )
            // InternalOpenCypherParser.g:8879:2: ( rule__MergeAction__ActionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getActionAssignment_1()); 
            }
            // InternalOpenCypherParser.g:8880:2: ( rule__MergeAction__ActionAssignment_1 )
            // InternalOpenCypherParser.g:8880:3: rule__MergeAction__ActionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__MergeAction__ActionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getActionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__1__Impl"


    // $ANTLR start "rule__MergeAction__Group__2"
    // InternalOpenCypherParser.g:8888:1: rule__MergeAction__Group__2 : rule__MergeAction__Group__2__Impl ;
    public final void rule__MergeAction__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8892:1: ( rule__MergeAction__Group__2__Impl )
            // InternalOpenCypherParser.g:8893:2: rule__MergeAction__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MergeAction__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__2"


    // $ANTLR start "rule__MergeAction__Group__2__Impl"
    // InternalOpenCypherParser.g:8899:1: rule__MergeAction__Group__2__Impl : ( ( rule__MergeAction__SetAssignment_2 ) ) ;
    public final void rule__MergeAction__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8903:1: ( ( ( rule__MergeAction__SetAssignment_2 ) ) )
            // InternalOpenCypherParser.g:8904:1: ( ( rule__MergeAction__SetAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:8904:1: ( ( rule__MergeAction__SetAssignment_2 ) )
            // InternalOpenCypherParser.g:8905:2: ( rule__MergeAction__SetAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getSetAssignment_2()); 
            }
            // InternalOpenCypherParser.g:8906:2: ( rule__MergeAction__SetAssignment_2 )
            // InternalOpenCypherParser.g:8906:3: rule__MergeAction__SetAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__MergeAction__SetAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getSetAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__2__Impl"


    // $ANTLR start "rule__Create__Group__0"
    // InternalOpenCypherParser.g:8915:1: rule__Create__Group__0 : rule__Create__Group__0__Impl rule__Create__Group__1 ;
    public final void rule__Create__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8919:1: ( rule__Create__Group__0__Impl rule__Create__Group__1 )
            // InternalOpenCypherParser.g:8920:2: rule__Create__Group__0__Impl rule__Create__Group__1
            {
            pushFollow(FOLLOW_49);
            rule__Create__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Create__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__0"


    // $ANTLR start "rule__Create__Group__0__Impl"
    // InternalOpenCypherParser.g:8927:1: rule__Create__Group__0__Impl : ( CREATE ) ;
    public final void rule__Create__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8931:1: ( ( CREATE ) )
            // InternalOpenCypherParser.g:8932:1: ( CREATE )
            {
            // InternalOpenCypherParser.g:8932:1: ( CREATE )
            // InternalOpenCypherParser.g:8933:2: CREATE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getCREATEKeyword_0()); 
            }
            match(input,CREATE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getCREATEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__0__Impl"


    // $ANTLR start "rule__Create__Group__1"
    // InternalOpenCypherParser.g:8942:1: rule__Create__Group__1 : rule__Create__Group__1__Impl rule__Create__Group__2 ;
    public final void rule__Create__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8946:1: ( rule__Create__Group__1__Impl rule__Create__Group__2 )
            // InternalOpenCypherParser.g:8947:2: rule__Create__Group__1__Impl rule__Create__Group__2
            {
            pushFollow(FOLLOW_49);
            rule__Create__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Create__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__1"


    // $ANTLR start "rule__Create__Group__1__Impl"
    // InternalOpenCypherParser.g:8954:1: rule__Create__Group__1__Impl : ( ( rule__Create__UniqueContraintAssignment_1 )? ) ;
    public final void rule__Create__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8958:1: ( ( ( rule__Create__UniqueContraintAssignment_1 )? ) )
            // InternalOpenCypherParser.g:8959:1: ( ( rule__Create__UniqueContraintAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:8959:1: ( ( rule__Create__UniqueContraintAssignment_1 )? )
            // InternalOpenCypherParser.g:8960:2: ( rule__Create__UniqueContraintAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getUniqueContraintAssignment_1()); 
            }
            // InternalOpenCypherParser.g:8961:2: ( rule__Create__UniqueContraintAssignment_1 )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==UNIQUE) ) {
                int LA75_1 = input.LA(2);

                if ( ((LA75_1>=ALLSHORTESTPATHS && LA75_1<=WHERE)||(LA75_1>=CASE && LA75_1<=XOR)||(LA75_1>=AS && LA75_1<=OR)||LA75_1==LeftParenthesis||LA75_1==RULE_ID) ) {
                    alt75=1;
                }
            }
            switch (alt75) {
                case 1 :
                    // InternalOpenCypherParser.g:8961:3: rule__Create__UniqueContraintAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Create__UniqueContraintAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getUniqueContraintAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__1__Impl"


    // $ANTLR start "rule__Create__Group__2"
    // InternalOpenCypherParser.g:8969:1: rule__Create__Group__2 : rule__Create__Group__2__Impl ;
    public final void rule__Create__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8973:1: ( rule__Create__Group__2__Impl )
            // InternalOpenCypherParser.g:8974:2: rule__Create__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Create__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__2"


    // $ANTLR start "rule__Create__Group__2__Impl"
    // InternalOpenCypherParser.g:8980:1: rule__Create__Group__2__Impl : ( ( rule__Create__PatternAssignment_2 ) ) ;
    public final void rule__Create__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8984:1: ( ( ( rule__Create__PatternAssignment_2 ) ) )
            // InternalOpenCypherParser.g:8985:1: ( ( rule__Create__PatternAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:8985:1: ( ( rule__Create__PatternAssignment_2 ) )
            // InternalOpenCypherParser.g:8986:2: ( rule__Create__PatternAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getPatternAssignment_2()); 
            }
            // InternalOpenCypherParser.g:8987:2: ( rule__Create__PatternAssignment_2 )
            // InternalOpenCypherParser.g:8987:3: rule__Create__PatternAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Create__PatternAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getPatternAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__2__Impl"


    // $ANTLR start "rule__Set__Group__0"
    // InternalOpenCypherParser.g:8996:1: rule__Set__Group__0 : rule__Set__Group__0__Impl rule__Set__Group__1 ;
    public final void rule__Set__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9000:1: ( rule__Set__Group__0__Impl rule__Set__Group__1 )
            // InternalOpenCypherParser.g:9001:2: rule__Set__Group__0__Impl rule__Set__Group__1
            {
            pushFollow(FOLLOW_33);
            rule__Set__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Set__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__0"


    // $ANTLR start "rule__Set__Group__0__Impl"
    // InternalOpenCypherParser.g:9008:1: rule__Set__Group__0__Impl : ( SET ) ;
    public final void rule__Set__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9012:1: ( ( SET ) )
            // InternalOpenCypherParser.g:9013:1: ( SET )
            {
            // InternalOpenCypherParser.g:9013:1: ( SET )
            // InternalOpenCypherParser.g:9014:2: SET
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getSETKeyword_0()); 
            }
            match(input,SET,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getSETKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__0__Impl"


    // $ANTLR start "rule__Set__Group__1"
    // InternalOpenCypherParser.g:9023:1: rule__Set__Group__1 : rule__Set__Group__1__Impl rule__Set__Group__2 ;
    public final void rule__Set__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9027:1: ( rule__Set__Group__1__Impl rule__Set__Group__2 )
            // InternalOpenCypherParser.g:9028:2: rule__Set__Group__1__Impl rule__Set__Group__2
            {
            pushFollow(FOLLOW_55);
            rule__Set__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Set__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__1"


    // $ANTLR start "rule__Set__Group__1__Impl"
    // InternalOpenCypherParser.g:9035:1: rule__Set__Group__1__Impl : ( ( rule__Set__SetItemsAssignment_1 ) ) ;
    public final void rule__Set__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9039:1: ( ( ( rule__Set__SetItemsAssignment_1 ) ) )
            // InternalOpenCypherParser.g:9040:1: ( ( rule__Set__SetItemsAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:9040:1: ( ( rule__Set__SetItemsAssignment_1 ) )
            // InternalOpenCypherParser.g:9041:2: ( rule__Set__SetItemsAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getSetItemsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:9042:2: ( rule__Set__SetItemsAssignment_1 )
            // InternalOpenCypherParser.g:9042:3: rule__Set__SetItemsAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Set__SetItemsAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getSetItemsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__1__Impl"


    // $ANTLR start "rule__Set__Group__2"
    // InternalOpenCypherParser.g:9050:1: rule__Set__Group__2 : rule__Set__Group__2__Impl ;
    public final void rule__Set__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9054:1: ( rule__Set__Group__2__Impl )
            // InternalOpenCypherParser.g:9055:2: rule__Set__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Set__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__2"


    // $ANTLR start "rule__Set__Group__2__Impl"
    // InternalOpenCypherParser.g:9061:1: rule__Set__Group__2__Impl : ( ( rule__Set__Group_2__0 )* ) ;
    public final void rule__Set__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9065:1: ( ( ( rule__Set__Group_2__0 )* ) )
            // InternalOpenCypherParser.g:9066:1: ( ( rule__Set__Group_2__0 )* )
            {
            // InternalOpenCypherParser.g:9066:1: ( ( rule__Set__Group_2__0 )* )
            // InternalOpenCypherParser.g:9067:2: ( rule__Set__Group_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:9068:2: ( rule__Set__Group_2__0 )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==Comma) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // InternalOpenCypherParser.g:9068:3: rule__Set__Group_2__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__Set__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__2__Impl"


    // $ANTLR start "rule__Set__Group_2__0"
    // InternalOpenCypherParser.g:9077:1: rule__Set__Group_2__0 : rule__Set__Group_2__0__Impl rule__Set__Group_2__1 ;
    public final void rule__Set__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9081:1: ( rule__Set__Group_2__0__Impl rule__Set__Group_2__1 )
            // InternalOpenCypherParser.g:9082:2: rule__Set__Group_2__0__Impl rule__Set__Group_2__1
            {
            pushFollow(FOLLOW_33);
            rule__Set__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Set__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group_2__0"


    // $ANTLR start "rule__Set__Group_2__0__Impl"
    // InternalOpenCypherParser.g:9089:1: rule__Set__Group_2__0__Impl : ( Comma ) ;
    public final void rule__Set__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9093:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:9094:1: ( Comma )
            {
            // InternalOpenCypherParser.g:9094:1: ( Comma )
            // InternalOpenCypherParser.g:9095:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getCommaKeyword_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getCommaKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group_2__0__Impl"


    // $ANTLR start "rule__Set__Group_2__1"
    // InternalOpenCypherParser.g:9104:1: rule__Set__Group_2__1 : rule__Set__Group_2__1__Impl ;
    public final void rule__Set__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9108:1: ( rule__Set__Group_2__1__Impl )
            // InternalOpenCypherParser.g:9109:2: rule__Set__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Set__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group_2__1"


    // $ANTLR start "rule__Set__Group_2__1__Impl"
    // InternalOpenCypherParser.g:9115:1: rule__Set__Group_2__1__Impl : ( ( rule__Set__SetItemsAssignment_2_1 ) ) ;
    public final void rule__Set__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9119:1: ( ( ( rule__Set__SetItemsAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:9120:1: ( ( rule__Set__SetItemsAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:9120:1: ( ( rule__Set__SetItemsAssignment_2_1 ) )
            // InternalOpenCypherParser.g:9121:2: ( rule__Set__SetItemsAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getSetItemsAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:9122:2: ( rule__Set__SetItemsAssignment_2_1 )
            // InternalOpenCypherParser.g:9122:3: rule__Set__SetItemsAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__Set__SetItemsAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getSetItemsAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group_2__1__Impl"


    // $ANTLR start "rule__SetItem__Group_0__0"
    // InternalOpenCypherParser.g:9131:1: rule__SetItem__Group_0__0 : rule__SetItem__Group_0__0__Impl rule__SetItem__Group_0__1 ;
    public final void rule__SetItem__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9135:1: ( rule__SetItem__Group_0__0__Impl rule__SetItem__Group_0__1 )
            // InternalOpenCypherParser.g:9136:2: rule__SetItem__Group_0__0__Impl rule__SetItem__Group_0__1
            {
            pushFollow(FOLLOW_9);
            rule__SetItem__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__0"


    // $ANTLR start "rule__SetItem__Group_0__0__Impl"
    // InternalOpenCypherParser.g:9143:1: rule__SetItem__Group_0__0__Impl : ( ( rule__SetItem__PropertyExpressionAssignment_0_0 ) ) ;
    public final void rule__SetItem__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9147:1: ( ( ( rule__SetItem__PropertyExpressionAssignment_0_0 ) ) )
            // InternalOpenCypherParser.g:9148:1: ( ( rule__SetItem__PropertyExpressionAssignment_0_0 ) )
            {
            // InternalOpenCypherParser.g:9148:1: ( ( rule__SetItem__PropertyExpressionAssignment_0_0 ) )
            // InternalOpenCypherParser.g:9149:2: ( rule__SetItem__PropertyExpressionAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getPropertyExpressionAssignment_0_0()); 
            }
            // InternalOpenCypherParser.g:9150:2: ( rule__SetItem__PropertyExpressionAssignment_0_0 )
            // InternalOpenCypherParser.g:9150:3: rule__SetItem__PropertyExpressionAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__PropertyExpressionAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getPropertyExpressionAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__0__Impl"


    // $ANTLR start "rule__SetItem__Group_0__1"
    // InternalOpenCypherParser.g:9158:1: rule__SetItem__Group_0__1 : rule__SetItem__Group_0__1__Impl rule__SetItem__Group_0__2 ;
    public final void rule__SetItem__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9162:1: ( rule__SetItem__Group_0__1__Impl rule__SetItem__Group_0__2 )
            // InternalOpenCypherParser.g:9163:2: rule__SetItem__Group_0__1__Impl rule__SetItem__Group_0__2
            {
            pushFollow(FOLLOW_43);
            rule__SetItem__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__1"


    // $ANTLR start "rule__SetItem__Group_0__1__Impl"
    // InternalOpenCypherParser.g:9170:1: rule__SetItem__Group_0__1__Impl : ( EqualsSign ) ;
    public final void rule__SetItem__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9174:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:9175:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:9175:1: ( EqualsSign )
            // InternalOpenCypherParser.g:9176:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getEqualsSignKeyword_0_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getEqualsSignKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__1__Impl"


    // $ANTLR start "rule__SetItem__Group_0__2"
    // InternalOpenCypherParser.g:9185:1: rule__SetItem__Group_0__2 : rule__SetItem__Group_0__2__Impl ;
    public final void rule__SetItem__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9189:1: ( rule__SetItem__Group_0__2__Impl )
            // InternalOpenCypherParser.g:9190:2: rule__SetItem__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__2"


    // $ANTLR start "rule__SetItem__Group_0__2__Impl"
    // InternalOpenCypherParser.g:9196:1: rule__SetItem__Group_0__2__Impl : ( ( rule__SetItem__ExpressionAssignment_0_2 ) ) ;
    public final void rule__SetItem__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9200:1: ( ( ( rule__SetItem__ExpressionAssignment_0_2 ) ) )
            // InternalOpenCypherParser.g:9201:1: ( ( rule__SetItem__ExpressionAssignment_0_2 ) )
            {
            // InternalOpenCypherParser.g:9201:1: ( ( rule__SetItem__ExpressionAssignment_0_2 ) )
            // InternalOpenCypherParser.g:9202:2: ( rule__SetItem__ExpressionAssignment_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionAssignment_0_2()); 
            }
            // InternalOpenCypherParser.g:9203:2: ( rule__SetItem__ExpressionAssignment_0_2 )
            // InternalOpenCypherParser.g:9203:3: rule__SetItem__ExpressionAssignment_0_2
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__ExpressionAssignment_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionAssignment_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__2__Impl"


    // $ANTLR start "rule__SetItem__Group_1__0"
    // InternalOpenCypherParser.g:9212:1: rule__SetItem__Group_1__0 : rule__SetItem__Group_1__0__Impl rule__SetItem__Group_1__1 ;
    public final void rule__SetItem__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9216:1: ( rule__SetItem__Group_1__0__Impl rule__SetItem__Group_1__1 )
            // InternalOpenCypherParser.g:9217:2: rule__SetItem__Group_1__0__Impl rule__SetItem__Group_1__1
            {
            pushFollow(FOLLOW_9);
            rule__SetItem__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__0"


    // $ANTLR start "rule__SetItem__Group_1__0__Impl"
    // InternalOpenCypherParser.g:9224:1: rule__SetItem__Group_1__0__Impl : ( ( rule__SetItem__VariableAssignment_1_0 ) ) ;
    public final void rule__SetItem__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9228:1: ( ( ( rule__SetItem__VariableAssignment_1_0 ) ) )
            // InternalOpenCypherParser.g:9229:1: ( ( rule__SetItem__VariableAssignment_1_0 ) )
            {
            // InternalOpenCypherParser.g:9229:1: ( ( rule__SetItem__VariableAssignment_1_0 ) )
            // InternalOpenCypherParser.g:9230:2: ( rule__SetItem__VariableAssignment_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableAssignment_1_0()); 
            }
            // InternalOpenCypherParser.g:9231:2: ( rule__SetItem__VariableAssignment_1_0 )
            // InternalOpenCypherParser.g:9231:3: rule__SetItem__VariableAssignment_1_0
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__VariableAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__0__Impl"


    // $ANTLR start "rule__SetItem__Group_1__1"
    // InternalOpenCypherParser.g:9239:1: rule__SetItem__Group_1__1 : rule__SetItem__Group_1__1__Impl rule__SetItem__Group_1__2 ;
    public final void rule__SetItem__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9243:1: ( rule__SetItem__Group_1__1__Impl rule__SetItem__Group_1__2 )
            // InternalOpenCypherParser.g:9244:2: rule__SetItem__Group_1__1__Impl rule__SetItem__Group_1__2
            {
            pushFollow(FOLLOW_43);
            rule__SetItem__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__1"


    // $ANTLR start "rule__SetItem__Group_1__1__Impl"
    // InternalOpenCypherParser.g:9251:1: rule__SetItem__Group_1__1__Impl : ( EqualsSign ) ;
    public final void rule__SetItem__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9255:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:9256:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:9256:1: ( EqualsSign )
            // InternalOpenCypherParser.g:9257:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getEqualsSignKeyword_1_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getEqualsSignKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__1__Impl"


    // $ANTLR start "rule__SetItem__Group_1__2"
    // InternalOpenCypherParser.g:9266:1: rule__SetItem__Group_1__2 : rule__SetItem__Group_1__2__Impl ;
    public final void rule__SetItem__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9270:1: ( rule__SetItem__Group_1__2__Impl )
            // InternalOpenCypherParser.g:9271:2: rule__SetItem__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__2"


    // $ANTLR start "rule__SetItem__Group_1__2__Impl"
    // InternalOpenCypherParser.g:9277:1: rule__SetItem__Group_1__2__Impl : ( ( rule__SetItem__ExpressionAssignment_1_2 ) ) ;
    public final void rule__SetItem__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9281:1: ( ( ( rule__SetItem__ExpressionAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:9282:1: ( ( rule__SetItem__ExpressionAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:9282:1: ( ( rule__SetItem__ExpressionAssignment_1_2 ) )
            // InternalOpenCypherParser.g:9283:2: ( rule__SetItem__ExpressionAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:9284:2: ( rule__SetItem__ExpressionAssignment_1_2 )
            // InternalOpenCypherParser.g:9284:3: rule__SetItem__ExpressionAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__ExpressionAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__2__Impl"


    // $ANTLR start "rule__SetItem__Group_2__0"
    // InternalOpenCypherParser.g:9293:1: rule__SetItem__Group_2__0 : rule__SetItem__Group_2__0__Impl rule__SetItem__Group_2__1 ;
    public final void rule__SetItem__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9297:1: ( rule__SetItem__Group_2__0__Impl rule__SetItem__Group_2__1 )
            // InternalOpenCypherParser.g:9298:2: rule__SetItem__Group_2__0__Impl rule__SetItem__Group_2__1
            {
            pushFollow(FOLLOW_57);
            rule__SetItem__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__0"


    // $ANTLR start "rule__SetItem__Group_2__0__Impl"
    // InternalOpenCypherParser.g:9305:1: rule__SetItem__Group_2__0__Impl : ( ( rule__SetItem__VariableAssignment_2_0 ) ) ;
    public final void rule__SetItem__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9309:1: ( ( ( rule__SetItem__VariableAssignment_2_0 ) ) )
            // InternalOpenCypherParser.g:9310:1: ( ( rule__SetItem__VariableAssignment_2_0 ) )
            {
            // InternalOpenCypherParser.g:9310:1: ( ( rule__SetItem__VariableAssignment_2_0 ) )
            // InternalOpenCypherParser.g:9311:2: ( rule__SetItem__VariableAssignment_2_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableAssignment_2_0()); 
            }
            // InternalOpenCypherParser.g:9312:2: ( rule__SetItem__VariableAssignment_2_0 )
            // InternalOpenCypherParser.g:9312:3: rule__SetItem__VariableAssignment_2_0
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__VariableAssignment_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__0__Impl"


    // $ANTLR start "rule__SetItem__Group_2__1"
    // InternalOpenCypherParser.g:9320:1: rule__SetItem__Group_2__1 : rule__SetItem__Group_2__1__Impl rule__SetItem__Group_2__2 ;
    public final void rule__SetItem__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9324:1: ( rule__SetItem__Group_2__1__Impl rule__SetItem__Group_2__2 )
            // InternalOpenCypherParser.g:9325:2: rule__SetItem__Group_2__1__Impl rule__SetItem__Group_2__2
            {
            pushFollow(FOLLOW_43);
            rule__SetItem__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__1"


    // $ANTLR start "rule__SetItem__Group_2__1__Impl"
    // InternalOpenCypherParser.g:9332:1: rule__SetItem__Group_2__1__Impl : ( PlusSignEqualsSign ) ;
    public final void rule__SetItem__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9336:1: ( ( PlusSignEqualsSign ) )
            // InternalOpenCypherParser.g:9337:1: ( PlusSignEqualsSign )
            {
            // InternalOpenCypherParser.g:9337:1: ( PlusSignEqualsSign )
            // InternalOpenCypherParser.g:9338:2: PlusSignEqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getPlusSignEqualsSignKeyword_2_1()); 
            }
            match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getPlusSignEqualsSignKeyword_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__1__Impl"


    // $ANTLR start "rule__SetItem__Group_2__2"
    // InternalOpenCypherParser.g:9347:1: rule__SetItem__Group_2__2 : rule__SetItem__Group_2__2__Impl ;
    public final void rule__SetItem__Group_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9351:1: ( rule__SetItem__Group_2__2__Impl )
            // InternalOpenCypherParser.g:9352:2: rule__SetItem__Group_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__2"


    // $ANTLR start "rule__SetItem__Group_2__2__Impl"
    // InternalOpenCypherParser.g:9358:1: rule__SetItem__Group_2__2__Impl : ( ( rule__SetItem__ExpressionAssignment_2_2 ) ) ;
    public final void rule__SetItem__Group_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9362:1: ( ( ( rule__SetItem__ExpressionAssignment_2_2 ) ) )
            // InternalOpenCypherParser.g:9363:1: ( ( rule__SetItem__ExpressionAssignment_2_2 ) )
            {
            // InternalOpenCypherParser.g:9363:1: ( ( rule__SetItem__ExpressionAssignment_2_2 ) )
            // InternalOpenCypherParser.g:9364:2: ( rule__SetItem__ExpressionAssignment_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionAssignment_2_2()); 
            }
            // InternalOpenCypherParser.g:9365:2: ( rule__SetItem__ExpressionAssignment_2_2 )
            // InternalOpenCypherParser.g:9365:3: rule__SetItem__ExpressionAssignment_2_2
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__ExpressionAssignment_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionAssignment_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__2__Impl"


    // $ANTLR start "rule__SetItem__Group_3__0"
    // InternalOpenCypherParser.g:9374:1: rule__SetItem__Group_3__0 : rule__SetItem__Group_3__0__Impl rule__SetItem__Group_3__1 ;
    public final void rule__SetItem__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9378:1: ( rule__SetItem__Group_3__0__Impl rule__SetItem__Group_3__1 )
            // InternalOpenCypherParser.g:9379:2: rule__SetItem__Group_3__0__Impl rule__SetItem__Group_3__1
            {
            pushFollow(FOLLOW_29);
            rule__SetItem__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_3__0"


    // $ANTLR start "rule__SetItem__Group_3__0__Impl"
    // InternalOpenCypherParser.g:9386:1: rule__SetItem__Group_3__0__Impl : ( ( rule__SetItem__VariableAssignment_3_0 ) ) ;
    public final void rule__SetItem__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9390:1: ( ( ( rule__SetItem__VariableAssignment_3_0 ) ) )
            // InternalOpenCypherParser.g:9391:1: ( ( rule__SetItem__VariableAssignment_3_0 ) )
            {
            // InternalOpenCypherParser.g:9391:1: ( ( rule__SetItem__VariableAssignment_3_0 ) )
            // InternalOpenCypherParser.g:9392:2: ( rule__SetItem__VariableAssignment_3_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableAssignment_3_0()); 
            }
            // InternalOpenCypherParser.g:9393:2: ( rule__SetItem__VariableAssignment_3_0 )
            // InternalOpenCypherParser.g:9393:3: rule__SetItem__VariableAssignment_3_0
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__VariableAssignment_3_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableAssignment_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_3__0__Impl"


    // $ANTLR start "rule__SetItem__Group_3__1"
    // InternalOpenCypherParser.g:9401:1: rule__SetItem__Group_3__1 : rule__SetItem__Group_3__1__Impl ;
    public final void rule__SetItem__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9405:1: ( rule__SetItem__Group_3__1__Impl )
            // InternalOpenCypherParser.g:9406:2: rule__SetItem__Group_3__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_3__1"


    // $ANTLR start "rule__SetItem__Group_3__1__Impl"
    // InternalOpenCypherParser.g:9412:1: rule__SetItem__Group_3__1__Impl : ( ruleNodeLabels ) ;
    public final void rule__SetItem__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9416:1: ( ( ruleNodeLabels ) )
            // InternalOpenCypherParser.g:9417:1: ( ruleNodeLabels )
            {
            // InternalOpenCypherParser.g:9417:1: ( ruleNodeLabels )
            // InternalOpenCypherParser.g:9418:2: ruleNodeLabels
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getNodeLabelsParserRuleCall_3_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabels();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getNodeLabelsParserRuleCall_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_3__1__Impl"


    // $ANTLR start "rule__Delete__Group__0"
    // InternalOpenCypherParser.g:9428:1: rule__Delete__Group__0 : rule__Delete__Group__0__Impl rule__Delete__Group__1 ;
    public final void rule__Delete__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9432:1: ( rule__Delete__Group__0__Impl rule__Delete__Group__1 )
            // InternalOpenCypherParser.g:9433:2: rule__Delete__Group__0__Impl rule__Delete__Group__1
            {
            pushFollow(FOLLOW_58);
            rule__Delete__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Delete__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__0"


    // $ANTLR start "rule__Delete__Group__0__Impl"
    // InternalOpenCypherParser.g:9440:1: rule__Delete__Group__0__Impl : ( ( rule__Delete__DetachAssignment_0 )? ) ;
    public final void rule__Delete__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9444:1: ( ( ( rule__Delete__DetachAssignment_0 )? ) )
            // InternalOpenCypherParser.g:9445:1: ( ( rule__Delete__DetachAssignment_0 )? )
            {
            // InternalOpenCypherParser.g:9445:1: ( ( rule__Delete__DetachAssignment_0 )? )
            // InternalOpenCypherParser.g:9446:2: ( rule__Delete__DetachAssignment_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getDetachAssignment_0()); 
            }
            // InternalOpenCypherParser.g:9447:2: ( rule__Delete__DetachAssignment_0 )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==DETACH) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // InternalOpenCypherParser.g:9447:3: rule__Delete__DetachAssignment_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Delete__DetachAssignment_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getDetachAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__0__Impl"


    // $ANTLR start "rule__Delete__Group__1"
    // InternalOpenCypherParser.g:9455:1: rule__Delete__Group__1 : rule__Delete__Group__1__Impl rule__Delete__Group__2 ;
    public final void rule__Delete__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9459:1: ( rule__Delete__Group__1__Impl rule__Delete__Group__2 )
            // InternalOpenCypherParser.g:9460:2: rule__Delete__Group__1__Impl rule__Delete__Group__2
            {
            pushFollow(FOLLOW_43);
            rule__Delete__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Delete__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__1"


    // $ANTLR start "rule__Delete__Group__1__Impl"
    // InternalOpenCypherParser.g:9467:1: rule__Delete__Group__1__Impl : ( DELETE ) ;
    public final void rule__Delete__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9471:1: ( ( DELETE ) )
            // InternalOpenCypherParser.g:9472:1: ( DELETE )
            {
            // InternalOpenCypherParser.g:9472:1: ( DELETE )
            // InternalOpenCypherParser.g:9473:2: DELETE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getDELETEKeyword_1()); 
            }
            match(input,DELETE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getDELETEKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__1__Impl"


    // $ANTLR start "rule__Delete__Group__2"
    // InternalOpenCypherParser.g:9482:1: rule__Delete__Group__2 : rule__Delete__Group__2__Impl rule__Delete__Group__3 ;
    public final void rule__Delete__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9486:1: ( rule__Delete__Group__2__Impl rule__Delete__Group__3 )
            // InternalOpenCypherParser.g:9487:2: rule__Delete__Group__2__Impl rule__Delete__Group__3
            {
            pushFollow(FOLLOW_55);
            rule__Delete__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Delete__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__2"


    // $ANTLR start "rule__Delete__Group__2__Impl"
    // InternalOpenCypherParser.g:9494:1: rule__Delete__Group__2__Impl : ( ( rule__Delete__ExpressionsAssignment_2 ) ) ;
    public final void rule__Delete__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9498:1: ( ( ( rule__Delete__ExpressionsAssignment_2 ) ) )
            // InternalOpenCypherParser.g:9499:1: ( ( rule__Delete__ExpressionsAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:9499:1: ( ( rule__Delete__ExpressionsAssignment_2 ) )
            // InternalOpenCypherParser.g:9500:2: ( rule__Delete__ExpressionsAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getExpressionsAssignment_2()); 
            }
            // InternalOpenCypherParser.g:9501:2: ( rule__Delete__ExpressionsAssignment_2 )
            // InternalOpenCypherParser.g:9501:3: rule__Delete__ExpressionsAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Delete__ExpressionsAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getExpressionsAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__2__Impl"


    // $ANTLR start "rule__Delete__Group__3"
    // InternalOpenCypherParser.g:9509:1: rule__Delete__Group__3 : rule__Delete__Group__3__Impl ;
    public final void rule__Delete__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9513:1: ( rule__Delete__Group__3__Impl )
            // InternalOpenCypherParser.g:9514:2: rule__Delete__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Delete__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__3"


    // $ANTLR start "rule__Delete__Group__3__Impl"
    // InternalOpenCypherParser.g:9520:1: rule__Delete__Group__3__Impl : ( ( rule__Delete__Group_3__0 )* ) ;
    public final void rule__Delete__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9524:1: ( ( ( rule__Delete__Group_3__0 )* ) )
            // InternalOpenCypherParser.g:9525:1: ( ( rule__Delete__Group_3__0 )* )
            {
            // InternalOpenCypherParser.g:9525:1: ( ( rule__Delete__Group_3__0 )* )
            // InternalOpenCypherParser.g:9526:2: ( rule__Delete__Group_3__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getGroup_3()); 
            }
            // InternalOpenCypherParser.g:9527:2: ( rule__Delete__Group_3__0 )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==Comma) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // InternalOpenCypherParser.g:9527:3: rule__Delete__Group_3__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__Delete__Group_3__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__3__Impl"


    // $ANTLR start "rule__Delete__Group_3__0"
    // InternalOpenCypherParser.g:9536:1: rule__Delete__Group_3__0 : rule__Delete__Group_3__0__Impl rule__Delete__Group_3__1 ;
    public final void rule__Delete__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9540:1: ( rule__Delete__Group_3__0__Impl rule__Delete__Group_3__1 )
            // InternalOpenCypherParser.g:9541:2: rule__Delete__Group_3__0__Impl rule__Delete__Group_3__1
            {
            pushFollow(FOLLOW_43);
            rule__Delete__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Delete__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group_3__0"


    // $ANTLR start "rule__Delete__Group_3__0__Impl"
    // InternalOpenCypherParser.g:9548:1: rule__Delete__Group_3__0__Impl : ( Comma ) ;
    public final void rule__Delete__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9552:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:9553:1: ( Comma )
            {
            // InternalOpenCypherParser.g:9553:1: ( Comma )
            // InternalOpenCypherParser.g:9554:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getCommaKeyword_3_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getCommaKeyword_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group_3__0__Impl"


    // $ANTLR start "rule__Delete__Group_3__1"
    // InternalOpenCypherParser.g:9563:1: rule__Delete__Group_3__1 : rule__Delete__Group_3__1__Impl ;
    public final void rule__Delete__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9567:1: ( rule__Delete__Group_3__1__Impl )
            // InternalOpenCypherParser.g:9568:2: rule__Delete__Group_3__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Delete__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group_3__1"


    // $ANTLR start "rule__Delete__Group_3__1__Impl"
    // InternalOpenCypherParser.g:9574:1: rule__Delete__Group_3__1__Impl : ( ( rule__Delete__ExpressionsAssignment_3_1 ) ) ;
    public final void rule__Delete__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9578:1: ( ( ( rule__Delete__ExpressionsAssignment_3_1 ) ) )
            // InternalOpenCypherParser.g:9579:1: ( ( rule__Delete__ExpressionsAssignment_3_1 ) )
            {
            // InternalOpenCypherParser.g:9579:1: ( ( rule__Delete__ExpressionsAssignment_3_1 ) )
            // InternalOpenCypherParser.g:9580:2: ( rule__Delete__ExpressionsAssignment_3_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getExpressionsAssignment_3_1()); 
            }
            // InternalOpenCypherParser.g:9581:2: ( rule__Delete__ExpressionsAssignment_3_1 )
            // InternalOpenCypherParser.g:9581:3: rule__Delete__ExpressionsAssignment_3_1
            {
            pushFollow(FOLLOW_2);
            rule__Delete__ExpressionsAssignment_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getExpressionsAssignment_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group_3__1__Impl"


    // $ANTLR start "rule__Remove__Group__0"
    // InternalOpenCypherParser.g:9590:1: rule__Remove__Group__0 : rule__Remove__Group__0__Impl rule__Remove__Group__1 ;
    public final void rule__Remove__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9594:1: ( rule__Remove__Group__0__Impl rule__Remove__Group__1 )
            // InternalOpenCypherParser.g:9595:2: rule__Remove__Group__0__Impl rule__Remove__Group__1
            {
            pushFollow(FOLLOW_33);
            rule__Remove__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Remove__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__0"


    // $ANTLR start "rule__Remove__Group__0__Impl"
    // InternalOpenCypherParser.g:9602:1: rule__Remove__Group__0__Impl : ( REMOVE ) ;
    public final void rule__Remove__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9606:1: ( ( REMOVE ) )
            // InternalOpenCypherParser.g:9607:1: ( REMOVE )
            {
            // InternalOpenCypherParser.g:9607:1: ( REMOVE )
            // InternalOpenCypherParser.g:9608:2: REMOVE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getREMOVEKeyword_0()); 
            }
            match(input,REMOVE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getREMOVEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__0__Impl"


    // $ANTLR start "rule__Remove__Group__1"
    // InternalOpenCypherParser.g:9617:1: rule__Remove__Group__1 : rule__Remove__Group__1__Impl rule__Remove__Group__2 ;
    public final void rule__Remove__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9621:1: ( rule__Remove__Group__1__Impl rule__Remove__Group__2 )
            // InternalOpenCypherParser.g:9622:2: rule__Remove__Group__1__Impl rule__Remove__Group__2
            {
            pushFollow(FOLLOW_55);
            rule__Remove__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Remove__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__1"


    // $ANTLR start "rule__Remove__Group__1__Impl"
    // InternalOpenCypherParser.g:9629:1: rule__Remove__Group__1__Impl : ( ( rule__Remove__RemoveItemsAssignment_1 ) ) ;
    public final void rule__Remove__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9633:1: ( ( ( rule__Remove__RemoveItemsAssignment_1 ) ) )
            // InternalOpenCypherParser.g:9634:1: ( ( rule__Remove__RemoveItemsAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:9634:1: ( ( rule__Remove__RemoveItemsAssignment_1 ) )
            // InternalOpenCypherParser.g:9635:2: ( rule__Remove__RemoveItemsAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:9636:2: ( rule__Remove__RemoveItemsAssignment_1 )
            // InternalOpenCypherParser.g:9636:3: rule__Remove__RemoveItemsAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Remove__RemoveItemsAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__1__Impl"


    // $ANTLR start "rule__Remove__Group__2"
    // InternalOpenCypherParser.g:9644:1: rule__Remove__Group__2 : rule__Remove__Group__2__Impl ;
    public final void rule__Remove__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9648:1: ( rule__Remove__Group__2__Impl )
            // InternalOpenCypherParser.g:9649:2: rule__Remove__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Remove__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__2"


    // $ANTLR start "rule__Remove__Group__2__Impl"
    // InternalOpenCypherParser.g:9655:1: rule__Remove__Group__2__Impl : ( ( rule__Remove__Group_2__0 )* ) ;
    public final void rule__Remove__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9659:1: ( ( ( rule__Remove__Group_2__0 )* ) )
            // InternalOpenCypherParser.g:9660:1: ( ( rule__Remove__Group_2__0 )* )
            {
            // InternalOpenCypherParser.g:9660:1: ( ( rule__Remove__Group_2__0 )* )
            // InternalOpenCypherParser.g:9661:2: ( rule__Remove__Group_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:9662:2: ( rule__Remove__Group_2__0 )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==Comma) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // InternalOpenCypherParser.g:9662:3: rule__Remove__Group_2__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__Remove__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__2__Impl"


    // $ANTLR start "rule__Remove__Group_2__0"
    // InternalOpenCypherParser.g:9671:1: rule__Remove__Group_2__0 : rule__Remove__Group_2__0__Impl rule__Remove__Group_2__1 ;
    public final void rule__Remove__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9675:1: ( rule__Remove__Group_2__0__Impl rule__Remove__Group_2__1 )
            // InternalOpenCypherParser.g:9676:2: rule__Remove__Group_2__0__Impl rule__Remove__Group_2__1
            {
            pushFollow(FOLLOW_33);
            rule__Remove__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Remove__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group_2__0"


    // $ANTLR start "rule__Remove__Group_2__0__Impl"
    // InternalOpenCypherParser.g:9683:1: rule__Remove__Group_2__0__Impl : ( Comma ) ;
    public final void rule__Remove__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9687:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:9688:1: ( Comma )
            {
            // InternalOpenCypherParser.g:9688:1: ( Comma )
            // InternalOpenCypherParser.g:9689:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getCommaKeyword_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getCommaKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group_2__0__Impl"


    // $ANTLR start "rule__Remove__Group_2__1"
    // InternalOpenCypherParser.g:9698:1: rule__Remove__Group_2__1 : rule__Remove__Group_2__1__Impl ;
    public final void rule__Remove__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9702:1: ( rule__Remove__Group_2__1__Impl )
            // InternalOpenCypherParser.g:9703:2: rule__Remove__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Remove__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group_2__1"


    // $ANTLR start "rule__Remove__Group_2__1__Impl"
    // InternalOpenCypherParser.g:9709:1: rule__Remove__Group_2__1__Impl : ( ( rule__Remove__RemoveItemsAssignment_2_1 ) ) ;
    public final void rule__Remove__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9713:1: ( ( ( rule__Remove__RemoveItemsAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:9714:1: ( ( rule__Remove__RemoveItemsAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:9714:1: ( ( rule__Remove__RemoveItemsAssignment_2_1 ) )
            // InternalOpenCypherParser.g:9715:2: ( rule__Remove__RemoveItemsAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:9716:2: ( rule__Remove__RemoveItemsAssignment_2_1 )
            // InternalOpenCypherParser.g:9716:3: rule__Remove__RemoveItemsAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__Remove__RemoveItemsAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group_2__1__Impl"


    // $ANTLR start "rule__RemoveItem__Group_0__0"
    // InternalOpenCypherParser.g:9725:1: rule__RemoveItem__Group_0__0 : rule__RemoveItem__Group_0__0__Impl rule__RemoveItem__Group_0__1 ;
    public final void rule__RemoveItem__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9729:1: ( rule__RemoveItem__Group_0__0__Impl rule__RemoveItem__Group_0__1 )
            // InternalOpenCypherParser.g:9730:2: rule__RemoveItem__Group_0__0__Impl rule__RemoveItem__Group_0__1
            {
            pushFollow(FOLLOW_10);
            rule__RemoveItem__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__0"


    // $ANTLR start "rule__RemoveItem__Group_0__0__Impl"
    // InternalOpenCypherParser.g:9737:1: rule__RemoveItem__Group_0__0__Impl : ( () ) ;
    public final void rule__RemoveItem__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9741:1: ( ( () ) )
            // InternalOpenCypherParser.g:9742:1: ( () )
            {
            // InternalOpenCypherParser.g:9742:1: ( () )
            // InternalOpenCypherParser.g:9743:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getRemoveItemLabelAction_0_0()); 
            }
            // InternalOpenCypherParser.g:9744:2: ()
            // InternalOpenCypherParser.g:9744:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getRemoveItemLabelAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__0__Impl"


    // $ANTLR start "rule__RemoveItem__Group_0__1"
    // InternalOpenCypherParser.g:9752:1: rule__RemoveItem__Group_0__1 : rule__RemoveItem__Group_0__1__Impl rule__RemoveItem__Group_0__2 ;
    public final void rule__RemoveItem__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9756:1: ( rule__RemoveItem__Group_0__1__Impl rule__RemoveItem__Group_0__2 )
            // InternalOpenCypherParser.g:9757:2: rule__RemoveItem__Group_0__1__Impl rule__RemoveItem__Group_0__2
            {
            pushFollow(FOLLOW_29);
            rule__RemoveItem__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__1"


    // $ANTLR start "rule__RemoveItem__Group_0__1__Impl"
    // InternalOpenCypherParser.g:9764:1: rule__RemoveItem__Group_0__1__Impl : ( ( rule__RemoveItem__VariableAssignment_0_1 ) ) ;
    public final void rule__RemoveItem__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9768:1: ( ( ( rule__RemoveItem__VariableAssignment_0_1 ) ) )
            // InternalOpenCypherParser.g:9769:1: ( ( rule__RemoveItem__VariableAssignment_0_1 ) )
            {
            // InternalOpenCypherParser.g:9769:1: ( ( rule__RemoveItem__VariableAssignment_0_1 ) )
            // InternalOpenCypherParser.g:9770:2: ( rule__RemoveItem__VariableAssignment_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getVariableAssignment_0_1()); 
            }
            // InternalOpenCypherParser.g:9771:2: ( rule__RemoveItem__VariableAssignment_0_1 )
            // InternalOpenCypherParser.g:9771:3: rule__RemoveItem__VariableAssignment_0_1
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__VariableAssignment_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getVariableAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__1__Impl"


    // $ANTLR start "rule__RemoveItem__Group_0__2"
    // InternalOpenCypherParser.g:9779:1: rule__RemoveItem__Group_0__2 : rule__RemoveItem__Group_0__2__Impl ;
    public final void rule__RemoveItem__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9783:1: ( rule__RemoveItem__Group_0__2__Impl )
            // InternalOpenCypherParser.g:9784:2: rule__RemoveItem__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__2"


    // $ANTLR start "rule__RemoveItem__Group_0__2__Impl"
    // InternalOpenCypherParser.g:9790:1: rule__RemoveItem__Group_0__2__Impl : ( ruleNodeLabels ) ;
    public final void rule__RemoveItem__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9794:1: ( ( ruleNodeLabels ) )
            // InternalOpenCypherParser.g:9795:1: ( ruleNodeLabels )
            {
            // InternalOpenCypherParser.g:9795:1: ( ruleNodeLabels )
            // InternalOpenCypherParser.g:9796:2: ruleNodeLabels
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getNodeLabelsParserRuleCall_0_2()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabels();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getNodeLabelsParserRuleCall_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__2__Impl"


    // $ANTLR start "rule__RemoveItem__Group_1__0"
    // InternalOpenCypherParser.g:9806:1: rule__RemoveItem__Group_1__0 : rule__RemoveItem__Group_1__0__Impl rule__RemoveItem__Group_1__1 ;
    public final void rule__RemoveItem__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9810:1: ( rule__RemoveItem__Group_1__0__Impl rule__RemoveItem__Group_1__1 )
            // InternalOpenCypherParser.g:9811:2: rule__RemoveItem__Group_1__0__Impl rule__RemoveItem__Group_1__1
            {
            pushFollow(FOLLOW_33);
            rule__RemoveItem__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_1__0"


    // $ANTLR start "rule__RemoveItem__Group_1__0__Impl"
    // InternalOpenCypherParser.g:9818:1: rule__RemoveItem__Group_1__0__Impl : ( () ) ;
    public final void rule__RemoveItem__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9822:1: ( ( () ) )
            // InternalOpenCypherParser.g:9823:1: ( () )
            {
            // InternalOpenCypherParser.g:9823:1: ( () )
            // InternalOpenCypherParser.g:9824:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getRemoveItemPropertyAction_1_0()); 
            }
            // InternalOpenCypherParser.g:9825:2: ()
            // InternalOpenCypherParser.g:9825:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getRemoveItemPropertyAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_1__0__Impl"


    // $ANTLR start "rule__RemoveItem__Group_1__1"
    // InternalOpenCypherParser.g:9833:1: rule__RemoveItem__Group_1__1 : rule__RemoveItem__Group_1__1__Impl ;
    public final void rule__RemoveItem__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9837:1: ( rule__RemoveItem__Group_1__1__Impl )
            // InternalOpenCypherParser.g:9838:2: rule__RemoveItem__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_1__1"


    // $ANTLR start "rule__RemoveItem__Group_1__1__Impl"
    // InternalOpenCypherParser.g:9844:1: rule__RemoveItem__Group_1__1__Impl : ( ( rule__RemoveItem__PropertyExpressionAssignment_1_1 ) ) ;
    public final void rule__RemoveItem__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9848:1: ( ( ( rule__RemoveItem__PropertyExpressionAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:9849:1: ( ( rule__RemoveItem__PropertyExpressionAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:9849:1: ( ( rule__RemoveItem__PropertyExpressionAssignment_1_1 ) )
            // InternalOpenCypherParser.g:9850:2: ( rule__RemoveItem__PropertyExpressionAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getPropertyExpressionAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:9851:2: ( rule__RemoveItem__PropertyExpressionAssignment_1_1 )
            // InternalOpenCypherParser.g:9851:3: rule__RemoveItem__PropertyExpressionAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__PropertyExpressionAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getPropertyExpressionAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_1__1__Impl"


    // $ANTLR start "rule__Foreach__Group__0"
    // InternalOpenCypherParser.g:9860:1: rule__Foreach__Group__0 : rule__Foreach__Group__0__Impl rule__Foreach__Group__1 ;
    public final void rule__Foreach__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9864:1: ( rule__Foreach__Group__0__Impl rule__Foreach__Group__1 )
            // InternalOpenCypherParser.g:9865:2: rule__Foreach__Group__0__Impl rule__Foreach__Group__1
            {
            pushFollow(FOLLOW_30);
            rule__Foreach__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__0"


    // $ANTLR start "rule__Foreach__Group__0__Impl"
    // InternalOpenCypherParser.g:9872:1: rule__Foreach__Group__0__Impl : ( FOREACH ) ;
    public final void rule__Foreach__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9876:1: ( ( FOREACH ) )
            // InternalOpenCypherParser.g:9877:1: ( FOREACH )
            {
            // InternalOpenCypherParser.g:9877:1: ( FOREACH )
            // InternalOpenCypherParser.g:9878:2: FOREACH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getFOREACHKeyword_0()); 
            }
            match(input,FOREACH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getFOREACHKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__0__Impl"


    // $ANTLR start "rule__Foreach__Group__1"
    // InternalOpenCypherParser.g:9887:1: rule__Foreach__Group__1 : rule__Foreach__Group__1__Impl rule__Foreach__Group__2 ;
    public final void rule__Foreach__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9891:1: ( rule__Foreach__Group__1__Impl rule__Foreach__Group__2 )
            // InternalOpenCypherParser.g:9892:2: rule__Foreach__Group__1__Impl rule__Foreach__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__Foreach__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__1"


    // $ANTLR start "rule__Foreach__Group__1__Impl"
    // InternalOpenCypherParser.g:9899:1: rule__Foreach__Group__1__Impl : ( LeftParenthesis ) ;
    public final void rule__Foreach__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9903:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:9904:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:9904:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:9905:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__1__Impl"


    // $ANTLR start "rule__Foreach__Group__2"
    // InternalOpenCypherParser.g:9914:1: rule__Foreach__Group__2 : rule__Foreach__Group__2__Impl rule__Foreach__Group__3 ;
    public final void rule__Foreach__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9918:1: ( rule__Foreach__Group__2__Impl rule__Foreach__Group__3 )
            // InternalOpenCypherParser.g:9919:2: rule__Foreach__Group__2__Impl rule__Foreach__Group__3
            {
            pushFollow(FOLLOW_59);
            rule__Foreach__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__2"


    // $ANTLR start "rule__Foreach__Group__2__Impl"
    // InternalOpenCypherParser.g:9926:1: rule__Foreach__Group__2__Impl : ( ( rule__Foreach__VariableAssignment_2 ) ) ;
    public final void rule__Foreach__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9930:1: ( ( ( rule__Foreach__VariableAssignment_2 ) ) )
            // InternalOpenCypherParser.g:9931:1: ( ( rule__Foreach__VariableAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:9931:1: ( ( rule__Foreach__VariableAssignment_2 ) )
            // InternalOpenCypherParser.g:9932:2: ( rule__Foreach__VariableAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getVariableAssignment_2()); 
            }
            // InternalOpenCypherParser.g:9933:2: ( rule__Foreach__VariableAssignment_2 )
            // InternalOpenCypherParser.g:9933:3: rule__Foreach__VariableAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Foreach__VariableAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getVariableAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__2__Impl"


    // $ANTLR start "rule__Foreach__Group__3"
    // InternalOpenCypherParser.g:9941:1: rule__Foreach__Group__3 : rule__Foreach__Group__3__Impl rule__Foreach__Group__4 ;
    public final void rule__Foreach__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9945:1: ( rule__Foreach__Group__3__Impl rule__Foreach__Group__4 )
            // InternalOpenCypherParser.g:9946:2: rule__Foreach__Group__3__Impl rule__Foreach__Group__4
            {
            pushFollow(FOLLOW_43);
            rule__Foreach__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__3"


    // $ANTLR start "rule__Foreach__Group__3__Impl"
    // InternalOpenCypherParser.g:9953:1: rule__Foreach__Group__3__Impl : ( IN ) ;
    public final void rule__Foreach__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9957:1: ( ( IN ) )
            // InternalOpenCypherParser.g:9958:1: ( IN )
            {
            // InternalOpenCypherParser.g:9958:1: ( IN )
            // InternalOpenCypherParser.g:9959:2: IN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getINKeyword_3()); 
            }
            match(input,IN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getINKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__3__Impl"


    // $ANTLR start "rule__Foreach__Group__4"
    // InternalOpenCypherParser.g:9968:1: rule__Foreach__Group__4 : rule__Foreach__Group__4__Impl rule__Foreach__Group__5 ;
    public final void rule__Foreach__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9972:1: ( rule__Foreach__Group__4__Impl rule__Foreach__Group__5 )
            // InternalOpenCypherParser.g:9973:2: rule__Foreach__Group__4__Impl rule__Foreach__Group__5
            {
            pushFollow(FOLLOW_60);
            rule__Foreach__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__4"


    // $ANTLR start "rule__Foreach__Group__4__Impl"
    // InternalOpenCypherParser.g:9980:1: rule__Foreach__Group__4__Impl : ( ( rule__Foreach__ExpressionAssignment_4 ) ) ;
    public final void rule__Foreach__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9984:1: ( ( ( rule__Foreach__ExpressionAssignment_4 ) ) )
            // InternalOpenCypherParser.g:9985:1: ( ( rule__Foreach__ExpressionAssignment_4 ) )
            {
            // InternalOpenCypherParser.g:9985:1: ( ( rule__Foreach__ExpressionAssignment_4 ) )
            // InternalOpenCypherParser.g:9986:2: ( rule__Foreach__ExpressionAssignment_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getExpressionAssignment_4()); 
            }
            // InternalOpenCypherParser.g:9987:2: ( rule__Foreach__ExpressionAssignment_4 )
            // InternalOpenCypherParser.g:9987:3: rule__Foreach__ExpressionAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__Foreach__ExpressionAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getExpressionAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__4__Impl"


    // $ANTLR start "rule__Foreach__Group__5"
    // InternalOpenCypherParser.g:9995:1: rule__Foreach__Group__5 : rule__Foreach__Group__5__Impl rule__Foreach__Group__6 ;
    public final void rule__Foreach__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9999:1: ( rule__Foreach__Group__5__Impl rule__Foreach__Group__6 )
            // InternalOpenCypherParser.g:10000:2: rule__Foreach__Group__5__Impl rule__Foreach__Group__6
            {
            pushFollow(FOLLOW_61);
            rule__Foreach__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__5"


    // $ANTLR start "rule__Foreach__Group__5__Impl"
    // InternalOpenCypherParser.g:10007:1: rule__Foreach__Group__5__Impl : ( VerticalLine ) ;
    public final void rule__Foreach__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10011:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:10012:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:10012:1: ( VerticalLine )
            // InternalOpenCypherParser.g:10013:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getVerticalLineKeyword_5()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getVerticalLineKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__5__Impl"


    // $ANTLR start "rule__Foreach__Group__6"
    // InternalOpenCypherParser.g:10022:1: rule__Foreach__Group__6 : rule__Foreach__Group__6__Impl rule__Foreach__Group__7 ;
    public final void rule__Foreach__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10026:1: ( rule__Foreach__Group__6__Impl rule__Foreach__Group__7 )
            // InternalOpenCypherParser.g:10027:2: rule__Foreach__Group__6__Impl rule__Foreach__Group__7
            {
            pushFollow(FOLLOW_31);
            rule__Foreach__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__6"


    // $ANTLR start "rule__Foreach__Group__6__Impl"
    // InternalOpenCypherParser.g:10034:1: rule__Foreach__Group__6__Impl : ( ( ( rule__Foreach__UpdatingClausesAssignment_6 ) ) ( ( rule__Foreach__UpdatingClausesAssignment_6 )* ) ) ;
    public final void rule__Foreach__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10038:1: ( ( ( ( rule__Foreach__UpdatingClausesAssignment_6 ) ) ( ( rule__Foreach__UpdatingClausesAssignment_6 )* ) ) )
            // InternalOpenCypherParser.g:10039:1: ( ( ( rule__Foreach__UpdatingClausesAssignment_6 ) ) ( ( rule__Foreach__UpdatingClausesAssignment_6 )* ) )
            {
            // InternalOpenCypherParser.g:10039:1: ( ( ( rule__Foreach__UpdatingClausesAssignment_6 ) ) ( ( rule__Foreach__UpdatingClausesAssignment_6 )* ) )
            // InternalOpenCypherParser.g:10040:2: ( ( rule__Foreach__UpdatingClausesAssignment_6 ) ) ( ( rule__Foreach__UpdatingClausesAssignment_6 )* )
            {
            // InternalOpenCypherParser.g:10040:2: ( ( rule__Foreach__UpdatingClausesAssignment_6 ) )
            // InternalOpenCypherParser.g:10041:3: ( rule__Foreach__UpdatingClausesAssignment_6 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getUpdatingClausesAssignment_6()); 
            }
            // InternalOpenCypherParser.g:10042:3: ( rule__Foreach__UpdatingClausesAssignment_6 )
            // InternalOpenCypherParser.g:10042:4: rule__Foreach__UpdatingClausesAssignment_6
            {
            pushFollow(FOLLOW_25);
            rule__Foreach__UpdatingClausesAssignment_6();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getUpdatingClausesAssignment_6()); 
            }

            }

            // InternalOpenCypherParser.g:10045:2: ( ( rule__Foreach__UpdatingClausesAssignment_6 )* )
            // InternalOpenCypherParser.g:10046:3: ( rule__Foreach__UpdatingClausesAssignment_6 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getUpdatingClausesAssignment_6()); 
            }
            // InternalOpenCypherParser.g:10047:3: ( rule__Foreach__UpdatingClausesAssignment_6 )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==FOREACH||LA80_0==CREATE||(LA80_0>=DELETE && LA80_0<=DETACH)||LA80_0==REMOVE||LA80_0==MERGE||LA80_0==SET) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // InternalOpenCypherParser.g:10047:4: rule__Foreach__UpdatingClausesAssignment_6
            	    {
            	    pushFollow(FOLLOW_25);
            	    rule__Foreach__UpdatingClausesAssignment_6();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getUpdatingClausesAssignment_6()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__6__Impl"


    // $ANTLR start "rule__Foreach__Group__7"
    // InternalOpenCypherParser.g:10056:1: rule__Foreach__Group__7 : rule__Foreach__Group__7__Impl ;
    public final void rule__Foreach__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10060:1: ( rule__Foreach__Group__7__Impl )
            // InternalOpenCypherParser.g:10061:2: rule__Foreach__Group__7__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__7"


    // $ANTLR start "rule__Foreach__Group__7__Impl"
    // InternalOpenCypherParser.g:10067:1: rule__Foreach__Group__7__Impl : ( RightParenthesis ) ;
    public final void rule__Foreach__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10071:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:10072:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:10072:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:10073:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getRightParenthesisKeyword_7()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getRightParenthesisKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__7__Impl"


    // $ANTLR start "rule__InQueryCall__Group__0"
    // InternalOpenCypherParser.g:10083:1: rule__InQueryCall__Group__0 : rule__InQueryCall__Group__0__Impl rule__InQueryCall__Group__1 ;
    public final void rule__InQueryCall__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10087:1: ( rule__InQueryCall__Group__0__Impl rule__InQueryCall__Group__1 )
            // InternalOpenCypherParser.g:10088:2: rule__InQueryCall__Group__0__Impl rule__InQueryCall__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__InQueryCall__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__0"


    // $ANTLR start "rule__InQueryCall__Group__0__Impl"
    // InternalOpenCypherParser.g:10095:1: rule__InQueryCall__Group__0__Impl : ( CALL ) ;
    public final void rule__InQueryCall__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10099:1: ( ( CALL ) )
            // InternalOpenCypherParser.g:10100:1: ( CALL )
            {
            // InternalOpenCypherParser.g:10100:1: ( CALL )
            // InternalOpenCypherParser.g:10101:2: CALL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getCALLKeyword_0()); 
            }
            match(input,CALL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getCALLKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__0__Impl"


    // $ANTLR start "rule__InQueryCall__Group__1"
    // InternalOpenCypherParser.g:10110:1: rule__InQueryCall__Group__1 : rule__InQueryCall__Group__1__Impl rule__InQueryCall__Group__2 ;
    public final void rule__InQueryCall__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10114:1: ( rule__InQueryCall__Group__1__Impl rule__InQueryCall__Group__2 )
            // InternalOpenCypherParser.g:10115:2: rule__InQueryCall__Group__1__Impl rule__InQueryCall__Group__2
            {
            pushFollow(FOLLOW_62);
            rule__InQueryCall__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__1"


    // $ANTLR start "rule__InQueryCall__Group__1__Impl"
    // InternalOpenCypherParser.g:10122:1: rule__InQueryCall__Group__1__Impl : ( ( rule__InQueryCall__InvocationAssignment_1 ) ) ;
    public final void rule__InQueryCall__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10126:1: ( ( ( rule__InQueryCall__InvocationAssignment_1 ) ) )
            // InternalOpenCypherParser.g:10127:1: ( ( rule__InQueryCall__InvocationAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:10127:1: ( ( rule__InQueryCall__InvocationAssignment_1 ) )
            // InternalOpenCypherParser.g:10128:2: ( rule__InQueryCall__InvocationAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getInvocationAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10129:2: ( rule__InQueryCall__InvocationAssignment_1 )
            // InternalOpenCypherParser.g:10129:3: rule__InQueryCall__InvocationAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__InQueryCall__InvocationAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getInvocationAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__1__Impl"


    // $ANTLR start "rule__InQueryCall__Group__2"
    // InternalOpenCypherParser.g:10137:1: rule__InQueryCall__Group__2 : rule__InQueryCall__Group__2__Impl ;
    public final void rule__InQueryCall__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10141:1: ( rule__InQueryCall__Group__2__Impl )
            // InternalOpenCypherParser.g:10142:2: rule__InQueryCall__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__2"


    // $ANTLR start "rule__InQueryCall__Group__2__Impl"
    // InternalOpenCypherParser.g:10148:1: rule__InQueryCall__Group__2__Impl : ( ( rule__InQueryCall__Group_2__0 )? ) ;
    public final void rule__InQueryCall__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10152:1: ( ( ( rule__InQueryCall__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:10153:1: ( ( rule__InQueryCall__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:10153:1: ( ( rule__InQueryCall__Group_2__0 )? )
            // InternalOpenCypherParser.g:10154:2: ( rule__InQueryCall__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:10155:2: ( rule__InQueryCall__Group_2__0 )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==YIELD) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // InternalOpenCypherParser.g:10155:3: rule__InQueryCall__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__InQueryCall__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__2__Impl"


    // $ANTLR start "rule__InQueryCall__Group_2__0"
    // InternalOpenCypherParser.g:10164:1: rule__InQueryCall__Group_2__0 : rule__InQueryCall__Group_2__0__Impl rule__InQueryCall__Group_2__1 ;
    public final void rule__InQueryCall__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10168:1: ( rule__InQueryCall__Group_2__0__Impl rule__InQueryCall__Group_2__1 )
            // InternalOpenCypherParser.g:10169:2: rule__InQueryCall__Group_2__0__Impl rule__InQueryCall__Group_2__1
            {
            pushFollow(FOLLOW_63);
            rule__InQueryCall__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group_2__0"


    // $ANTLR start "rule__InQueryCall__Group_2__0__Impl"
    // InternalOpenCypherParser.g:10176:1: rule__InQueryCall__Group_2__0__Impl : ( YIELD ) ;
    public final void rule__InQueryCall__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10180:1: ( ( YIELD ) )
            // InternalOpenCypherParser.g:10181:1: ( YIELD )
            {
            // InternalOpenCypherParser.g:10181:1: ( YIELD )
            // InternalOpenCypherParser.g:10182:2: YIELD
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getYIELDKeyword_2_0()); 
            }
            match(input,YIELD,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getYIELDKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group_2__0__Impl"


    // $ANTLR start "rule__InQueryCall__Group_2__1"
    // InternalOpenCypherParser.g:10191:1: rule__InQueryCall__Group_2__1 : rule__InQueryCall__Group_2__1__Impl ;
    public final void rule__InQueryCall__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10195:1: ( rule__InQueryCall__Group_2__1__Impl )
            // InternalOpenCypherParser.g:10196:2: rule__InQueryCall__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group_2__1"


    // $ANTLR start "rule__InQueryCall__Group_2__1__Impl"
    // InternalOpenCypherParser.g:10202:1: rule__InQueryCall__Group_2__1__Impl : ( ( rule__InQueryCall__YieldItemsAssignment_2_1 ) ) ;
    public final void rule__InQueryCall__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10206:1: ( ( ( rule__InQueryCall__YieldItemsAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:10207:1: ( ( rule__InQueryCall__YieldItemsAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:10207:1: ( ( rule__InQueryCall__YieldItemsAssignment_2_1 ) )
            // InternalOpenCypherParser.g:10208:2: ( rule__InQueryCall__YieldItemsAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getYieldItemsAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:10209:2: ( rule__InQueryCall__YieldItemsAssignment_2_1 )
            // InternalOpenCypherParser.g:10209:3: rule__InQueryCall__YieldItemsAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__InQueryCall__YieldItemsAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getYieldItemsAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group_2__1__Impl"


    // $ANTLR start "rule__StandaloneCall__Group__0"
    // InternalOpenCypherParser.g:10218:1: rule__StandaloneCall__Group__0 : rule__StandaloneCall__Group__0__Impl rule__StandaloneCall__Group__1 ;
    public final void rule__StandaloneCall__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10222:1: ( rule__StandaloneCall__Group__0__Impl rule__StandaloneCall__Group__1 )
            // InternalOpenCypherParser.g:10223:2: rule__StandaloneCall__Group__0__Impl rule__StandaloneCall__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__StandaloneCall__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__0"


    // $ANTLR start "rule__StandaloneCall__Group__0__Impl"
    // InternalOpenCypherParser.g:10230:1: rule__StandaloneCall__Group__0__Impl : ( CALL ) ;
    public final void rule__StandaloneCall__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10234:1: ( ( CALL ) )
            // InternalOpenCypherParser.g:10235:1: ( CALL )
            {
            // InternalOpenCypherParser.g:10235:1: ( CALL )
            // InternalOpenCypherParser.g:10236:2: CALL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getCALLKeyword_0()); 
            }
            match(input,CALL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getCALLKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__0__Impl"


    // $ANTLR start "rule__StandaloneCall__Group__1"
    // InternalOpenCypherParser.g:10245:1: rule__StandaloneCall__Group__1 : rule__StandaloneCall__Group__1__Impl rule__StandaloneCall__Group__2 ;
    public final void rule__StandaloneCall__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10249:1: ( rule__StandaloneCall__Group__1__Impl rule__StandaloneCall__Group__2 )
            // InternalOpenCypherParser.g:10250:2: rule__StandaloneCall__Group__1__Impl rule__StandaloneCall__Group__2
            {
            pushFollow(FOLLOW_62);
            rule__StandaloneCall__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__1"


    // $ANTLR start "rule__StandaloneCall__Group__1__Impl"
    // InternalOpenCypherParser.g:10257:1: rule__StandaloneCall__Group__1__Impl : ( ( rule__StandaloneCall__InvocationAssignment_1 ) ) ;
    public final void rule__StandaloneCall__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10261:1: ( ( ( rule__StandaloneCall__InvocationAssignment_1 ) ) )
            // InternalOpenCypherParser.g:10262:1: ( ( rule__StandaloneCall__InvocationAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:10262:1: ( ( rule__StandaloneCall__InvocationAssignment_1 ) )
            // InternalOpenCypherParser.g:10263:2: ( rule__StandaloneCall__InvocationAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getInvocationAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10264:2: ( rule__StandaloneCall__InvocationAssignment_1 )
            // InternalOpenCypherParser.g:10264:3: rule__StandaloneCall__InvocationAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__InvocationAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getInvocationAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__1__Impl"


    // $ANTLR start "rule__StandaloneCall__Group__2"
    // InternalOpenCypherParser.g:10272:1: rule__StandaloneCall__Group__2 : rule__StandaloneCall__Group__2__Impl ;
    public final void rule__StandaloneCall__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10276:1: ( rule__StandaloneCall__Group__2__Impl )
            // InternalOpenCypherParser.g:10277:2: rule__StandaloneCall__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__2"


    // $ANTLR start "rule__StandaloneCall__Group__2__Impl"
    // InternalOpenCypherParser.g:10283:1: rule__StandaloneCall__Group__2__Impl : ( ( rule__StandaloneCall__Group_2__0 )? ) ;
    public final void rule__StandaloneCall__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10287:1: ( ( ( rule__StandaloneCall__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:10288:1: ( ( rule__StandaloneCall__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:10288:1: ( ( rule__StandaloneCall__Group_2__0 )? )
            // InternalOpenCypherParser.g:10289:2: ( rule__StandaloneCall__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:10290:2: ( rule__StandaloneCall__Group_2__0 )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==YIELD) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // InternalOpenCypherParser.g:10290:3: rule__StandaloneCall__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__StandaloneCall__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__2__Impl"


    // $ANTLR start "rule__StandaloneCall__Group_2__0"
    // InternalOpenCypherParser.g:10299:1: rule__StandaloneCall__Group_2__0 : rule__StandaloneCall__Group_2__0__Impl rule__StandaloneCall__Group_2__1 ;
    public final void rule__StandaloneCall__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10303:1: ( rule__StandaloneCall__Group_2__0__Impl rule__StandaloneCall__Group_2__1 )
            // InternalOpenCypherParser.g:10304:2: rule__StandaloneCall__Group_2__0__Impl rule__StandaloneCall__Group_2__1
            {
            pushFollow(FOLLOW_63);
            rule__StandaloneCall__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group_2__0"


    // $ANTLR start "rule__StandaloneCall__Group_2__0__Impl"
    // InternalOpenCypherParser.g:10311:1: rule__StandaloneCall__Group_2__0__Impl : ( YIELD ) ;
    public final void rule__StandaloneCall__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10315:1: ( ( YIELD ) )
            // InternalOpenCypherParser.g:10316:1: ( YIELD )
            {
            // InternalOpenCypherParser.g:10316:1: ( YIELD )
            // InternalOpenCypherParser.g:10317:2: YIELD
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getYIELDKeyword_2_0()); 
            }
            match(input,YIELD,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getYIELDKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group_2__0__Impl"


    // $ANTLR start "rule__StandaloneCall__Group_2__1"
    // InternalOpenCypherParser.g:10326:1: rule__StandaloneCall__Group_2__1 : rule__StandaloneCall__Group_2__1__Impl ;
    public final void rule__StandaloneCall__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10330:1: ( rule__StandaloneCall__Group_2__1__Impl )
            // InternalOpenCypherParser.g:10331:2: rule__StandaloneCall__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group_2__1"


    // $ANTLR start "rule__StandaloneCall__Group_2__1__Impl"
    // InternalOpenCypherParser.g:10337:1: rule__StandaloneCall__Group_2__1__Impl : ( ( rule__StandaloneCall__YieldItemsAssignment_2_1 ) ) ;
    public final void rule__StandaloneCall__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10341:1: ( ( ( rule__StandaloneCall__YieldItemsAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:10342:1: ( ( rule__StandaloneCall__YieldItemsAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:10342:1: ( ( rule__StandaloneCall__YieldItemsAssignment_2_1 ) )
            // InternalOpenCypherParser.g:10343:2: ( rule__StandaloneCall__YieldItemsAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getYieldItemsAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:10344:2: ( rule__StandaloneCall__YieldItemsAssignment_2_1 )
            // InternalOpenCypherParser.g:10344:3: rule__StandaloneCall__YieldItemsAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__YieldItemsAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getYieldItemsAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group_2__1__Impl"


    // $ANTLR start "rule__YieldItems__Group__0"
    // InternalOpenCypherParser.g:10353:1: rule__YieldItems__Group__0 : rule__YieldItems__Group__0__Impl rule__YieldItems__Group__1 ;
    public final void rule__YieldItems__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10357:1: ( rule__YieldItems__Group__0__Impl rule__YieldItems__Group__1 )
            // InternalOpenCypherParser.g:10358:2: rule__YieldItems__Group__0__Impl rule__YieldItems__Group__1
            {
            pushFollow(FOLLOW_63);
            rule__YieldItems__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group__0"


    // $ANTLR start "rule__YieldItems__Group__0__Impl"
    // InternalOpenCypherParser.g:10365:1: rule__YieldItems__Group__0__Impl : ( () ) ;
    public final void rule__YieldItems__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10369:1: ( ( () ) )
            // InternalOpenCypherParser.g:10370:1: ( () )
            {
            // InternalOpenCypherParser.g:10370:1: ( () )
            // InternalOpenCypherParser.g:10371:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getYieldItemsAction_0()); 
            }
            // InternalOpenCypherParser.g:10372:2: ()
            // InternalOpenCypherParser.g:10372:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getYieldItemsAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group__0__Impl"


    // $ANTLR start "rule__YieldItems__Group__1"
    // InternalOpenCypherParser.g:10380:1: rule__YieldItems__Group__1 : rule__YieldItems__Group__1__Impl ;
    public final void rule__YieldItems__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10384:1: ( rule__YieldItems__Group__1__Impl )
            // InternalOpenCypherParser.g:10385:2: rule__YieldItems__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group__1"


    // $ANTLR start "rule__YieldItems__Group__1__Impl"
    // InternalOpenCypherParser.g:10391:1: rule__YieldItems__Group__1__Impl : ( ( rule__YieldItems__Alternatives_1 ) ) ;
    public final void rule__YieldItems__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10395:1: ( ( ( rule__YieldItems__Alternatives_1 ) ) )
            // InternalOpenCypherParser.g:10396:1: ( ( rule__YieldItems__Alternatives_1 ) )
            {
            // InternalOpenCypherParser.g:10396:1: ( ( rule__YieldItems__Alternatives_1 ) )
            // InternalOpenCypherParser.g:10397:2: ( rule__YieldItems__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:10398:2: ( rule__YieldItems__Alternatives_1 )
            // InternalOpenCypherParser.g:10398:3: rule__YieldItems__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group__1__Impl"


    // $ANTLR start "rule__YieldItems__Group_1_0__0"
    // InternalOpenCypherParser.g:10407:1: rule__YieldItems__Group_1_0__0 : rule__YieldItems__Group_1_0__0__Impl rule__YieldItems__Group_1_0__1 ;
    public final void rule__YieldItems__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10411:1: ( rule__YieldItems__Group_1_0__0__Impl rule__YieldItems__Group_1_0__1 )
            // InternalOpenCypherParser.g:10412:2: rule__YieldItems__Group_1_0__0__Impl rule__YieldItems__Group_1_0__1
            {
            pushFollow(FOLLOW_55);
            rule__YieldItems__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0__0"


    // $ANTLR start "rule__YieldItems__Group_1_0__0__Impl"
    // InternalOpenCypherParser.g:10419:1: rule__YieldItems__Group_1_0__0__Impl : ( ( rule__YieldItems__ItemsAssignment_1_0_0 ) ) ;
    public final void rule__YieldItems__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10423:1: ( ( ( rule__YieldItems__ItemsAssignment_1_0_0 ) ) )
            // InternalOpenCypherParser.g:10424:1: ( ( rule__YieldItems__ItemsAssignment_1_0_0 ) )
            {
            // InternalOpenCypherParser.g:10424:1: ( ( rule__YieldItems__ItemsAssignment_1_0_0 ) )
            // InternalOpenCypherParser.g:10425:2: ( rule__YieldItems__ItemsAssignment_1_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_0()); 
            }
            // InternalOpenCypherParser.g:10426:2: ( rule__YieldItems__ItemsAssignment_1_0_0 )
            // InternalOpenCypherParser.g:10426:3: rule__YieldItems__ItemsAssignment_1_0_0
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__ItemsAssignment_1_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0__0__Impl"


    // $ANTLR start "rule__YieldItems__Group_1_0__1"
    // InternalOpenCypherParser.g:10434:1: rule__YieldItems__Group_1_0__1 : rule__YieldItems__Group_1_0__1__Impl ;
    public final void rule__YieldItems__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10438:1: ( rule__YieldItems__Group_1_0__1__Impl )
            // InternalOpenCypherParser.g:10439:2: rule__YieldItems__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0__1"


    // $ANTLR start "rule__YieldItems__Group_1_0__1__Impl"
    // InternalOpenCypherParser.g:10445:1: rule__YieldItems__Group_1_0__1__Impl : ( ( rule__YieldItems__Group_1_0_1__0 )* ) ;
    public final void rule__YieldItems__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10449:1: ( ( ( rule__YieldItems__Group_1_0_1__0 )* ) )
            // InternalOpenCypherParser.g:10450:1: ( ( rule__YieldItems__Group_1_0_1__0 )* )
            {
            // InternalOpenCypherParser.g:10450:1: ( ( rule__YieldItems__Group_1_0_1__0 )* )
            // InternalOpenCypherParser.g:10451:2: ( rule__YieldItems__Group_1_0_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getGroup_1_0_1()); 
            }
            // InternalOpenCypherParser.g:10452:2: ( rule__YieldItems__Group_1_0_1__0 )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==Comma) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // InternalOpenCypherParser.g:10452:3: rule__YieldItems__Group_1_0_1__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__YieldItems__Group_1_0_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getGroup_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0__1__Impl"


    // $ANTLR start "rule__YieldItems__Group_1_0_1__0"
    // InternalOpenCypherParser.g:10461:1: rule__YieldItems__Group_1_0_1__0 : rule__YieldItems__Group_1_0_1__0__Impl rule__YieldItems__Group_1_0_1__1 ;
    public final void rule__YieldItems__Group_1_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10465:1: ( rule__YieldItems__Group_1_0_1__0__Impl rule__YieldItems__Group_1_0_1__1 )
            // InternalOpenCypherParser.g:10466:2: rule__YieldItems__Group_1_0_1__0__Impl rule__YieldItems__Group_1_0_1__1
            {
            pushFollow(FOLLOW_10);
            rule__YieldItems__Group_1_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group_1_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0_1__0"


    // $ANTLR start "rule__YieldItems__Group_1_0_1__0__Impl"
    // InternalOpenCypherParser.g:10473:1: rule__YieldItems__Group_1_0_1__0__Impl : ( Comma ) ;
    public final void rule__YieldItems__Group_1_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10477:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:10478:1: ( Comma )
            {
            // InternalOpenCypherParser.g:10478:1: ( Comma )
            // InternalOpenCypherParser.g:10479:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getCommaKeyword_1_0_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getCommaKeyword_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0_1__0__Impl"


    // $ANTLR start "rule__YieldItems__Group_1_0_1__1"
    // InternalOpenCypherParser.g:10488:1: rule__YieldItems__Group_1_0_1__1 : rule__YieldItems__Group_1_0_1__1__Impl ;
    public final void rule__YieldItems__Group_1_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10492:1: ( rule__YieldItems__Group_1_0_1__1__Impl )
            // InternalOpenCypherParser.g:10493:2: rule__YieldItems__Group_1_0_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group_1_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0_1__1"


    // $ANTLR start "rule__YieldItems__Group_1_0_1__1__Impl"
    // InternalOpenCypherParser.g:10499:1: rule__YieldItems__Group_1_0_1__1__Impl : ( ( rule__YieldItems__ItemsAssignment_1_0_1_1 ) ) ;
    public final void rule__YieldItems__Group_1_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10503:1: ( ( ( rule__YieldItems__ItemsAssignment_1_0_1_1 ) ) )
            // InternalOpenCypherParser.g:10504:1: ( ( rule__YieldItems__ItemsAssignment_1_0_1_1 ) )
            {
            // InternalOpenCypherParser.g:10504:1: ( ( rule__YieldItems__ItemsAssignment_1_0_1_1 ) )
            // InternalOpenCypherParser.g:10505:2: ( rule__YieldItems__ItemsAssignment_1_0_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_1_1()); 
            }
            // InternalOpenCypherParser.g:10506:2: ( rule__YieldItems__ItemsAssignment_1_0_1_1 )
            // InternalOpenCypherParser.g:10506:3: rule__YieldItems__ItemsAssignment_1_0_1_1
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__ItemsAssignment_1_0_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0_1__1__Impl"


    // $ANTLR start "rule__YieldItem__Group__0"
    // InternalOpenCypherParser.g:10515:1: rule__YieldItem__Group__0 : rule__YieldItem__Group__0__Impl rule__YieldItem__Group__1 ;
    public final void rule__YieldItem__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10519:1: ( rule__YieldItem__Group__0__Impl rule__YieldItem__Group__1 )
            // InternalOpenCypherParser.g:10520:2: rule__YieldItem__Group__0__Impl rule__YieldItem__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__YieldItem__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__YieldItem__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group__0"


    // $ANTLR start "rule__YieldItem__Group__0__Impl"
    // InternalOpenCypherParser.g:10527:1: rule__YieldItem__Group__0__Impl : ( ( rule__YieldItem__Group_0__0 )? ) ;
    public final void rule__YieldItem__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10531:1: ( ( ( rule__YieldItem__Group_0__0 )? ) )
            // InternalOpenCypherParser.g:10532:1: ( ( rule__YieldItem__Group_0__0 )? )
            {
            // InternalOpenCypherParser.g:10532:1: ( ( rule__YieldItem__Group_0__0 )? )
            // InternalOpenCypherParser.g:10533:2: ( rule__YieldItem__Group_0__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getGroup_0()); 
            }
            // InternalOpenCypherParser.g:10534:2: ( rule__YieldItem__Group_0__0 )?
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // InternalOpenCypherParser.g:10534:3: rule__YieldItem__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__YieldItem__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group__0__Impl"


    // $ANTLR start "rule__YieldItem__Group__1"
    // InternalOpenCypherParser.g:10542:1: rule__YieldItem__Group__1 : rule__YieldItem__Group__1__Impl ;
    public final void rule__YieldItem__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10546:1: ( rule__YieldItem__Group__1__Impl )
            // InternalOpenCypherParser.g:10547:2: rule__YieldItem__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__YieldItem__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group__1"


    // $ANTLR start "rule__YieldItem__Group__1__Impl"
    // InternalOpenCypherParser.g:10553:1: rule__YieldItem__Group__1__Impl : ( ( rule__YieldItem__VariableAssignment_1 ) ) ;
    public final void rule__YieldItem__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10557:1: ( ( ( rule__YieldItem__VariableAssignment_1 ) ) )
            // InternalOpenCypherParser.g:10558:1: ( ( rule__YieldItem__VariableAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:10558:1: ( ( rule__YieldItem__VariableAssignment_1 ) )
            // InternalOpenCypherParser.g:10559:2: ( rule__YieldItem__VariableAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getVariableAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10560:2: ( rule__YieldItem__VariableAssignment_1 )
            // InternalOpenCypherParser.g:10560:3: rule__YieldItem__VariableAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__YieldItem__VariableAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getVariableAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group__1__Impl"


    // $ANTLR start "rule__YieldItem__Group_0__0"
    // InternalOpenCypherParser.g:10569:1: rule__YieldItem__Group_0__0 : rule__YieldItem__Group_0__0__Impl rule__YieldItem__Group_0__1 ;
    public final void rule__YieldItem__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10573:1: ( rule__YieldItem__Group_0__0__Impl rule__YieldItem__Group_0__1 )
            // InternalOpenCypherParser.g:10574:2: rule__YieldItem__Group_0__0__Impl rule__YieldItem__Group_0__1
            {
            pushFollow(FOLLOW_44);
            rule__YieldItem__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__YieldItem__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group_0__0"


    // $ANTLR start "rule__YieldItem__Group_0__0__Impl"
    // InternalOpenCypherParser.g:10581:1: rule__YieldItem__Group_0__0__Impl : ( ( rule__YieldItem__FieldAssignment_0_0 ) ) ;
    public final void rule__YieldItem__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10585:1: ( ( ( rule__YieldItem__FieldAssignment_0_0 ) ) )
            // InternalOpenCypherParser.g:10586:1: ( ( rule__YieldItem__FieldAssignment_0_0 ) )
            {
            // InternalOpenCypherParser.g:10586:1: ( ( rule__YieldItem__FieldAssignment_0_0 ) )
            // InternalOpenCypherParser.g:10587:2: ( rule__YieldItem__FieldAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getFieldAssignment_0_0()); 
            }
            // InternalOpenCypherParser.g:10588:2: ( rule__YieldItem__FieldAssignment_0_0 )
            // InternalOpenCypherParser.g:10588:3: rule__YieldItem__FieldAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__YieldItem__FieldAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getFieldAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group_0__0__Impl"


    // $ANTLR start "rule__YieldItem__Group_0__1"
    // InternalOpenCypherParser.g:10596:1: rule__YieldItem__Group_0__1 : rule__YieldItem__Group_0__1__Impl ;
    public final void rule__YieldItem__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10600:1: ( rule__YieldItem__Group_0__1__Impl )
            // InternalOpenCypherParser.g:10601:2: rule__YieldItem__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__YieldItem__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group_0__1"


    // $ANTLR start "rule__YieldItem__Group_0__1__Impl"
    // InternalOpenCypherParser.g:10607:1: rule__YieldItem__Group_0__1__Impl : ( AS ) ;
    public final void rule__YieldItem__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10611:1: ( ( AS ) )
            // InternalOpenCypherParser.g:10612:1: ( AS )
            {
            // InternalOpenCypherParser.g:10612:1: ( AS )
            // InternalOpenCypherParser.g:10613:2: AS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getASKeyword_0_1()); 
            }
            match(input,AS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getASKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group_0__1__Impl"


    // $ANTLR start "rule__With__Group__0"
    // InternalOpenCypherParser.g:10623:1: rule__With__Group__0 : rule__With__Group__0__Impl rule__With__Group__1 ;
    public final void rule__With__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10627:1: ( rule__With__Group__0__Impl rule__With__Group__1 )
            // InternalOpenCypherParser.g:10628:2: rule__With__Group__0__Impl rule__With__Group__1
            {
            pushFollow(FOLLOW_64);
            rule__With__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__With__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__0"


    // $ANTLR start "rule__With__Group__0__Impl"
    // InternalOpenCypherParser.g:10635:1: rule__With__Group__0__Impl : ( WITH ) ;
    public final void rule__With__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10639:1: ( ( WITH ) )
            // InternalOpenCypherParser.g:10640:1: ( WITH )
            {
            // InternalOpenCypherParser.g:10640:1: ( WITH )
            // InternalOpenCypherParser.g:10641:2: WITH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getWITHKeyword_0()); 
            }
            match(input,WITH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getWITHKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__0__Impl"


    // $ANTLR start "rule__With__Group__1"
    // InternalOpenCypherParser.g:10650:1: rule__With__Group__1 : rule__With__Group__1__Impl rule__With__Group__2 ;
    public final void rule__With__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10654:1: ( rule__With__Group__1__Impl rule__With__Group__2 )
            // InternalOpenCypherParser.g:10655:2: rule__With__Group__1__Impl rule__With__Group__2
            {
            pushFollow(FOLLOW_65);
            rule__With__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__With__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__1"


    // $ANTLR start "rule__With__Group__1__Impl"
    // InternalOpenCypherParser.g:10662:1: rule__With__Group__1__Impl : ( ( rule__With__ReturnBodyAssignment_1 ) ) ;
    public final void rule__With__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10666:1: ( ( ( rule__With__ReturnBodyAssignment_1 ) ) )
            // InternalOpenCypherParser.g:10667:1: ( ( rule__With__ReturnBodyAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:10667:1: ( ( rule__With__ReturnBodyAssignment_1 ) )
            // InternalOpenCypherParser.g:10668:2: ( rule__With__ReturnBodyAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getReturnBodyAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10669:2: ( rule__With__ReturnBodyAssignment_1 )
            // InternalOpenCypherParser.g:10669:3: rule__With__ReturnBodyAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__With__ReturnBodyAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getReturnBodyAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__1__Impl"


    // $ANTLR start "rule__With__Group__2"
    // InternalOpenCypherParser.g:10677:1: rule__With__Group__2 : rule__With__Group__2__Impl ;
    public final void rule__With__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10681:1: ( rule__With__Group__2__Impl )
            // InternalOpenCypherParser.g:10682:2: rule__With__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__With__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__2"


    // $ANTLR start "rule__With__Group__2__Impl"
    // InternalOpenCypherParser.g:10688:1: rule__With__Group__2__Impl : ( ( rule__With__WhereAssignment_2 )? ) ;
    public final void rule__With__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10692:1: ( ( ( rule__With__WhereAssignment_2 )? ) )
            // InternalOpenCypherParser.g:10693:1: ( ( rule__With__WhereAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:10693:1: ( ( rule__With__WhereAssignment_2 )? )
            // InternalOpenCypherParser.g:10694:2: ( rule__With__WhereAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getWhereAssignment_2()); 
            }
            // InternalOpenCypherParser.g:10695:2: ( rule__With__WhereAssignment_2 )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==WHERE) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // InternalOpenCypherParser.g:10695:3: rule__With__WhereAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__With__WhereAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getWhereAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__2__Impl"


    // $ANTLR start "rule__Return__Group__0"
    // InternalOpenCypherParser.g:10704:1: rule__Return__Group__0 : rule__Return__Group__0__Impl rule__Return__Group__1 ;
    public final void rule__Return__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10708:1: ( rule__Return__Group__0__Impl rule__Return__Group__1 )
            // InternalOpenCypherParser.g:10709:2: rule__Return__Group__0__Impl rule__Return__Group__1
            {
            pushFollow(FOLLOW_64);
            rule__Return__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Return__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__Group__0"


    // $ANTLR start "rule__Return__Group__0__Impl"
    // InternalOpenCypherParser.g:10716:1: rule__Return__Group__0__Impl : ( ( rule__Return__ReturnAssignment_0 ) ) ;
    public final void rule__Return__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10720:1: ( ( ( rule__Return__ReturnAssignment_0 ) ) )
            // InternalOpenCypherParser.g:10721:1: ( ( rule__Return__ReturnAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:10721:1: ( ( rule__Return__ReturnAssignment_0 ) )
            // InternalOpenCypherParser.g:10722:2: ( rule__Return__ReturnAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getReturnAssignment_0()); 
            }
            // InternalOpenCypherParser.g:10723:2: ( rule__Return__ReturnAssignment_0 )
            // InternalOpenCypherParser.g:10723:3: rule__Return__ReturnAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Return__ReturnAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getReturnAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__Group__0__Impl"


    // $ANTLR start "rule__Return__Group__1"
    // InternalOpenCypherParser.g:10731:1: rule__Return__Group__1 : rule__Return__Group__1__Impl ;
    public final void rule__Return__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10735:1: ( rule__Return__Group__1__Impl )
            // InternalOpenCypherParser.g:10736:2: rule__Return__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Return__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__Group__1"


    // $ANTLR start "rule__Return__Group__1__Impl"
    // InternalOpenCypherParser.g:10742:1: rule__Return__Group__1__Impl : ( ( rule__Return__BodyAssignment_1 ) ) ;
    public final void rule__Return__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10746:1: ( ( ( rule__Return__BodyAssignment_1 ) ) )
            // InternalOpenCypherParser.g:10747:1: ( ( rule__Return__BodyAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:10747:1: ( ( rule__Return__BodyAssignment_1 ) )
            // InternalOpenCypherParser.g:10748:2: ( rule__Return__BodyAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getBodyAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10749:2: ( rule__Return__BodyAssignment_1 )
            // InternalOpenCypherParser.g:10749:3: rule__Return__BodyAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Return__BodyAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getBodyAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__Group__1__Impl"


    // $ANTLR start "rule__ReturnBody__Group__0"
    // InternalOpenCypherParser.g:10758:1: rule__ReturnBody__Group__0 : rule__ReturnBody__Group__0__Impl rule__ReturnBody__Group__1 ;
    public final void rule__ReturnBody__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10762:1: ( rule__ReturnBody__Group__0__Impl rule__ReturnBody__Group__1 )
            // InternalOpenCypherParser.g:10763:2: rule__ReturnBody__Group__0__Impl rule__ReturnBody__Group__1
            {
            pushFollow(FOLLOW_64);
            rule__ReturnBody__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__0"


    // $ANTLR start "rule__ReturnBody__Group__0__Impl"
    // InternalOpenCypherParser.g:10770:1: rule__ReturnBody__Group__0__Impl : ( ( rule__ReturnBody__DistinctAssignment_0 )? ) ;
    public final void rule__ReturnBody__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10774:1: ( ( ( rule__ReturnBody__DistinctAssignment_0 )? ) )
            // InternalOpenCypherParser.g:10775:1: ( ( rule__ReturnBody__DistinctAssignment_0 )? )
            {
            // InternalOpenCypherParser.g:10775:1: ( ( rule__ReturnBody__DistinctAssignment_0 )? )
            // InternalOpenCypherParser.g:10776:2: ( rule__ReturnBody__DistinctAssignment_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getDistinctAssignment_0()); 
            }
            // InternalOpenCypherParser.g:10777:2: ( rule__ReturnBody__DistinctAssignment_0 )?
            int alt86=2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // InternalOpenCypherParser.g:10777:3: rule__ReturnBody__DistinctAssignment_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnBody__DistinctAssignment_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getDistinctAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__0__Impl"


    // $ANTLR start "rule__ReturnBody__Group__1"
    // InternalOpenCypherParser.g:10785:1: rule__ReturnBody__Group__1 : rule__ReturnBody__Group__1__Impl rule__ReturnBody__Group__2 ;
    public final void rule__ReturnBody__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10789:1: ( rule__ReturnBody__Group__1__Impl rule__ReturnBody__Group__2 )
            // InternalOpenCypherParser.g:10790:2: rule__ReturnBody__Group__1__Impl rule__ReturnBody__Group__2
            {
            pushFollow(FOLLOW_66);
            rule__ReturnBody__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__1"


    // $ANTLR start "rule__ReturnBody__Group__1__Impl"
    // InternalOpenCypherParser.g:10797:1: rule__ReturnBody__Group__1__Impl : ( ( rule__ReturnBody__ReturnItemsAssignment_1 ) ) ;
    public final void rule__ReturnBody__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10801:1: ( ( ( rule__ReturnBody__ReturnItemsAssignment_1 ) ) )
            // InternalOpenCypherParser.g:10802:1: ( ( rule__ReturnBody__ReturnItemsAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:10802:1: ( ( rule__ReturnBody__ReturnItemsAssignment_1 ) )
            // InternalOpenCypherParser.g:10803:2: ( rule__ReturnBody__ReturnItemsAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getReturnItemsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10804:2: ( rule__ReturnBody__ReturnItemsAssignment_1 )
            // InternalOpenCypherParser.g:10804:3: rule__ReturnBody__ReturnItemsAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ReturnBody__ReturnItemsAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getReturnItemsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__1__Impl"


    // $ANTLR start "rule__ReturnBody__Group__2"
    // InternalOpenCypherParser.g:10812:1: rule__ReturnBody__Group__2 : rule__ReturnBody__Group__2__Impl rule__ReturnBody__Group__3 ;
    public final void rule__ReturnBody__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10816:1: ( rule__ReturnBody__Group__2__Impl rule__ReturnBody__Group__3 )
            // InternalOpenCypherParser.g:10817:2: rule__ReturnBody__Group__2__Impl rule__ReturnBody__Group__3
            {
            pushFollow(FOLLOW_66);
            rule__ReturnBody__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__2"


    // $ANTLR start "rule__ReturnBody__Group__2__Impl"
    // InternalOpenCypherParser.g:10824:1: rule__ReturnBody__Group__2__Impl : ( ( rule__ReturnBody__OrderAssignment_2 )? ) ;
    public final void rule__ReturnBody__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10828:1: ( ( ( rule__ReturnBody__OrderAssignment_2 )? ) )
            // InternalOpenCypherParser.g:10829:1: ( ( rule__ReturnBody__OrderAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:10829:1: ( ( rule__ReturnBody__OrderAssignment_2 )? )
            // InternalOpenCypherParser.g:10830:2: ( rule__ReturnBody__OrderAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getOrderAssignment_2()); 
            }
            // InternalOpenCypherParser.g:10831:2: ( rule__ReturnBody__OrderAssignment_2 )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==ORDER) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // InternalOpenCypherParser.g:10831:3: rule__ReturnBody__OrderAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnBody__OrderAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getOrderAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__2__Impl"


    // $ANTLR start "rule__ReturnBody__Group__3"
    // InternalOpenCypherParser.g:10839:1: rule__ReturnBody__Group__3 : rule__ReturnBody__Group__3__Impl rule__ReturnBody__Group__4 ;
    public final void rule__ReturnBody__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10843:1: ( rule__ReturnBody__Group__3__Impl rule__ReturnBody__Group__4 )
            // InternalOpenCypherParser.g:10844:2: rule__ReturnBody__Group__3__Impl rule__ReturnBody__Group__4
            {
            pushFollow(FOLLOW_66);
            rule__ReturnBody__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__3"


    // $ANTLR start "rule__ReturnBody__Group__3__Impl"
    // InternalOpenCypherParser.g:10851:1: rule__ReturnBody__Group__3__Impl : ( ( rule__ReturnBody__SkipAssignment_3 )? ) ;
    public final void rule__ReturnBody__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10855:1: ( ( ( rule__ReturnBody__SkipAssignment_3 )? ) )
            // InternalOpenCypherParser.g:10856:1: ( ( rule__ReturnBody__SkipAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:10856:1: ( ( rule__ReturnBody__SkipAssignment_3 )? )
            // InternalOpenCypherParser.g:10857:2: ( rule__ReturnBody__SkipAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getSkipAssignment_3()); 
            }
            // InternalOpenCypherParser.g:10858:2: ( rule__ReturnBody__SkipAssignment_3 )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==SKIP) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // InternalOpenCypherParser.g:10858:3: rule__ReturnBody__SkipAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnBody__SkipAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getSkipAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__3__Impl"


    // $ANTLR start "rule__ReturnBody__Group__4"
    // InternalOpenCypherParser.g:10866:1: rule__ReturnBody__Group__4 : rule__ReturnBody__Group__4__Impl ;
    public final void rule__ReturnBody__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10870:1: ( rule__ReturnBody__Group__4__Impl )
            // InternalOpenCypherParser.g:10871:2: rule__ReturnBody__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__4"


    // $ANTLR start "rule__ReturnBody__Group__4__Impl"
    // InternalOpenCypherParser.g:10877:1: rule__ReturnBody__Group__4__Impl : ( ( rule__ReturnBody__LimitAssignment_4 )? ) ;
    public final void rule__ReturnBody__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10881:1: ( ( ( rule__ReturnBody__LimitAssignment_4 )? ) )
            // InternalOpenCypherParser.g:10882:1: ( ( rule__ReturnBody__LimitAssignment_4 )? )
            {
            // InternalOpenCypherParser.g:10882:1: ( ( rule__ReturnBody__LimitAssignment_4 )? )
            // InternalOpenCypherParser.g:10883:2: ( rule__ReturnBody__LimitAssignment_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getLimitAssignment_4()); 
            }
            // InternalOpenCypherParser.g:10884:2: ( rule__ReturnBody__LimitAssignment_4 )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==LIMIT) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // InternalOpenCypherParser.g:10884:3: rule__ReturnBody__LimitAssignment_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnBody__LimitAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getLimitAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__4__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0__0"
    // InternalOpenCypherParser.g:10893:1: rule__ReturnItems__Group_0__0 : rule__ReturnItems__Group_0__0__Impl rule__ReturnItems__Group_0__1 ;
    public final void rule__ReturnItems__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10897:1: ( rule__ReturnItems__Group_0__0__Impl rule__ReturnItems__Group_0__1 )
            // InternalOpenCypherParser.g:10898:2: rule__ReturnItems__Group_0__0__Impl rule__ReturnItems__Group_0__1
            {
            pushFollow(FOLLOW_67);
            rule__ReturnItems__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0__0"


    // $ANTLR start "rule__ReturnItems__Group_0__0__Impl"
    // InternalOpenCypherParser.g:10905:1: rule__ReturnItems__Group_0__0__Impl : ( () ) ;
    public final void rule__ReturnItems__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10909:1: ( ( () ) )
            // InternalOpenCypherParser.g:10910:1: ( () )
            {
            // InternalOpenCypherParser.g:10910:1: ( () )
            // InternalOpenCypherParser.g:10911:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getReturnItemsAction_0_0()); 
            }
            // InternalOpenCypherParser.g:10912:2: ()
            // InternalOpenCypherParser.g:10912:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getReturnItemsAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0__0__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0__1"
    // InternalOpenCypherParser.g:10920:1: rule__ReturnItems__Group_0__1 : rule__ReturnItems__Group_0__1__Impl ;
    public final void rule__ReturnItems__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10924:1: ( rule__ReturnItems__Group_0__1__Impl )
            // InternalOpenCypherParser.g:10925:2: rule__ReturnItems__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0__1"


    // $ANTLR start "rule__ReturnItems__Group_0__1__Impl"
    // InternalOpenCypherParser.g:10931:1: rule__ReturnItems__Group_0__1__Impl : ( ( rule__ReturnItems__Group_0_1__0 ) ) ;
    public final void rule__ReturnItems__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10935:1: ( ( ( rule__ReturnItems__Group_0_1__0 ) ) )
            // InternalOpenCypherParser.g:10936:1: ( ( rule__ReturnItems__Group_0_1__0 ) )
            {
            // InternalOpenCypherParser.g:10936:1: ( ( rule__ReturnItems__Group_0_1__0 ) )
            // InternalOpenCypherParser.g:10937:2: ( rule__ReturnItems__Group_0_1__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getGroup_0_1()); 
            }
            // InternalOpenCypherParser.g:10938:2: ( rule__ReturnItems__Group_0_1__0 )
            // InternalOpenCypherParser.g:10938:3: rule__ReturnItems__Group_0_1__0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getGroup_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0__1__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0_1__0"
    // InternalOpenCypherParser.g:10947:1: rule__ReturnItems__Group_0_1__0 : rule__ReturnItems__Group_0_1__0__Impl rule__ReturnItems__Group_0_1__1 ;
    public final void rule__ReturnItems__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10951:1: ( rule__ReturnItems__Group_0_1__0__Impl rule__ReturnItems__Group_0_1__1 )
            // InternalOpenCypherParser.g:10952:2: rule__ReturnItems__Group_0_1__0__Impl rule__ReturnItems__Group_0_1__1
            {
            pushFollow(FOLLOW_55);
            rule__ReturnItems__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1__0"


    // $ANTLR start "rule__ReturnItems__Group_0_1__0__Impl"
    // InternalOpenCypherParser.g:10959:1: rule__ReturnItems__Group_0_1__0__Impl : ( ( rule__ReturnItems__AllAssignment_0_1_0 ) ) ;
    public final void rule__ReturnItems__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10963:1: ( ( ( rule__ReturnItems__AllAssignment_0_1_0 ) ) )
            // InternalOpenCypherParser.g:10964:1: ( ( rule__ReturnItems__AllAssignment_0_1_0 ) )
            {
            // InternalOpenCypherParser.g:10964:1: ( ( rule__ReturnItems__AllAssignment_0_1_0 ) )
            // InternalOpenCypherParser.g:10965:2: ( rule__ReturnItems__AllAssignment_0_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getAllAssignment_0_1_0()); 
            }
            // InternalOpenCypherParser.g:10966:2: ( rule__ReturnItems__AllAssignment_0_1_0 )
            // InternalOpenCypherParser.g:10966:3: rule__ReturnItems__AllAssignment_0_1_0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__AllAssignment_0_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getAllAssignment_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1__0__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0_1__1"
    // InternalOpenCypherParser.g:10974:1: rule__ReturnItems__Group_0_1__1 : rule__ReturnItems__Group_0_1__1__Impl ;
    public final void rule__ReturnItems__Group_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10978:1: ( rule__ReturnItems__Group_0_1__1__Impl )
            // InternalOpenCypherParser.g:10979:2: rule__ReturnItems__Group_0_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1__1"


    // $ANTLR start "rule__ReturnItems__Group_0_1__1__Impl"
    // InternalOpenCypherParser.g:10985:1: rule__ReturnItems__Group_0_1__1__Impl : ( ( rule__ReturnItems__Group_0_1_1__0 )* ) ;
    public final void rule__ReturnItems__Group_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10989:1: ( ( ( rule__ReturnItems__Group_0_1_1__0 )* ) )
            // InternalOpenCypherParser.g:10990:1: ( ( rule__ReturnItems__Group_0_1_1__0 )* )
            {
            // InternalOpenCypherParser.g:10990:1: ( ( rule__ReturnItems__Group_0_1_1__0 )* )
            // InternalOpenCypherParser.g:10991:2: ( rule__ReturnItems__Group_0_1_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getGroup_0_1_1()); 
            }
            // InternalOpenCypherParser.g:10992:2: ( rule__ReturnItems__Group_0_1_1__0 )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==Comma) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // InternalOpenCypherParser.g:10992:3: rule__ReturnItems__Group_0_1_1__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__ReturnItems__Group_0_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getGroup_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1__1__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0_1_1__0"
    // InternalOpenCypherParser.g:11001:1: rule__ReturnItems__Group_0_1_1__0 : rule__ReturnItems__Group_0_1_1__0__Impl rule__ReturnItems__Group_0_1_1__1 ;
    public final void rule__ReturnItems__Group_0_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11005:1: ( rule__ReturnItems__Group_0_1_1__0__Impl rule__ReturnItems__Group_0_1_1__1 )
            // InternalOpenCypherParser.g:11006:2: rule__ReturnItems__Group_0_1_1__0__Impl rule__ReturnItems__Group_0_1_1__1
            {
            pushFollow(FOLLOW_64);
            rule__ReturnItems__Group_0_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1_1__0"


    // $ANTLR start "rule__ReturnItems__Group_0_1_1__0__Impl"
    // InternalOpenCypherParser.g:11013:1: rule__ReturnItems__Group_0_1_1__0__Impl : ( Comma ) ;
    public final void rule__ReturnItems__Group_0_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11017:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:11018:1: ( Comma )
            {
            // InternalOpenCypherParser.g:11018:1: ( Comma )
            // InternalOpenCypherParser.g:11019:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getCommaKeyword_0_1_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getCommaKeyword_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1_1__0__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0_1_1__1"
    // InternalOpenCypherParser.g:11028:1: rule__ReturnItems__Group_0_1_1__1 : rule__ReturnItems__Group_0_1_1__1__Impl ;
    public final void rule__ReturnItems__Group_0_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11032:1: ( rule__ReturnItems__Group_0_1_1__1__Impl )
            // InternalOpenCypherParser.g:11033:2: rule__ReturnItems__Group_0_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1_1__1"


    // $ANTLR start "rule__ReturnItems__Group_0_1_1__1__Impl"
    // InternalOpenCypherParser.g:11039:1: rule__ReturnItems__Group_0_1_1__1__Impl : ( ( rule__ReturnItems__ItemsAssignment_0_1_1_1 ) ) ;
    public final void rule__ReturnItems__Group_0_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11043:1: ( ( ( rule__ReturnItems__ItemsAssignment_0_1_1_1 ) ) )
            // InternalOpenCypherParser.g:11044:1: ( ( rule__ReturnItems__ItemsAssignment_0_1_1_1 ) )
            {
            // InternalOpenCypherParser.g:11044:1: ( ( rule__ReturnItems__ItemsAssignment_0_1_1_1 ) )
            // InternalOpenCypherParser.g:11045:2: ( rule__ReturnItems__ItemsAssignment_0_1_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsAssignment_0_1_1_1()); 
            }
            // InternalOpenCypherParser.g:11046:2: ( rule__ReturnItems__ItemsAssignment_0_1_1_1 )
            // InternalOpenCypherParser.g:11046:3: rule__ReturnItems__ItemsAssignment_0_1_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__ItemsAssignment_0_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsAssignment_0_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1_1__1__Impl"


    // $ANTLR start "rule__ReturnItems__Group_1__0"
    // InternalOpenCypherParser.g:11055:1: rule__ReturnItems__Group_1__0 : rule__ReturnItems__Group_1__0__Impl rule__ReturnItems__Group_1__1 ;
    public final void rule__ReturnItems__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11059:1: ( rule__ReturnItems__Group_1__0__Impl rule__ReturnItems__Group_1__1 )
            // InternalOpenCypherParser.g:11060:2: rule__ReturnItems__Group_1__0__Impl rule__ReturnItems__Group_1__1
            {
            pushFollow(FOLLOW_55);
            rule__ReturnItems__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1__0"


    // $ANTLR start "rule__ReturnItems__Group_1__0__Impl"
    // InternalOpenCypherParser.g:11067:1: rule__ReturnItems__Group_1__0__Impl : ( ( rule__ReturnItems__ItemsAssignment_1_0 ) ) ;
    public final void rule__ReturnItems__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11071:1: ( ( ( rule__ReturnItems__ItemsAssignment_1_0 ) ) )
            // InternalOpenCypherParser.g:11072:1: ( ( rule__ReturnItems__ItemsAssignment_1_0 ) )
            {
            // InternalOpenCypherParser.g:11072:1: ( ( rule__ReturnItems__ItemsAssignment_1_0 ) )
            // InternalOpenCypherParser.g:11073:2: ( rule__ReturnItems__ItemsAssignment_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_0()); 
            }
            // InternalOpenCypherParser.g:11074:2: ( rule__ReturnItems__ItemsAssignment_1_0 )
            // InternalOpenCypherParser.g:11074:3: rule__ReturnItems__ItemsAssignment_1_0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__ItemsAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1__0__Impl"


    // $ANTLR start "rule__ReturnItems__Group_1__1"
    // InternalOpenCypherParser.g:11082:1: rule__ReturnItems__Group_1__1 : rule__ReturnItems__Group_1__1__Impl ;
    public final void rule__ReturnItems__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11086:1: ( rule__ReturnItems__Group_1__1__Impl )
            // InternalOpenCypherParser.g:11087:2: rule__ReturnItems__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1__1"


    // $ANTLR start "rule__ReturnItems__Group_1__1__Impl"
    // InternalOpenCypherParser.g:11093:1: rule__ReturnItems__Group_1__1__Impl : ( ( rule__ReturnItems__Group_1_1__0 )* ) ;
    public final void rule__ReturnItems__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11097:1: ( ( ( rule__ReturnItems__Group_1_1__0 )* ) )
            // InternalOpenCypherParser.g:11098:1: ( ( rule__ReturnItems__Group_1_1__0 )* )
            {
            // InternalOpenCypherParser.g:11098:1: ( ( rule__ReturnItems__Group_1_1__0 )* )
            // InternalOpenCypherParser.g:11099:2: ( rule__ReturnItems__Group_1_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getGroup_1_1()); 
            }
            // InternalOpenCypherParser.g:11100:2: ( rule__ReturnItems__Group_1_1__0 )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==Comma) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // InternalOpenCypherParser.g:11100:3: rule__ReturnItems__Group_1_1__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__ReturnItems__Group_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getGroup_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1__1__Impl"


    // $ANTLR start "rule__ReturnItems__Group_1_1__0"
    // InternalOpenCypherParser.g:11109:1: rule__ReturnItems__Group_1_1__0 : rule__ReturnItems__Group_1_1__0__Impl rule__ReturnItems__Group_1_1__1 ;
    public final void rule__ReturnItems__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11113:1: ( rule__ReturnItems__Group_1_1__0__Impl rule__ReturnItems__Group_1_1__1 )
            // InternalOpenCypherParser.g:11114:2: rule__ReturnItems__Group_1_1__0__Impl rule__ReturnItems__Group_1_1__1
            {
            pushFollow(FOLLOW_64);
            rule__ReturnItems__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1_1__0"


    // $ANTLR start "rule__ReturnItems__Group_1_1__0__Impl"
    // InternalOpenCypherParser.g:11121:1: rule__ReturnItems__Group_1_1__0__Impl : ( Comma ) ;
    public final void rule__ReturnItems__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11125:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:11126:1: ( Comma )
            {
            // InternalOpenCypherParser.g:11126:1: ( Comma )
            // InternalOpenCypherParser.g:11127:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getCommaKeyword_1_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getCommaKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1_1__0__Impl"


    // $ANTLR start "rule__ReturnItems__Group_1_1__1"
    // InternalOpenCypherParser.g:11136:1: rule__ReturnItems__Group_1_1__1 : rule__ReturnItems__Group_1_1__1__Impl ;
    public final void rule__ReturnItems__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11140:1: ( rule__ReturnItems__Group_1_1__1__Impl )
            // InternalOpenCypherParser.g:11141:2: rule__ReturnItems__Group_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1_1__1"


    // $ANTLR start "rule__ReturnItems__Group_1_1__1__Impl"
    // InternalOpenCypherParser.g:11147:1: rule__ReturnItems__Group_1_1__1__Impl : ( ( rule__ReturnItems__ItemsAssignment_1_1_1 ) ) ;
    public final void rule__ReturnItems__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11151:1: ( ( ( rule__ReturnItems__ItemsAssignment_1_1_1 ) ) )
            // InternalOpenCypherParser.g:11152:1: ( ( rule__ReturnItems__ItemsAssignment_1_1_1 ) )
            {
            // InternalOpenCypherParser.g:11152:1: ( ( rule__ReturnItems__ItemsAssignment_1_1_1 ) )
            // InternalOpenCypherParser.g:11153:2: ( rule__ReturnItems__ItemsAssignment_1_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_1_1()); 
            }
            // InternalOpenCypherParser.g:11154:2: ( rule__ReturnItems__ItemsAssignment_1_1_1 )
            // InternalOpenCypherParser.g:11154:3: rule__ReturnItems__ItemsAssignment_1_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__ItemsAssignment_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1_1__1__Impl"


    // $ANTLR start "rule__ReturnItem__Group__0"
    // InternalOpenCypherParser.g:11163:1: rule__ReturnItem__Group__0 : rule__ReturnItem__Group__0__Impl rule__ReturnItem__Group__1 ;
    public final void rule__ReturnItem__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11167:1: ( rule__ReturnItem__Group__0__Impl rule__ReturnItem__Group__1 )
            // InternalOpenCypherParser.g:11168:2: rule__ReturnItem__Group__0__Impl rule__ReturnItem__Group__1
            {
            pushFollow(FOLLOW_44);
            rule__ReturnItem__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItem__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group__0"


    // $ANTLR start "rule__ReturnItem__Group__0__Impl"
    // InternalOpenCypherParser.g:11175:1: rule__ReturnItem__Group__0__Impl : ( ( rule__ReturnItem__ExpressionAssignment_0 ) ) ;
    public final void rule__ReturnItem__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11179:1: ( ( ( rule__ReturnItem__ExpressionAssignment_0 ) ) )
            // InternalOpenCypherParser.g:11180:1: ( ( rule__ReturnItem__ExpressionAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:11180:1: ( ( rule__ReturnItem__ExpressionAssignment_0 ) )
            // InternalOpenCypherParser.g:11181:2: ( rule__ReturnItem__ExpressionAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getExpressionAssignment_0()); 
            }
            // InternalOpenCypherParser.g:11182:2: ( rule__ReturnItem__ExpressionAssignment_0 )
            // InternalOpenCypherParser.g:11182:3: rule__ReturnItem__ExpressionAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItem__ExpressionAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getExpressionAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group__0__Impl"


    // $ANTLR start "rule__ReturnItem__Group__1"
    // InternalOpenCypherParser.g:11190:1: rule__ReturnItem__Group__1 : rule__ReturnItem__Group__1__Impl ;
    public final void rule__ReturnItem__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11194:1: ( rule__ReturnItem__Group__1__Impl )
            // InternalOpenCypherParser.g:11195:2: rule__ReturnItem__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItem__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group__1"


    // $ANTLR start "rule__ReturnItem__Group__1__Impl"
    // InternalOpenCypherParser.g:11201:1: rule__ReturnItem__Group__1__Impl : ( ( rule__ReturnItem__Group_1__0 )? ) ;
    public final void rule__ReturnItem__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11205:1: ( ( ( rule__ReturnItem__Group_1__0 )? ) )
            // InternalOpenCypherParser.g:11206:1: ( ( rule__ReturnItem__Group_1__0 )? )
            {
            // InternalOpenCypherParser.g:11206:1: ( ( rule__ReturnItem__Group_1__0 )? )
            // InternalOpenCypherParser.g:11207:2: ( rule__ReturnItem__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:11208:2: ( rule__ReturnItem__Group_1__0 )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==AS) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // InternalOpenCypherParser.g:11208:3: rule__ReturnItem__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnItem__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group__1__Impl"


    // $ANTLR start "rule__ReturnItem__Group_1__0"
    // InternalOpenCypherParser.g:11217:1: rule__ReturnItem__Group_1__0 : rule__ReturnItem__Group_1__0__Impl rule__ReturnItem__Group_1__1 ;
    public final void rule__ReturnItem__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11221:1: ( rule__ReturnItem__Group_1__0__Impl rule__ReturnItem__Group_1__1 )
            // InternalOpenCypherParser.g:11222:2: rule__ReturnItem__Group_1__0__Impl rule__ReturnItem__Group_1__1
            {
            pushFollow(FOLLOW_10);
            rule__ReturnItem__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItem__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group_1__0"


    // $ANTLR start "rule__ReturnItem__Group_1__0__Impl"
    // InternalOpenCypherParser.g:11229:1: rule__ReturnItem__Group_1__0__Impl : ( AS ) ;
    public final void rule__ReturnItem__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11233:1: ( ( AS ) )
            // InternalOpenCypherParser.g:11234:1: ( AS )
            {
            // InternalOpenCypherParser.g:11234:1: ( AS )
            // InternalOpenCypherParser.g:11235:2: AS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getASKeyword_1_0()); 
            }
            match(input,AS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getASKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group_1__0__Impl"


    // $ANTLR start "rule__ReturnItem__Group_1__1"
    // InternalOpenCypherParser.g:11244:1: rule__ReturnItem__Group_1__1 : rule__ReturnItem__Group_1__1__Impl ;
    public final void rule__ReturnItem__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11248:1: ( rule__ReturnItem__Group_1__1__Impl )
            // InternalOpenCypherParser.g:11249:2: rule__ReturnItem__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItem__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group_1__1"


    // $ANTLR start "rule__ReturnItem__Group_1__1__Impl"
    // InternalOpenCypherParser.g:11255:1: rule__ReturnItem__Group_1__1__Impl : ( ( rule__ReturnItem__AliasAssignment_1_1 ) ) ;
    public final void rule__ReturnItem__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11259:1: ( ( ( rule__ReturnItem__AliasAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:11260:1: ( ( rule__ReturnItem__AliasAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:11260:1: ( ( rule__ReturnItem__AliasAssignment_1_1 ) )
            // InternalOpenCypherParser.g:11261:2: ( rule__ReturnItem__AliasAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getAliasAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:11262:2: ( rule__ReturnItem__AliasAssignment_1_1 )
            // InternalOpenCypherParser.g:11262:3: rule__ReturnItem__AliasAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItem__AliasAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getAliasAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group_1__1__Impl"


    // $ANTLR start "rule__Order__Group__0"
    // InternalOpenCypherParser.g:11271:1: rule__Order__Group__0 : rule__Order__Group__0__Impl rule__Order__Group__1 ;
    public final void rule__Order__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11275:1: ( rule__Order__Group__0__Impl rule__Order__Group__1 )
            // InternalOpenCypherParser.g:11276:2: rule__Order__Group__0__Impl rule__Order__Group__1
            {
            pushFollow(FOLLOW_68);
            rule__Order__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Order__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__0"


    // $ANTLR start "rule__Order__Group__0__Impl"
    // InternalOpenCypherParser.g:11283:1: rule__Order__Group__0__Impl : ( ORDER ) ;
    public final void rule__Order__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11287:1: ( ( ORDER ) )
            // InternalOpenCypherParser.g:11288:1: ( ORDER )
            {
            // InternalOpenCypherParser.g:11288:1: ( ORDER )
            // InternalOpenCypherParser.g:11289:2: ORDER
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getORDERKeyword_0()); 
            }
            match(input,ORDER,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getORDERKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__0__Impl"


    // $ANTLR start "rule__Order__Group__1"
    // InternalOpenCypherParser.g:11298:1: rule__Order__Group__1 : rule__Order__Group__1__Impl rule__Order__Group__2 ;
    public final void rule__Order__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11302:1: ( rule__Order__Group__1__Impl rule__Order__Group__2 )
            // InternalOpenCypherParser.g:11303:2: rule__Order__Group__1__Impl rule__Order__Group__2
            {
            pushFollow(FOLLOW_43);
            rule__Order__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Order__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__1"


    // $ANTLR start "rule__Order__Group__1__Impl"
    // InternalOpenCypherParser.g:11310:1: rule__Order__Group__1__Impl : ( BY ) ;
    public final void rule__Order__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11314:1: ( ( BY ) )
            // InternalOpenCypherParser.g:11315:1: ( BY )
            {
            // InternalOpenCypherParser.g:11315:1: ( BY )
            // InternalOpenCypherParser.g:11316:2: BY
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getBYKeyword_1()); 
            }
            match(input,BY,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getBYKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__1__Impl"


    // $ANTLR start "rule__Order__Group__2"
    // InternalOpenCypherParser.g:11325:1: rule__Order__Group__2 : rule__Order__Group__2__Impl rule__Order__Group__3 ;
    public final void rule__Order__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11329:1: ( rule__Order__Group__2__Impl rule__Order__Group__3 )
            // InternalOpenCypherParser.g:11330:2: rule__Order__Group__2__Impl rule__Order__Group__3
            {
            pushFollow(FOLLOW_55);
            rule__Order__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Order__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__2"


    // $ANTLR start "rule__Order__Group__2__Impl"
    // InternalOpenCypherParser.g:11337:1: rule__Order__Group__2__Impl : ( ( rule__Order__OrderByAssignment_2 ) ) ;
    public final void rule__Order__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11341:1: ( ( ( rule__Order__OrderByAssignment_2 ) ) )
            // InternalOpenCypherParser.g:11342:1: ( ( rule__Order__OrderByAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:11342:1: ( ( rule__Order__OrderByAssignment_2 ) )
            // InternalOpenCypherParser.g:11343:2: ( rule__Order__OrderByAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getOrderByAssignment_2()); 
            }
            // InternalOpenCypherParser.g:11344:2: ( rule__Order__OrderByAssignment_2 )
            // InternalOpenCypherParser.g:11344:3: rule__Order__OrderByAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Order__OrderByAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getOrderByAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__2__Impl"


    // $ANTLR start "rule__Order__Group__3"
    // InternalOpenCypherParser.g:11352:1: rule__Order__Group__3 : rule__Order__Group__3__Impl ;
    public final void rule__Order__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11356:1: ( rule__Order__Group__3__Impl )
            // InternalOpenCypherParser.g:11357:2: rule__Order__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Order__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__3"


    // $ANTLR start "rule__Order__Group__3__Impl"
    // InternalOpenCypherParser.g:11363:1: rule__Order__Group__3__Impl : ( ( rule__Order__Group_3__0 )* ) ;
    public final void rule__Order__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11367:1: ( ( ( rule__Order__Group_3__0 )* ) )
            // InternalOpenCypherParser.g:11368:1: ( ( rule__Order__Group_3__0 )* )
            {
            // InternalOpenCypherParser.g:11368:1: ( ( rule__Order__Group_3__0 )* )
            // InternalOpenCypherParser.g:11369:2: ( rule__Order__Group_3__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getGroup_3()); 
            }
            // InternalOpenCypherParser.g:11370:2: ( rule__Order__Group_3__0 )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==Comma) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // InternalOpenCypherParser.g:11370:3: rule__Order__Group_3__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__Order__Group_3__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__3__Impl"


    // $ANTLR start "rule__Order__Group_3__0"
    // InternalOpenCypherParser.g:11379:1: rule__Order__Group_3__0 : rule__Order__Group_3__0__Impl rule__Order__Group_3__1 ;
    public final void rule__Order__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11383:1: ( rule__Order__Group_3__0__Impl rule__Order__Group_3__1 )
            // InternalOpenCypherParser.g:11384:2: rule__Order__Group_3__0__Impl rule__Order__Group_3__1
            {
            pushFollow(FOLLOW_43);
            rule__Order__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Order__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group_3__0"


    // $ANTLR start "rule__Order__Group_3__0__Impl"
    // InternalOpenCypherParser.g:11391:1: rule__Order__Group_3__0__Impl : ( Comma ) ;
    public final void rule__Order__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11395:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:11396:1: ( Comma )
            {
            // InternalOpenCypherParser.g:11396:1: ( Comma )
            // InternalOpenCypherParser.g:11397:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getCommaKeyword_3_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getCommaKeyword_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group_3__0__Impl"


    // $ANTLR start "rule__Order__Group_3__1"
    // InternalOpenCypherParser.g:11406:1: rule__Order__Group_3__1 : rule__Order__Group_3__1__Impl ;
    public final void rule__Order__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11410:1: ( rule__Order__Group_3__1__Impl )
            // InternalOpenCypherParser.g:11411:2: rule__Order__Group_3__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Order__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group_3__1"


    // $ANTLR start "rule__Order__Group_3__1__Impl"
    // InternalOpenCypherParser.g:11417:1: rule__Order__Group_3__1__Impl : ( ( rule__Order__OrderByAssignment_3_1 ) ) ;
    public final void rule__Order__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11421:1: ( ( ( rule__Order__OrderByAssignment_3_1 ) ) )
            // InternalOpenCypherParser.g:11422:1: ( ( rule__Order__OrderByAssignment_3_1 ) )
            {
            // InternalOpenCypherParser.g:11422:1: ( ( rule__Order__OrderByAssignment_3_1 ) )
            // InternalOpenCypherParser.g:11423:2: ( rule__Order__OrderByAssignment_3_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getOrderByAssignment_3_1()); 
            }
            // InternalOpenCypherParser.g:11424:2: ( rule__Order__OrderByAssignment_3_1 )
            // InternalOpenCypherParser.g:11424:3: rule__Order__OrderByAssignment_3_1
            {
            pushFollow(FOLLOW_2);
            rule__Order__OrderByAssignment_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getOrderByAssignment_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group_3__1__Impl"


    // $ANTLR start "rule__Skip__Group__0"
    // InternalOpenCypherParser.g:11433:1: rule__Skip__Group__0 : rule__Skip__Group__0__Impl rule__Skip__Group__1 ;
    public final void rule__Skip__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11437:1: ( rule__Skip__Group__0__Impl rule__Skip__Group__1 )
            // InternalOpenCypherParser.g:11438:2: rule__Skip__Group__0__Impl rule__Skip__Group__1
            {
            pushFollow(FOLLOW_43);
            rule__Skip__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Skip__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__0"


    // $ANTLR start "rule__Skip__Group__0__Impl"
    // InternalOpenCypherParser.g:11445:1: rule__Skip__Group__0__Impl : ( SKIP ) ;
    public final void rule__Skip__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11449:1: ( ( SKIP ) )
            // InternalOpenCypherParser.g:11450:1: ( SKIP )
            {
            // InternalOpenCypherParser.g:11450:1: ( SKIP )
            // InternalOpenCypherParser.g:11451:2: SKIP
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSkipAccess().getSKIPKeyword_0()); 
            }
            match(input,SKIP,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSkipAccess().getSKIPKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__0__Impl"


    // $ANTLR start "rule__Skip__Group__1"
    // InternalOpenCypherParser.g:11460:1: rule__Skip__Group__1 : rule__Skip__Group__1__Impl ;
    public final void rule__Skip__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11464:1: ( rule__Skip__Group__1__Impl )
            // InternalOpenCypherParser.g:11465:2: rule__Skip__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Skip__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__1"


    // $ANTLR start "rule__Skip__Group__1__Impl"
    // InternalOpenCypherParser.g:11471:1: rule__Skip__Group__1__Impl : ( ( rule__Skip__SkipAssignment_1 ) ) ;
    public final void rule__Skip__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11475:1: ( ( ( rule__Skip__SkipAssignment_1 ) ) )
            // InternalOpenCypherParser.g:11476:1: ( ( rule__Skip__SkipAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:11476:1: ( ( rule__Skip__SkipAssignment_1 ) )
            // InternalOpenCypherParser.g:11477:2: ( rule__Skip__SkipAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSkipAccess().getSkipAssignment_1()); 
            }
            // InternalOpenCypherParser.g:11478:2: ( rule__Skip__SkipAssignment_1 )
            // InternalOpenCypherParser.g:11478:3: rule__Skip__SkipAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Skip__SkipAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSkipAccess().getSkipAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__1__Impl"


    // $ANTLR start "rule__Limit__Group__0"
    // InternalOpenCypherParser.g:11487:1: rule__Limit__Group__0 : rule__Limit__Group__0__Impl rule__Limit__Group__1 ;
    public final void rule__Limit__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11491:1: ( rule__Limit__Group__0__Impl rule__Limit__Group__1 )
            // InternalOpenCypherParser.g:11492:2: rule__Limit__Group__0__Impl rule__Limit__Group__1
            {
            pushFollow(FOLLOW_43);
            rule__Limit__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Limit__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Limit__Group__0"


    // $ANTLR start "rule__Limit__Group__0__Impl"
    // InternalOpenCypherParser.g:11499:1: rule__Limit__Group__0__Impl : ( LIMIT ) ;
    public final void rule__Limit__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11503:1: ( ( LIMIT ) )
            // InternalOpenCypherParser.g:11504:1: ( LIMIT )
            {
            // InternalOpenCypherParser.g:11504:1: ( LIMIT )
            // InternalOpenCypherParser.g:11505:2: LIMIT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLimitAccess().getLIMITKeyword_0()); 
            }
            match(input,LIMIT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLimitAccess().getLIMITKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Limit__Group__0__Impl"


    // $ANTLR start "rule__Limit__Group__1"
    // InternalOpenCypherParser.g:11514:1: rule__Limit__Group__1 : rule__Limit__Group__1__Impl ;
    public final void rule__Limit__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11518:1: ( rule__Limit__Group__1__Impl )
            // InternalOpenCypherParser.g:11519:2: rule__Limit__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Limit__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Limit__Group__1"


    // $ANTLR start "rule__Limit__Group__1__Impl"
    // InternalOpenCypherParser.g:11525:1: rule__Limit__Group__1__Impl : ( ( rule__Limit__LimitAssignment_1 ) ) ;
    public final void rule__Limit__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11529:1: ( ( ( rule__Limit__LimitAssignment_1 ) ) )
            // InternalOpenCypherParser.g:11530:1: ( ( rule__Limit__LimitAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:11530:1: ( ( rule__Limit__LimitAssignment_1 ) )
            // InternalOpenCypherParser.g:11531:2: ( rule__Limit__LimitAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLimitAccess().getLimitAssignment_1()); 
            }
            // InternalOpenCypherParser.g:11532:2: ( rule__Limit__LimitAssignment_1 )
            // InternalOpenCypherParser.g:11532:3: rule__Limit__LimitAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Limit__LimitAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLimitAccess().getLimitAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Limit__Group__1__Impl"


    // $ANTLR start "rule__SortItem__Group__0"
    // InternalOpenCypherParser.g:11541:1: rule__SortItem__Group__0 : rule__SortItem__Group__0__Impl rule__SortItem__Group__1 ;
    public final void rule__SortItem__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11545:1: ( rule__SortItem__Group__0__Impl rule__SortItem__Group__1 )
            // InternalOpenCypherParser.g:11546:2: rule__SortItem__Group__0__Impl rule__SortItem__Group__1
            {
            pushFollow(FOLLOW_69);
            rule__SortItem__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SortItem__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__Group__0"


    // $ANTLR start "rule__SortItem__Group__0__Impl"
    // InternalOpenCypherParser.g:11553:1: rule__SortItem__Group__0__Impl : ( ( rule__SortItem__ExpressionAssignment_0 ) ) ;
    public final void rule__SortItem__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11557:1: ( ( ( rule__SortItem__ExpressionAssignment_0 ) ) )
            // InternalOpenCypherParser.g:11558:1: ( ( rule__SortItem__ExpressionAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:11558:1: ( ( rule__SortItem__ExpressionAssignment_0 ) )
            // InternalOpenCypherParser.g:11559:2: ( rule__SortItem__ExpressionAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemAccess().getExpressionAssignment_0()); 
            }
            // InternalOpenCypherParser.g:11560:2: ( rule__SortItem__ExpressionAssignment_0 )
            // InternalOpenCypherParser.g:11560:3: rule__SortItem__ExpressionAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__SortItem__ExpressionAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemAccess().getExpressionAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__Group__0__Impl"


    // $ANTLR start "rule__SortItem__Group__1"
    // InternalOpenCypherParser.g:11568:1: rule__SortItem__Group__1 : rule__SortItem__Group__1__Impl ;
    public final void rule__SortItem__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11572:1: ( rule__SortItem__Group__1__Impl )
            // InternalOpenCypherParser.g:11573:2: rule__SortItem__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SortItem__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__Group__1"


    // $ANTLR start "rule__SortItem__Group__1__Impl"
    // InternalOpenCypherParser.g:11579:1: rule__SortItem__Group__1__Impl : ( ( rule__SortItem__SortAssignment_1 )? ) ;
    public final void rule__SortItem__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11583:1: ( ( ( rule__SortItem__SortAssignment_1 )? ) )
            // InternalOpenCypherParser.g:11584:1: ( ( rule__SortItem__SortAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:11584:1: ( ( rule__SortItem__SortAssignment_1 )? )
            // InternalOpenCypherParser.g:11585:2: ( rule__SortItem__SortAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemAccess().getSortAssignment_1()); 
            }
            // InternalOpenCypherParser.g:11586:2: ( rule__SortItem__SortAssignment_1 )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( ((LA94_0>=DESCENDING && LA94_0<=ASCENDING)||LA94_0==DESC||LA94_0==ASC) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // InternalOpenCypherParser.g:11586:3: rule__SortItem__SortAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__SortItem__SortAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemAccess().getSortAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__Group__1__Impl"


    // $ANTLR start "rule__Hint__Group_0__0"
    // InternalOpenCypherParser.g:11595:1: rule__Hint__Group_0__0 : rule__Hint__Group_0__0__Impl rule__Hint__Group_0__1 ;
    public final void rule__Hint__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11599:1: ( rule__Hint__Group_0__0__Impl rule__Hint__Group_0__1 )
            // InternalOpenCypherParser.g:11600:2: rule__Hint__Group_0__0__Impl rule__Hint__Group_0__1
            {
            pushFollow(FOLLOW_70);
            rule__Hint__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__0"


    // $ANTLR start "rule__Hint__Group_0__0__Impl"
    // InternalOpenCypherParser.g:11607:1: rule__Hint__Group_0__0__Impl : ( () ) ;
    public final void rule__Hint__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11611:1: ( ( () ) )
            // InternalOpenCypherParser.g:11612:1: ( () )
            {
            // InternalOpenCypherParser.g:11612:1: ( () )
            // InternalOpenCypherParser.g:11613:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getIndexHintAction_0_0()); 
            }
            // InternalOpenCypherParser.g:11614:2: ()
            // InternalOpenCypherParser.g:11614:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getIndexHintAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__0__Impl"


    // $ANTLR start "rule__Hint__Group_0__1"
    // InternalOpenCypherParser.g:11622:1: rule__Hint__Group_0__1 : rule__Hint__Group_0__1__Impl rule__Hint__Group_0__2 ;
    public final void rule__Hint__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11626:1: ( rule__Hint__Group_0__1__Impl rule__Hint__Group_0__2 )
            // InternalOpenCypherParser.g:11627:2: rule__Hint__Group_0__1__Impl rule__Hint__Group_0__2
            {
            pushFollow(FOLLOW_71);
            rule__Hint__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__1"


    // $ANTLR start "rule__Hint__Group_0__1__Impl"
    // InternalOpenCypherParser.g:11634:1: rule__Hint__Group_0__1__Impl : ( USING ) ;
    public final void rule__Hint__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11638:1: ( ( USING ) )
            // InternalOpenCypherParser.g:11639:1: ( USING )
            {
            // InternalOpenCypherParser.g:11639:1: ( USING )
            // InternalOpenCypherParser.g:11640:2: USING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getUSINGKeyword_0_1()); 
            }
            match(input,USING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getUSINGKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__1__Impl"


    // $ANTLR start "rule__Hint__Group_0__2"
    // InternalOpenCypherParser.g:11649:1: rule__Hint__Group_0__2 : rule__Hint__Group_0__2__Impl rule__Hint__Group_0__3 ;
    public final void rule__Hint__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11653:1: ( rule__Hint__Group_0__2__Impl rule__Hint__Group_0__3 )
            // InternalOpenCypherParser.g:11654:2: rule__Hint__Group_0__2__Impl rule__Hint__Group_0__3
            {
            pushFollow(FOLLOW_27);
            rule__Hint__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__2"


    // $ANTLR start "rule__Hint__Group_0__2__Impl"
    // InternalOpenCypherParser.g:11661:1: rule__Hint__Group_0__2__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11665:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11666:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11666:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11667:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_2()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__2__Impl"


    // $ANTLR start "rule__Hint__Group_0__3"
    // InternalOpenCypherParser.g:11676:1: rule__Hint__Group_0__3 : rule__Hint__Group_0__3__Impl rule__Hint__Group_0__4 ;
    public final void rule__Hint__Group_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11680:1: ( rule__Hint__Group_0__3__Impl rule__Hint__Group_0__4 )
            // InternalOpenCypherParser.g:11681:2: rule__Hint__Group_0__3__Impl rule__Hint__Group_0__4
            {
            pushFollow(FOLLOW_71);
            rule__Hint__Group_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__3"


    // $ANTLR start "rule__Hint__Group_0__3__Impl"
    // InternalOpenCypherParser.g:11688:1: rule__Hint__Group_0__3__Impl : ( INDEX ) ;
    public final void rule__Hint__Group_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11692:1: ( ( INDEX ) )
            // InternalOpenCypherParser.g:11693:1: ( INDEX )
            {
            // InternalOpenCypherParser.g:11693:1: ( INDEX )
            // InternalOpenCypherParser.g:11694:2: INDEX
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getINDEXKeyword_0_3()); 
            }
            match(input,INDEX,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getINDEXKeyword_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__3__Impl"


    // $ANTLR start "rule__Hint__Group_0__4"
    // InternalOpenCypherParser.g:11703:1: rule__Hint__Group_0__4 : rule__Hint__Group_0__4__Impl rule__Hint__Group_0__5 ;
    public final void rule__Hint__Group_0__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11707:1: ( rule__Hint__Group_0__4__Impl rule__Hint__Group_0__5 )
            // InternalOpenCypherParser.g:11708:2: rule__Hint__Group_0__4__Impl rule__Hint__Group_0__5
            {
            pushFollow(FOLLOW_10);
            rule__Hint__Group_0__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__4"


    // $ANTLR start "rule__Hint__Group_0__4__Impl"
    // InternalOpenCypherParser.g:11715:1: rule__Hint__Group_0__4__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_0__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11719:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11720:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11720:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11721:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_4()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__4__Impl"


    // $ANTLR start "rule__Hint__Group_0__5"
    // InternalOpenCypherParser.g:11730:1: rule__Hint__Group_0__5 : rule__Hint__Group_0__5__Impl rule__Hint__Group_0__6 ;
    public final void rule__Hint__Group_0__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11734:1: ( rule__Hint__Group_0__5__Impl rule__Hint__Group_0__6 )
            // InternalOpenCypherParser.g:11735:2: rule__Hint__Group_0__5__Impl rule__Hint__Group_0__6
            {
            pushFollow(FOLLOW_29);
            rule__Hint__Group_0__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__5"


    // $ANTLR start "rule__Hint__Group_0__5__Impl"
    // InternalOpenCypherParser.g:11742:1: rule__Hint__Group_0__5__Impl : ( ( rule__Hint__VariableAssignment_0_5 ) ) ;
    public final void rule__Hint__Group_0__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11746:1: ( ( ( rule__Hint__VariableAssignment_0_5 ) ) )
            // InternalOpenCypherParser.g:11747:1: ( ( rule__Hint__VariableAssignment_0_5 ) )
            {
            // InternalOpenCypherParser.g:11747:1: ( ( rule__Hint__VariableAssignment_0_5 ) )
            // InternalOpenCypherParser.g:11748:2: ( rule__Hint__VariableAssignment_0_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariableAssignment_0_5()); 
            }
            // InternalOpenCypherParser.g:11749:2: ( rule__Hint__VariableAssignment_0_5 )
            // InternalOpenCypherParser.g:11749:3: rule__Hint__VariableAssignment_0_5
            {
            pushFollow(FOLLOW_2);
            rule__Hint__VariableAssignment_0_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariableAssignment_0_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__5__Impl"


    // $ANTLR start "rule__Hint__Group_0__6"
    // InternalOpenCypherParser.g:11757:1: rule__Hint__Group_0__6 : rule__Hint__Group_0__6__Impl rule__Hint__Group_0__7 ;
    public final void rule__Hint__Group_0__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11761:1: ( rule__Hint__Group_0__6__Impl rule__Hint__Group_0__7 )
            // InternalOpenCypherParser.g:11762:2: rule__Hint__Group_0__6__Impl rule__Hint__Group_0__7
            {
            pushFollow(FOLLOW_71);
            rule__Hint__Group_0__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__6"


    // $ANTLR start "rule__Hint__Group_0__6__Impl"
    // InternalOpenCypherParser.g:11769:1: rule__Hint__Group_0__6__Impl : ( ( rule__Hint__NodeLabelAssignment_0_6 ) ) ;
    public final void rule__Hint__Group_0__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11773:1: ( ( ( rule__Hint__NodeLabelAssignment_0_6 ) ) )
            // InternalOpenCypherParser.g:11774:1: ( ( rule__Hint__NodeLabelAssignment_0_6 ) )
            {
            // InternalOpenCypherParser.g:11774:1: ( ( rule__Hint__NodeLabelAssignment_0_6 ) )
            // InternalOpenCypherParser.g:11775:2: ( rule__Hint__NodeLabelAssignment_0_6 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getNodeLabelAssignment_0_6()); 
            }
            // InternalOpenCypherParser.g:11776:2: ( rule__Hint__NodeLabelAssignment_0_6 )
            // InternalOpenCypherParser.g:11776:3: rule__Hint__NodeLabelAssignment_0_6
            {
            pushFollow(FOLLOW_2);
            rule__Hint__NodeLabelAssignment_0_6();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getNodeLabelAssignment_0_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__6__Impl"


    // $ANTLR start "rule__Hint__Group_0__7"
    // InternalOpenCypherParser.g:11784:1: rule__Hint__Group_0__7 : rule__Hint__Group_0__7__Impl rule__Hint__Group_0__8 ;
    public final void rule__Hint__Group_0__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11788:1: ( rule__Hint__Group_0__7__Impl rule__Hint__Group_0__8 )
            // InternalOpenCypherParser.g:11789:2: rule__Hint__Group_0__7__Impl rule__Hint__Group_0__8
            {
            pushFollow(FOLLOW_30);
            rule__Hint__Group_0__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__7"


    // $ANTLR start "rule__Hint__Group_0__7__Impl"
    // InternalOpenCypherParser.g:11796:1: rule__Hint__Group_0__7__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_0__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11800:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11801:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11801:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11802:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_7()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__7__Impl"


    // $ANTLR start "rule__Hint__Group_0__8"
    // InternalOpenCypherParser.g:11811:1: rule__Hint__Group_0__8 : rule__Hint__Group_0__8__Impl rule__Hint__Group_0__9 ;
    public final void rule__Hint__Group_0__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11815:1: ( rule__Hint__Group_0__8__Impl rule__Hint__Group_0__9 )
            // InternalOpenCypherParser.g:11816:2: rule__Hint__Group_0__8__Impl rule__Hint__Group_0__9
            {
            pushFollow(FOLLOW_10);
            rule__Hint__Group_0__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__8"


    // $ANTLR start "rule__Hint__Group_0__8__Impl"
    // InternalOpenCypherParser.g:11823:1: rule__Hint__Group_0__8__Impl : ( LeftParenthesis ) ;
    public final void rule__Hint__Group_0__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11827:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:11828:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:11828:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:11829:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getLeftParenthesisKeyword_0_8()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getLeftParenthesisKeyword_0_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__8__Impl"


    // $ANTLR start "rule__Hint__Group_0__9"
    // InternalOpenCypherParser.g:11838:1: rule__Hint__Group_0__9 : rule__Hint__Group_0__9__Impl rule__Hint__Group_0__10 ;
    public final void rule__Hint__Group_0__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11842:1: ( rule__Hint__Group_0__9__Impl rule__Hint__Group_0__10 )
            // InternalOpenCypherParser.g:11843:2: rule__Hint__Group_0__9__Impl rule__Hint__Group_0__10
            {
            pushFollow(FOLLOW_31);
            rule__Hint__Group_0__9__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__10();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__9"


    // $ANTLR start "rule__Hint__Group_0__9__Impl"
    // InternalOpenCypherParser.g:11850:1: rule__Hint__Group_0__9__Impl : ( ( rule__Hint__PropertyKeyNameAssignment_0_9 ) ) ;
    public final void rule__Hint__Group_0__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11854:1: ( ( ( rule__Hint__PropertyKeyNameAssignment_0_9 ) ) )
            // InternalOpenCypherParser.g:11855:1: ( ( rule__Hint__PropertyKeyNameAssignment_0_9 ) )
            {
            // InternalOpenCypherParser.g:11855:1: ( ( rule__Hint__PropertyKeyNameAssignment_0_9 ) )
            // InternalOpenCypherParser.g:11856:2: ( rule__Hint__PropertyKeyNameAssignment_0_9 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getPropertyKeyNameAssignment_0_9()); 
            }
            // InternalOpenCypherParser.g:11857:2: ( rule__Hint__PropertyKeyNameAssignment_0_9 )
            // InternalOpenCypherParser.g:11857:3: rule__Hint__PropertyKeyNameAssignment_0_9
            {
            pushFollow(FOLLOW_2);
            rule__Hint__PropertyKeyNameAssignment_0_9();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getPropertyKeyNameAssignment_0_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__9__Impl"


    // $ANTLR start "rule__Hint__Group_0__10"
    // InternalOpenCypherParser.g:11865:1: rule__Hint__Group_0__10 : rule__Hint__Group_0__10__Impl ;
    public final void rule__Hint__Group_0__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11869:1: ( rule__Hint__Group_0__10__Impl )
            // InternalOpenCypherParser.g:11870:2: rule__Hint__Group_0__10__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__10__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__10"


    // $ANTLR start "rule__Hint__Group_0__10__Impl"
    // InternalOpenCypherParser.g:11876:1: rule__Hint__Group_0__10__Impl : ( RightParenthesis ) ;
    public final void rule__Hint__Group_0__10__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11880:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:11881:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:11881:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:11882:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getRightParenthesisKeyword_0_10()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getRightParenthesisKeyword_0_10()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__10__Impl"


    // $ANTLR start "rule__Hint__Group_1__0"
    // InternalOpenCypherParser.g:11892:1: rule__Hint__Group_1__0 : rule__Hint__Group_1__0__Impl rule__Hint__Group_1__1 ;
    public final void rule__Hint__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11896:1: ( rule__Hint__Group_1__0__Impl rule__Hint__Group_1__1 )
            // InternalOpenCypherParser.g:11897:2: rule__Hint__Group_1__0__Impl rule__Hint__Group_1__1
            {
            pushFollow(FOLLOW_70);
            rule__Hint__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1__0"


    // $ANTLR start "rule__Hint__Group_1__0__Impl"
    // InternalOpenCypherParser.g:11904:1: rule__Hint__Group_1__0__Impl : ( () ) ;
    public final void rule__Hint__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11908:1: ( ( () ) )
            // InternalOpenCypherParser.g:11909:1: ( () )
            {
            // InternalOpenCypherParser.g:11909:1: ( () )
            // InternalOpenCypherParser.g:11910:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getJoinHintAction_1_0()); 
            }
            // InternalOpenCypherParser.g:11911:2: ()
            // InternalOpenCypherParser.g:11911:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getJoinHintAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1__0__Impl"


    // $ANTLR start "rule__Hint__Group_1__1"
    // InternalOpenCypherParser.g:11919:1: rule__Hint__Group_1__1 : rule__Hint__Group_1__1__Impl ;
    public final void rule__Hint__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11923:1: ( rule__Hint__Group_1__1__Impl )
            // InternalOpenCypherParser.g:11924:2: rule__Hint__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1__1"


    // $ANTLR start "rule__Hint__Group_1__1__Impl"
    // InternalOpenCypherParser.g:11930:1: rule__Hint__Group_1__1__Impl : ( ( rule__Hint__Group_1_1__0 ) ) ;
    public final void rule__Hint__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11934:1: ( ( ( rule__Hint__Group_1_1__0 ) ) )
            // InternalOpenCypherParser.g:11935:1: ( ( rule__Hint__Group_1_1__0 ) )
            {
            // InternalOpenCypherParser.g:11935:1: ( ( rule__Hint__Group_1_1__0 ) )
            // InternalOpenCypherParser.g:11936:2: ( rule__Hint__Group_1_1__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getGroup_1_1()); 
            }
            // InternalOpenCypherParser.g:11937:2: ( rule__Hint__Group_1_1__0 )
            // InternalOpenCypherParser.g:11937:3: rule__Hint__Group_1_1__0
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getGroup_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1__1__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__0"
    // InternalOpenCypherParser.g:11946:1: rule__Hint__Group_1_1__0 : rule__Hint__Group_1_1__0__Impl rule__Hint__Group_1_1__1 ;
    public final void rule__Hint__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11950:1: ( rule__Hint__Group_1_1__0__Impl rule__Hint__Group_1_1__1 )
            // InternalOpenCypherParser.g:11951:2: rule__Hint__Group_1_1__0__Impl rule__Hint__Group_1_1__1
            {
            pushFollow(FOLLOW_71);
            rule__Hint__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__0"


    // $ANTLR start "rule__Hint__Group_1_1__0__Impl"
    // InternalOpenCypherParser.g:11958:1: rule__Hint__Group_1_1__0__Impl : ( USING ) ;
    public final void rule__Hint__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11962:1: ( ( USING ) )
            // InternalOpenCypherParser.g:11963:1: ( USING )
            {
            // InternalOpenCypherParser.g:11963:1: ( USING )
            // InternalOpenCypherParser.g:11964:2: USING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getUSINGKeyword_1_1_0()); 
            }
            match(input,USING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getUSINGKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__0__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__1"
    // InternalOpenCypherParser.g:11973:1: rule__Hint__Group_1_1__1 : rule__Hint__Group_1_1__1__Impl rule__Hint__Group_1_1__2 ;
    public final void rule__Hint__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11977:1: ( rule__Hint__Group_1_1__1__Impl rule__Hint__Group_1_1__2 )
            // InternalOpenCypherParser.g:11978:2: rule__Hint__Group_1_1__1__Impl rule__Hint__Group_1_1__2
            {
            pushFollow(FOLLOW_72);
            rule__Hint__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__1"


    // $ANTLR start "rule__Hint__Group_1_1__1__Impl"
    // InternalOpenCypherParser.g:11985:1: rule__Hint__Group_1_1__1__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11989:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11990:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11990:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11991:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_1()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__1__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__2"
    // InternalOpenCypherParser.g:12000:1: rule__Hint__Group_1_1__2 : rule__Hint__Group_1_1__2__Impl rule__Hint__Group_1_1__3 ;
    public final void rule__Hint__Group_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12004:1: ( rule__Hint__Group_1_1__2__Impl rule__Hint__Group_1_1__3 )
            // InternalOpenCypherParser.g:12005:2: rule__Hint__Group_1_1__2__Impl rule__Hint__Group_1_1__3
            {
            pushFollow(FOLLOW_71);
            rule__Hint__Group_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__2"


    // $ANTLR start "rule__Hint__Group_1_1__2__Impl"
    // InternalOpenCypherParser.g:12012:1: rule__Hint__Group_1_1__2__Impl : ( JOIN ) ;
    public final void rule__Hint__Group_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12016:1: ( ( JOIN ) )
            // InternalOpenCypherParser.g:12017:1: ( JOIN )
            {
            // InternalOpenCypherParser.g:12017:1: ( JOIN )
            // InternalOpenCypherParser.g:12018:2: JOIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getJOINKeyword_1_1_2()); 
            }
            match(input,JOIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getJOINKeyword_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__2__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__3"
    // InternalOpenCypherParser.g:12027:1: rule__Hint__Group_1_1__3 : rule__Hint__Group_1_1__3__Impl rule__Hint__Group_1_1__4 ;
    public final void rule__Hint__Group_1_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12031:1: ( rule__Hint__Group_1_1__3__Impl rule__Hint__Group_1_1__4 )
            // InternalOpenCypherParser.g:12032:2: rule__Hint__Group_1_1__3__Impl rule__Hint__Group_1_1__4
            {
            pushFollow(FOLLOW_28);
            rule__Hint__Group_1_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__3"


    // $ANTLR start "rule__Hint__Group_1_1__3__Impl"
    // InternalOpenCypherParser.g:12039:1: rule__Hint__Group_1_1__3__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_1_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12043:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:12044:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:12044:1: ( RULE_WS )
            // InternalOpenCypherParser.g:12045:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_3()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__3__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__4"
    // InternalOpenCypherParser.g:12054:1: rule__Hint__Group_1_1__4 : rule__Hint__Group_1_1__4__Impl rule__Hint__Group_1_1__5 ;
    public final void rule__Hint__Group_1_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12058:1: ( rule__Hint__Group_1_1__4__Impl rule__Hint__Group_1_1__5 )
            // InternalOpenCypherParser.g:12059:2: rule__Hint__Group_1_1__4__Impl rule__Hint__Group_1_1__5
            {
            pushFollow(FOLLOW_10);
            rule__Hint__Group_1_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__4"


    // $ANTLR start "rule__Hint__Group_1_1__4__Impl"
    // InternalOpenCypherParser.g:12066:1: rule__Hint__Group_1_1__4__Impl : ( ON ) ;
    public final void rule__Hint__Group_1_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12070:1: ( ( ON ) )
            // InternalOpenCypherParser.g:12071:1: ( ON )
            {
            // InternalOpenCypherParser.g:12071:1: ( ON )
            // InternalOpenCypherParser.g:12072:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getONKeyword_1_1_4()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getONKeyword_1_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__4__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__5"
    // InternalOpenCypherParser.g:12081:1: rule__Hint__Group_1_1__5 : rule__Hint__Group_1_1__5__Impl rule__Hint__Group_1_1__6 ;
    public final void rule__Hint__Group_1_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12085:1: ( rule__Hint__Group_1_1__5__Impl rule__Hint__Group_1_1__6 )
            // InternalOpenCypherParser.g:12086:2: rule__Hint__Group_1_1__5__Impl rule__Hint__Group_1_1__6
            {
            pushFollow(FOLLOW_55);
            rule__Hint__Group_1_1__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__5"


    // $ANTLR start "rule__Hint__Group_1_1__5__Impl"
    // InternalOpenCypherParser.g:12093:1: rule__Hint__Group_1_1__5__Impl : ( ( rule__Hint__VariablesAssignment_1_1_5 ) ) ;
    public final void rule__Hint__Group_1_1__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12097:1: ( ( ( rule__Hint__VariablesAssignment_1_1_5 ) ) )
            // InternalOpenCypherParser.g:12098:1: ( ( rule__Hint__VariablesAssignment_1_1_5 ) )
            {
            // InternalOpenCypherParser.g:12098:1: ( ( rule__Hint__VariablesAssignment_1_1_5 ) )
            // InternalOpenCypherParser.g:12099:2: ( rule__Hint__VariablesAssignment_1_1_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariablesAssignment_1_1_5()); 
            }
            // InternalOpenCypherParser.g:12100:2: ( rule__Hint__VariablesAssignment_1_1_5 )
            // InternalOpenCypherParser.g:12100:3: rule__Hint__VariablesAssignment_1_1_5
            {
            pushFollow(FOLLOW_2);
            rule__Hint__VariablesAssignment_1_1_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariablesAssignment_1_1_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__5__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__6"
    // InternalOpenCypherParser.g:12108:1: rule__Hint__Group_1_1__6 : rule__Hint__Group_1_1__6__Impl ;
    public final void rule__Hint__Group_1_1__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12112:1: ( rule__Hint__Group_1_1__6__Impl )
            // InternalOpenCypherParser.g:12113:2: rule__Hint__Group_1_1__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__6"


    // $ANTLR start "rule__Hint__Group_1_1__6__Impl"
    // InternalOpenCypherParser.g:12119:1: rule__Hint__Group_1_1__6__Impl : ( ( rule__Hint__Group_1_1_6__0 )* ) ;
    public final void rule__Hint__Group_1_1__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12123:1: ( ( ( rule__Hint__Group_1_1_6__0 )* ) )
            // InternalOpenCypherParser.g:12124:1: ( ( rule__Hint__Group_1_1_6__0 )* )
            {
            // InternalOpenCypherParser.g:12124:1: ( ( rule__Hint__Group_1_1_6__0 )* )
            // InternalOpenCypherParser.g:12125:2: ( rule__Hint__Group_1_1_6__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getGroup_1_1_6()); 
            }
            // InternalOpenCypherParser.g:12126:2: ( rule__Hint__Group_1_1_6__0 )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==Comma) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // InternalOpenCypherParser.g:12126:3: rule__Hint__Group_1_1_6__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__Hint__Group_1_1_6__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getGroup_1_1_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__6__Impl"


    // $ANTLR start "rule__Hint__Group_1_1_6__0"
    // InternalOpenCypherParser.g:12135:1: rule__Hint__Group_1_1_6__0 : rule__Hint__Group_1_1_6__0__Impl rule__Hint__Group_1_1_6__1 ;
    public final void rule__Hint__Group_1_1_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12139:1: ( rule__Hint__Group_1_1_6__0__Impl rule__Hint__Group_1_1_6__1 )
            // InternalOpenCypherParser.g:12140:2: rule__Hint__Group_1_1_6__0__Impl rule__Hint__Group_1_1_6__1
            {
            pushFollow(FOLLOW_10);
            rule__Hint__Group_1_1_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1_6__0"


    // $ANTLR start "rule__Hint__Group_1_1_6__0__Impl"
    // InternalOpenCypherParser.g:12147:1: rule__Hint__Group_1_1_6__0__Impl : ( Comma ) ;
    public final void rule__Hint__Group_1_1_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12151:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:12152:1: ( Comma )
            {
            // InternalOpenCypherParser.g:12152:1: ( Comma )
            // InternalOpenCypherParser.g:12153:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getCommaKeyword_1_1_6_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getCommaKeyword_1_1_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1_6__0__Impl"


    // $ANTLR start "rule__Hint__Group_1_1_6__1"
    // InternalOpenCypherParser.g:12162:1: rule__Hint__Group_1_1_6__1 : rule__Hint__Group_1_1_6__1__Impl ;
    public final void rule__Hint__Group_1_1_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12166:1: ( rule__Hint__Group_1_1_6__1__Impl )
            // InternalOpenCypherParser.g:12167:2: rule__Hint__Group_1_1_6__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1_6__1"


    // $ANTLR start "rule__Hint__Group_1_1_6__1__Impl"
    // InternalOpenCypherParser.g:12173:1: rule__Hint__Group_1_1_6__1__Impl : ( ( rule__Hint__VariablesAssignment_1_1_6_1 ) ) ;
    public final void rule__Hint__Group_1_1_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12177:1: ( ( ( rule__Hint__VariablesAssignment_1_1_6_1 ) ) )
            // InternalOpenCypherParser.g:12178:1: ( ( rule__Hint__VariablesAssignment_1_1_6_1 ) )
            {
            // InternalOpenCypherParser.g:12178:1: ( ( rule__Hint__VariablesAssignment_1_1_6_1 ) )
            // InternalOpenCypherParser.g:12179:2: ( rule__Hint__VariablesAssignment_1_1_6_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariablesAssignment_1_1_6_1()); 
            }
            // InternalOpenCypherParser.g:12180:2: ( rule__Hint__VariablesAssignment_1_1_6_1 )
            // InternalOpenCypherParser.g:12180:3: rule__Hint__VariablesAssignment_1_1_6_1
            {
            pushFollow(FOLLOW_2);
            rule__Hint__VariablesAssignment_1_1_6_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariablesAssignment_1_1_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1_6__1__Impl"


    // $ANTLR start "rule__Hint__Group_2__0"
    // InternalOpenCypherParser.g:12189:1: rule__Hint__Group_2__0 : rule__Hint__Group_2__0__Impl rule__Hint__Group_2__1 ;
    public final void rule__Hint__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12193:1: ( rule__Hint__Group_2__0__Impl rule__Hint__Group_2__1 )
            // InternalOpenCypherParser.g:12194:2: rule__Hint__Group_2__0__Impl rule__Hint__Group_2__1
            {
            pushFollow(FOLLOW_70);
            rule__Hint__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2__0"


    // $ANTLR start "rule__Hint__Group_2__0__Impl"
    // InternalOpenCypherParser.g:12201:1: rule__Hint__Group_2__0__Impl : ( () ) ;
    public final void rule__Hint__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12205:1: ( ( () ) )
            // InternalOpenCypherParser.g:12206:1: ( () )
            {
            // InternalOpenCypherParser.g:12206:1: ( () )
            // InternalOpenCypherParser.g:12207:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getScanHintAction_2_0()); 
            }
            // InternalOpenCypherParser.g:12208:2: ()
            // InternalOpenCypherParser.g:12208:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getScanHintAction_2_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2__0__Impl"


    // $ANTLR start "rule__Hint__Group_2__1"
    // InternalOpenCypherParser.g:12216:1: rule__Hint__Group_2__1 : rule__Hint__Group_2__1__Impl ;
    public final void rule__Hint__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12220:1: ( rule__Hint__Group_2__1__Impl )
            // InternalOpenCypherParser.g:12221:2: rule__Hint__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2__1"


    // $ANTLR start "rule__Hint__Group_2__1__Impl"
    // InternalOpenCypherParser.g:12227:1: rule__Hint__Group_2__1__Impl : ( ( rule__Hint__Group_2_1__0 ) ) ;
    public final void rule__Hint__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12231:1: ( ( ( rule__Hint__Group_2_1__0 ) ) )
            // InternalOpenCypherParser.g:12232:1: ( ( rule__Hint__Group_2_1__0 ) )
            {
            // InternalOpenCypherParser.g:12232:1: ( ( rule__Hint__Group_2_1__0 ) )
            // InternalOpenCypherParser.g:12233:2: ( rule__Hint__Group_2_1__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getGroup_2_1()); 
            }
            // InternalOpenCypherParser.g:12234:2: ( rule__Hint__Group_2_1__0 )
            // InternalOpenCypherParser.g:12234:3: rule__Hint__Group_2_1__0
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2__1__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__0"
    // InternalOpenCypherParser.g:12243:1: rule__Hint__Group_2_1__0 : rule__Hint__Group_2_1__0__Impl rule__Hint__Group_2_1__1 ;
    public final void rule__Hint__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12247:1: ( rule__Hint__Group_2_1__0__Impl rule__Hint__Group_2_1__1 )
            // InternalOpenCypherParser.g:12248:2: rule__Hint__Group_2_1__0__Impl rule__Hint__Group_2_1__1
            {
            pushFollow(FOLLOW_71);
            rule__Hint__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__0"


    // $ANTLR start "rule__Hint__Group_2_1__0__Impl"
    // InternalOpenCypherParser.g:12255:1: rule__Hint__Group_2_1__0__Impl : ( USING ) ;
    public final void rule__Hint__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12259:1: ( ( USING ) )
            // InternalOpenCypherParser.g:12260:1: ( USING )
            {
            // InternalOpenCypherParser.g:12260:1: ( USING )
            // InternalOpenCypherParser.g:12261:2: USING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getUSINGKeyword_2_1_0()); 
            }
            match(input,USING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getUSINGKeyword_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__0__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__1"
    // InternalOpenCypherParser.g:12270:1: rule__Hint__Group_2_1__1 : rule__Hint__Group_2_1__1__Impl rule__Hint__Group_2_1__2 ;
    public final void rule__Hint__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12274:1: ( rule__Hint__Group_2_1__1__Impl rule__Hint__Group_2_1__2 )
            // InternalOpenCypherParser.g:12275:2: rule__Hint__Group_2_1__1__Impl rule__Hint__Group_2_1__2
            {
            pushFollow(FOLLOW_73);
            rule__Hint__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__1"


    // $ANTLR start "rule__Hint__Group_2_1__1__Impl"
    // InternalOpenCypherParser.g:12282:1: rule__Hint__Group_2_1__1__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12286:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:12287:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:12287:1: ( RULE_WS )
            // InternalOpenCypherParser.g:12288:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_1()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__1__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__2"
    // InternalOpenCypherParser.g:12297:1: rule__Hint__Group_2_1__2 : rule__Hint__Group_2_1__2__Impl rule__Hint__Group_2_1__3 ;
    public final void rule__Hint__Group_2_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12301:1: ( rule__Hint__Group_2_1__2__Impl rule__Hint__Group_2_1__3 )
            // InternalOpenCypherParser.g:12302:2: rule__Hint__Group_2_1__2__Impl rule__Hint__Group_2_1__3
            {
            pushFollow(FOLLOW_71);
            rule__Hint__Group_2_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__2"


    // $ANTLR start "rule__Hint__Group_2_1__2__Impl"
    // InternalOpenCypherParser.g:12309:1: rule__Hint__Group_2_1__2__Impl : ( SCAN ) ;
    public final void rule__Hint__Group_2_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12313:1: ( ( SCAN ) )
            // InternalOpenCypherParser.g:12314:1: ( SCAN )
            {
            // InternalOpenCypherParser.g:12314:1: ( SCAN )
            // InternalOpenCypherParser.g:12315:2: SCAN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getSCANKeyword_2_1_2()); 
            }
            match(input,SCAN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getSCANKeyword_2_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__2__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__3"
    // InternalOpenCypherParser.g:12324:1: rule__Hint__Group_2_1__3 : rule__Hint__Group_2_1__3__Impl rule__Hint__Group_2_1__4 ;
    public final void rule__Hint__Group_2_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12328:1: ( rule__Hint__Group_2_1__3__Impl rule__Hint__Group_2_1__4 )
            // InternalOpenCypherParser.g:12329:2: rule__Hint__Group_2_1__3__Impl rule__Hint__Group_2_1__4
            {
            pushFollow(FOLLOW_10);
            rule__Hint__Group_2_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__3"


    // $ANTLR start "rule__Hint__Group_2_1__3__Impl"
    // InternalOpenCypherParser.g:12336:1: rule__Hint__Group_2_1__3__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_2_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12340:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:12341:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:12341:1: ( RULE_WS )
            // InternalOpenCypherParser.g:12342:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_3()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__3__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__4"
    // InternalOpenCypherParser.g:12351:1: rule__Hint__Group_2_1__4 : rule__Hint__Group_2_1__4__Impl rule__Hint__Group_2_1__5 ;
    public final void rule__Hint__Group_2_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12355:1: ( rule__Hint__Group_2_1__4__Impl rule__Hint__Group_2_1__5 )
            // InternalOpenCypherParser.g:12356:2: rule__Hint__Group_2_1__4__Impl rule__Hint__Group_2_1__5
            {
            pushFollow(FOLLOW_29);
            rule__Hint__Group_2_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__4"


    // $ANTLR start "rule__Hint__Group_2_1__4__Impl"
    // InternalOpenCypherParser.g:12363:1: rule__Hint__Group_2_1__4__Impl : ( ( rule__Hint__VariableAssignment_2_1_4 ) ) ;
    public final void rule__Hint__Group_2_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12367:1: ( ( ( rule__Hint__VariableAssignment_2_1_4 ) ) )
            // InternalOpenCypherParser.g:12368:1: ( ( rule__Hint__VariableAssignment_2_1_4 ) )
            {
            // InternalOpenCypherParser.g:12368:1: ( ( rule__Hint__VariableAssignment_2_1_4 ) )
            // InternalOpenCypherParser.g:12369:2: ( rule__Hint__VariableAssignment_2_1_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariableAssignment_2_1_4()); 
            }
            // InternalOpenCypherParser.g:12370:2: ( rule__Hint__VariableAssignment_2_1_4 )
            // InternalOpenCypherParser.g:12370:3: rule__Hint__VariableAssignment_2_1_4
            {
            pushFollow(FOLLOW_2);
            rule__Hint__VariableAssignment_2_1_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariableAssignment_2_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__4__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__5"
    // InternalOpenCypherParser.g:12378:1: rule__Hint__Group_2_1__5 : rule__Hint__Group_2_1__5__Impl ;
    public final void rule__Hint__Group_2_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12382:1: ( rule__Hint__Group_2_1__5__Impl )
            // InternalOpenCypherParser.g:12383:2: rule__Hint__Group_2_1__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__5"


    // $ANTLR start "rule__Hint__Group_2_1__5__Impl"
    // InternalOpenCypherParser.g:12389:1: rule__Hint__Group_2_1__5__Impl : ( ( rule__Hint__NodeLabelAssignment_2_1_5 ) ) ;
    public final void rule__Hint__Group_2_1__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12393:1: ( ( ( rule__Hint__NodeLabelAssignment_2_1_5 ) ) )
            // InternalOpenCypherParser.g:12394:1: ( ( rule__Hint__NodeLabelAssignment_2_1_5 ) )
            {
            // InternalOpenCypherParser.g:12394:1: ( ( rule__Hint__NodeLabelAssignment_2_1_5 ) )
            // InternalOpenCypherParser.g:12395:2: ( rule__Hint__NodeLabelAssignment_2_1_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getNodeLabelAssignment_2_1_5()); 
            }
            // InternalOpenCypherParser.g:12396:2: ( rule__Hint__NodeLabelAssignment_2_1_5 )
            // InternalOpenCypherParser.g:12396:3: rule__Hint__NodeLabelAssignment_2_1_5
            {
            pushFollow(FOLLOW_2);
            rule__Hint__NodeLabelAssignment_2_1_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getNodeLabelAssignment_2_1_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__5__Impl"


    // $ANTLR start "rule__Start__Group__0"
    // InternalOpenCypherParser.g:12405:1: rule__Start__Group__0 : rule__Start__Group__0__Impl rule__Start__Group__1 ;
    public final void rule__Start__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12409:1: ( rule__Start__Group__0__Impl rule__Start__Group__1 )
            // InternalOpenCypherParser.g:12410:2: rule__Start__Group__0__Impl rule__Start__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__Start__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Start__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__0"


    // $ANTLR start "rule__Start__Group__0__Impl"
    // InternalOpenCypherParser.g:12417:1: rule__Start__Group__0__Impl : ( START ) ;
    public final void rule__Start__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12421:1: ( ( START ) )
            // InternalOpenCypherParser.g:12422:1: ( START )
            {
            // InternalOpenCypherParser.g:12422:1: ( START )
            // InternalOpenCypherParser.g:12423:2: START
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getSTARTKeyword_0()); 
            }
            match(input,START,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getSTARTKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__0__Impl"


    // $ANTLR start "rule__Start__Group__1"
    // InternalOpenCypherParser.g:12432:1: rule__Start__Group__1 : rule__Start__Group__1__Impl rule__Start__Group__2 ;
    public final void rule__Start__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12436:1: ( rule__Start__Group__1__Impl rule__Start__Group__2 )
            // InternalOpenCypherParser.g:12437:2: rule__Start__Group__1__Impl rule__Start__Group__2
            {
            pushFollow(FOLLOW_74);
            rule__Start__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Start__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__1"


    // $ANTLR start "rule__Start__Group__1__Impl"
    // InternalOpenCypherParser.g:12444:1: rule__Start__Group__1__Impl : ( ( rule__Start__StartPointAssignment_1 ) ) ;
    public final void rule__Start__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12448:1: ( ( ( rule__Start__StartPointAssignment_1 ) ) )
            // InternalOpenCypherParser.g:12449:1: ( ( rule__Start__StartPointAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:12449:1: ( ( rule__Start__StartPointAssignment_1 ) )
            // InternalOpenCypherParser.g:12450:2: ( rule__Start__StartPointAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getStartPointAssignment_1()); 
            }
            // InternalOpenCypherParser.g:12451:2: ( rule__Start__StartPointAssignment_1 )
            // InternalOpenCypherParser.g:12451:3: rule__Start__StartPointAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Start__StartPointAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getStartPointAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__1__Impl"


    // $ANTLR start "rule__Start__Group__2"
    // InternalOpenCypherParser.g:12459:1: rule__Start__Group__2 : rule__Start__Group__2__Impl rule__Start__Group__3 ;
    public final void rule__Start__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12463:1: ( rule__Start__Group__2__Impl rule__Start__Group__3 )
            // InternalOpenCypherParser.g:12464:2: rule__Start__Group__2__Impl rule__Start__Group__3
            {
            pushFollow(FOLLOW_74);
            rule__Start__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Start__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__2"


    // $ANTLR start "rule__Start__Group__2__Impl"
    // InternalOpenCypherParser.g:12471:1: rule__Start__Group__2__Impl : ( ( rule__Start__Group_2__0 )* ) ;
    public final void rule__Start__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12475:1: ( ( ( rule__Start__Group_2__0 )* ) )
            // InternalOpenCypherParser.g:12476:1: ( ( rule__Start__Group_2__0 )* )
            {
            // InternalOpenCypherParser.g:12476:1: ( ( rule__Start__Group_2__0 )* )
            // InternalOpenCypherParser.g:12477:2: ( rule__Start__Group_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:12478:2: ( rule__Start__Group_2__0 )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==Comma) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // InternalOpenCypherParser.g:12478:3: rule__Start__Group_2__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__Start__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__2__Impl"


    // $ANTLR start "rule__Start__Group__3"
    // InternalOpenCypherParser.g:12486:1: rule__Start__Group__3 : rule__Start__Group__3__Impl ;
    public final void rule__Start__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12490:1: ( rule__Start__Group__3__Impl )
            // InternalOpenCypherParser.g:12491:2: rule__Start__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Start__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__3"


    // $ANTLR start "rule__Start__Group__3__Impl"
    // InternalOpenCypherParser.g:12497:1: rule__Start__Group__3__Impl : ( ( rule__Start__WhereAssignment_3 )? ) ;
    public final void rule__Start__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12501:1: ( ( ( rule__Start__WhereAssignment_3 )? ) )
            // InternalOpenCypherParser.g:12502:1: ( ( rule__Start__WhereAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:12502:1: ( ( rule__Start__WhereAssignment_3 )? )
            // InternalOpenCypherParser.g:12503:2: ( rule__Start__WhereAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getWhereAssignment_3()); 
            }
            // InternalOpenCypherParser.g:12504:2: ( rule__Start__WhereAssignment_3 )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==WHERE) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // InternalOpenCypherParser.g:12504:3: rule__Start__WhereAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__Start__WhereAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getWhereAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__3__Impl"


    // $ANTLR start "rule__Start__Group_2__0"
    // InternalOpenCypherParser.g:12513:1: rule__Start__Group_2__0 : rule__Start__Group_2__0__Impl rule__Start__Group_2__1 ;
    public final void rule__Start__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12517:1: ( rule__Start__Group_2__0__Impl rule__Start__Group_2__1 )
            // InternalOpenCypherParser.g:12518:2: rule__Start__Group_2__0__Impl rule__Start__Group_2__1
            {
            pushFollow(FOLLOW_10);
            rule__Start__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Start__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group_2__0"


    // $ANTLR start "rule__Start__Group_2__0__Impl"
    // InternalOpenCypherParser.g:12525:1: rule__Start__Group_2__0__Impl : ( Comma ) ;
    public final void rule__Start__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12529:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:12530:1: ( Comma )
            {
            // InternalOpenCypherParser.g:12530:1: ( Comma )
            // InternalOpenCypherParser.g:12531:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getCommaKeyword_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getCommaKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group_2__0__Impl"


    // $ANTLR start "rule__Start__Group_2__1"
    // InternalOpenCypherParser.g:12540:1: rule__Start__Group_2__1 : rule__Start__Group_2__1__Impl ;
    public final void rule__Start__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12544:1: ( rule__Start__Group_2__1__Impl )
            // InternalOpenCypherParser.g:12545:2: rule__Start__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Start__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group_2__1"


    // $ANTLR start "rule__Start__Group_2__1__Impl"
    // InternalOpenCypherParser.g:12551:1: rule__Start__Group_2__1__Impl : ( ( rule__Start__StartPointAssignment_2_1 ) ) ;
    public final void rule__Start__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12555:1: ( ( ( rule__Start__StartPointAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:12556:1: ( ( rule__Start__StartPointAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:12556:1: ( ( rule__Start__StartPointAssignment_2_1 ) )
            // InternalOpenCypherParser.g:12557:2: ( rule__Start__StartPointAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getStartPointAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:12558:2: ( rule__Start__StartPointAssignment_2_1 )
            // InternalOpenCypherParser.g:12558:3: rule__Start__StartPointAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__Start__StartPointAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getStartPointAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group_2__1__Impl"


    // $ANTLR start "rule__StartPoint__Group__0"
    // InternalOpenCypherParser.g:12567:1: rule__StartPoint__Group__0 : rule__StartPoint__Group__0__Impl rule__StartPoint__Group__1 ;
    public final void rule__StartPoint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12571:1: ( rule__StartPoint__Group__0__Impl rule__StartPoint__Group__1 )
            // InternalOpenCypherParser.g:12572:2: rule__StartPoint__Group__0__Impl rule__StartPoint__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__StartPoint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StartPoint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__0"


    // $ANTLR start "rule__StartPoint__Group__0__Impl"
    // InternalOpenCypherParser.g:12579:1: rule__StartPoint__Group__0__Impl : ( ( rule__StartPoint__VariableAssignment_0 ) ) ;
    public final void rule__StartPoint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12583:1: ( ( ( rule__StartPoint__VariableAssignment_0 ) ) )
            // InternalOpenCypherParser.g:12584:1: ( ( rule__StartPoint__VariableAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:12584:1: ( ( rule__StartPoint__VariableAssignment_0 ) )
            // InternalOpenCypherParser.g:12585:2: ( rule__StartPoint__VariableAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getVariableAssignment_0()); 
            }
            // InternalOpenCypherParser.g:12586:2: ( rule__StartPoint__VariableAssignment_0 )
            // InternalOpenCypherParser.g:12586:3: rule__StartPoint__VariableAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__StartPoint__VariableAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getVariableAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__0__Impl"


    // $ANTLR start "rule__StartPoint__Group__1"
    // InternalOpenCypherParser.g:12594:1: rule__StartPoint__Group__1 : rule__StartPoint__Group__1__Impl rule__StartPoint__Group__2 ;
    public final void rule__StartPoint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12598:1: ( rule__StartPoint__Group__1__Impl rule__StartPoint__Group__2 )
            // InternalOpenCypherParser.g:12599:2: rule__StartPoint__Group__1__Impl rule__StartPoint__Group__2
            {
            pushFollow(FOLLOW_75);
            rule__StartPoint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StartPoint__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__1"


    // $ANTLR start "rule__StartPoint__Group__1__Impl"
    // InternalOpenCypherParser.g:12606:1: rule__StartPoint__Group__1__Impl : ( EqualsSign ) ;
    public final void rule__StartPoint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12610:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:12611:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:12611:1: ( EqualsSign )
            // InternalOpenCypherParser.g:12612:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getEqualsSignKeyword_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getEqualsSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__1__Impl"


    // $ANTLR start "rule__StartPoint__Group__2"
    // InternalOpenCypherParser.g:12621:1: rule__StartPoint__Group__2 : rule__StartPoint__Group__2__Impl ;
    public final void rule__StartPoint__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12625:1: ( rule__StartPoint__Group__2__Impl )
            // InternalOpenCypherParser.g:12626:2: rule__StartPoint__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StartPoint__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__2"


    // $ANTLR start "rule__StartPoint__Group__2__Impl"
    // InternalOpenCypherParser.g:12632:1: rule__StartPoint__Group__2__Impl : ( ( rule__StartPoint__LookupAssignment_2 ) ) ;
    public final void rule__StartPoint__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12636:1: ( ( ( rule__StartPoint__LookupAssignment_2 ) ) )
            // InternalOpenCypherParser.g:12637:1: ( ( rule__StartPoint__LookupAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:12637:1: ( ( rule__StartPoint__LookupAssignment_2 ) )
            // InternalOpenCypherParser.g:12638:2: ( rule__StartPoint__LookupAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getLookupAssignment_2()); 
            }
            // InternalOpenCypherParser.g:12639:2: ( rule__StartPoint__LookupAssignment_2 )
            // InternalOpenCypherParser.g:12639:3: rule__StartPoint__LookupAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__StartPoint__LookupAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getLookupAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__2__Impl"


    // $ANTLR start "rule__NodeLookup__Group__0"
    // InternalOpenCypherParser.g:12648:1: rule__NodeLookup__Group__0 : rule__NodeLookup__Group__0__Impl rule__NodeLookup__Group__1 ;
    public final void rule__NodeLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12652:1: ( rule__NodeLookup__Group__0__Impl rule__NodeLookup__Group__1 )
            // InternalOpenCypherParser.g:12653:2: rule__NodeLookup__Group__0__Impl rule__NodeLookup__Group__1
            {
            pushFollow(FOLLOW_76);
            rule__NodeLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodeLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLookup__Group__0"


    // $ANTLR start "rule__NodeLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:12660:1: rule__NodeLookup__Group__0__Impl : ( NODE ) ;
    public final void rule__NodeLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12664:1: ( ( NODE ) )
            // InternalOpenCypherParser.g:12665:1: ( NODE )
            {
            // InternalOpenCypherParser.g:12665:1: ( NODE )
            // InternalOpenCypherParser.g:12666:2: NODE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLookupAccess().getNODEKeyword_0()); 
            }
            match(input,NODE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLookupAccess().getNODEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLookup__Group__0__Impl"


    // $ANTLR start "rule__NodeLookup__Group__1"
    // InternalOpenCypherParser.g:12675:1: rule__NodeLookup__Group__1 : rule__NodeLookup__Group__1__Impl ;
    public final void rule__NodeLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12679:1: ( rule__NodeLookup__Group__1__Impl )
            // InternalOpenCypherParser.g:12680:2: rule__NodeLookup__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NodeLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLookup__Group__1"


    // $ANTLR start "rule__NodeLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:12686:1: rule__NodeLookup__Group__1__Impl : ( ( rule__NodeLookup__Alternatives_1 ) ) ;
    public final void rule__NodeLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12690:1: ( ( ( rule__NodeLookup__Alternatives_1 ) ) )
            // InternalOpenCypherParser.g:12691:1: ( ( rule__NodeLookup__Alternatives_1 ) )
            {
            // InternalOpenCypherParser.g:12691:1: ( ( rule__NodeLookup__Alternatives_1 ) )
            // InternalOpenCypherParser.g:12692:2: ( rule__NodeLookup__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLookupAccess().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:12693:2: ( rule__NodeLookup__Alternatives_1 )
            // InternalOpenCypherParser.g:12693:3: rule__NodeLookup__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__NodeLookup__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLookupAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLookup__Group__1__Impl"


    // $ANTLR start "rule__RelationshipLookup__Group__0"
    // InternalOpenCypherParser.g:12702:1: rule__RelationshipLookup__Group__0 : rule__RelationshipLookup__Group__0__Impl rule__RelationshipLookup__Group__1 ;
    public final void rule__RelationshipLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12706:1: ( rule__RelationshipLookup__Group__0__Impl rule__RelationshipLookup__Group__1 )
            // InternalOpenCypherParser.g:12707:2: rule__RelationshipLookup__Group__0__Impl rule__RelationshipLookup__Group__1
            {
            pushFollow(FOLLOW_76);
            rule__RelationshipLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Group__0"


    // $ANTLR start "rule__RelationshipLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:12714:1: rule__RelationshipLookup__Group__0__Impl : ( ( rule__RelationshipLookup__Alternatives_0 ) ) ;
    public final void rule__RelationshipLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12718:1: ( ( ( rule__RelationshipLookup__Alternatives_0 ) ) )
            // InternalOpenCypherParser.g:12719:1: ( ( rule__RelationshipLookup__Alternatives_0 ) )
            {
            // InternalOpenCypherParser.g:12719:1: ( ( rule__RelationshipLookup__Alternatives_0 ) )
            // InternalOpenCypherParser.g:12720:2: ( rule__RelationshipLookup__Alternatives_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipLookupAccess().getAlternatives_0()); 
            }
            // InternalOpenCypherParser.g:12721:2: ( rule__RelationshipLookup__Alternatives_0 )
            // InternalOpenCypherParser.g:12721:3: rule__RelationshipLookup__Alternatives_0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipLookup__Alternatives_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipLookupAccess().getAlternatives_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Group__0__Impl"


    // $ANTLR start "rule__RelationshipLookup__Group__1"
    // InternalOpenCypherParser.g:12729:1: rule__RelationshipLookup__Group__1 : rule__RelationshipLookup__Group__1__Impl ;
    public final void rule__RelationshipLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12733:1: ( rule__RelationshipLookup__Group__1__Impl )
            // InternalOpenCypherParser.g:12734:2: rule__RelationshipLookup__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Group__1"


    // $ANTLR start "rule__RelationshipLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:12740:1: rule__RelationshipLookup__Group__1__Impl : ( ( rule__RelationshipLookup__Alternatives_1 ) ) ;
    public final void rule__RelationshipLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12744:1: ( ( ( rule__RelationshipLookup__Alternatives_1 ) ) )
            // InternalOpenCypherParser.g:12745:1: ( ( rule__RelationshipLookup__Alternatives_1 ) )
            {
            // InternalOpenCypherParser.g:12745:1: ( ( rule__RelationshipLookup__Alternatives_1 ) )
            // InternalOpenCypherParser.g:12746:2: ( rule__RelationshipLookup__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipLookupAccess().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:12747:2: ( rule__RelationshipLookup__Alternatives_1 )
            // InternalOpenCypherParser.g:12747:3: rule__RelationshipLookup__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipLookup__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipLookupAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Group__1__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__0"
    // InternalOpenCypherParser.g:12756:1: rule__IdentifiedIndexLookup__Group__0 : rule__IdentifiedIndexLookup__Group__0__Impl rule__IdentifiedIndexLookup__Group__1 ;
    public final void rule__IdentifiedIndexLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12760:1: ( rule__IdentifiedIndexLookup__Group__0__Impl rule__IdentifiedIndexLookup__Group__1 )
            // InternalOpenCypherParser.g:12761:2: rule__IdentifiedIndexLookup__Group__0__Impl rule__IdentifiedIndexLookup__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__IdentifiedIndexLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__0"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:12768:1: rule__IdentifiedIndexLookup__Group__0__Impl : ( Colon ) ;
    public final void rule__IdentifiedIndexLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12772:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:12773:1: ( Colon )
            {
            // InternalOpenCypherParser.g:12773:1: ( Colon )
            // InternalOpenCypherParser.g:12774:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getColonKeyword_0()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getColonKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__0__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__1"
    // InternalOpenCypherParser.g:12783:1: rule__IdentifiedIndexLookup__Group__1 : rule__IdentifiedIndexLookup__Group__1__Impl rule__IdentifiedIndexLookup__Group__2 ;
    public final void rule__IdentifiedIndexLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12787:1: ( rule__IdentifiedIndexLookup__Group__1__Impl rule__IdentifiedIndexLookup__Group__2 )
            // InternalOpenCypherParser.g:12788:2: rule__IdentifiedIndexLookup__Group__1__Impl rule__IdentifiedIndexLookup__Group__2
            {
            pushFollow(FOLLOW_30);
            rule__IdentifiedIndexLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__1"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:12795:1: rule__IdentifiedIndexLookup__Group__1__Impl : ( ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 ) ) ;
    public final void rule__IdentifiedIndexLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12799:1: ( ( ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:12800:1: ( ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:12800:1: ( ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 ) )
            // InternalOpenCypherParser.g:12801:2: ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:12802:2: ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 )
            // InternalOpenCypherParser.g:12802:3: rule__IdentifiedIndexLookup__IndexNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__IndexNameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__1__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__2"
    // InternalOpenCypherParser.g:12810:1: rule__IdentifiedIndexLookup__Group__2 : rule__IdentifiedIndexLookup__Group__2__Impl rule__IdentifiedIndexLookup__Group__3 ;
    public final void rule__IdentifiedIndexLookup__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12814:1: ( rule__IdentifiedIndexLookup__Group__2__Impl rule__IdentifiedIndexLookup__Group__3 )
            // InternalOpenCypherParser.g:12815:2: rule__IdentifiedIndexLookup__Group__2__Impl rule__IdentifiedIndexLookup__Group__3
            {
            pushFollow(FOLLOW_10);
            rule__IdentifiedIndexLookup__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__2"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__2__Impl"
    // InternalOpenCypherParser.g:12822:1: rule__IdentifiedIndexLookup__Group__2__Impl : ( LeftParenthesis ) ;
    public final void rule__IdentifiedIndexLookup__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12826:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:12827:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:12827:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:12828:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__2__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__3"
    // InternalOpenCypherParser.g:12837:1: rule__IdentifiedIndexLookup__Group__3 : rule__IdentifiedIndexLookup__Group__3__Impl rule__IdentifiedIndexLookup__Group__4 ;
    public final void rule__IdentifiedIndexLookup__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12841:1: ( rule__IdentifiedIndexLookup__Group__3__Impl rule__IdentifiedIndexLookup__Group__4 )
            // InternalOpenCypherParser.g:12842:2: rule__IdentifiedIndexLookup__Group__3__Impl rule__IdentifiedIndexLookup__Group__4
            {
            pushFollow(FOLLOW_9);
            rule__IdentifiedIndexLookup__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__3"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__3__Impl"
    // InternalOpenCypherParser.g:12849:1: rule__IdentifiedIndexLookup__Group__3__Impl : ( ( rule__IdentifiedIndexLookup__KeyAssignment_3 ) ) ;
    public final void rule__IdentifiedIndexLookup__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12853:1: ( ( ( rule__IdentifiedIndexLookup__KeyAssignment_3 ) ) )
            // InternalOpenCypherParser.g:12854:1: ( ( rule__IdentifiedIndexLookup__KeyAssignment_3 ) )
            {
            // InternalOpenCypherParser.g:12854:1: ( ( rule__IdentifiedIndexLookup__KeyAssignment_3 ) )
            // InternalOpenCypherParser.g:12855:2: ( rule__IdentifiedIndexLookup__KeyAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getKeyAssignment_3()); 
            }
            // InternalOpenCypherParser.g:12856:2: ( rule__IdentifiedIndexLookup__KeyAssignment_3 )
            // InternalOpenCypherParser.g:12856:3: rule__IdentifiedIndexLookup__KeyAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__KeyAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getKeyAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__3__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__4"
    // InternalOpenCypherParser.g:12864:1: rule__IdentifiedIndexLookup__Group__4 : rule__IdentifiedIndexLookup__Group__4__Impl rule__IdentifiedIndexLookup__Group__5 ;
    public final void rule__IdentifiedIndexLookup__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12868:1: ( rule__IdentifiedIndexLookup__Group__4__Impl rule__IdentifiedIndexLookup__Group__5 )
            // InternalOpenCypherParser.g:12869:2: rule__IdentifiedIndexLookup__Group__4__Impl rule__IdentifiedIndexLookup__Group__5
            {
            pushFollow(FOLLOW_77);
            rule__IdentifiedIndexLookup__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__4"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__4__Impl"
    // InternalOpenCypherParser.g:12876:1: rule__IdentifiedIndexLookup__Group__4__Impl : ( EqualsSign ) ;
    public final void rule__IdentifiedIndexLookup__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12880:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:12881:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:12881:1: ( EqualsSign )
            // InternalOpenCypherParser.g:12882:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getEqualsSignKeyword_4()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getEqualsSignKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__4__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__5"
    // InternalOpenCypherParser.g:12891:1: rule__IdentifiedIndexLookup__Group__5 : rule__IdentifiedIndexLookup__Group__5__Impl rule__IdentifiedIndexLookup__Group__6 ;
    public final void rule__IdentifiedIndexLookup__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12895:1: ( rule__IdentifiedIndexLookup__Group__5__Impl rule__IdentifiedIndexLookup__Group__6 )
            // InternalOpenCypherParser.g:12896:2: rule__IdentifiedIndexLookup__Group__5__Impl rule__IdentifiedIndexLookup__Group__6
            {
            pushFollow(FOLLOW_31);
            rule__IdentifiedIndexLookup__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__5"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__5__Impl"
    // InternalOpenCypherParser.g:12903:1: rule__IdentifiedIndexLookup__Group__5__Impl : ( ( rule__IdentifiedIndexLookup__Alternatives_5 ) ) ;
    public final void rule__IdentifiedIndexLookup__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12907:1: ( ( ( rule__IdentifiedIndexLookup__Alternatives_5 ) ) )
            // InternalOpenCypherParser.g:12908:1: ( ( rule__IdentifiedIndexLookup__Alternatives_5 ) )
            {
            // InternalOpenCypherParser.g:12908:1: ( ( rule__IdentifiedIndexLookup__Alternatives_5 ) )
            // InternalOpenCypherParser.g:12909:2: ( rule__IdentifiedIndexLookup__Alternatives_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getAlternatives_5()); 
            }
            // InternalOpenCypherParser.g:12910:2: ( rule__IdentifiedIndexLookup__Alternatives_5 )
            // InternalOpenCypherParser.g:12910:3: rule__IdentifiedIndexLookup__Alternatives_5
            {
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Alternatives_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getAlternatives_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__5__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__6"
    // InternalOpenCypherParser.g:12918:1: rule__IdentifiedIndexLookup__Group__6 : rule__IdentifiedIndexLookup__Group__6__Impl ;
    public final void rule__IdentifiedIndexLookup__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12922:1: ( rule__IdentifiedIndexLookup__Group__6__Impl )
            // InternalOpenCypherParser.g:12923:2: rule__IdentifiedIndexLookup__Group__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__6"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__6__Impl"
    // InternalOpenCypherParser.g:12929:1: rule__IdentifiedIndexLookup__Group__6__Impl : ( RightParenthesis ) ;
    public final void rule__IdentifiedIndexLookup__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12933:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:12934:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:12934:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:12935:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getRightParenthesisKeyword_6()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getRightParenthesisKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__6__Impl"


    // $ANTLR start "rule__IndexQuery__Group__0"
    // InternalOpenCypherParser.g:12945:1: rule__IndexQuery__Group__0 : rule__IndexQuery__Group__0__Impl rule__IndexQuery__Group__1 ;
    public final void rule__IndexQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12949:1: ( rule__IndexQuery__Group__0__Impl rule__IndexQuery__Group__1 )
            // InternalOpenCypherParser.g:12950:2: rule__IndexQuery__Group__0__Impl rule__IndexQuery__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__IndexQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__0"


    // $ANTLR start "rule__IndexQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:12957:1: rule__IndexQuery__Group__0__Impl : ( Colon ) ;
    public final void rule__IndexQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12961:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:12962:1: ( Colon )
            {
            // InternalOpenCypherParser.g:12962:1: ( Colon )
            // InternalOpenCypherParser.g:12963:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getColonKeyword_0()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getColonKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__0__Impl"


    // $ANTLR start "rule__IndexQuery__Group__1"
    // InternalOpenCypherParser.g:12972:1: rule__IndexQuery__Group__1 : rule__IndexQuery__Group__1__Impl rule__IndexQuery__Group__2 ;
    public final void rule__IndexQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12976:1: ( rule__IndexQuery__Group__1__Impl rule__IndexQuery__Group__2 )
            // InternalOpenCypherParser.g:12977:2: rule__IndexQuery__Group__1__Impl rule__IndexQuery__Group__2
            {
            pushFollow(FOLLOW_30);
            rule__IndexQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__1"


    // $ANTLR start "rule__IndexQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:12984:1: rule__IndexQuery__Group__1__Impl : ( ( rule__IndexQuery__IndexNameAssignment_1 ) ) ;
    public final void rule__IndexQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12988:1: ( ( ( rule__IndexQuery__IndexNameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:12989:1: ( ( rule__IndexQuery__IndexNameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:12989:1: ( ( rule__IndexQuery__IndexNameAssignment_1 ) )
            // InternalOpenCypherParser.g:12990:2: ( rule__IndexQuery__IndexNameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getIndexNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:12991:2: ( rule__IndexQuery__IndexNameAssignment_1 )
            // InternalOpenCypherParser.g:12991:3: rule__IndexQuery__IndexNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__IndexQuery__IndexNameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getIndexNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__1__Impl"


    // $ANTLR start "rule__IndexQuery__Group__2"
    // InternalOpenCypherParser.g:12999:1: rule__IndexQuery__Group__2 : rule__IndexQuery__Group__2__Impl rule__IndexQuery__Group__3 ;
    public final void rule__IndexQuery__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13003:1: ( rule__IndexQuery__Group__2__Impl rule__IndexQuery__Group__3 )
            // InternalOpenCypherParser.g:13004:2: rule__IndexQuery__Group__2__Impl rule__IndexQuery__Group__3
            {
            pushFollow(FOLLOW_78);
            rule__IndexQuery__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__2"


    // $ANTLR start "rule__IndexQuery__Group__2__Impl"
    // InternalOpenCypherParser.g:13011:1: rule__IndexQuery__Group__2__Impl : ( LeftParenthesis ) ;
    public final void rule__IndexQuery__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13015:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:13016:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:13016:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:13017:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__2__Impl"


    // $ANTLR start "rule__IndexQuery__Group__3"
    // InternalOpenCypherParser.g:13026:1: rule__IndexQuery__Group__3 : rule__IndexQuery__Group__3__Impl rule__IndexQuery__Group__4 ;
    public final void rule__IndexQuery__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13030:1: ( rule__IndexQuery__Group__3__Impl rule__IndexQuery__Group__4 )
            // InternalOpenCypherParser.g:13031:2: rule__IndexQuery__Group__3__Impl rule__IndexQuery__Group__4
            {
            pushFollow(FOLLOW_31);
            rule__IndexQuery__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__3"


    // $ANTLR start "rule__IndexQuery__Group__3__Impl"
    // InternalOpenCypherParser.g:13038:1: rule__IndexQuery__Group__3__Impl : ( ( rule__IndexQuery__Alternatives_3 ) ) ;
    public final void rule__IndexQuery__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13042:1: ( ( ( rule__IndexQuery__Alternatives_3 ) ) )
            // InternalOpenCypherParser.g:13043:1: ( ( rule__IndexQuery__Alternatives_3 ) )
            {
            // InternalOpenCypherParser.g:13043:1: ( ( rule__IndexQuery__Alternatives_3 ) )
            // InternalOpenCypherParser.g:13044:2: ( rule__IndexQuery__Alternatives_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getAlternatives_3()); 
            }
            // InternalOpenCypherParser.g:13045:2: ( rule__IndexQuery__Alternatives_3 )
            // InternalOpenCypherParser.g:13045:3: rule__IndexQuery__Alternatives_3
            {
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Alternatives_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getAlternatives_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__3__Impl"


    // $ANTLR start "rule__IndexQuery__Group__4"
    // InternalOpenCypherParser.g:13053:1: rule__IndexQuery__Group__4 : rule__IndexQuery__Group__4__Impl ;
    public final void rule__IndexQuery__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13057:1: ( rule__IndexQuery__Group__4__Impl )
            // InternalOpenCypherParser.g:13058:2: rule__IndexQuery__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__4"


    // $ANTLR start "rule__IndexQuery__Group__4__Impl"
    // InternalOpenCypherParser.g:13064:1: rule__IndexQuery__Group__4__Impl : ( RightParenthesis ) ;
    public final void rule__IndexQuery__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13068:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:13069:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:13069:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:13070:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getRightParenthesisKeyword_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getRightParenthesisKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__4__Impl"


    // $ANTLR start "rule__IdLookup__Group__0"
    // InternalOpenCypherParser.g:13080:1: rule__IdLookup__Group__0 : rule__IdLookup__Group__0__Impl rule__IdLookup__Group__1 ;
    public final void rule__IdLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13084:1: ( rule__IdLookup__Group__0__Impl rule__IdLookup__Group__1 )
            // InternalOpenCypherParser.g:13085:2: rule__IdLookup__Group__0__Impl rule__IdLookup__Group__1
            {
            pushFollow(FOLLOW_79);
            rule__IdLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__0"


    // $ANTLR start "rule__IdLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:13092:1: rule__IdLookup__Group__0__Impl : ( LeftParenthesis ) ;
    public final void rule__IdLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13096:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:13097:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:13097:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:13098:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getLeftParenthesisKeyword_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getLeftParenthesisKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__0__Impl"


    // $ANTLR start "rule__IdLookup__Group__1"
    // InternalOpenCypherParser.g:13107:1: rule__IdLookup__Group__1 : rule__IdLookup__Group__1__Impl rule__IdLookup__Group__2 ;
    public final void rule__IdLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13111:1: ( rule__IdLookup__Group__1__Impl rule__IdLookup__Group__2 )
            // InternalOpenCypherParser.g:13112:2: rule__IdLookup__Group__1__Impl rule__IdLookup__Group__2
            {
            pushFollow(FOLLOW_31);
            rule__IdLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdLookup__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__1"


    // $ANTLR start "rule__IdLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:13119:1: rule__IdLookup__Group__1__Impl : ( ( rule__IdLookup__Alternatives_1 ) ) ;
    public final void rule__IdLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13123:1: ( ( ( rule__IdLookup__Alternatives_1 ) ) )
            // InternalOpenCypherParser.g:13124:1: ( ( rule__IdLookup__Alternatives_1 ) )
            {
            // InternalOpenCypherParser.g:13124:1: ( ( rule__IdLookup__Alternatives_1 ) )
            // InternalOpenCypherParser.g:13125:2: ( rule__IdLookup__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:13126:2: ( rule__IdLookup__Alternatives_1 )
            // InternalOpenCypherParser.g:13126:3: rule__IdLookup__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__IdLookup__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__1__Impl"


    // $ANTLR start "rule__IdLookup__Group__2"
    // InternalOpenCypherParser.g:13134:1: rule__IdLookup__Group__2 : rule__IdLookup__Group__2__Impl ;
    public final void rule__IdLookup__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13138:1: ( rule__IdLookup__Group__2__Impl )
            // InternalOpenCypherParser.g:13139:2: rule__IdLookup__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IdLookup__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__2"


    // $ANTLR start "rule__IdLookup__Group__2__Impl"
    // InternalOpenCypherParser.g:13145:1: rule__IdLookup__Group__2__Impl : ( RightParenthesis ) ;
    public final void rule__IdLookup__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13149:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:13150:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:13150:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:13151:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getRightParenthesisKeyword_2()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__2__Impl"


    // $ANTLR start "rule__LiteralIds__Group__0"
    // InternalOpenCypherParser.g:13161:1: rule__LiteralIds__Group__0 : rule__LiteralIds__Group__0__Impl rule__LiteralIds__Group__1 ;
    public final void rule__LiteralIds__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13165:1: ( rule__LiteralIds__Group__0__Impl rule__LiteralIds__Group__1 )
            // InternalOpenCypherParser.g:13166:2: rule__LiteralIds__Group__0__Impl rule__LiteralIds__Group__1
            {
            pushFollow(FOLLOW_55);
            rule__LiteralIds__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LiteralIds__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group__0"


    // $ANTLR start "rule__LiteralIds__Group__0__Impl"
    // InternalOpenCypherParser.g:13173:1: rule__LiteralIds__Group__0__Impl : ( ( rule__LiteralIds__IdsAssignment_0 ) ) ;
    public final void rule__LiteralIds__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13177:1: ( ( ( rule__LiteralIds__IdsAssignment_0 ) ) )
            // InternalOpenCypherParser.g:13178:1: ( ( rule__LiteralIds__IdsAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:13178:1: ( ( rule__LiteralIds__IdsAssignment_0 ) )
            // InternalOpenCypherParser.g:13179:2: ( rule__LiteralIds__IdsAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getIdsAssignment_0()); 
            }
            // InternalOpenCypherParser.g:13180:2: ( rule__LiteralIds__IdsAssignment_0 )
            // InternalOpenCypherParser.g:13180:3: rule__LiteralIds__IdsAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__LiteralIds__IdsAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getIdsAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group__0__Impl"


    // $ANTLR start "rule__LiteralIds__Group__1"
    // InternalOpenCypherParser.g:13188:1: rule__LiteralIds__Group__1 : rule__LiteralIds__Group__1__Impl ;
    public final void rule__LiteralIds__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13192:1: ( rule__LiteralIds__Group__1__Impl )
            // InternalOpenCypherParser.g:13193:2: rule__LiteralIds__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LiteralIds__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group__1"


    // $ANTLR start "rule__LiteralIds__Group__1__Impl"
    // InternalOpenCypherParser.g:13199:1: rule__LiteralIds__Group__1__Impl : ( ( rule__LiteralIds__Group_1__0 )* ) ;
    public final void rule__LiteralIds__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13203:1: ( ( ( rule__LiteralIds__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:13204:1: ( ( rule__LiteralIds__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:13204:1: ( ( rule__LiteralIds__Group_1__0 )* )
            // InternalOpenCypherParser.g:13205:2: ( rule__LiteralIds__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:13206:2: ( rule__LiteralIds__Group_1__0 )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==Comma) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // InternalOpenCypherParser.g:13206:3: rule__LiteralIds__Group_1__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__LiteralIds__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group__1__Impl"


    // $ANTLR start "rule__LiteralIds__Group_1__0"
    // InternalOpenCypherParser.g:13215:1: rule__LiteralIds__Group_1__0 : rule__LiteralIds__Group_1__0__Impl rule__LiteralIds__Group_1__1 ;
    public final void rule__LiteralIds__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13219:1: ( rule__LiteralIds__Group_1__0__Impl rule__LiteralIds__Group_1__1 )
            // InternalOpenCypherParser.g:13220:2: rule__LiteralIds__Group_1__0__Impl rule__LiteralIds__Group_1__1
            {
            pushFollow(FOLLOW_17);
            rule__LiteralIds__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LiteralIds__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group_1__0"


    // $ANTLR start "rule__LiteralIds__Group_1__0__Impl"
    // InternalOpenCypherParser.g:13227:1: rule__LiteralIds__Group_1__0__Impl : ( Comma ) ;
    public final void rule__LiteralIds__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13231:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:13232:1: ( Comma )
            {
            // InternalOpenCypherParser.g:13232:1: ( Comma )
            // InternalOpenCypherParser.g:13233:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getCommaKeyword_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getCommaKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group_1__0__Impl"


    // $ANTLR start "rule__LiteralIds__Group_1__1"
    // InternalOpenCypherParser.g:13242:1: rule__LiteralIds__Group_1__1 : rule__LiteralIds__Group_1__1__Impl ;
    public final void rule__LiteralIds__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13246:1: ( rule__LiteralIds__Group_1__1__Impl )
            // InternalOpenCypherParser.g:13247:2: rule__LiteralIds__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LiteralIds__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group_1__1"


    // $ANTLR start "rule__LiteralIds__Group_1__1__Impl"
    // InternalOpenCypherParser.g:13253:1: rule__LiteralIds__Group_1__1__Impl : ( ( rule__LiteralIds__IdsAssignment_1_1 ) ) ;
    public final void rule__LiteralIds__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13257:1: ( ( ( rule__LiteralIds__IdsAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:13258:1: ( ( rule__LiteralIds__IdsAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:13258:1: ( ( rule__LiteralIds__IdsAssignment_1_1 ) )
            // InternalOpenCypherParser.g:13259:2: ( rule__LiteralIds__IdsAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getIdsAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:13260:2: ( rule__LiteralIds__IdsAssignment_1_1 )
            // InternalOpenCypherParser.g:13260:3: rule__LiteralIds__IdsAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__LiteralIds__IdsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getIdsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group_1__1__Impl"


    // $ANTLR start "rule__Where__Group__0"
    // InternalOpenCypherParser.g:13269:1: rule__Where__Group__0 : rule__Where__Group__0__Impl rule__Where__Group__1 ;
    public final void rule__Where__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13273:1: ( rule__Where__Group__0__Impl rule__Where__Group__1 )
            // InternalOpenCypherParser.g:13274:2: rule__Where__Group__0__Impl rule__Where__Group__1
            {
            pushFollow(FOLLOW_43);
            rule__Where__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Where__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Where__Group__0"


    // $ANTLR start "rule__Where__Group__0__Impl"
    // InternalOpenCypherParser.g:13281:1: rule__Where__Group__0__Impl : ( WHERE ) ;
    public final void rule__Where__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13285:1: ( ( WHERE ) )
            // InternalOpenCypherParser.g:13286:1: ( WHERE )
            {
            // InternalOpenCypherParser.g:13286:1: ( WHERE )
            // InternalOpenCypherParser.g:13287:2: WHERE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWhereAccess().getWHEREKeyword_0()); 
            }
            match(input,WHERE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWhereAccess().getWHEREKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Where__Group__0__Impl"


    // $ANTLR start "rule__Where__Group__1"
    // InternalOpenCypherParser.g:13296:1: rule__Where__Group__1 : rule__Where__Group__1__Impl ;
    public final void rule__Where__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13300:1: ( rule__Where__Group__1__Impl )
            // InternalOpenCypherParser.g:13301:2: rule__Where__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Where__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Where__Group__1"


    // $ANTLR start "rule__Where__Group__1__Impl"
    // InternalOpenCypherParser.g:13307:1: rule__Where__Group__1__Impl : ( ( rule__Where__ExpressionAssignment_1 ) ) ;
    public final void rule__Where__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13311:1: ( ( ( rule__Where__ExpressionAssignment_1 ) ) )
            // InternalOpenCypherParser.g:13312:1: ( ( rule__Where__ExpressionAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:13312:1: ( ( rule__Where__ExpressionAssignment_1 ) )
            // InternalOpenCypherParser.g:13313:2: ( rule__Where__ExpressionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWhereAccess().getExpressionAssignment_1()); 
            }
            // InternalOpenCypherParser.g:13314:2: ( rule__Where__ExpressionAssignment_1 )
            // InternalOpenCypherParser.g:13314:3: rule__Where__ExpressionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Where__ExpressionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWhereAccess().getExpressionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Where__Group__1__Impl"


    // $ANTLR start "rule__Pattern__Group__0"
    // InternalOpenCypherParser.g:13323:1: rule__Pattern__Group__0 : rule__Pattern__Group__0__Impl rule__Pattern__Group__1 ;
    public final void rule__Pattern__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13327:1: ( rule__Pattern__Group__0__Impl rule__Pattern__Group__1 )
            // InternalOpenCypherParser.g:13328:2: rule__Pattern__Group__0__Impl rule__Pattern__Group__1
            {
            pushFollow(FOLLOW_55);
            rule__Pattern__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Pattern__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group__0"


    // $ANTLR start "rule__Pattern__Group__0__Impl"
    // InternalOpenCypherParser.g:13335:1: rule__Pattern__Group__0__Impl : ( ( rule__Pattern__PatternsAssignment_0 ) ) ;
    public final void rule__Pattern__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13339:1: ( ( ( rule__Pattern__PatternsAssignment_0 ) ) )
            // InternalOpenCypherParser.g:13340:1: ( ( rule__Pattern__PatternsAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:13340:1: ( ( rule__Pattern__PatternsAssignment_0 ) )
            // InternalOpenCypherParser.g:13341:2: ( rule__Pattern__PatternsAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getPatternsAssignment_0()); 
            }
            // InternalOpenCypherParser.g:13342:2: ( rule__Pattern__PatternsAssignment_0 )
            // InternalOpenCypherParser.g:13342:3: rule__Pattern__PatternsAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__PatternsAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getPatternsAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group__0__Impl"


    // $ANTLR start "rule__Pattern__Group__1"
    // InternalOpenCypherParser.g:13350:1: rule__Pattern__Group__1 : rule__Pattern__Group__1__Impl ;
    public final void rule__Pattern__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13354:1: ( rule__Pattern__Group__1__Impl )
            // InternalOpenCypherParser.g:13355:2: rule__Pattern__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group__1"


    // $ANTLR start "rule__Pattern__Group__1__Impl"
    // InternalOpenCypherParser.g:13361:1: rule__Pattern__Group__1__Impl : ( ( rule__Pattern__Group_1__0 )* ) ;
    public final void rule__Pattern__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13365:1: ( ( ( rule__Pattern__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:13366:1: ( ( rule__Pattern__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:13366:1: ( ( rule__Pattern__Group_1__0 )* )
            // InternalOpenCypherParser.g:13367:2: ( rule__Pattern__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:13368:2: ( rule__Pattern__Group_1__0 )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==Comma) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // InternalOpenCypherParser.g:13368:3: rule__Pattern__Group_1__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__Pattern__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group__1__Impl"


    // $ANTLR start "rule__Pattern__Group_1__0"
    // InternalOpenCypherParser.g:13377:1: rule__Pattern__Group_1__0 : rule__Pattern__Group_1__0__Impl rule__Pattern__Group_1__1 ;
    public final void rule__Pattern__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13381:1: ( rule__Pattern__Group_1__0__Impl rule__Pattern__Group_1__1 )
            // InternalOpenCypherParser.g:13382:2: rule__Pattern__Group_1__0__Impl rule__Pattern__Group_1__1
            {
            pushFollow(FOLLOW_49);
            rule__Pattern__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Pattern__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group_1__0"


    // $ANTLR start "rule__Pattern__Group_1__0__Impl"
    // InternalOpenCypherParser.g:13389:1: rule__Pattern__Group_1__0__Impl : ( Comma ) ;
    public final void rule__Pattern__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13393:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:13394:1: ( Comma )
            {
            // InternalOpenCypherParser.g:13394:1: ( Comma )
            // InternalOpenCypherParser.g:13395:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getCommaKeyword_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getCommaKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group_1__0__Impl"


    // $ANTLR start "rule__Pattern__Group_1__1"
    // InternalOpenCypherParser.g:13404:1: rule__Pattern__Group_1__1 : rule__Pattern__Group_1__1__Impl ;
    public final void rule__Pattern__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13408:1: ( rule__Pattern__Group_1__1__Impl )
            // InternalOpenCypherParser.g:13409:2: rule__Pattern__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group_1__1"


    // $ANTLR start "rule__Pattern__Group_1__1__Impl"
    // InternalOpenCypherParser.g:13415:1: rule__Pattern__Group_1__1__Impl : ( ( rule__Pattern__PatternsAssignment_1_1 ) ) ;
    public final void rule__Pattern__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13419:1: ( ( ( rule__Pattern__PatternsAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:13420:1: ( ( rule__Pattern__PatternsAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:13420:1: ( ( rule__Pattern__PatternsAssignment_1_1 ) )
            // InternalOpenCypherParser.g:13421:2: ( rule__Pattern__PatternsAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getPatternsAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:13422:2: ( rule__Pattern__PatternsAssignment_1_1 )
            // InternalOpenCypherParser.g:13422:3: rule__Pattern__PatternsAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__PatternsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getPatternsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group_1__1__Impl"


    // $ANTLR start "rule__PatternPart__Group_0__0"
    // InternalOpenCypherParser.g:13431:1: rule__PatternPart__Group_0__0 : rule__PatternPart__Group_0__0__Impl rule__PatternPart__Group_0__1 ;
    public final void rule__PatternPart__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13435:1: ( rule__PatternPart__Group_0__0__Impl rule__PatternPart__Group_0__1 )
            // InternalOpenCypherParser.g:13436:2: rule__PatternPart__Group_0__0__Impl rule__PatternPart__Group_0__1
            {
            pushFollow(FOLLOW_9);
            rule__PatternPart__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternPart__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__0"


    // $ANTLR start "rule__PatternPart__Group_0__0__Impl"
    // InternalOpenCypherParser.g:13443:1: rule__PatternPart__Group_0__0__Impl : ( ( rule__PatternPart__VarAssignment_0_0 ) ) ;
    public final void rule__PatternPart__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13447:1: ( ( ( rule__PatternPart__VarAssignment_0_0 ) ) )
            // InternalOpenCypherParser.g:13448:1: ( ( rule__PatternPart__VarAssignment_0_0 ) )
            {
            // InternalOpenCypherParser.g:13448:1: ( ( rule__PatternPart__VarAssignment_0_0 ) )
            // InternalOpenCypherParser.g:13449:2: ( rule__PatternPart__VarAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getVarAssignment_0_0()); 
            }
            // InternalOpenCypherParser.g:13450:2: ( rule__PatternPart__VarAssignment_0_0 )
            // InternalOpenCypherParser.g:13450:3: rule__PatternPart__VarAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__PatternPart__VarAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getVarAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__0__Impl"


    // $ANTLR start "rule__PatternPart__Group_0__1"
    // InternalOpenCypherParser.g:13458:1: rule__PatternPart__Group_0__1 : rule__PatternPart__Group_0__1__Impl rule__PatternPart__Group_0__2 ;
    public final void rule__PatternPart__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13462:1: ( rule__PatternPart__Group_0__1__Impl rule__PatternPart__Group_0__2 )
            // InternalOpenCypherParser.g:13463:2: rule__PatternPart__Group_0__1__Impl rule__PatternPart__Group_0__2
            {
            pushFollow(FOLLOW_49);
            rule__PatternPart__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternPart__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__1"


    // $ANTLR start "rule__PatternPart__Group_0__1__Impl"
    // InternalOpenCypherParser.g:13470:1: rule__PatternPart__Group_0__1__Impl : ( EqualsSign ) ;
    public final void rule__PatternPart__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13474:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:13475:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:13475:1: ( EqualsSign )
            // InternalOpenCypherParser.g:13476:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getEqualsSignKeyword_0_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getEqualsSignKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__1__Impl"


    // $ANTLR start "rule__PatternPart__Group_0__2"
    // InternalOpenCypherParser.g:13485:1: rule__PatternPart__Group_0__2 : rule__PatternPart__Group_0__2__Impl ;
    public final void rule__PatternPart__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13489:1: ( rule__PatternPart__Group_0__2__Impl )
            // InternalOpenCypherParser.g:13490:2: rule__PatternPart__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternPart__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__2"


    // $ANTLR start "rule__PatternPart__Group_0__2__Impl"
    // InternalOpenCypherParser.g:13496:1: rule__PatternPart__Group_0__2__Impl : ( ( rule__PatternPart__PartAssignment_0_2 ) ) ;
    public final void rule__PatternPart__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13500:1: ( ( ( rule__PatternPart__PartAssignment_0_2 ) ) )
            // InternalOpenCypherParser.g:13501:1: ( ( rule__PatternPart__PartAssignment_0_2 ) )
            {
            // InternalOpenCypherParser.g:13501:1: ( ( rule__PatternPart__PartAssignment_0_2 ) )
            // InternalOpenCypherParser.g:13502:2: ( rule__PatternPart__PartAssignment_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getPartAssignment_0_2()); 
            }
            // InternalOpenCypherParser.g:13503:2: ( rule__PatternPart__PartAssignment_0_2 )
            // InternalOpenCypherParser.g:13503:3: rule__PatternPart__PartAssignment_0_2
            {
            pushFollow(FOLLOW_2);
            rule__PatternPart__PartAssignment_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getPartAssignment_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__2__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__0"
    // InternalOpenCypherParser.g:13512:1: rule__ShortestPathPattern__Group_0__0 : rule__ShortestPathPattern__Group_0__0__Impl rule__ShortestPathPattern__Group_0__1 ;
    public final void rule__ShortestPathPattern__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13516:1: ( rule__ShortestPathPattern__Group_0__0__Impl rule__ShortestPathPattern__Group_0__1 )
            // InternalOpenCypherParser.g:13517:2: rule__ShortestPathPattern__Group_0__0__Impl rule__ShortestPathPattern__Group_0__1
            {
            pushFollow(FOLLOW_80);
            rule__ShortestPathPattern__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__0"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__0__Impl"
    // InternalOpenCypherParser.g:13524:1: rule__ShortestPathPattern__Group_0__0__Impl : ( () ) ;
    public final void rule__ShortestPathPattern__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13528:1: ( ( () ) )
            // InternalOpenCypherParser.g:13529:1: ( () )
            {
            // InternalOpenCypherParser.g:13529:1: ( () )
            // InternalOpenCypherParser.g:13530:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getShortestPathAction_0_0()); 
            }
            // InternalOpenCypherParser.g:13531:2: ()
            // InternalOpenCypherParser.g:13531:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getShortestPathAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__0__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__1"
    // InternalOpenCypherParser.g:13539:1: rule__ShortestPathPattern__Group_0__1 : rule__ShortestPathPattern__Group_0__1__Impl rule__ShortestPathPattern__Group_0__2 ;
    public final void rule__ShortestPathPattern__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13543:1: ( rule__ShortestPathPattern__Group_0__1__Impl rule__ShortestPathPattern__Group_0__2 )
            // InternalOpenCypherParser.g:13544:2: rule__ShortestPathPattern__Group_0__1__Impl rule__ShortestPathPattern__Group_0__2
            {
            pushFollow(FOLLOW_30);
            rule__ShortestPathPattern__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__1"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__1__Impl"
    // InternalOpenCypherParser.g:13551:1: rule__ShortestPathPattern__Group_0__1__Impl : ( SHORTESTPATH ) ;
    public final void rule__ShortestPathPattern__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13555:1: ( ( SHORTESTPATH ) )
            // InternalOpenCypherParser.g:13556:1: ( SHORTESTPATH )
            {
            // InternalOpenCypherParser.g:13556:1: ( SHORTESTPATH )
            // InternalOpenCypherParser.g:13557:2: SHORTESTPATH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getSHORTESTPATHKeyword_0_1()); 
            }
            match(input,SHORTESTPATH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getSHORTESTPATHKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__1__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__2"
    // InternalOpenCypherParser.g:13566:1: rule__ShortestPathPattern__Group_0__2 : rule__ShortestPathPattern__Group_0__2__Impl rule__ShortestPathPattern__Group_0__3 ;
    public final void rule__ShortestPathPattern__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13570:1: ( rule__ShortestPathPattern__Group_0__2__Impl rule__ShortestPathPattern__Group_0__3 )
            // InternalOpenCypherParser.g:13571:2: rule__ShortestPathPattern__Group_0__2__Impl rule__ShortestPathPattern__Group_0__3
            {
            pushFollow(FOLLOW_49);
            rule__ShortestPathPattern__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__2"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__2__Impl"
    // InternalOpenCypherParser.g:13578:1: rule__ShortestPathPattern__Group_0__2__Impl : ( LeftParenthesis ) ;
    public final void rule__ShortestPathPattern__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13582:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:13583:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:13583:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:13584:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_0_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__2__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__3"
    // InternalOpenCypherParser.g:13593:1: rule__ShortestPathPattern__Group_0__3 : rule__ShortestPathPattern__Group_0__3__Impl rule__ShortestPathPattern__Group_0__4 ;
    public final void rule__ShortestPathPattern__Group_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13597:1: ( rule__ShortestPathPattern__Group_0__3__Impl rule__ShortestPathPattern__Group_0__4 )
            // InternalOpenCypherParser.g:13598:2: rule__ShortestPathPattern__Group_0__3__Impl rule__ShortestPathPattern__Group_0__4
            {
            pushFollow(FOLLOW_31);
            rule__ShortestPathPattern__Group_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_0__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__3"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__3__Impl"
    // InternalOpenCypherParser.g:13605:1: rule__ShortestPathPattern__Group_0__3__Impl : ( ( rule__ShortestPathPattern__PatternElementAssignment_0_3 ) ) ;
    public final void rule__ShortestPathPattern__Group_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13609:1: ( ( ( rule__ShortestPathPattern__PatternElementAssignment_0_3 ) ) )
            // InternalOpenCypherParser.g:13610:1: ( ( rule__ShortestPathPattern__PatternElementAssignment_0_3 ) )
            {
            // InternalOpenCypherParser.g:13610:1: ( ( rule__ShortestPathPattern__PatternElementAssignment_0_3 ) )
            // InternalOpenCypherParser.g:13611:2: ( rule__ShortestPathPattern__PatternElementAssignment_0_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_0_3()); 
            }
            // InternalOpenCypherParser.g:13612:2: ( rule__ShortestPathPattern__PatternElementAssignment_0_3 )
            // InternalOpenCypherParser.g:13612:3: rule__ShortestPathPattern__PatternElementAssignment_0_3
            {
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__PatternElementAssignment_0_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__3__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__4"
    // InternalOpenCypherParser.g:13620:1: rule__ShortestPathPattern__Group_0__4 : rule__ShortestPathPattern__Group_0__4__Impl ;
    public final void rule__ShortestPathPattern__Group_0__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13624:1: ( rule__ShortestPathPattern__Group_0__4__Impl )
            // InternalOpenCypherParser.g:13625:2: rule__ShortestPathPattern__Group_0__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_0__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__4"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__4__Impl"
    // InternalOpenCypherParser.g:13631:1: rule__ShortestPathPattern__Group_0__4__Impl : ( RightParenthesis ) ;
    public final void rule__ShortestPathPattern__Group_0__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13635:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:13636:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:13636:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:13637:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_0_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_0_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__4__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__0"
    // InternalOpenCypherParser.g:13647:1: rule__ShortestPathPattern__Group_1__0 : rule__ShortestPathPattern__Group_1__0__Impl rule__ShortestPathPattern__Group_1__1 ;
    public final void rule__ShortestPathPattern__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13651:1: ( rule__ShortestPathPattern__Group_1__0__Impl rule__ShortestPathPattern__Group_1__1 )
            // InternalOpenCypherParser.g:13652:2: rule__ShortestPathPattern__Group_1__0__Impl rule__ShortestPathPattern__Group_1__1
            {
            pushFollow(FOLLOW_81);
            rule__ShortestPathPattern__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__0"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__0__Impl"
    // InternalOpenCypherParser.g:13659:1: rule__ShortestPathPattern__Group_1__0__Impl : ( () ) ;
    public final void rule__ShortestPathPattern__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13663:1: ( ( () ) )
            // InternalOpenCypherParser.g:13664:1: ( () )
            {
            // InternalOpenCypherParser.g:13664:1: ( () )
            // InternalOpenCypherParser.g:13665:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getAllShortestPathsAction_1_0()); 
            }
            // InternalOpenCypherParser.g:13666:2: ()
            // InternalOpenCypherParser.g:13666:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getAllShortestPathsAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__0__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__1"
    // InternalOpenCypherParser.g:13674:1: rule__ShortestPathPattern__Group_1__1 : rule__ShortestPathPattern__Group_1__1__Impl rule__ShortestPathPattern__Group_1__2 ;
    public final void rule__ShortestPathPattern__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13678:1: ( rule__ShortestPathPattern__Group_1__1__Impl rule__ShortestPathPattern__Group_1__2 )
            // InternalOpenCypherParser.g:13679:2: rule__ShortestPathPattern__Group_1__1__Impl rule__ShortestPathPattern__Group_1__2
            {
            pushFollow(FOLLOW_30);
            rule__ShortestPathPattern__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__1"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__1__Impl"
    // InternalOpenCypherParser.g:13686:1: rule__ShortestPathPattern__Group_1__1__Impl : ( ALLSHORTESTPATHS ) ;
    public final void rule__ShortestPathPattern__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13690:1: ( ( ALLSHORTESTPATHS ) )
            // InternalOpenCypherParser.g:13691:1: ( ALLSHORTESTPATHS )
            {
            // InternalOpenCypherParser.g:13691:1: ( ALLSHORTESTPATHS )
            // InternalOpenCypherParser.g:13692:2: ALLSHORTESTPATHS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getALLSHORTESTPATHSKeyword_1_1()); 
            }
            match(input,ALLSHORTESTPATHS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getALLSHORTESTPATHSKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__1__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__2"
    // InternalOpenCypherParser.g:13701:1: rule__ShortestPathPattern__Group_1__2 : rule__ShortestPathPattern__Group_1__2__Impl rule__ShortestPathPattern__Group_1__3 ;
    public final void rule__ShortestPathPattern__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13705:1: ( rule__ShortestPathPattern__Group_1__2__Impl rule__ShortestPathPattern__Group_1__3 )
            // InternalOpenCypherParser.g:13706:2: rule__ShortestPathPattern__Group_1__2__Impl rule__ShortestPathPattern__Group_1__3
            {
            pushFollow(FOLLOW_49);
            rule__ShortestPathPattern__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__2"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__2__Impl"
    // InternalOpenCypherParser.g:13713:1: rule__ShortestPathPattern__Group_1__2__Impl : ( LeftParenthesis ) ;
    public final void rule__ShortestPathPattern__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13717:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:13718:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:13718:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:13719:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_1_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__2__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__3"
    // InternalOpenCypherParser.g:13728:1: rule__ShortestPathPattern__Group_1__3 : rule__ShortestPathPattern__Group_1__3__Impl rule__ShortestPathPattern__Group_1__4 ;
    public final void rule__ShortestPathPattern__Group_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13732:1: ( rule__ShortestPathPattern__Group_1__3__Impl rule__ShortestPathPattern__Group_1__4 )
            // InternalOpenCypherParser.g:13733:2: rule__ShortestPathPattern__Group_1__3__Impl rule__ShortestPathPattern__Group_1__4
            {
            pushFollow(FOLLOW_31);
            rule__ShortestPathPattern__Group_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__3"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__3__Impl"
    // InternalOpenCypherParser.g:13740:1: rule__ShortestPathPattern__Group_1__3__Impl : ( ( rule__ShortestPathPattern__PatternElementAssignment_1_3 ) ) ;
    public final void rule__ShortestPathPattern__Group_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13744:1: ( ( ( rule__ShortestPathPattern__PatternElementAssignment_1_3 ) ) )
            // InternalOpenCypherParser.g:13745:1: ( ( rule__ShortestPathPattern__PatternElementAssignment_1_3 ) )
            {
            // InternalOpenCypherParser.g:13745:1: ( ( rule__ShortestPathPattern__PatternElementAssignment_1_3 ) )
            // InternalOpenCypherParser.g:13746:2: ( rule__ShortestPathPattern__PatternElementAssignment_1_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_1_3()); 
            }
            // InternalOpenCypherParser.g:13747:2: ( rule__ShortestPathPattern__PatternElementAssignment_1_3 )
            // InternalOpenCypherParser.g:13747:3: rule__ShortestPathPattern__PatternElementAssignment_1_3
            {
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__PatternElementAssignment_1_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__3__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__4"
    // InternalOpenCypherParser.g:13755:1: rule__ShortestPathPattern__Group_1__4 : rule__ShortestPathPattern__Group_1__4__Impl ;
    public final void rule__ShortestPathPattern__Group_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13759:1: ( rule__ShortestPathPattern__Group_1__4__Impl )
            // InternalOpenCypherParser.g:13760:2: rule__ShortestPathPattern__Group_1__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__4"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__4__Impl"
    // InternalOpenCypherParser.g:13766:1: rule__ShortestPathPattern__Group_1__4__Impl : ( RightParenthesis ) ;
    public final void rule__ShortestPathPattern__Group_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13770:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:13771:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:13771:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:13772:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_1_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__4__Impl"


    // $ANTLR start "rule__PatternElement__Group_0__0"
    // InternalOpenCypherParser.g:13782:1: rule__PatternElement__Group_0__0 : rule__PatternElement__Group_0__0__Impl rule__PatternElement__Group_0__1 ;
    public final void rule__PatternElement__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13786:1: ( rule__PatternElement__Group_0__0__Impl rule__PatternElement__Group_0__1 )
            // InternalOpenCypherParser.g:13787:2: rule__PatternElement__Group_0__0__Impl rule__PatternElement__Group_0__1
            {
            pushFollow(FOLLOW_37);
            rule__PatternElement__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternElement__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_0__0"


    // $ANTLR start "rule__PatternElement__Group_0__0__Impl"
    // InternalOpenCypherParser.g:13794:1: rule__PatternElement__Group_0__0__Impl : ( ( rule__PatternElement__NodepatternAssignment_0_0 ) ) ;
    public final void rule__PatternElement__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13798:1: ( ( ( rule__PatternElement__NodepatternAssignment_0_0 ) ) )
            // InternalOpenCypherParser.g:13799:1: ( ( rule__PatternElement__NodepatternAssignment_0_0 ) )
            {
            // InternalOpenCypherParser.g:13799:1: ( ( rule__PatternElement__NodepatternAssignment_0_0 ) )
            // InternalOpenCypherParser.g:13800:2: ( rule__PatternElement__NodepatternAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getNodepatternAssignment_0_0()); 
            }
            // InternalOpenCypherParser.g:13801:2: ( rule__PatternElement__NodepatternAssignment_0_0 )
            // InternalOpenCypherParser.g:13801:3: rule__PatternElement__NodepatternAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__PatternElement__NodepatternAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getNodepatternAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_0__0__Impl"


    // $ANTLR start "rule__PatternElement__Group_0__1"
    // InternalOpenCypherParser.g:13809:1: rule__PatternElement__Group_0__1 : rule__PatternElement__Group_0__1__Impl ;
    public final void rule__PatternElement__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13813:1: ( rule__PatternElement__Group_0__1__Impl )
            // InternalOpenCypherParser.g:13814:2: rule__PatternElement__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternElement__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_0__1"


    // $ANTLR start "rule__PatternElement__Group_0__1__Impl"
    // InternalOpenCypherParser.g:13820:1: rule__PatternElement__Group_0__1__Impl : ( ( rule__PatternElement__ChainAssignment_0_1 )* ) ;
    public final void rule__PatternElement__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13824:1: ( ( ( rule__PatternElement__ChainAssignment_0_1 )* ) )
            // InternalOpenCypherParser.g:13825:1: ( ( rule__PatternElement__ChainAssignment_0_1 )* )
            {
            // InternalOpenCypherParser.g:13825:1: ( ( rule__PatternElement__ChainAssignment_0_1 )* )
            // InternalOpenCypherParser.g:13826:2: ( rule__PatternElement__ChainAssignment_0_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getChainAssignment_0_1()); 
            }
            // InternalOpenCypherParser.g:13827:2: ( rule__PatternElement__ChainAssignment_0_1 )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==HyphenMinus||LA100_0==LessThanSign) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // InternalOpenCypherParser.g:13827:3: rule__PatternElement__ChainAssignment_0_1
            	    {
            	    pushFollow(FOLLOW_82);
            	    rule__PatternElement__ChainAssignment_0_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getChainAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_0__1__Impl"


    // $ANTLR start "rule__PatternElement__Group_1__0"
    // InternalOpenCypherParser.g:13836:1: rule__PatternElement__Group_1__0 : rule__PatternElement__Group_1__0__Impl rule__PatternElement__Group_1__1 ;
    public final void rule__PatternElement__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13840:1: ( rule__PatternElement__Group_1__0__Impl rule__PatternElement__Group_1__1 )
            // InternalOpenCypherParser.g:13841:2: rule__PatternElement__Group_1__0__Impl rule__PatternElement__Group_1__1
            {
            pushFollow(FOLLOW_49);
            rule__PatternElement__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternElement__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__0"


    // $ANTLR start "rule__PatternElement__Group_1__0__Impl"
    // InternalOpenCypherParser.g:13848:1: rule__PatternElement__Group_1__0__Impl : ( LeftParenthesis ) ;
    public final void rule__PatternElement__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13852:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:13853:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:13853:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:13854:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getLeftParenthesisKeyword_1_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getLeftParenthesisKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__0__Impl"


    // $ANTLR start "rule__PatternElement__Group_1__1"
    // InternalOpenCypherParser.g:13863:1: rule__PatternElement__Group_1__1 : rule__PatternElement__Group_1__1__Impl rule__PatternElement__Group_1__2 ;
    public final void rule__PatternElement__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13867:1: ( rule__PatternElement__Group_1__1__Impl rule__PatternElement__Group_1__2 )
            // InternalOpenCypherParser.g:13868:2: rule__PatternElement__Group_1__1__Impl rule__PatternElement__Group_1__2
            {
            pushFollow(FOLLOW_31);
            rule__PatternElement__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternElement__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__1"


    // $ANTLR start "rule__PatternElement__Group_1__1__Impl"
    // InternalOpenCypherParser.g:13875:1: rule__PatternElement__Group_1__1__Impl : ( rulePatternElement ) ;
    public final void rule__PatternElement__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13879:1: ( ( rulePatternElement ) )
            // InternalOpenCypherParser.g:13880:1: ( rulePatternElement )
            {
            // InternalOpenCypherParser.g:13880:1: ( rulePatternElement )
            // InternalOpenCypherParser.g:13881:2: rulePatternElement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getPatternElementParserRuleCall_1_1()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getPatternElementParserRuleCall_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__1__Impl"


    // $ANTLR start "rule__PatternElement__Group_1__2"
    // InternalOpenCypherParser.g:13890:1: rule__PatternElement__Group_1__2 : rule__PatternElement__Group_1__2__Impl ;
    public final void rule__PatternElement__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13894:1: ( rule__PatternElement__Group_1__2__Impl )
            // InternalOpenCypherParser.g:13895:2: rule__PatternElement__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternElement__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__2"


    // $ANTLR start "rule__PatternElement__Group_1__2__Impl"
    // InternalOpenCypherParser.g:13901:1: rule__PatternElement__Group_1__2__Impl : ( RightParenthesis ) ;
    public final void rule__PatternElement__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13905:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:13906:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:13906:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:13907:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getRightParenthesisKeyword_1_2()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getRightParenthesisKeyword_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__2__Impl"


    // $ANTLR start "rule__NodePattern__Group__0"
    // InternalOpenCypherParser.g:13917:1: rule__NodePattern__Group__0 : rule__NodePattern__Group__0__Impl rule__NodePattern__Group__1 ;
    public final void rule__NodePattern__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13921:1: ( rule__NodePattern__Group__0__Impl rule__NodePattern__Group__1 )
            // InternalOpenCypherParser.g:13922:2: rule__NodePattern__Group__0__Impl rule__NodePattern__Group__1
            {
            pushFollow(FOLLOW_30);
            rule__NodePattern__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__0"


    // $ANTLR start "rule__NodePattern__Group__0__Impl"
    // InternalOpenCypherParser.g:13929:1: rule__NodePattern__Group__0__Impl : ( () ) ;
    public final void rule__NodePattern__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13933:1: ( ( () ) )
            // InternalOpenCypherParser.g:13934:1: ( () )
            {
            // InternalOpenCypherParser.g:13934:1: ( () )
            // InternalOpenCypherParser.g:13935:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getNodePatternAction_0()); 
            }
            // InternalOpenCypherParser.g:13936:2: ()
            // InternalOpenCypherParser.g:13936:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getNodePatternAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__0__Impl"


    // $ANTLR start "rule__NodePattern__Group__1"
    // InternalOpenCypherParser.g:13944:1: rule__NodePattern__Group__1 : rule__NodePattern__Group__1__Impl rule__NodePattern__Group__2 ;
    public final void rule__NodePattern__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13948:1: ( rule__NodePattern__Group__1__Impl rule__NodePattern__Group__2 )
            // InternalOpenCypherParser.g:13949:2: rule__NodePattern__Group__1__Impl rule__NodePattern__Group__2
            {
            pushFollow(FOLLOW_83);
            rule__NodePattern__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__1"


    // $ANTLR start "rule__NodePattern__Group__1__Impl"
    // InternalOpenCypherParser.g:13956:1: rule__NodePattern__Group__1__Impl : ( LeftParenthesis ) ;
    public final void rule__NodePattern__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13960:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:13961:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:13961:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:13962:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__1__Impl"


    // $ANTLR start "rule__NodePattern__Group__2"
    // InternalOpenCypherParser.g:13971:1: rule__NodePattern__Group__2 : rule__NodePattern__Group__2__Impl rule__NodePattern__Group__3 ;
    public final void rule__NodePattern__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13975:1: ( rule__NodePattern__Group__2__Impl rule__NodePattern__Group__3 )
            // InternalOpenCypherParser.g:13976:2: rule__NodePattern__Group__2__Impl rule__NodePattern__Group__3
            {
            pushFollow(FOLLOW_83);
            rule__NodePattern__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__2"


    // $ANTLR start "rule__NodePattern__Group__2__Impl"
    // InternalOpenCypherParser.g:13983:1: rule__NodePattern__Group__2__Impl : ( ( rule__NodePattern__VariableAssignment_2 )? ) ;
    public final void rule__NodePattern__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13987:1: ( ( ( rule__NodePattern__VariableAssignment_2 )? ) )
            // InternalOpenCypherParser.g:13988:1: ( ( rule__NodePattern__VariableAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:13988:1: ( ( rule__NodePattern__VariableAssignment_2 )? )
            // InternalOpenCypherParser.g:13989:2: ( rule__NodePattern__VariableAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getVariableAssignment_2()); 
            }
            // InternalOpenCypherParser.g:13990:2: ( rule__NodePattern__VariableAssignment_2 )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( ((LA101_0>=ALLSHORTESTPATHS && LA101_0<=WHERE)||(LA101_0>=CASE && LA101_0<=XOR)||(LA101_0>=AS && LA101_0<=OR)||LA101_0==RULE_ID) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // InternalOpenCypherParser.g:13990:3: rule__NodePattern__VariableAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__NodePattern__VariableAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getVariableAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__2__Impl"


    // $ANTLR start "rule__NodePattern__Group__3"
    // InternalOpenCypherParser.g:13998:1: rule__NodePattern__Group__3 : rule__NodePattern__Group__3__Impl rule__NodePattern__Group__4 ;
    public final void rule__NodePattern__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14002:1: ( rule__NodePattern__Group__3__Impl rule__NodePattern__Group__4 )
            // InternalOpenCypherParser.g:14003:2: rule__NodePattern__Group__3__Impl rule__NodePattern__Group__4
            {
            pushFollow(FOLLOW_83);
            rule__NodePattern__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__3"


    // $ANTLR start "rule__NodePattern__Group__3__Impl"
    // InternalOpenCypherParser.g:14010:1: rule__NodePattern__Group__3__Impl : ( ( ruleNodeLabels )? ) ;
    public final void rule__NodePattern__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14014:1: ( ( ( ruleNodeLabels )? ) )
            // InternalOpenCypherParser.g:14015:1: ( ( ruleNodeLabels )? )
            {
            // InternalOpenCypherParser.g:14015:1: ( ( ruleNodeLabels )? )
            // InternalOpenCypherParser.g:14016:2: ( ruleNodeLabels )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getNodeLabelsParserRuleCall_3()); 
            }
            // InternalOpenCypherParser.g:14017:2: ( ruleNodeLabels )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==Colon) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // InternalOpenCypherParser.g:14017:3: ruleNodeLabels
                    {
                    pushFollow(FOLLOW_2);
                    ruleNodeLabels();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getNodeLabelsParserRuleCall_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__3__Impl"


    // $ANTLR start "rule__NodePattern__Group__4"
    // InternalOpenCypherParser.g:14025:1: rule__NodePattern__Group__4 : rule__NodePattern__Group__4__Impl rule__NodePattern__Group__5 ;
    public final void rule__NodePattern__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14029:1: ( rule__NodePattern__Group__4__Impl rule__NodePattern__Group__5 )
            // InternalOpenCypherParser.g:14030:2: rule__NodePattern__Group__4__Impl rule__NodePattern__Group__5
            {
            pushFollow(FOLLOW_83);
            rule__NodePattern__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__4"


    // $ANTLR start "rule__NodePattern__Group__4__Impl"
    // InternalOpenCypherParser.g:14037:1: rule__NodePattern__Group__4__Impl : ( ( rule__NodePattern__PropertiesAssignment_4 )? ) ;
    public final void rule__NodePattern__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14041:1: ( ( ( rule__NodePattern__PropertiesAssignment_4 )? ) )
            // InternalOpenCypherParser.g:14042:1: ( ( rule__NodePattern__PropertiesAssignment_4 )? )
            {
            // InternalOpenCypherParser.g:14042:1: ( ( rule__NodePattern__PropertiesAssignment_4 )? )
            // InternalOpenCypherParser.g:14043:2: ( rule__NodePattern__PropertiesAssignment_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getPropertiesAssignment_4()); 
            }
            // InternalOpenCypherParser.g:14044:2: ( rule__NodePattern__PropertiesAssignment_4 )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==DollarSign||LA103_0==LeftCurlyBracket) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // InternalOpenCypherParser.g:14044:3: rule__NodePattern__PropertiesAssignment_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__NodePattern__PropertiesAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getPropertiesAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__4__Impl"


    // $ANTLR start "rule__NodePattern__Group__5"
    // InternalOpenCypherParser.g:14052:1: rule__NodePattern__Group__5 : rule__NodePattern__Group__5__Impl ;
    public final void rule__NodePattern__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14056:1: ( rule__NodePattern__Group__5__Impl )
            // InternalOpenCypherParser.g:14057:2: rule__NodePattern__Group__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__5"


    // $ANTLR start "rule__NodePattern__Group__5__Impl"
    // InternalOpenCypherParser.g:14063:1: rule__NodePattern__Group__5__Impl : ( RightParenthesis ) ;
    public final void rule__NodePattern__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14067:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:14068:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:14068:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:14069:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getRightParenthesisKeyword_5()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getRightParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__5__Impl"


    // $ANTLR start "rule__PatternElementChain__Group__0"
    // InternalOpenCypherParser.g:14079:1: rule__PatternElementChain__Group__0 : rule__PatternElementChain__Group__0__Impl rule__PatternElementChain__Group__1 ;
    public final void rule__PatternElementChain__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14083:1: ( rule__PatternElementChain__Group__0__Impl rule__PatternElementChain__Group__1 )
            // InternalOpenCypherParser.g:14084:2: rule__PatternElementChain__Group__0__Impl rule__PatternElementChain__Group__1
            {
            pushFollow(FOLLOW_30);
            rule__PatternElementChain__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternElementChain__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__Group__0"


    // $ANTLR start "rule__PatternElementChain__Group__0__Impl"
    // InternalOpenCypherParser.g:14091:1: rule__PatternElementChain__Group__0__Impl : ( ( rule__PatternElementChain__RelationshipPatternAssignment_0 ) ) ;
    public final void rule__PatternElementChain__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14095:1: ( ( ( rule__PatternElementChain__RelationshipPatternAssignment_0 ) ) )
            // InternalOpenCypherParser.g:14096:1: ( ( rule__PatternElementChain__RelationshipPatternAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:14096:1: ( ( rule__PatternElementChain__RelationshipPatternAssignment_0 ) )
            // InternalOpenCypherParser.g:14097:2: ( rule__PatternElementChain__RelationshipPatternAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainAccess().getRelationshipPatternAssignment_0()); 
            }
            // InternalOpenCypherParser.g:14098:2: ( rule__PatternElementChain__RelationshipPatternAssignment_0 )
            // InternalOpenCypherParser.g:14098:3: rule__PatternElementChain__RelationshipPatternAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__PatternElementChain__RelationshipPatternAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainAccess().getRelationshipPatternAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__Group__0__Impl"


    // $ANTLR start "rule__PatternElementChain__Group__1"
    // InternalOpenCypherParser.g:14106:1: rule__PatternElementChain__Group__1 : rule__PatternElementChain__Group__1__Impl ;
    public final void rule__PatternElementChain__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14110:1: ( rule__PatternElementChain__Group__1__Impl )
            // InternalOpenCypherParser.g:14111:2: rule__PatternElementChain__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternElementChain__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__Group__1"


    // $ANTLR start "rule__PatternElementChain__Group__1__Impl"
    // InternalOpenCypherParser.g:14117:1: rule__PatternElementChain__Group__1__Impl : ( ( rule__PatternElementChain__NodePatternAssignment_1 ) ) ;
    public final void rule__PatternElementChain__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14121:1: ( ( ( rule__PatternElementChain__NodePatternAssignment_1 ) ) )
            // InternalOpenCypherParser.g:14122:1: ( ( rule__PatternElementChain__NodePatternAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:14122:1: ( ( rule__PatternElementChain__NodePatternAssignment_1 ) )
            // InternalOpenCypherParser.g:14123:2: ( rule__PatternElementChain__NodePatternAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainAccess().getNodePatternAssignment_1()); 
            }
            // InternalOpenCypherParser.g:14124:2: ( rule__PatternElementChain__NodePatternAssignment_1 )
            // InternalOpenCypherParser.g:14124:3: rule__PatternElementChain__NodePatternAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__PatternElementChain__NodePatternAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainAccess().getNodePatternAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__Group__1__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group__0"
    // InternalOpenCypherParser.g:14133:1: rule__RelationshipPattern__Group__0 : rule__RelationshipPattern__Group__0__Impl rule__RelationshipPattern__Group__1 ;
    public final void rule__RelationshipPattern__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14137:1: ( rule__RelationshipPattern__Group__0__Impl rule__RelationshipPattern__Group__1 )
            // InternalOpenCypherParser.g:14138:2: rule__RelationshipPattern__Group__0__Impl rule__RelationshipPattern__Group__1
            {
            pushFollow(FOLLOW_37);
            rule__RelationshipPattern__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group__0"


    // $ANTLR start "rule__RelationshipPattern__Group__0__Impl"
    // InternalOpenCypherParser.g:14145:1: rule__RelationshipPattern__Group__0__Impl : ( () ) ;
    public final void rule__RelationshipPattern__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14149:1: ( ( () ) )
            // InternalOpenCypherParser.g:14150:1: ( () )
            {
            // InternalOpenCypherParser.g:14150:1: ( () )
            // InternalOpenCypherParser.g:14151:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getRelationshipPatternAction_0()); 
            }
            // InternalOpenCypherParser.g:14152:2: ()
            // InternalOpenCypherParser.g:14152:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getRelationshipPatternAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group__0__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group__1"
    // InternalOpenCypherParser.g:14160:1: rule__RelationshipPattern__Group__1 : rule__RelationshipPattern__Group__1__Impl ;
    public final void rule__RelationshipPattern__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14164:1: ( rule__RelationshipPattern__Group__1__Impl )
            // InternalOpenCypherParser.g:14165:2: rule__RelationshipPattern__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group__1"


    // $ANTLR start "rule__RelationshipPattern__Group__1__Impl"
    // InternalOpenCypherParser.g:14171:1: rule__RelationshipPattern__Group__1__Impl : ( ( rule__RelationshipPattern__Group_1__0 ) ) ;
    public final void rule__RelationshipPattern__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14175:1: ( ( ( rule__RelationshipPattern__Group_1__0 ) ) )
            // InternalOpenCypherParser.g:14176:1: ( ( rule__RelationshipPattern__Group_1__0 ) )
            {
            // InternalOpenCypherParser.g:14176:1: ( ( rule__RelationshipPattern__Group_1__0 ) )
            // InternalOpenCypherParser.g:14177:2: ( rule__RelationshipPattern__Group_1__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:14178:2: ( rule__RelationshipPattern__Group_1__0 )
            // InternalOpenCypherParser.g:14178:3: rule__RelationshipPattern__Group_1__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group__1__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group_1__0"
    // InternalOpenCypherParser.g:14187:1: rule__RelationshipPattern__Group_1__0 : rule__RelationshipPattern__Group_1__0__Impl rule__RelationshipPattern__Group_1__1 ;
    public final void rule__RelationshipPattern__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14191:1: ( rule__RelationshipPattern__Group_1__0__Impl rule__RelationshipPattern__Group_1__1 )
            // InternalOpenCypherParser.g:14192:2: rule__RelationshipPattern__Group_1__0__Impl rule__RelationshipPattern__Group_1__1
            {
            pushFollow(FOLLOW_37);
            rule__RelationshipPattern__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__0"


    // $ANTLR start "rule__RelationshipPattern__Group_1__0__Impl"
    // InternalOpenCypherParser.g:14199:1: rule__RelationshipPattern__Group_1__0__Impl : ( ( rule__RelationshipPattern__IncomingAssignment_1_0 )? ) ;
    public final void rule__RelationshipPattern__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14203:1: ( ( ( rule__RelationshipPattern__IncomingAssignment_1_0 )? ) )
            // InternalOpenCypherParser.g:14204:1: ( ( rule__RelationshipPattern__IncomingAssignment_1_0 )? )
            {
            // InternalOpenCypherParser.g:14204:1: ( ( rule__RelationshipPattern__IncomingAssignment_1_0 )? )
            // InternalOpenCypherParser.g:14205:2: ( rule__RelationshipPattern__IncomingAssignment_1_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getIncomingAssignment_1_0()); 
            }
            // InternalOpenCypherParser.g:14206:2: ( rule__RelationshipPattern__IncomingAssignment_1_0 )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==LessThanSign) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // InternalOpenCypherParser.g:14206:3: rule__RelationshipPattern__IncomingAssignment_1_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipPattern__IncomingAssignment_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getIncomingAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__0__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group_1__1"
    // InternalOpenCypherParser.g:14214:1: rule__RelationshipPattern__Group_1__1 : rule__RelationshipPattern__Group_1__1__Impl rule__RelationshipPattern__Group_1__2 ;
    public final void rule__RelationshipPattern__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14218:1: ( rule__RelationshipPattern__Group_1__1__Impl rule__RelationshipPattern__Group_1__2 )
            // InternalOpenCypherParser.g:14219:2: rule__RelationshipPattern__Group_1__1__Impl rule__RelationshipPattern__Group_1__2
            {
            pushFollow(FOLLOW_84);
            rule__RelationshipPattern__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__1"


    // $ANTLR start "rule__RelationshipPattern__Group_1__1__Impl"
    // InternalOpenCypherParser.g:14226:1: rule__RelationshipPattern__Group_1__1__Impl : ( ruleDash ) ;
    public final void rule__RelationshipPattern__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14230:1: ( ( ruleDash ) )
            // InternalOpenCypherParser.g:14231:1: ( ruleDash )
            {
            // InternalOpenCypherParser.g:14231:1: ( ruleDash )
            // InternalOpenCypherParser.g:14232:2: ruleDash
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleDash();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__1__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group_1__2"
    // InternalOpenCypherParser.g:14241:1: rule__RelationshipPattern__Group_1__2 : rule__RelationshipPattern__Group_1__2__Impl rule__RelationshipPattern__Group_1__3 ;
    public final void rule__RelationshipPattern__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14245:1: ( rule__RelationshipPattern__Group_1__2__Impl rule__RelationshipPattern__Group_1__3 )
            // InternalOpenCypherParser.g:14246:2: rule__RelationshipPattern__Group_1__2__Impl rule__RelationshipPattern__Group_1__3
            {
            pushFollow(FOLLOW_84);
            rule__RelationshipPattern__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__2"


    // $ANTLR start "rule__RelationshipPattern__Group_1__2__Impl"
    // InternalOpenCypherParser.g:14253:1: rule__RelationshipPattern__Group_1__2__Impl : ( ( rule__RelationshipPattern__DetailAssignment_1_2 )? ) ;
    public final void rule__RelationshipPattern__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14257:1: ( ( ( rule__RelationshipPattern__DetailAssignment_1_2 )? ) )
            // InternalOpenCypherParser.g:14258:1: ( ( rule__RelationshipPattern__DetailAssignment_1_2 )? )
            {
            // InternalOpenCypherParser.g:14258:1: ( ( rule__RelationshipPattern__DetailAssignment_1_2 )? )
            // InternalOpenCypherParser.g:14259:2: ( rule__RelationshipPattern__DetailAssignment_1_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getDetailAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:14260:2: ( rule__RelationshipPattern__DetailAssignment_1_2 )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==LeftSquareBracket) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // InternalOpenCypherParser.g:14260:3: rule__RelationshipPattern__DetailAssignment_1_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipPattern__DetailAssignment_1_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getDetailAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__2__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group_1__3"
    // InternalOpenCypherParser.g:14268:1: rule__RelationshipPattern__Group_1__3 : rule__RelationshipPattern__Group_1__3__Impl rule__RelationshipPattern__Group_1__4 ;
    public final void rule__RelationshipPattern__Group_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14272:1: ( rule__RelationshipPattern__Group_1__3__Impl rule__RelationshipPattern__Group_1__4 )
            // InternalOpenCypherParser.g:14273:2: rule__RelationshipPattern__Group_1__3__Impl rule__RelationshipPattern__Group_1__4
            {
            pushFollow(FOLLOW_85);
            rule__RelationshipPattern__Group_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__3"


    // $ANTLR start "rule__RelationshipPattern__Group_1__3__Impl"
    // InternalOpenCypherParser.g:14280:1: rule__RelationshipPattern__Group_1__3__Impl : ( ruleDash ) ;
    public final void rule__RelationshipPattern__Group_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14284:1: ( ( ruleDash ) )
            // InternalOpenCypherParser.g:14285:1: ( ruleDash )
            {
            // InternalOpenCypherParser.g:14285:1: ( ruleDash )
            // InternalOpenCypherParser.g:14286:2: ruleDash
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_3()); 
            }
            pushFollow(FOLLOW_2);
            ruleDash();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__3__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group_1__4"
    // InternalOpenCypherParser.g:14295:1: rule__RelationshipPattern__Group_1__4 : rule__RelationshipPattern__Group_1__4__Impl ;
    public final void rule__RelationshipPattern__Group_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14299:1: ( rule__RelationshipPattern__Group_1__4__Impl )
            // InternalOpenCypherParser.g:14300:2: rule__RelationshipPattern__Group_1__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__4"


    // $ANTLR start "rule__RelationshipPattern__Group_1__4__Impl"
    // InternalOpenCypherParser.g:14306:1: rule__RelationshipPattern__Group_1__4__Impl : ( ( rule__RelationshipPattern__OutgoingAssignment_1_4 )? ) ;
    public final void rule__RelationshipPattern__Group_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14310:1: ( ( ( rule__RelationshipPattern__OutgoingAssignment_1_4 )? ) )
            // InternalOpenCypherParser.g:14311:1: ( ( rule__RelationshipPattern__OutgoingAssignment_1_4 )? )
            {
            // InternalOpenCypherParser.g:14311:1: ( ( rule__RelationshipPattern__OutgoingAssignment_1_4 )? )
            // InternalOpenCypherParser.g:14312:2: ( rule__RelationshipPattern__OutgoingAssignment_1_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getOutgoingAssignment_1_4()); 
            }
            // InternalOpenCypherParser.g:14313:2: ( rule__RelationshipPattern__OutgoingAssignment_1_4 )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==GreaterThanSign) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // InternalOpenCypherParser.g:14313:3: rule__RelationshipPattern__OutgoingAssignment_1_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipPattern__OutgoingAssignment_1_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getOutgoingAssignment_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__4__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__0"
    // InternalOpenCypherParser.g:14322:1: rule__RelationshipDetail__Group__0 : rule__RelationshipDetail__Group__0__Impl rule__RelationshipDetail__Group__1 ;
    public final void rule__RelationshipDetail__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14326:1: ( rule__RelationshipDetail__Group__0__Impl rule__RelationshipDetail__Group__1 )
            // InternalOpenCypherParser.g:14327:2: rule__RelationshipDetail__Group__0__Impl rule__RelationshipDetail__Group__1
            {
            pushFollow(FOLLOW_38);
            rule__RelationshipDetail__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__0"


    // $ANTLR start "rule__RelationshipDetail__Group__0__Impl"
    // InternalOpenCypherParser.g:14334:1: rule__RelationshipDetail__Group__0__Impl : ( () ) ;
    public final void rule__RelationshipDetail__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14338:1: ( ( () ) )
            // InternalOpenCypherParser.g:14339:1: ( () )
            {
            // InternalOpenCypherParser.g:14339:1: ( () )
            // InternalOpenCypherParser.g:14340:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getRelationshipDetailAction_0()); 
            }
            // InternalOpenCypherParser.g:14341:2: ()
            // InternalOpenCypherParser.g:14341:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getRelationshipDetailAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__0__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__1"
    // InternalOpenCypherParser.g:14349:1: rule__RelationshipDetail__Group__1 : rule__RelationshipDetail__Group__1__Impl rule__RelationshipDetail__Group__2 ;
    public final void rule__RelationshipDetail__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14353:1: ( rule__RelationshipDetail__Group__1__Impl rule__RelationshipDetail__Group__2 )
            // InternalOpenCypherParser.g:14354:2: rule__RelationshipDetail__Group__1__Impl rule__RelationshipDetail__Group__2
            {
            pushFollow(FOLLOW_86);
            rule__RelationshipDetail__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__1"


    // $ANTLR start "rule__RelationshipDetail__Group__1__Impl"
    // InternalOpenCypherParser.g:14361:1: rule__RelationshipDetail__Group__1__Impl : ( LeftSquareBracket ) ;
    public final void rule__RelationshipDetail__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14365:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:14366:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:14366:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:14367:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getLeftSquareBracketKeyword_1()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getLeftSquareBracketKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__1__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__2"
    // InternalOpenCypherParser.g:14376:1: rule__RelationshipDetail__Group__2 : rule__RelationshipDetail__Group__2__Impl rule__RelationshipDetail__Group__3 ;
    public final void rule__RelationshipDetail__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14380:1: ( rule__RelationshipDetail__Group__2__Impl rule__RelationshipDetail__Group__3 )
            // InternalOpenCypherParser.g:14381:2: rule__RelationshipDetail__Group__2__Impl rule__RelationshipDetail__Group__3
            {
            pushFollow(FOLLOW_86);
            rule__RelationshipDetail__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__2"


    // $ANTLR start "rule__RelationshipDetail__Group__2__Impl"
    // InternalOpenCypherParser.g:14388:1: rule__RelationshipDetail__Group__2__Impl : ( ( rule__RelationshipDetail__VariableAssignment_2 )? ) ;
    public final void rule__RelationshipDetail__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14392:1: ( ( ( rule__RelationshipDetail__VariableAssignment_2 )? ) )
            // InternalOpenCypherParser.g:14393:1: ( ( rule__RelationshipDetail__VariableAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:14393:1: ( ( rule__RelationshipDetail__VariableAssignment_2 )? )
            // InternalOpenCypherParser.g:14394:2: ( rule__RelationshipDetail__VariableAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getVariableAssignment_2()); 
            }
            // InternalOpenCypherParser.g:14395:2: ( rule__RelationshipDetail__VariableAssignment_2 )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( ((LA107_0>=ALLSHORTESTPATHS && LA107_0<=WHERE)||(LA107_0>=CASE && LA107_0<=XOR)||(LA107_0>=AS && LA107_0<=OR)||LA107_0==RULE_ID) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // InternalOpenCypherParser.g:14395:3: rule__RelationshipDetail__VariableAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipDetail__VariableAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getVariableAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__2__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__3"
    // InternalOpenCypherParser.g:14403:1: rule__RelationshipDetail__Group__3 : rule__RelationshipDetail__Group__3__Impl rule__RelationshipDetail__Group__4 ;
    public final void rule__RelationshipDetail__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14407:1: ( rule__RelationshipDetail__Group__3__Impl rule__RelationshipDetail__Group__4 )
            // InternalOpenCypherParser.g:14408:2: rule__RelationshipDetail__Group__3__Impl rule__RelationshipDetail__Group__4
            {
            pushFollow(FOLLOW_86);
            rule__RelationshipDetail__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__3"


    // $ANTLR start "rule__RelationshipDetail__Group__3__Impl"
    // InternalOpenCypherParser.g:14415:1: rule__RelationshipDetail__Group__3__Impl : ( ( rule__RelationshipDetail__OptionalAssignment_3 )? ) ;
    public final void rule__RelationshipDetail__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14419:1: ( ( ( rule__RelationshipDetail__OptionalAssignment_3 )? ) )
            // InternalOpenCypherParser.g:14420:1: ( ( rule__RelationshipDetail__OptionalAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:14420:1: ( ( rule__RelationshipDetail__OptionalAssignment_3 )? )
            // InternalOpenCypherParser.g:14421:2: ( rule__RelationshipDetail__OptionalAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getOptionalAssignment_3()); 
            }
            // InternalOpenCypherParser.g:14422:2: ( rule__RelationshipDetail__OptionalAssignment_3 )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==QuestionMark) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // InternalOpenCypherParser.g:14422:3: rule__RelationshipDetail__OptionalAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipDetail__OptionalAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getOptionalAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__3__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__4"
    // InternalOpenCypherParser.g:14430:1: rule__RelationshipDetail__Group__4 : rule__RelationshipDetail__Group__4__Impl rule__RelationshipDetail__Group__5 ;
    public final void rule__RelationshipDetail__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14434:1: ( rule__RelationshipDetail__Group__4__Impl rule__RelationshipDetail__Group__5 )
            // InternalOpenCypherParser.g:14435:2: rule__RelationshipDetail__Group__4__Impl rule__RelationshipDetail__Group__5
            {
            pushFollow(FOLLOW_86);
            rule__RelationshipDetail__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__4"


    // $ANTLR start "rule__RelationshipDetail__Group__4__Impl"
    // InternalOpenCypherParser.g:14442:1: rule__RelationshipDetail__Group__4__Impl : ( ( ruleRelationshipTypes )? ) ;
    public final void rule__RelationshipDetail__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14446:1: ( ( ( ruleRelationshipTypes )? ) )
            // InternalOpenCypherParser.g:14447:1: ( ( ruleRelationshipTypes )? )
            {
            // InternalOpenCypherParser.g:14447:1: ( ( ruleRelationshipTypes )? )
            // InternalOpenCypherParser.g:14448:2: ( ruleRelationshipTypes )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getRelationshipTypesParserRuleCall_4()); 
            }
            // InternalOpenCypherParser.g:14449:2: ( ruleRelationshipTypes )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==Colon) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // InternalOpenCypherParser.g:14449:3: ruleRelationshipTypes
                    {
                    pushFollow(FOLLOW_2);
                    ruleRelationshipTypes();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getRelationshipTypesParserRuleCall_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__4__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__5"
    // InternalOpenCypherParser.g:14457:1: rule__RelationshipDetail__Group__5 : rule__RelationshipDetail__Group__5__Impl rule__RelationshipDetail__Group__6 ;
    public final void rule__RelationshipDetail__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14461:1: ( rule__RelationshipDetail__Group__5__Impl rule__RelationshipDetail__Group__6 )
            // InternalOpenCypherParser.g:14462:2: rule__RelationshipDetail__Group__5__Impl rule__RelationshipDetail__Group__6
            {
            pushFollow(FOLLOW_86);
            rule__RelationshipDetail__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__5"


    // $ANTLR start "rule__RelationshipDetail__Group__5__Impl"
    // InternalOpenCypherParser.g:14469:1: rule__RelationshipDetail__Group__5__Impl : ( ( rule__RelationshipDetail__RangeAssignment_5 )? ) ;
    public final void rule__RelationshipDetail__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14473:1: ( ( ( rule__RelationshipDetail__RangeAssignment_5 )? ) )
            // InternalOpenCypherParser.g:14474:1: ( ( rule__RelationshipDetail__RangeAssignment_5 )? )
            {
            // InternalOpenCypherParser.g:14474:1: ( ( rule__RelationshipDetail__RangeAssignment_5 )? )
            // InternalOpenCypherParser.g:14475:2: ( rule__RelationshipDetail__RangeAssignment_5 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getRangeAssignment_5()); 
            }
            // InternalOpenCypherParser.g:14476:2: ( rule__RelationshipDetail__RangeAssignment_5 )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==Asterisk) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // InternalOpenCypherParser.g:14476:3: rule__RelationshipDetail__RangeAssignment_5
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipDetail__RangeAssignment_5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getRangeAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__5__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__6"
    // InternalOpenCypherParser.g:14484:1: rule__RelationshipDetail__Group__6 : rule__RelationshipDetail__Group__6__Impl rule__RelationshipDetail__Group__7 ;
    public final void rule__RelationshipDetail__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14488:1: ( rule__RelationshipDetail__Group__6__Impl rule__RelationshipDetail__Group__7 )
            // InternalOpenCypherParser.g:14489:2: rule__RelationshipDetail__Group__6__Impl rule__RelationshipDetail__Group__7
            {
            pushFollow(FOLLOW_86);
            rule__RelationshipDetail__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__6"


    // $ANTLR start "rule__RelationshipDetail__Group__6__Impl"
    // InternalOpenCypherParser.g:14496:1: rule__RelationshipDetail__Group__6__Impl : ( ( rule__RelationshipDetail__PropertiesAssignment_6 )? ) ;
    public final void rule__RelationshipDetail__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14500:1: ( ( ( rule__RelationshipDetail__PropertiesAssignment_6 )? ) )
            // InternalOpenCypherParser.g:14501:1: ( ( rule__RelationshipDetail__PropertiesAssignment_6 )? )
            {
            // InternalOpenCypherParser.g:14501:1: ( ( rule__RelationshipDetail__PropertiesAssignment_6 )? )
            // InternalOpenCypherParser.g:14502:2: ( rule__RelationshipDetail__PropertiesAssignment_6 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getPropertiesAssignment_6()); 
            }
            // InternalOpenCypherParser.g:14503:2: ( rule__RelationshipDetail__PropertiesAssignment_6 )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==DollarSign||LA111_0==LeftCurlyBracket) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // InternalOpenCypherParser.g:14503:3: rule__RelationshipDetail__PropertiesAssignment_6
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipDetail__PropertiesAssignment_6();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getPropertiesAssignment_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__6__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__7"
    // InternalOpenCypherParser.g:14511:1: rule__RelationshipDetail__Group__7 : rule__RelationshipDetail__Group__7__Impl ;
    public final void rule__RelationshipDetail__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14515:1: ( rule__RelationshipDetail__Group__7__Impl )
            // InternalOpenCypherParser.g:14516:2: rule__RelationshipDetail__Group__7__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__7"


    // $ANTLR start "rule__RelationshipDetail__Group__7__Impl"
    // InternalOpenCypherParser.g:14522:1: rule__RelationshipDetail__Group__7__Impl : ( RightSquareBracket ) ;
    public final void rule__RelationshipDetail__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14526:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:14527:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:14527:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:14528:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getRightSquareBracketKeyword_7()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getRightSquareBracketKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__7__Impl"


    // $ANTLR start "rule__RelType__Group__0"
    // InternalOpenCypherParser.g:14538:1: rule__RelType__Group__0 : rule__RelType__Group__0__Impl rule__RelType__Group__1 ;
    public final void rule__RelType__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14542:1: ( rule__RelType__Group__0__Impl rule__RelType__Group__1 )
            // InternalOpenCypherParser.g:14543:2: rule__RelType__Group__0__Impl rule__RelType__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__RelType__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelType__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelType__Group__0"


    // $ANTLR start "rule__RelType__Group__0__Impl"
    // InternalOpenCypherParser.g:14550:1: rule__RelType__Group__0__Impl : ( Colon ) ;
    public final void rule__RelType__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14554:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:14555:1: ( Colon )
            {
            // InternalOpenCypherParser.g:14555:1: ( Colon )
            // InternalOpenCypherParser.g:14556:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeAccess().getColonKeyword_0()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeAccess().getColonKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelType__Group__0__Impl"


    // $ANTLR start "rule__RelType__Group__1"
    // InternalOpenCypherParser.g:14565:1: rule__RelType__Group__1 : rule__RelType__Group__1__Impl ;
    public final void rule__RelType__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14569:1: ( rule__RelType__Group__1__Impl )
            // InternalOpenCypherParser.g:14570:2: rule__RelType__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelType__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelType__Group__1"


    // $ANTLR start "rule__RelType__Group__1__Impl"
    // InternalOpenCypherParser.g:14576:1: rule__RelType__Group__1__Impl : ( ruleRelTypeName ) ;
    public final void rule__RelType__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14580:1: ( ( ruleRelTypeName ) )
            // InternalOpenCypherParser.g:14581:1: ( ruleRelTypeName )
            {
            // InternalOpenCypherParser.g:14581:1: ( ruleRelTypeName )
            // InternalOpenCypherParser.g:14582:2: ruleRelTypeName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeAccess().getRelTypeNameParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelTypeName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeAccess().getRelTypeNameParserRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelType__Group__1__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group__0"
    // InternalOpenCypherParser.g:14592:1: rule__RelationshipTypes__Group__0 : rule__RelationshipTypes__Group__0__Impl rule__RelationshipTypes__Group__1 ;
    public final void rule__RelationshipTypes__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14596:1: ( rule__RelationshipTypes__Group__0__Impl rule__RelationshipTypes__Group__1 )
            // InternalOpenCypherParser.g:14597:2: rule__RelationshipTypes__Group__0__Impl rule__RelationshipTypes__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__RelationshipTypes__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__0"


    // $ANTLR start "rule__RelationshipTypes__Group__0__Impl"
    // InternalOpenCypherParser.g:14604:1: rule__RelationshipTypes__Group__0__Impl : ( Colon ) ;
    public final void rule__RelationshipTypes__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14608:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:14609:1: ( Colon )
            {
            // InternalOpenCypherParser.g:14609:1: ( Colon )
            // InternalOpenCypherParser.g:14610:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getColonKeyword_0()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getColonKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__0__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group__1"
    // InternalOpenCypherParser.g:14619:1: rule__RelationshipTypes__Group__1 : rule__RelationshipTypes__Group__1__Impl rule__RelationshipTypes__Group__2 ;
    public final void rule__RelationshipTypes__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14623:1: ( rule__RelationshipTypes__Group__1__Impl rule__RelationshipTypes__Group__2 )
            // InternalOpenCypherParser.g:14624:2: rule__RelationshipTypes__Group__1__Impl rule__RelationshipTypes__Group__2
            {
            pushFollow(FOLLOW_60);
            rule__RelationshipTypes__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__1"


    // $ANTLR start "rule__RelationshipTypes__Group__1__Impl"
    // InternalOpenCypherParser.g:14631:1: rule__RelationshipTypes__Group__1__Impl : ( ( rule__RelationshipTypes__RelTypeNamesAssignment_1 ) ) ;
    public final void rule__RelationshipTypes__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14635:1: ( ( ( rule__RelationshipTypes__RelTypeNamesAssignment_1 ) ) )
            // InternalOpenCypherParser.g:14636:1: ( ( rule__RelationshipTypes__RelTypeNamesAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:14636:1: ( ( rule__RelationshipTypes__RelTypeNamesAssignment_1 ) )
            // InternalOpenCypherParser.g:14637:2: ( rule__RelationshipTypes__RelTypeNamesAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesAssignment_1()); 
            }
            // InternalOpenCypherParser.g:14638:2: ( rule__RelationshipTypes__RelTypeNamesAssignment_1 )
            // InternalOpenCypherParser.g:14638:3: rule__RelationshipTypes__RelTypeNamesAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__RelTypeNamesAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__1__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group__2"
    // InternalOpenCypherParser.g:14646:1: rule__RelationshipTypes__Group__2 : rule__RelationshipTypes__Group__2__Impl ;
    public final void rule__RelationshipTypes__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14650:1: ( rule__RelationshipTypes__Group__2__Impl )
            // InternalOpenCypherParser.g:14651:2: rule__RelationshipTypes__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__2"


    // $ANTLR start "rule__RelationshipTypes__Group__2__Impl"
    // InternalOpenCypherParser.g:14657:1: rule__RelationshipTypes__Group__2__Impl : ( ( rule__RelationshipTypes__Group_2__0 )* ) ;
    public final void rule__RelationshipTypes__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14661:1: ( ( ( rule__RelationshipTypes__Group_2__0 )* ) )
            // InternalOpenCypherParser.g:14662:1: ( ( rule__RelationshipTypes__Group_2__0 )* )
            {
            // InternalOpenCypherParser.g:14662:1: ( ( rule__RelationshipTypes__Group_2__0 )* )
            // InternalOpenCypherParser.g:14663:2: ( rule__RelationshipTypes__Group_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:14664:2: ( rule__RelationshipTypes__Group_2__0 )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==VerticalLine) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // InternalOpenCypherParser.g:14664:3: rule__RelationshipTypes__Group_2__0
            	    {
            	    pushFollow(FOLLOW_87);
            	    rule__RelationshipTypes__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__2__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group_2__0"
    // InternalOpenCypherParser.g:14673:1: rule__RelationshipTypes__Group_2__0 : rule__RelationshipTypes__Group_2__0__Impl rule__RelationshipTypes__Group_2__1 ;
    public final void rule__RelationshipTypes__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14677:1: ( rule__RelationshipTypes__Group_2__0__Impl rule__RelationshipTypes__Group_2__1 )
            // InternalOpenCypherParser.g:14678:2: rule__RelationshipTypes__Group_2__0__Impl rule__RelationshipTypes__Group_2__1
            {
            pushFollow(FOLLOW_88);
            rule__RelationshipTypes__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__0"


    // $ANTLR start "rule__RelationshipTypes__Group_2__0__Impl"
    // InternalOpenCypherParser.g:14685:1: rule__RelationshipTypes__Group_2__0__Impl : ( VerticalLine ) ;
    public final void rule__RelationshipTypes__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14689:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:14690:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:14690:1: ( VerticalLine )
            // InternalOpenCypherParser.g:14691:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getVerticalLineKeyword_2_0()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getVerticalLineKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__0__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group_2__1"
    // InternalOpenCypherParser.g:14700:1: rule__RelationshipTypes__Group_2__1 : rule__RelationshipTypes__Group_2__1__Impl rule__RelationshipTypes__Group_2__2 ;
    public final void rule__RelationshipTypes__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14704:1: ( rule__RelationshipTypes__Group_2__1__Impl rule__RelationshipTypes__Group_2__2 )
            // InternalOpenCypherParser.g:14705:2: rule__RelationshipTypes__Group_2__1__Impl rule__RelationshipTypes__Group_2__2
            {
            pushFollow(FOLLOW_88);
            rule__RelationshipTypes__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__1"


    // $ANTLR start "rule__RelationshipTypes__Group_2__1__Impl"
    // InternalOpenCypherParser.g:14712:1: rule__RelationshipTypes__Group_2__1__Impl : ( ( Colon )? ) ;
    public final void rule__RelationshipTypes__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14716:1: ( ( ( Colon )? ) )
            // InternalOpenCypherParser.g:14717:1: ( ( Colon )? )
            {
            // InternalOpenCypherParser.g:14717:1: ( ( Colon )? )
            // InternalOpenCypherParser.g:14718:2: ( Colon )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getColonKeyword_2_1()); 
            }
            // InternalOpenCypherParser.g:14719:2: ( Colon )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==Colon) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // InternalOpenCypherParser.g:14719:3: Colon
                    {
                    match(input,Colon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getColonKeyword_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__1__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group_2__2"
    // InternalOpenCypherParser.g:14727:1: rule__RelationshipTypes__Group_2__2 : rule__RelationshipTypes__Group_2__2__Impl ;
    public final void rule__RelationshipTypes__Group_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14731:1: ( rule__RelationshipTypes__Group_2__2__Impl )
            // InternalOpenCypherParser.g:14732:2: rule__RelationshipTypes__Group_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__2"


    // $ANTLR start "rule__RelationshipTypes__Group_2__2__Impl"
    // InternalOpenCypherParser.g:14738:1: rule__RelationshipTypes__Group_2__2__Impl : ( ( rule__RelationshipTypes__RelTypeNamesAssignment_2_2 ) ) ;
    public final void rule__RelationshipTypes__Group_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14742:1: ( ( ( rule__RelationshipTypes__RelTypeNamesAssignment_2_2 ) ) )
            // InternalOpenCypherParser.g:14743:1: ( ( rule__RelationshipTypes__RelTypeNamesAssignment_2_2 ) )
            {
            // InternalOpenCypherParser.g:14743:1: ( ( rule__RelationshipTypes__RelTypeNamesAssignment_2_2 ) )
            // InternalOpenCypherParser.g:14744:2: ( rule__RelationshipTypes__RelTypeNamesAssignment_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesAssignment_2_2()); 
            }
            // InternalOpenCypherParser.g:14745:2: ( rule__RelationshipTypes__RelTypeNamesAssignment_2_2 )
            // InternalOpenCypherParser.g:14745:3: rule__RelationshipTypes__RelTypeNamesAssignment_2_2
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__RelTypeNamesAssignment_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesAssignment_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__2__Impl"


    // $ANTLR start "rule__NodeLabel__Group__0"
    // InternalOpenCypherParser.g:14754:1: rule__NodeLabel__Group__0 : rule__NodeLabel__Group__0__Impl rule__NodeLabel__Group__1 ;
    public final void rule__NodeLabel__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14758:1: ( rule__NodeLabel__Group__0__Impl rule__NodeLabel__Group__1 )
            // InternalOpenCypherParser.g:14759:2: rule__NodeLabel__Group__0__Impl rule__NodeLabel__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__NodeLabel__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodeLabel__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabel__Group__0"


    // $ANTLR start "rule__NodeLabel__Group__0__Impl"
    // InternalOpenCypherParser.g:14766:1: rule__NodeLabel__Group__0__Impl : ( Colon ) ;
    public final void rule__NodeLabel__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14770:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:14771:1: ( Colon )
            {
            // InternalOpenCypherParser.g:14771:1: ( Colon )
            // InternalOpenCypherParser.g:14772:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelAccess().getColonKeyword_0()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelAccess().getColonKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabel__Group__0__Impl"


    // $ANTLR start "rule__NodeLabel__Group__1"
    // InternalOpenCypherParser.g:14781:1: rule__NodeLabel__Group__1 : rule__NodeLabel__Group__1__Impl ;
    public final void rule__NodeLabel__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14785:1: ( rule__NodeLabel__Group__1__Impl )
            // InternalOpenCypherParser.g:14786:2: rule__NodeLabel__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NodeLabel__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabel__Group__1"


    // $ANTLR start "rule__NodeLabel__Group__1__Impl"
    // InternalOpenCypherParser.g:14792:1: rule__NodeLabel__Group__1__Impl : ( ( rule__NodeLabel__LabelNameAssignment_1 ) ) ;
    public final void rule__NodeLabel__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14796:1: ( ( ( rule__NodeLabel__LabelNameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:14797:1: ( ( rule__NodeLabel__LabelNameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:14797:1: ( ( rule__NodeLabel__LabelNameAssignment_1 ) )
            // InternalOpenCypherParser.g:14798:2: ( rule__NodeLabel__LabelNameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelAccess().getLabelNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:14799:2: ( rule__NodeLabel__LabelNameAssignment_1 )
            // InternalOpenCypherParser.g:14799:3: rule__NodeLabel__LabelNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__NodeLabel__LabelNameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelAccess().getLabelNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabel__Group__1__Impl"


    // $ANTLR start "rule__RangeLiteral__Group__0"
    // InternalOpenCypherParser.g:14808:1: rule__RangeLiteral__Group__0 : rule__RangeLiteral__Group__0__Impl rule__RangeLiteral__Group__1 ;
    public final void rule__RangeLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14812:1: ( rule__RangeLiteral__Group__0__Impl rule__RangeLiteral__Group__1 )
            // InternalOpenCypherParser.g:14813:2: rule__RangeLiteral__Group__0__Impl rule__RangeLiteral__Group__1
            {
            pushFollow(FOLLOW_67);
            rule__RangeLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__0"


    // $ANTLR start "rule__RangeLiteral__Group__0__Impl"
    // InternalOpenCypherParser.g:14820:1: rule__RangeLiteral__Group__0__Impl : ( () ) ;
    public final void rule__RangeLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14824:1: ( ( () ) )
            // InternalOpenCypherParser.g:14825:1: ( () )
            {
            // InternalOpenCypherParser.g:14825:1: ( () )
            // InternalOpenCypherParser.g:14826:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0()); 
            }
            // InternalOpenCypherParser.g:14827:2: ()
            // InternalOpenCypherParser.g:14827:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__0__Impl"


    // $ANTLR start "rule__RangeLiteral__Group__1"
    // InternalOpenCypherParser.g:14835:1: rule__RangeLiteral__Group__1 : rule__RangeLiteral__Group__1__Impl rule__RangeLiteral__Group__2 ;
    public final void rule__RangeLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14839:1: ( rule__RangeLiteral__Group__1__Impl rule__RangeLiteral__Group__2 )
            // InternalOpenCypherParser.g:14840:2: rule__RangeLiteral__Group__1__Impl rule__RangeLiteral__Group__2
            {
            pushFollow(FOLLOW_89);
            rule__RangeLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__1"


    // $ANTLR start "rule__RangeLiteral__Group__1__Impl"
    // InternalOpenCypherParser.g:14847:1: rule__RangeLiteral__Group__1__Impl : ( Asterisk ) ;
    public final void rule__RangeLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14851:1: ( ( Asterisk ) )
            // InternalOpenCypherParser.g:14852:1: ( Asterisk )
            {
            // InternalOpenCypherParser.g:14852:1: ( Asterisk )
            // InternalOpenCypherParser.g:14853:2: Asterisk
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getAsteriskKeyword_1()); 
            }
            match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getAsteriskKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__1__Impl"


    // $ANTLR start "rule__RangeLiteral__Group__2"
    // InternalOpenCypherParser.g:14862:1: rule__RangeLiteral__Group__2 : rule__RangeLiteral__Group__2__Impl ;
    public final void rule__RangeLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14866:1: ( rule__RangeLiteral__Group__2__Impl )
            // InternalOpenCypherParser.g:14867:2: rule__RangeLiteral__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__2"


    // $ANTLR start "rule__RangeLiteral__Group__2__Impl"
    // InternalOpenCypherParser.g:14873:1: rule__RangeLiteral__Group__2__Impl : ( ( rule__RangeLiteral__Group_2__0 )? ) ;
    public final void rule__RangeLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14877:1: ( ( ( rule__RangeLiteral__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:14878:1: ( ( rule__RangeLiteral__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:14878:1: ( ( rule__RangeLiteral__Group_2__0 )? )
            // InternalOpenCypherParser.g:14879:2: ( rule__RangeLiteral__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:14880:2: ( rule__RangeLiteral__Group_2__0 )?
            int alt114=2;
            switch ( input.LA(1) ) {
                case FullStopFullStop:
                case RULE_HEX:
                case RULE_INT:
                case RULE_DECIMAL:
                    {
                    alt114=1;
                    }
                    break;
                case EOF:
                    {
                    int LA114_2 = input.LA(2);

                    if ( (synpred241_InternalOpenCypherParser()) ) {
                        alt114=1;
                    }
                    }
                    break;
                case LeftCurlyBracket:
                    {
                    int LA114_3 = input.LA(2);

                    if ( (synpred241_InternalOpenCypherParser()) ) {
                        alt114=1;
                    }
                    }
                    break;
                case DollarSign:
                    {
                    int LA114_4 = input.LA(2);

                    if ( (synpred241_InternalOpenCypherParser()) ) {
                        alt114=1;
                    }
                    }
                    break;
                case RightSquareBracket:
                    {
                    int LA114_5 = input.LA(2);

                    if ( (synpred241_InternalOpenCypherParser()) ) {
                        alt114=1;
                    }
                    }
                    break;
            }

            switch (alt114) {
                case 1 :
                    // InternalOpenCypherParser.g:14880:3: rule__RangeLiteral__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RangeLiteral__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__2__Impl"


    // $ANTLR start "rule__RangeLiteral__Group_2__0"
    // InternalOpenCypherParser.g:14889:1: rule__RangeLiteral__Group_2__0 : rule__RangeLiteral__Group_2__0__Impl rule__RangeLiteral__Group_2__1 ;
    public final void rule__RangeLiteral__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14893:1: ( rule__RangeLiteral__Group_2__0__Impl rule__RangeLiteral__Group_2__1 )
            // InternalOpenCypherParser.g:14894:2: rule__RangeLiteral__Group_2__0__Impl rule__RangeLiteral__Group_2__1
            {
            pushFollow(FOLLOW_89);
            rule__RangeLiteral__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2__0"


    // $ANTLR start "rule__RangeLiteral__Group_2__0__Impl"
    // InternalOpenCypherParser.g:14901:1: rule__RangeLiteral__Group_2__0__Impl : ( ( rule__RangeLiteral__LowerAssignment_2_0 )? ) ;
    public final void rule__RangeLiteral__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14905:1: ( ( ( rule__RangeLiteral__LowerAssignment_2_0 )? ) )
            // InternalOpenCypherParser.g:14906:1: ( ( rule__RangeLiteral__LowerAssignment_2_0 )? )
            {
            // InternalOpenCypherParser.g:14906:1: ( ( rule__RangeLiteral__LowerAssignment_2_0 )? )
            // InternalOpenCypherParser.g:14907:2: ( rule__RangeLiteral__LowerAssignment_2_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getLowerAssignment_2_0()); 
            }
            // InternalOpenCypherParser.g:14908:2: ( rule__RangeLiteral__LowerAssignment_2_0 )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=RULE_HEX && LA115_0<=RULE_DECIMAL)) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // InternalOpenCypherParser.g:14908:3: rule__RangeLiteral__LowerAssignment_2_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RangeLiteral__LowerAssignment_2_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getLowerAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2__0__Impl"


    // $ANTLR start "rule__RangeLiteral__Group_2__1"
    // InternalOpenCypherParser.g:14916:1: rule__RangeLiteral__Group_2__1 : rule__RangeLiteral__Group_2__1__Impl ;
    public final void rule__RangeLiteral__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14920:1: ( rule__RangeLiteral__Group_2__1__Impl )
            // InternalOpenCypherParser.g:14921:2: rule__RangeLiteral__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2__1"


    // $ANTLR start "rule__RangeLiteral__Group_2__1__Impl"
    // InternalOpenCypherParser.g:14927:1: rule__RangeLiteral__Group_2__1__Impl : ( ( rule__RangeLiteral__Group_2_1__0 )? ) ;
    public final void rule__RangeLiteral__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14931:1: ( ( ( rule__RangeLiteral__Group_2_1__0 )? ) )
            // InternalOpenCypherParser.g:14932:1: ( ( rule__RangeLiteral__Group_2_1__0 )? )
            {
            // InternalOpenCypherParser.g:14932:1: ( ( rule__RangeLiteral__Group_2_1__0 )? )
            // InternalOpenCypherParser.g:14933:2: ( rule__RangeLiteral__Group_2_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getGroup_2_1()); 
            }
            // InternalOpenCypherParser.g:14934:2: ( rule__RangeLiteral__Group_2_1__0 )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==FullStopFullStop) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // InternalOpenCypherParser.g:14934:3: rule__RangeLiteral__Group_2_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RangeLiteral__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2__1__Impl"


    // $ANTLR start "rule__RangeLiteral__Group_2_1__0"
    // InternalOpenCypherParser.g:14943:1: rule__RangeLiteral__Group_2_1__0 : rule__RangeLiteral__Group_2_1__0__Impl rule__RangeLiteral__Group_2_1__1 ;
    public final void rule__RangeLiteral__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14947:1: ( rule__RangeLiteral__Group_2_1__0__Impl rule__RangeLiteral__Group_2_1__1 )
            // InternalOpenCypherParser.g:14948:2: rule__RangeLiteral__Group_2_1__0__Impl rule__RangeLiteral__Group_2_1__1
            {
            pushFollow(FOLLOW_17);
            rule__RangeLiteral__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2_1__0"


    // $ANTLR start "rule__RangeLiteral__Group_2_1__0__Impl"
    // InternalOpenCypherParser.g:14955:1: rule__RangeLiteral__Group_2_1__0__Impl : ( ( rule__RangeLiteral__VariableLengthAssignment_2_1_0 ) ) ;
    public final void rule__RangeLiteral__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14959:1: ( ( ( rule__RangeLiteral__VariableLengthAssignment_2_1_0 ) ) )
            // InternalOpenCypherParser.g:14960:1: ( ( rule__RangeLiteral__VariableLengthAssignment_2_1_0 ) )
            {
            // InternalOpenCypherParser.g:14960:1: ( ( rule__RangeLiteral__VariableLengthAssignment_2_1_0 ) )
            // InternalOpenCypherParser.g:14961:2: ( rule__RangeLiteral__VariableLengthAssignment_2_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getVariableLengthAssignment_2_1_0()); 
            }
            // InternalOpenCypherParser.g:14962:2: ( rule__RangeLiteral__VariableLengthAssignment_2_1_0 )
            // InternalOpenCypherParser.g:14962:3: rule__RangeLiteral__VariableLengthAssignment_2_1_0
            {
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__VariableLengthAssignment_2_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getVariableLengthAssignment_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2_1__0__Impl"


    // $ANTLR start "rule__RangeLiteral__Group_2_1__1"
    // InternalOpenCypherParser.g:14970:1: rule__RangeLiteral__Group_2_1__1 : rule__RangeLiteral__Group_2_1__1__Impl ;
    public final void rule__RangeLiteral__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14974:1: ( rule__RangeLiteral__Group_2_1__1__Impl )
            // InternalOpenCypherParser.g:14975:2: rule__RangeLiteral__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2_1__1"


    // $ANTLR start "rule__RangeLiteral__Group_2_1__1__Impl"
    // InternalOpenCypherParser.g:14981:1: rule__RangeLiteral__Group_2_1__1__Impl : ( ( rule__RangeLiteral__UpperAssignment_2_1_1 )? ) ;
    public final void rule__RangeLiteral__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14985:1: ( ( ( rule__RangeLiteral__UpperAssignment_2_1_1 )? ) )
            // InternalOpenCypherParser.g:14986:1: ( ( rule__RangeLiteral__UpperAssignment_2_1_1 )? )
            {
            // InternalOpenCypherParser.g:14986:1: ( ( rule__RangeLiteral__UpperAssignment_2_1_1 )? )
            // InternalOpenCypherParser.g:14987:2: ( rule__RangeLiteral__UpperAssignment_2_1_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getUpperAssignment_2_1_1()); 
            }
            // InternalOpenCypherParser.g:14988:2: ( rule__RangeLiteral__UpperAssignment_2_1_1 )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( ((LA117_0>=RULE_HEX && LA117_0<=RULE_DECIMAL)) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // InternalOpenCypherParser.g:14988:3: rule__RangeLiteral__UpperAssignment_2_1_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__RangeLiteral__UpperAssignment_2_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getUpperAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2_1__1__Impl"


    // $ANTLR start "rule__OrExpression__Group__0"
    // InternalOpenCypherParser.g:14997:1: rule__OrExpression__Group__0 : rule__OrExpression__Group__0__Impl rule__OrExpression__Group__1 ;
    public final void rule__OrExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15001:1: ( rule__OrExpression__Group__0__Impl rule__OrExpression__Group__1 )
            // InternalOpenCypherParser.g:15002:2: rule__OrExpression__Group__0__Impl rule__OrExpression__Group__1
            {
            pushFollow(FOLLOW_90);
            rule__OrExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OrExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__Group__0"


    // $ANTLR start "rule__OrExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:15009:1: rule__OrExpression__Group__0__Impl : ( ruleXorExpression ) ;
    public final void rule__OrExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15013:1: ( ( ruleXorExpression ) )
            // InternalOpenCypherParser.g:15014:1: ( ruleXorExpression )
            {
            // InternalOpenCypherParser.g:15014:1: ( ruleXorExpression )
            // InternalOpenCypherParser.g:15015:2: ruleXorExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXorExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__Group__0__Impl"


    // $ANTLR start "rule__OrExpression__Group__1"
    // InternalOpenCypherParser.g:15024:1: rule__OrExpression__Group__1 : rule__OrExpression__Group__1__Impl ;
    public final void rule__OrExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15028:1: ( rule__OrExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:15029:2: rule__OrExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__OrExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__Group__1"


    // $ANTLR start "rule__OrExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:15035:1: rule__OrExpression__Group__1__Impl : ( ( rule__OrExpression__Group_1__0 )* ) ;
    public final void rule__OrExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15039:1: ( ( ( rule__OrExpression__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:15040:1: ( ( rule__OrExpression__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:15040:1: ( ( rule__OrExpression__Group_1__0 )* )
            // InternalOpenCypherParser.g:15041:2: ( rule__OrExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:15042:2: ( rule__OrExpression__Group_1__0 )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==OR) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15042:3: rule__OrExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_91);
            	    rule__OrExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__Group__1__Impl"


    // $ANTLR start "rule__OrExpression__Group_1__0"
    // InternalOpenCypherParser.g:15051:1: rule__OrExpression__Group_1__0 : rule__OrExpression__Group_1__0__Impl rule__OrExpression__Group_1__1 ;
    public final void rule__OrExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15055:1: ( rule__OrExpression__Group_1__0__Impl rule__OrExpression__Group_1__1 )
            // InternalOpenCypherParser.g:15056:2: rule__OrExpression__Group_1__0__Impl rule__OrExpression__Group_1__1
            {
            pushFollow(FOLLOW_90);
            rule__OrExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OrExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__Group_1__0"


    // $ANTLR start "rule__OrExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15063:1: rule__OrExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__OrExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15067:1: ( ( () ) )
            // InternalOpenCypherParser.g:15068:1: ( () )
            {
            // InternalOpenCypherParser.g:15068:1: ( () )
            // InternalOpenCypherParser.g:15069:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15070:2: ()
            // InternalOpenCypherParser.g:15070:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__Group_1__0__Impl"


    // $ANTLR start "rule__OrExpression__Group_1__1"
    // InternalOpenCypherParser.g:15078:1: rule__OrExpression__Group_1__1 : rule__OrExpression__Group_1__1__Impl rule__OrExpression__Group_1__2 ;
    public final void rule__OrExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15082:1: ( rule__OrExpression__Group_1__1__Impl rule__OrExpression__Group_1__2 )
            // InternalOpenCypherParser.g:15083:2: rule__OrExpression__Group_1__1__Impl rule__OrExpression__Group_1__2
            {
            pushFollow(FOLLOW_43);
            rule__OrExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OrExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__Group_1__1"


    // $ANTLR start "rule__OrExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15090:1: rule__OrExpression__Group_1__1__Impl : ( ( rule__OrExpression__OperatorAssignment_1_1 ) ) ;
    public final void rule__OrExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15094:1: ( ( ( rule__OrExpression__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15095:1: ( ( rule__OrExpression__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15095:1: ( ( rule__OrExpression__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15096:2: ( rule__OrExpression__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15097:2: ( rule__OrExpression__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15097:3: rule__OrExpression__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__OrExpression__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__Group_1__1__Impl"


    // $ANTLR start "rule__OrExpression__Group_1__2"
    // InternalOpenCypherParser.g:15105:1: rule__OrExpression__Group_1__2 : rule__OrExpression__Group_1__2__Impl ;
    public final void rule__OrExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15109:1: ( rule__OrExpression__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15110:2: rule__OrExpression__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__OrExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__Group_1__2"


    // $ANTLR start "rule__OrExpression__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15116:1: rule__OrExpression__Group_1__2__Impl : ( ( rule__OrExpression__RightAssignment_1_2 ) ) ;
    public final void rule__OrExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15120:1: ( ( ( rule__OrExpression__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15121:1: ( ( rule__OrExpression__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15121:1: ( ( rule__OrExpression__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15122:2: ( rule__OrExpression__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15123:2: ( rule__OrExpression__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:15123:3: rule__OrExpression__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__OrExpression__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__Group_1__2__Impl"


    // $ANTLR start "rule__XorExpression__Group__0"
    // InternalOpenCypherParser.g:15132:1: rule__XorExpression__Group__0 : rule__XorExpression__Group__0__Impl rule__XorExpression__Group__1 ;
    public final void rule__XorExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15136:1: ( rule__XorExpression__Group__0__Impl rule__XorExpression__Group__1 )
            // InternalOpenCypherParser.g:15137:2: rule__XorExpression__Group__0__Impl rule__XorExpression__Group__1
            {
            pushFollow(FOLLOW_92);
            rule__XorExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XorExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__Group__0"


    // $ANTLR start "rule__XorExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:15144:1: rule__XorExpression__Group__0__Impl : ( ruleAndExpression ) ;
    public final void rule__XorExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15148:1: ( ( ruleAndExpression ) )
            // InternalOpenCypherParser.g:15149:1: ( ruleAndExpression )
            {
            // InternalOpenCypherParser.g:15149:1: ( ruleAndExpression )
            // InternalOpenCypherParser.g:15150:2: ruleAndExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAndExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__Group__0__Impl"


    // $ANTLR start "rule__XorExpression__Group__1"
    // InternalOpenCypherParser.g:15159:1: rule__XorExpression__Group__1 : rule__XorExpression__Group__1__Impl ;
    public final void rule__XorExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15163:1: ( rule__XorExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:15164:2: rule__XorExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__XorExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__Group__1"


    // $ANTLR start "rule__XorExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:15170:1: rule__XorExpression__Group__1__Impl : ( ( rule__XorExpression__Group_1__0 )* ) ;
    public final void rule__XorExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15174:1: ( ( ( rule__XorExpression__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:15175:1: ( ( rule__XorExpression__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:15175:1: ( ( rule__XorExpression__Group_1__0 )* )
            // InternalOpenCypherParser.g:15176:2: ( rule__XorExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:15177:2: ( rule__XorExpression__Group_1__0 )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==XOR) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15177:3: rule__XorExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_93);
            	    rule__XorExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__Group__1__Impl"


    // $ANTLR start "rule__XorExpression__Group_1__0"
    // InternalOpenCypherParser.g:15186:1: rule__XorExpression__Group_1__0 : rule__XorExpression__Group_1__0__Impl rule__XorExpression__Group_1__1 ;
    public final void rule__XorExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15190:1: ( rule__XorExpression__Group_1__0__Impl rule__XorExpression__Group_1__1 )
            // InternalOpenCypherParser.g:15191:2: rule__XorExpression__Group_1__0__Impl rule__XorExpression__Group_1__1
            {
            pushFollow(FOLLOW_92);
            rule__XorExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XorExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__Group_1__0"


    // $ANTLR start "rule__XorExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15198:1: rule__XorExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__XorExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15202:1: ( ( () ) )
            // InternalOpenCypherParser.g:15203:1: ( () )
            {
            // InternalOpenCypherParser.g:15203:1: ( () )
            // InternalOpenCypherParser.g:15204:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15205:2: ()
            // InternalOpenCypherParser.g:15205:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__Group_1__0__Impl"


    // $ANTLR start "rule__XorExpression__Group_1__1"
    // InternalOpenCypherParser.g:15213:1: rule__XorExpression__Group_1__1 : rule__XorExpression__Group_1__1__Impl rule__XorExpression__Group_1__2 ;
    public final void rule__XorExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15217:1: ( rule__XorExpression__Group_1__1__Impl rule__XorExpression__Group_1__2 )
            // InternalOpenCypherParser.g:15218:2: rule__XorExpression__Group_1__1__Impl rule__XorExpression__Group_1__2
            {
            pushFollow(FOLLOW_43);
            rule__XorExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XorExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__Group_1__1"


    // $ANTLR start "rule__XorExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15225:1: rule__XorExpression__Group_1__1__Impl : ( ( rule__XorExpression__OperatorAssignment_1_1 ) ) ;
    public final void rule__XorExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15229:1: ( ( ( rule__XorExpression__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15230:1: ( ( rule__XorExpression__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15230:1: ( ( rule__XorExpression__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15231:2: ( rule__XorExpression__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorExpressionAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15232:2: ( rule__XorExpression__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15232:3: rule__XorExpression__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__XorExpression__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorExpressionAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__Group_1__1__Impl"


    // $ANTLR start "rule__XorExpression__Group_1__2"
    // InternalOpenCypherParser.g:15240:1: rule__XorExpression__Group_1__2 : rule__XorExpression__Group_1__2__Impl ;
    public final void rule__XorExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15244:1: ( rule__XorExpression__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15245:2: rule__XorExpression__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__XorExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__Group_1__2"


    // $ANTLR start "rule__XorExpression__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15251:1: rule__XorExpression__Group_1__2__Impl : ( ( rule__XorExpression__RightAssignment_1_2 ) ) ;
    public final void rule__XorExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15255:1: ( ( ( rule__XorExpression__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15256:1: ( ( rule__XorExpression__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15256:1: ( ( rule__XorExpression__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15257:2: ( rule__XorExpression__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15258:2: ( rule__XorExpression__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:15258:3: rule__XorExpression__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__XorExpression__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__Group_1__2__Impl"


    // $ANTLR start "rule__AndExpression__Group__0"
    // InternalOpenCypherParser.g:15267:1: rule__AndExpression__Group__0 : rule__AndExpression__Group__0__Impl rule__AndExpression__Group__1 ;
    public final void rule__AndExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15271:1: ( rule__AndExpression__Group__0__Impl rule__AndExpression__Group__1 )
            // InternalOpenCypherParser.g:15272:2: rule__AndExpression__Group__0__Impl rule__AndExpression__Group__1
            {
            pushFollow(FOLLOW_94);
            rule__AndExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AndExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__Group__0"


    // $ANTLR start "rule__AndExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:15279:1: rule__AndExpression__Group__0__Impl : ( ruleNotExpression ) ;
    public final void rule__AndExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15283:1: ( ( ruleNotExpression ) )
            // InternalOpenCypherParser.g:15284:1: ( ruleNotExpression )
            {
            // InternalOpenCypherParser.g:15284:1: ( ruleNotExpression )
            // InternalOpenCypherParser.g:15285:2: ruleNotExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNotExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__Group__0__Impl"


    // $ANTLR start "rule__AndExpression__Group__1"
    // InternalOpenCypherParser.g:15294:1: rule__AndExpression__Group__1 : rule__AndExpression__Group__1__Impl ;
    public final void rule__AndExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15298:1: ( rule__AndExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:15299:2: rule__AndExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__AndExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__Group__1"


    // $ANTLR start "rule__AndExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:15305:1: rule__AndExpression__Group__1__Impl : ( ( rule__AndExpression__Group_1__0 )* ) ;
    public final void rule__AndExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15309:1: ( ( ( rule__AndExpression__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:15310:1: ( ( rule__AndExpression__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:15310:1: ( ( rule__AndExpression__Group_1__0 )* )
            // InternalOpenCypherParser.g:15311:2: ( rule__AndExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:15312:2: ( rule__AndExpression__Group_1__0 )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==AND) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15312:3: rule__AndExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_95);
            	    rule__AndExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__Group__1__Impl"


    // $ANTLR start "rule__AndExpression__Group_1__0"
    // InternalOpenCypherParser.g:15321:1: rule__AndExpression__Group_1__0 : rule__AndExpression__Group_1__0__Impl rule__AndExpression__Group_1__1 ;
    public final void rule__AndExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15325:1: ( rule__AndExpression__Group_1__0__Impl rule__AndExpression__Group_1__1 )
            // InternalOpenCypherParser.g:15326:2: rule__AndExpression__Group_1__0__Impl rule__AndExpression__Group_1__1
            {
            pushFollow(FOLLOW_94);
            rule__AndExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AndExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__Group_1__0"


    // $ANTLR start "rule__AndExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15333:1: rule__AndExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__AndExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15337:1: ( ( () ) )
            // InternalOpenCypherParser.g:15338:1: ( () )
            {
            // InternalOpenCypherParser.g:15338:1: ( () )
            // InternalOpenCypherParser.g:15339:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15340:2: ()
            // InternalOpenCypherParser.g:15340:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__Group_1__0__Impl"


    // $ANTLR start "rule__AndExpression__Group_1__1"
    // InternalOpenCypherParser.g:15348:1: rule__AndExpression__Group_1__1 : rule__AndExpression__Group_1__1__Impl rule__AndExpression__Group_1__2 ;
    public final void rule__AndExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15352:1: ( rule__AndExpression__Group_1__1__Impl rule__AndExpression__Group_1__2 )
            // InternalOpenCypherParser.g:15353:2: rule__AndExpression__Group_1__1__Impl rule__AndExpression__Group_1__2
            {
            pushFollow(FOLLOW_43);
            rule__AndExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AndExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__Group_1__1"


    // $ANTLR start "rule__AndExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15360:1: rule__AndExpression__Group_1__1__Impl : ( ( rule__AndExpression__OperatorAssignment_1_1 ) ) ;
    public final void rule__AndExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15364:1: ( ( ( rule__AndExpression__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15365:1: ( ( rule__AndExpression__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15365:1: ( ( rule__AndExpression__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15366:2: ( rule__AndExpression__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15367:2: ( rule__AndExpression__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15367:3: rule__AndExpression__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__AndExpression__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__Group_1__1__Impl"


    // $ANTLR start "rule__AndExpression__Group_1__2"
    // InternalOpenCypherParser.g:15375:1: rule__AndExpression__Group_1__2 : rule__AndExpression__Group_1__2__Impl ;
    public final void rule__AndExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15379:1: ( rule__AndExpression__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15380:2: rule__AndExpression__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__AndExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__Group_1__2"


    // $ANTLR start "rule__AndExpression__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15386:1: rule__AndExpression__Group_1__2__Impl : ( ( rule__AndExpression__RightAssignment_1_2 ) ) ;
    public final void rule__AndExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15390:1: ( ( ( rule__AndExpression__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15391:1: ( ( rule__AndExpression__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15391:1: ( ( rule__AndExpression__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15392:2: ( rule__AndExpression__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15393:2: ( rule__AndExpression__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:15393:3: rule__AndExpression__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__AndExpression__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__Group_1__2__Impl"


    // $ANTLR start "rule__NotExpression__Group_0__0"
    // InternalOpenCypherParser.g:15402:1: rule__NotExpression__Group_0__0 : rule__NotExpression__Group_0__0__Impl rule__NotExpression__Group_0__1 ;
    public final void rule__NotExpression__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15406:1: ( rule__NotExpression__Group_0__0__Impl rule__NotExpression__Group_0__1 )
            // InternalOpenCypherParser.g:15407:2: rule__NotExpression__Group_0__0__Impl rule__NotExpression__Group_0__1
            {
            pushFollow(FOLLOW_96);
            rule__NotExpression__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NotExpression__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NotExpression__Group_0__0"


    // $ANTLR start "rule__NotExpression__Group_0__0__Impl"
    // InternalOpenCypherParser.g:15414:1: rule__NotExpression__Group_0__0__Impl : ( () ) ;
    public final void rule__NotExpression__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15418:1: ( ( () ) )
            // InternalOpenCypherParser.g:15419:1: ( () )
            {
            // InternalOpenCypherParser.g:15419:1: ( () )
            // InternalOpenCypherParser.g:15420:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0_0()); 
            }
            // InternalOpenCypherParser.g:15421:2: ()
            // InternalOpenCypherParser.g:15421:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NotExpression__Group_0__0__Impl"


    // $ANTLR start "rule__NotExpression__Group_0__1"
    // InternalOpenCypherParser.g:15429:1: rule__NotExpression__Group_0__1 : rule__NotExpression__Group_0__1__Impl rule__NotExpression__Group_0__2 ;
    public final void rule__NotExpression__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15433:1: ( rule__NotExpression__Group_0__1__Impl rule__NotExpression__Group_0__2 )
            // InternalOpenCypherParser.g:15434:2: rule__NotExpression__Group_0__1__Impl rule__NotExpression__Group_0__2
            {
            pushFollow(FOLLOW_43);
            rule__NotExpression__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NotExpression__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NotExpression__Group_0__1"


    // $ANTLR start "rule__NotExpression__Group_0__1__Impl"
    // InternalOpenCypherParser.g:15441:1: rule__NotExpression__Group_0__1__Impl : ( ( rule__NotExpression__OperatorAssignment_0_1 ) ) ;
    public final void rule__NotExpression__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15445:1: ( ( ( rule__NotExpression__OperatorAssignment_0_1 ) ) )
            // InternalOpenCypherParser.g:15446:1: ( ( rule__NotExpression__OperatorAssignment_0_1 ) )
            {
            // InternalOpenCypherParser.g:15446:1: ( ( rule__NotExpression__OperatorAssignment_0_1 ) )
            // InternalOpenCypherParser.g:15447:2: ( rule__NotExpression__OperatorAssignment_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); 
            }
            // InternalOpenCypherParser.g:15448:2: ( rule__NotExpression__OperatorAssignment_0_1 )
            // InternalOpenCypherParser.g:15448:3: rule__NotExpression__OperatorAssignment_0_1
            {
            pushFollow(FOLLOW_2);
            rule__NotExpression__OperatorAssignment_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NotExpression__Group_0__1__Impl"


    // $ANTLR start "rule__NotExpression__Group_0__2"
    // InternalOpenCypherParser.g:15456:1: rule__NotExpression__Group_0__2 : rule__NotExpression__Group_0__2__Impl ;
    public final void rule__NotExpression__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15460:1: ( rule__NotExpression__Group_0__2__Impl )
            // InternalOpenCypherParser.g:15461:2: rule__NotExpression__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NotExpression__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NotExpression__Group_0__2"


    // $ANTLR start "rule__NotExpression__Group_0__2__Impl"
    // InternalOpenCypherParser.g:15467:1: rule__NotExpression__Group_0__2__Impl : ( ( rule__NotExpression__LeftAssignment_0_2 ) ) ;
    public final void rule__NotExpression__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15471:1: ( ( ( rule__NotExpression__LeftAssignment_0_2 ) ) )
            // InternalOpenCypherParser.g:15472:1: ( ( rule__NotExpression__LeftAssignment_0_2 ) )
            {
            // InternalOpenCypherParser.g:15472:1: ( ( rule__NotExpression__LeftAssignment_0_2 ) )
            // InternalOpenCypherParser.g:15473:2: ( rule__NotExpression__LeftAssignment_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNotExpressionAccess().getLeftAssignment_0_2()); 
            }
            // InternalOpenCypherParser.g:15474:2: ( rule__NotExpression__LeftAssignment_0_2 )
            // InternalOpenCypherParser.g:15474:3: rule__NotExpression__LeftAssignment_0_2
            {
            pushFollow(FOLLOW_2);
            rule__NotExpression__LeftAssignment_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNotExpressionAccess().getLeftAssignment_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NotExpression__Group_0__2__Impl"


    // $ANTLR start "rule__ComparisonExpression__Group__0"
    // InternalOpenCypherParser.g:15483:1: rule__ComparisonExpression__Group__0 : rule__ComparisonExpression__Group__0__Impl rule__ComparisonExpression__Group__1 ;
    public final void rule__ComparisonExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15487:1: ( rule__ComparisonExpression__Group__0__Impl rule__ComparisonExpression__Group__1 )
            // InternalOpenCypherParser.g:15488:2: rule__ComparisonExpression__Group__0__Impl rule__ComparisonExpression__Group__1
            {
            pushFollow(FOLLOW_97);
            rule__ComparisonExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ComparisonExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__Group__0"


    // $ANTLR start "rule__ComparisonExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:15495:1: rule__ComparisonExpression__Group__0__Impl : ( ruleAddOrSubtractExpression ) ;
    public final void rule__ComparisonExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15499:1: ( ( ruleAddOrSubtractExpression ) )
            // InternalOpenCypherParser.g:15500:1: ( ruleAddOrSubtractExpression )
            {
            // InternalOpenCypherParser.g:15500:1: ( ruleAddOrSubtractExpression )
            // InternalOpenCypherParser.g:15501:2: ruleAddOrSubtractExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getComparisonExpressionAccess().getAddOrSubtractExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getComparisonExpressionAccess().getAddOrSubtractExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__Group__0__Impl"


    // $ANTLR start "rule__ComparisonExpression__Group__1"
    // InternalOpenCypherParser.g:15510:1: rule__ComparisonExpression__Group__1 : rule__ComparisonExpression__Group__1__Impl ;
    public final void rule__ComparisonExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15514:1: ( rule__ComparisonExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:15515:2: rule__ComparisonExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ComparisonExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__Group__1"


    // $ANTLR start "rule__ComparisonExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:15521:1: rule__ComparisonExpression__Group__1__Impl : ( ( rule__ComparisonExpression__Group_1__0 )* ) ;
    public final void rule__ComparisonExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15525:1: ( ( ( rule__ComparisonExpression__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:15526:1: ( ( rule__ComparisonExpression__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:15526:1: ( ( rule__ComparisonExpression__Group_1__0 )* )
            // InternalOpenCypherParser.g:15527:2: ( rule__ComparisonExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:15528:2: ( rule__ComparisonExpression__Group_1__0 )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( ((LA121_0>=LessThanSignEqualsSign && LA121_0<=LessThanSignGreaterThanSign)||LA121_0==GreaterThanSignEqualsSign||(LA121_0>=LessThanSign && LA121_0<=GreaterThanSign)) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15528:3: rule__ComparisonExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_98);
            	    rule__ComparisonExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__Group__1__Impl"


    // $ANTLR start "rule__ComparisonExpression__Group_1__0"
    // InternalOpenCypherParser.g:15537:1: rule__ComparisonExpression__Group_1__0 : rule__ComparisonExpression__Group_1__0__Impl rule__ComparisonExpression__Group_1__1 ;
    public final void rule__ComparisonExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15541:1: ( rule__ComparisonExpression__Group_1__0__Impl rule__ComparisonExpression__Group_1__1 )
            // InternalOpenCypherParser.g:15542:2: rule__ComparisonExpression__Group_1__0__Impl rule__ComparisonExpression__Group_1__1
            {
            pushFollow(FOLLOW_97);
            rule__ComparisonExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ComparisonExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__Group_1__0"


    // $ANTLR start "rule__ComparisonExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15549:1: rule__ComparisonExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__ComparisonExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15553:1: ( ( () ) )
            // InternalOpenCypherParser.g:15554:1: ( () )
            {
            // InternalOpenCypherParser.g:15554:1: ( () )
            // InternalOpenCypherParser.g:15555:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15556:2: ()
            // InternalOpenCypherParser.g:15556:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__Group_1__0__Impl"


    // $ANTLR start "rule__ComparisonExpression__Group_1__1"
    // InternalOpenCypherParser.g:15564:1: rule__ComparisonExpression__Group_1__1 : rule__ComparisonExpression__Group_1__1__Impl rule__ComparisonExpression__Group_1__2 ;
    public final void rule__ComparisonExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15568:1: ( rule__ComparisonExpression__Group_1__1__Impl rule__ComparisonExpression__Group_1__2 )
            // InternalOpenCypherParser.g:15569:2: rule__ComparisonExpression__Group_1__1__Impl rule__ComparisonExpression__Group_1__2
            {
            pushFollow(FOLLOW_43);
            rule__ComparisonExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ComparisonExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__Group_1__1"


    // $ANTLR start "rule__ComparisonExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15576:1: rule__ComparisonExpression__Group_1__1__Impl : ( ( rule__ComparisonExpression__OperatorAssignment_1_1 ) ) ;
    public final void rule__ComparisonExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15580:1: ( ( ( rule__ComparisonExpression__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15581:1: ( ( rule__ComparisonExpression__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15581:1: ( ( rule__ComparisonExpression__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15582:2: ( rule__ComparisonExpression__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15583:2: ( rule__ComparisonExpression__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15583:3: rule__ComparisonExpression__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ComparisonExpression__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__Group_1__1__Impl"


    // $ANTLR start "rule__ComparisonExpression__Group_1__2"
    // InternalOpenCypherParser.g:15591:1: rule__ComparisonExpression__Group_1__2 : rule__ComparisonExpression__Group_1__2__Impl ;
    public final void rule__ComparisonExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15595:1: ( rule__ComparisonExpression__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15596:2: rule__ComparisonExpression__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ComparisonExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__Group_1__2"


    // $ANTLR start "rule__ComparisonExpression__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15602:1: rule__ComparisonExpression__Group_1__2__Impl : ( ( rule__ComparisonExpression__RightAssignment_1_2 ) ) ;
    public final void rule__ComparisonExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15606:1: ( ( ( rule__ComparisonExpression__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15607:1: ( ( rule__ComparisonExpression__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15607:1: ( ( rule__ComparisonExpression__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15608:2: ( rule__ComparisonExpression__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15609:2: ( rule__ComparisonExpression__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:15609:3: rule__ComparisonExpression__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__ComparisonExpression__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__Group_1__2__Impl"


    // $ANTLR start "rule__AddOrSubtractExpression__Group__0"
    // InternalOpenCypherParser.g:15618:1: rule__AddOrSubtractExpression__Group__0 : rule__AddOrSubtractExpression__Group__0__Impl rule__AddOrSubtractExpression__Group__1 ;
    public final void rule__AddOrSubtractExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15622:1: ( rule__AddOrSubtractExpression__Group__0__Impl rule__AddOrSubtractExpression__Group__1 )
            // InternalOpenCypherParser.g:15623:2: rule__AddOrSubtractExpression__Group__0__Impl rule__AddOrSubtractExpression__Group__1
            {
            pushFollow(FOLLOW_99);
            rule__AddOrSubtractExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AddOrSubtractExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__Group__0"


    // $ANTLR start "rule__AddOrSubtractExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:15630:1: rule__AddOrSubtractExpression__Group__0__Impl : ( ruleMultiplyDivideModuloExpression ) ;
    public final void rule__AddOrSubtractExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15634:1: ( ( ruleMultiplyDivideModuloExpression ) )
            // InternalOpenCypherParser.g:15635:1: ( ruleMultiplyDivideModuloExpression )
            {
            // InternalOpenCypherParser.g:15635:1: ( ruleMultiplyDivideModuloExpression )
            // InternalOpenCypherParser.g:15636:2: ruleMultiplyDivideModuloExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAddOrSubtractExpressionAccess().getMultiplyDivideModuloExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMultiplyDivideModuloExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAddOrSubtractExpressionAccess().getMultiplyDivideModuloExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__Group__0__Impl"


    // $ANTLR start "rule__AddOrSubtractExpression__Group__1"
    // InternalOpenCypherParser.g:15645:1: rule__AddOrSubtractExpression__Group__1 : rule__AddOrSubtractExpression__Group__1__Impl ;
    public final void rule__AddOrSubtractExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15649:1: ( rule__AddOrSubtractExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:15650:2: rule__AddOrSubtractExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__AddOrSubtractExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__Group__1"


    // $ANTLR start "rule__AddOrSubtractExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:15656:1: rule__AddOrSubtractExpression__Group__1__Impl : ( ( rule__AddOrSubtractExpression__Group_1__0 )* ) ;
    public final void rule__AddOrSubtractExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15660:1: ( ( ( rule__AddOrSubtractExpression__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:15661:1: ( ( rule__AddOrSubtractExpression__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:15661:1: ( ( rule__AddOrSubtractExpression__Group_1__0 )* )
            // InternalOpenCypherParser.g:15662:2: ( rule__AddOrSubtractExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAddOrSubtractExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:15663:2: ( rule__AddOrSubtractExpression__Group_1__0 )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==PlusSign||LA122_0==HyphenMinus) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15663:3: rule__AddOrSubtractExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_100);
            	    rule__AddOrSubtractExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAddOrSubtractExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__Group__1__Impl"


    // $ANTLR start "rule__AddOrSubtractExpression__Group_1__0"
    // InternalOpenCypherParser.g:15672:1: rule__AddOrSubtractExpression__Group_1__0 : rule__AddOrSubtractExpression__Group_1__0__Impl rule__AddOrSubtractExpression__Group_1__1 ;
    public final void rule__AddOrSubtractExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15676:1: ( rule__AddOrSubtractExpression__Group_1__0__Impl rule__AddOrSubtractExpression__Group_1__1 )
            // InternalOpenCypherParser.g:15677:2: rule__AddOrSubtractExpression__Group_1__0__Impl rule__AddOrSubtractExpression__Group_1__1
            {
            pushFollow(FOLLOW_99);
            rule__AddOrSubtractExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AddOrSubtractExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__Group_1__0"


    // $ANTLR start "rule__AddOrSubtractExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15684:1: rule__AddOrSubtractExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__AddOrSubtractExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15688:1: ( ( () ) )
            // InternalOpenCypherParser.g:15689:1: ( () )
            {
            // InternalOpenCypherParser.g:15689:1: ( () )
            // InternalOpenCypherParser.g:15690:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAddOrSubtractExpressionAccess().getAddOrSubtractExpressionLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15691:2: ()
            // InternalOpenCypherParser.g:15691:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAddOrSubtractExpressionAccess().getAddOrSubtractExpressionLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__Group_1__0__Impl"


    // $ANTLR start "rule__AddOrSubtractExpression__Group_1__1"
    // InternalOpenCypherParser.g:15699:1: rule__AddOrSubtractExpression__Group_1__1 : rule__AddOrSubtractExpression__Group_1__1__Impl rule__AddOrSubtractExpression__Group_1__2 ;
    public final void rule__AddOrSubtractExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15703:1: ( rule__AddOrSubtractExpression__Group_1__1__Impl rule__AddOrSubtractExpression__Group_1__2 )
            // InternalOpenCypherParser.g:15704:2: rule__AddOrSubtractExpression__Group_1__1__Impl rule__AddOrSubtractExpression__Group_1__2
            {
            pushFollow(FOLLOW_43);
            rule__AddOrSubtractExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AddOrSubtractExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__Group_1__1"


    // $ANTLR start "rule__AddOrSubtractExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15711:1: rule__AddOrSubtractExpression__Group_1__1__Impl : ( ( rule__AddOrSubtractExpression__OperatorAssignment_1_1 ) ) ;
    public final void rule__AddOrSubtractExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15715:1: ( ( ( rule__AddOrSubtractExpression__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15716:1: ( ( rule__AddOrSubtractExpression__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15716:1: ( ( rule__AddOrSubtractExpression__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15717:2: ( rule__AddOrSubtractExpression__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15718:2: ( rule__AddOrSubtractExpression__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15718:3: rule__AddOrSubtractExpression__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__AddOrSubtractExpression__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__Group_1__1__Impl"


    // $ANTLR start "rule__AddOrSubtractExpression__Group_1__2"
    // InternalOpenCypherParser.g:15726:1: rule__AddOrSubtractExpression__Group_1__2 : rule__AddOrSubtractExpression__Group_1__2__Impl ;
    public final void rule__AddOrSubtractExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15730:1: ( rule__AddOrSubtractExpression__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15731:2: rule__AddOrSubtractExpression__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__AddOrSubtractExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__Group_1__2"


    // $ANTLR start "rule__AddOrSubtractExpression__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15737:1: rule__AddOrSubtractExpression__Group_1__2__Impl : ( ( rule__AddOrSubtractExpression__RightAssignment_1_2 ) ) ;
    public final void rule__AddOrSubtractExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15741:1: ( ( ( rule__AddOrSubtractExpression__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15742:1: ( ( rule__AddOrSubtractExpression__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15742:1: ( ( rule__AddOrSubtractExpression__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15743:2: ( rule__AddOrSubtractExpression__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAddOrSubtractExpressionAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15744:2: ( rule__AddOrSubtractExpression__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:15744:3: rule__AddOrSubtractExpression__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__AddOrSubtractExpression__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAddOrSubtractExpressionAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__Group_1__2__Impl"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__Group__0"
    // InternalOpenCypherParser.g:15753:1: rule__MultiplyDivideModuloExpression__Group__0 : rule__MultiplyDivideModuloExpression__Group__0__Impl rule__MultiplyDivideModuloExpression__Group__1 ;
    public final void rule__MultiplyDivideModuloExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15757:1: ( rule__MultiplyDivideModuloExpression__Group__0__Impl rule__MultiplyDivideModuloExpression__Group__1 )
            // InternalOpenCypherParser.g:15758:2: rule__MultiplyDivideModuloExpression__Group__0__Impl rule__MultiplyDivideModuloExpression__Group__1
            {
            pushFollow(FOLLOW_101);
            rule__MultiplyDivideModuloExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MultiplyDivideModuloExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__Group__0"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:15765:1: rule__MultiplyDivideModuloExpression__Group__0__Impl : ( rulePowerOfExpression ) ;
    public final void rule__MultiplyDivideModuloExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15769:1: ( ( rulePowerOfExpression ) )
            // InternalOpenCypherParser.g:15770:1: ( rulePowerOfExpression )
            {
            // InternalOpenCypherParser.g:15770:1: ( rulePowerOfExpression )
            // InternalOpenCypherParser.g:15771:2: rulePowerOfExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getPowerOfExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePowerOfExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getPowerOfExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__Group__0__Impl"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__Group__1"
    // InternalOpenCypherParser.g:15780:1: rule__MultiplyDivideModuloExpression__Group__1 : rule__MultiplyDivideModuloExpression__Group__1__Impl ;
    public final void rule__MultiplyDivideModuloExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15784:1: ( rule__MultiplyDivideModuloExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:15785:2: rule__MultiplyDivideModuloExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDivideModuloExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__Group__1"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:15791:1: rule__MultiplyDivideModuloExpression__Group__1__Impl : ( ( rule__MultiplyDivideModuloExpression__Group_1__0 )* ) ;
    public final void rule__MultiplyDivideModuloExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15795:1: ( ( ( rule__MultiplyDivideModuloExpression__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:15796:1: ( ( rule__MultiplyDivideModuloExpression__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:15796:1: ( ( rule__MultiplyDivideModuloExpression__Group_1__0 )* )
            // InternalOpenCypherParser.g:15797:2: ( rule__MultiplyDivideModuloExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:15798:2: ( rule__MultiplyDivideModuloExpression__Group_1__0 )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==PercentSign||LA123_0==Asterisk||LA123_0==Solidus) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15798:3: rule__MultiplyDivideModuloExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_102);
            	    rule__MultiplyDivideModuloExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__Group__1__Impl"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__Group_1__0"
    // InternalOpenCypherParser.g:15807:1: rule__MultiplyDivideModuloExpression__Group_1__0 : rule__MultiplyDivideModuloExpression__Group_1__0__Impl rule__MultiplyDivideModuloExpression__Group_1__1 ;
    public final void rule__MultiplyDivideModuloExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15811:1: ( rule__MultiplyDivideModuloExpression__Group_1__0__Impl rule__MultiplyDivideModuloExpression__Group_1__1 )
            // InternalOpenCypherParser.g:15812:2: rule__MultiplyDivideModuloExpression__Group_1__0__Impl rule__MultiplyDivideModuloExpression__Group_1__1
            {
            pushFollow(FOLLOW_101);
            rule__MultiplyDivideModuloExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MultiplyDivideModuloExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__Group_1__0"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15819:1: rule__MultiplyDivideModuloExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__MultiplyDivideModuloExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15823:1: ( ( () ) )
            // InternalOpenCypherParser.g:15824:1: ( () )
            {
            // InternalOpenCypherParser.g:15824:1: ( () )
            // InternalOpenCypherParser.g:15825:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getMultiplyDivideModuloExpressionLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15826:2: ()
            // InternalOpenCypherParser.g:15826:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getMultiplyDivideModuloExpressionLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__Group_1__0__Impl"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__Group_1__1"
    // InternalOpenCypherParser.g:15834:1: rule__MultiplyDivideModuloExpression__Group_1__1 : rule__MultiplyDivideModuloExpression__Group_1__1__Impl rule__MultiplyDivideModuloExpression__Group_1__2 ;
    public final void rule__MultiplyDivideModuloExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15838:1: ( rule__MultiplyDivideModuloExpression__Group_1__1__Impl rule__MultiplyDivideModuloExpression__Group_1__2 )
            // InternalOpenCypherParser.g:15839:2: rule__MultiplyDivideModuloExpression__Group_1__1__Impl rule__MultiplyDivideModuloExpression__Group_1__2
            {
            pushFollow(FOLLOW_43);
            rule__MultiplyDivideModuloExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MultiplyDivideModuloExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__Group_1__1"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15846:1: rule__MultiplyDivideModuloExpression__Group_1__1__Impl : ( ( rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1 ) ) ;
    public final void rule__MultiplyDivideModuloExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15850:1: ( ( ( rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15851:1: ( ( rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15851:1: ( ( rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15852:2: ( rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15853:2: ( rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15853:3: rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__Group_1__1__Impl"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__Group_1__2"
    // InternalOpenCypherParser.g:15861:1: rule__MultiplyDivideModuloExpression__Group_1__2 : rule__MultiplyDivideModuloExpression__Group_1__2__Impl ;
    public final void rule__MultiplyDivideModuloExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15865:1: ( rule__MultiplyDivideModuloExpression__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15866:2: rule__MultiplyDivideModuloExpression__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDivideModuloExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__Group_1__2"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15872:1: rule__MultiplyDivideModuloExpression__Group_1__2__Impl : ( ( rule__MultiplyDivideModuloExpression__RightAssignment_1_2 ) ) ;
    public final void rule__MultiplyDivideModuloExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15876:1: ( ( ( rule__MultiplyDivideModuloExpression__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15877:1: ( ( rule__MultiplyDivideModuloExpression__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15877:1: ( ( rule__MultiplyDivideModuloExpression__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15878:2: ( rule__MultiplyDivideModuloExpression__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15879:2: ( rule__MultiplyDivideModuloExpression__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:15879:3: rule__MultiplyDivideModuloExpression__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDivideModuloExpression__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__Group_1__2__Impl"


    // $ANTLR start "rule__PowerOfExpression__Group__0"
    // InternalOpenCypherParser.g:15888:1: rule__PowerOfExpression__Group__0 : rule__PowerOfExpression__Group__0__Impl rule__PowerOfExpression__Group__1 ;
    public final void rule__PowerOfExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15892:1: ( rule__PowerOfExpression__Group__0__Impl rule__PowerOfExpression__Group__1 )
            // InternalOpenCypherParser.g:15893:2: rule__PowerOfExpression__Group__0__Impl rule__PowerOfExpression__Group__1
            {
            pushFollow(FOLLOW_103);
            rule__PowerOfExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PowerOfExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__Group__0"


    // $ANTLR start "rule__PowerOfExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:15900:1: rule__PowerOfExpression__Group__0__Impl : ( ruleUnaryAddOrSubtractExpression ) ;
    public final void rule__PowerOfExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15904:1: ( ( ruleUnaryAddOrSubtractExpression ) )
            // InternalOpenCypherParser.g:15905:1: ( ruleUnaryAddOrSubtractExpression )
            {
            // InternalOpenCypherParser.g:15905:1: ( ruleUnaryAddOrSubtractExpression )
            // InternalOpenCypherParser.g:15906:2: ruleUnaryAddOrSubtractExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOfExpressionAccess().getUnaryAddOrSubtractExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUnaryAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOfExpressionAccess().getUnaryAddOrSubtractExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__Group__0__Impl"


    // $ANTLR start "rule__PowerOfExpression__Group__1"
    // InternalOpenCypherParser.g:15915:1: rule__PowerOfExpression__Group__1 : rule__PowerOfExpression__Group__1__Impl ;
    public final void rule__PowerOfExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15919:1: ( rule__PowerOfExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:15920:2: rule__PowerOfExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PowerOfExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__Group__1"


    // $ANTLR start "rule__PowerOfExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:15926:1: rule__PowerOfExpression__Group__1__Impl : ( ( rule__PowerOfExpression__Group_1__0 )* ) ;
    public final void rule__PowerOfExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15930:1: ( ( ( rule__PowerOfExpression__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:15931:1: ( ( rule__PowerOfExpression__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:15931:1: ( ( rule__PowerOfExpression__Group_1__0 )* )
            // InternalOpenCypherParser.g:15932:2: ( rule__PowerOfExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOfExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:15933:2: ( rule__PowerOfExpression__Group_1__0 )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==CircumflexAccent) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15933:3: rule__PowerOfExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_104);
            	    rule__PowerOfExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOfExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__Group__1__Impl"


    // $ANTLR start "rule__PowerOfExpression__Group_1__0"
    // InternalOpenCypherParser.g:15942:1: rule__PowerOfExpression__Group_1__0 : rule__PowerOfExpression__Group_1__0__Impl rule__PowerOfExpression__Group_1__1 ;
    public final void rule__PowerOfExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15946:1: ( rule__PowerOfExpression__Group_1__0__Impl rule__PowerOfExpression__Group_1__1 )
            // InternalOpenCypherParser.g:15947:2: rule__PowerOfExpression__Group_1__0__Impl rule__PowerOfExpression__Group_1__1
            {
            pushFollow(FOLLOW_103);
            rule__PowerOfExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PowerOfExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__Group_1__0"


    // $ANTLR start "rule__PowerOfExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15954:1: rule__PowerOfExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__PowerOfExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15958:1: ( ( () ) )
            // InternalOpenCypherParser.g:15959:1: ( () )
            {
            // InternalOpenCypherParser.g:15959:1: ( () )
            // InternalOpenCypherParser.g:15960:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOfExpressionAccess().getPowerOfExpressionLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15961:2: ()
            // InternalOpenCypherParser.g:15961:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOfExpressionAccess().getPowerOfExpressionLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__Group_1__0__Impl"


    // $ANTLR start "rule__PowerOfExpression__Group_1__1"
    // InternalOpenCypherParser.g:15969:1: rule__PowerOfExpression__Group_1__1 : rule__PowerOfExpression__Group_1__1__Impl rule__PowerOfExpression__Group_1__2 ;
    public final void rule__PowerOfExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15973:1: ( rule__PowerOfExpression__Group_1__1__Impl rule__PowerOfExpression__Group_1__2 )
            // InternalOpenCypherParser.g:15974:2: rule__PowerOfExpression__Group_1__1__Impl rule__PowerOfExpression__Group_1__2
            {
            pushFollow(FOLLOW_43);
            rule__PowerOfExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PowerOfExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__Group_1__1"


    // $ANTLR start "rule__PowerOfExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15981:1: rule__PowerOfExpression__Group_1__1__Impl : ( ( rule__PowerOfExpression__OperatorAssignment_1_1 ) ) ;
    public final void rule__PowerOfExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15985:1: ( ( ( rule__PowerOfExpression__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15986:1: ( ( rule__PowerOfExpression__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15986:1: ( ( rule__PowerOfExpression__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15987:2: ( rule__PowerOfExpression__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOfExpressionAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15988:2: ( rule__PowerOfExpression__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15988:3: rule__PowerOfExpression__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__PowerOfExpression__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOfExpressionAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__Group_1__1__Impl"


    // $ANTLR start "rule__PowerOfExpression__Group_1__2"
    // InternalOpenCypherParser.g:15996:1: rule__PowerOfExpression__Group_1__2 : rule__PowerOfExpression__Group_1__2__Impl ;
    public final void rule__PowerOfExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16000:1: ( rule__PowerOfExpression__Group_1__2__Impl )
            // InternalOpenCypherParser.g:16001:2: rule__PowerOfExpression__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PowerOfExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__Group_1__2"


    // $ANTLR start "rule__PowerOfExpression__Group_1__2__Impl"
    // InternalOpenCypherParser.g:16007:1: rule__PowerOfExpression__Group_1__2__Impl : ( ( rule__PowerOfExpression__RightAssignment_1_2 ) ) ;
    public final void rule__PowerOfExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16011:1: ( ( ( rule__PowerOfExpression__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:16012:1: ( ( rule__PowerOfExpression__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:16012:1: ( ( rule__PowerOfExpression__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:16013:2: ( rule__PowerOfExpression__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOfExpressionAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:16014:2: ( rule__PowerOfExpression__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:16014:3: rule__PowerOfExpression__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__PowerOfExpression__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOfExpressionAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__Group_1__2__Impl"


    // $ANTLR start "rule__UnaryAddOrSubtractExpression__Group_1__0"
    // InternalOpenCypherParser.g:16023:1: rule__UnaryAddOrSubtractExpression__Group_1__0 : rule__UnaryAddOrSubtractExpression__Group_1__0__Impl rule__UnaryAddOrSubtractExpression__Group_1__1 ;
    public final void rule__UnaryAddOrSubtractExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16027:1: ( rule__UnaryAddOrSubtractExpression__Group_1__0__Impl rule__UnaryAddOrSubtractExpression__Group_1__1 )
            // InternalOpenCypherParser.g:16028:2: rule__UnaryAddOrSubtractExpression__Group_1__0__Impl rule__UnaryAddOrSubtractExpression__Group_1__1
            {
            pushFollow(FOLLOW_43);
            rule__UnaryAddOrSubtractExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UnaryAddOrSubtractExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryAddOrSubtractExpression__Group_1__0"


    // $ANTLR start "rule__UnaryAddOrSubtractExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:16035:1: rule__UnaryAddOrSubtractExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__UnaryAddOrSubtractExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16039:1: ( ( () ) )
            // InternalOpenCypherParser.g:16040:1: ( () )
            {
            // InternalOpenCypherParser.g:16040:1: ( () )
            // InternalOpenCypherParser.g:16041:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getUnaryAddOrSubtractExpressionAction_1_0()); 
            }
            // InternalOpenCypherParser.g:16042:2: ()
            // InternalOpenCypherParser.g:16042:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getUnaryAddOrSubtractExpressionAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryAddOrSubtractExpression__Group_1__0__Impl"


    // $ANTLR start "rule__UnaryAddOrSubtractExpression__Group_1__1"
    // InternalOpenCypherParser.g:16050:1: rule__UnaryAddOrSubtractExpression__Group_1__1 : rule__UnaryAddOrSubtractExpression__Group_1__1__Impl rule__UnaryAddOrSubtractExpression__Group_1__2 ;
    public final void rule__UnaryAddOrSubtractExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16054:1: ( rule__UnaryAddOrSubtractExpression__Group_1__1__Impl rule__UnaryAddOrSubtractExpression__Group_1__2 )
            // InternalOpenCypherParser.g:16055:2: rule__UnaryAddOrSubtractExpression__Group_1__1__Impl rule__UnaryAddOrSubtractExpression__Group_1__2
            {
            pushFollow(FOLLOW_43);
            rule__UnaryAddOrSubtractExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UnaryAddOrSubtractExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryAddOrSubtractExpression__Group_1__1"


    // $ANTLR start "rule__UnaryAddOrSubtractExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:16062:1: rule__UnaryAddOrSubtractExpression__Group_1__1__Impl : ( ( rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1 ) ) ;
    public final void rule__UnaryAddOrSubtractExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16066:1: ( ( ( rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:16067:1: ( ( rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:16067:1: ( ( rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:16068:2: ( rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:16069:2: ( rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:16069:3: rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryAddOrSubtractExpression__Group_1__1__Impl"


    // $ANTLR start "rule__UnaryAddOrSubtractExpression__Group_1__2"
    // InternalOpenCypherParser.g:16077:1: rule__UnaryAddOrSubtractExpression__Group_1__2 : rule__UnaryAddOrSubtractExpression__Group_1__2__Impl ;
    public final void rule__UnaryAddOrSubtractExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16081:1: ( rule__UnaryAddOrSubtractExpression__Group_1__2__Impl )
            // InternalOpenCypherParser.g:16082:2: rule__UnaryAddOrSubtractExpression__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__UnaryAddOrSubtractExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryAddOrSubtractExpression__Group_1__2"


    // $ANTLR start "rule__UnaryAddOrSubtractExpression__Group_1__2__Impl"
    // InternalOpenCypherParser.g:16088:1: rule__UnaryAddOrSubtractExpression__Group_1__2__Impl : ( ( rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2 ) ) ;
    public final void rule__UnaryAddOrSubtractExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16092:1: ( ( ( rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:16093:1: ( ( rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:16093:1: ( ( rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2 ) )
            // InternalOpenCypherParser.g:16094:2: ( rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:16095:2: ( rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2 )
            // InternalOpenCypherParser.g:16095:3: rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryAddOrSubtractExpression__Group_1__2__Impl"


    // $ANTLR start "rule__StringListNullOperatorExpression__Group__0"
    // InternalOpenCypherParser.g:16104:1: rule__StringListNullOperatorExpression__Group__0 : rule__StringListNullOperatorExpression__Group__0__Impl rule__StringListNullOperatorExpression__Group__1 ;
    public final void rule__StringListNullOperatorExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16108:1: ( rule__StringListNullOperatorExpression__Group__0__Impl rule__StringListNullOperatorExpression__Group__1 )
            // InternalOpenCypherParser.g:16109:2: rule__StringListNullOperatorExpression__Group__0__Impl rule__StringListNullOperatorExpression__Group__1
            {
            pushFollow(FOLLOW_105);
            rule__StringListNullOperatorExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StringListNullOperatorExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringListNullOperatorExpression__Group__0"


    // $ANTLR start "rule__StringListNullOperatorExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:16116:1: rule__StringListNullOperatorExpression__Group__0__Impl : ( rulePropertyOrLabelsExpression ) ;
    public final void rule__StringListNullOperatorExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16120:1: ( ( rulePropertyOrLabelsExpression ) )
            // InternalOpenCypherParser.g:16121:1: ( rulePropertyOrLabelsExpression )
            {
            // InternalOpenCypherParser.g:16121:1: ( rulePropertyOrLabelsExpression )
            // InternalOpenCypherParser.g:16122:2: rulePropertyOrLabelsExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringListNullOperatorExpressionAccess().getPropertyOrLabelsExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyOrLabelsExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringListNullOperatorExpressionAccess().getPropertyOrLabelsExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringListNullOperatorExpression__Group__0__Impl"


    // $ANTLR start "rule__StringListNullOperatorExpression__Group__1"
    // InternalOpenCypherParser.g:16131:1: rule__StringListNullOperatorExpression__Group__1 : rule__StringListNullOperatorExpression__Group__1__Impl ;
    public final void rule__StringListNullOperatorExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16135:1: ( rule__StringListNullOperatorExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:16136:2: rule__StringListNullOperatorExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StringListNullOperatorExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringListNullOperatorExpression__Group__1"


    // $ANTLR start "rule__StringListNullOperatorExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:16142:1: rule__StringListNullOperatorExpression__Group__1__Impl : ( ( rule__StringListNullOperatorExpression__Group_1__0 )* ) ;
    public final void rule__StringListNullOperatorExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16146:1: ( ( ( rule__StringListNullOperatorExpression__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:16147:1: ( ( rule__StringListNullOperatorExpression__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:16147:1: ( ( rule__StringListNullOperatorExpression__Group_1__0 )* )
            // InternalOpenCypherParser.g:16148:2: ( rule__StringListNullOperatorExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:16149:2: ( rule__StringListNullOperatorExpression__Group_1__0 )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==CONTAINS||LA125_0==STARTS||LA125_0==ENDS||LA125_0==EqualsSignTilde||(LA125_0>=IN && LA125_0<=IS)||LA125_0==LeftSquareBracket) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // InternalOpenCypherParser.g:16149:3: rule__StringListNullOperatorExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_106);
            	    rule__StringListNullOperatorExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringListNullOperatorExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringListNullOperatorExpression__Group__1__Impl"


    // $ANTLR start "rule__StringListNullOperatorExpression__Group_1__0"
    // InternalOpenCypherParser.g:16158:1: rule__StringListNullOperatorExpression__Group_1__0 : rule__StringListNullOperatorExpression__Group_1__0__Impl rule__StringListNullOperatorExpression__Group_1__1 ;
    public final void rule__StringListNullOperatorExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16162:1: ( rule__StringListNullOperatorExpression__Group_1__0__Impl rule__StringListNullOperatorExpression__Group_1__1 )
            // InternalOpenCypherParser.g:16163:2: rule__StringListNullOperatorExpression__Group_1__0__Impl rule__StringListNullOperatorExpression__Group_1__1
            {
            pushFollow(FOLLOW_105);
            rule__StringListNullOperatorExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StringListNullOperatorExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringListNullOperatorExpression__Group_1__0"


    // $ANTLR start "rule__StringListNullOperatorExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:16170:1: rule__StringListNullOperatorExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__StringListNullOperatorExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16174:1: ( ( () ) )
            // InternalOpenCypherParser.g:16175:1: ( () )
            {
            // InternalOpenCypherParser.g:16175:1: ( () )
            // InternalOpenCypherParser.g:16176:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringListNullOperatorExpressionAccess().getStringListNullOperatorExpressionLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:16177:2: ()
            // InternalOpenCypherParser.g:16177:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringListNullOperatorExpressionAccess().getStringListNullOperatorExpressionLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringListNullOperatorExpression__Group_1__0__Impl"


    // $ANTLR start "rule__StringListNullOperatorExpression__Group_1__1"
    // InternalOpenCypherParser.g:16185:1: rule__StringListNullOperatorExpression__Group_1__1 : rule__StringListNullOperatorExpression__Group_1__1__Impl ;
    public final void rule__StringListNullOperatorExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16189:1: ( rule__StringListNullOperatorExpression__Group_1__1__Impl )
            // InternalOpenCypherParser.g:16190:2: rule__StringListNullOperatorExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StringListNullOperatorExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringListNullOperatorExpression__Group_1__1"


    // $ANTLR start "rule__StringListNullOperatorExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:16196:1: rule__StringListNullOperatorExpression__Group_1__1__Impl : ( ( rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1 ) ) ;
    public final void rule__StringListNullOperatorExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16200:1: ( ( ( rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:16201:1: ( ( rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:16201:1: ( ( rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1 ) )
            // InternalOpenCypherParser.g:16202:2: ( rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:16203:2: ( rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1 )
            // InternalOpenCypherParser.g:16203:3: rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringListNullOperatorExpression__Group_1__1__Impl"


    // $ANTLR start "rule__ListOperatorExpression__Group_0__0"
    // InternalOpenCypherParser.g:16212:1: rule__ListOperatorExpression__Group_0__0 : rule__ListOperatorExpression__Group_0__0__Impl rule__ListOperatorExpression__Group_0__1 ;
    public final void rule__ListOperatorExpression__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16216:1: ( rule__ListOperatorExpression__Group_0__0__Impl rule__ListOperatorExpression__Group_0__1 )
            // InternalOpenCypherParser.g:16217:2: rule__ListOperatorExpression__Group_0__0__Impl rule__ListOperatorExpression__Group_0__1
            {
            pushFollow(FOLLOW_38);
            rule__ListOperatorExpression__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_0__0"


    // $ANTLR start "rule__ListOperatorExpression__Group_0__0__Impl"
    // InternalOpenCypherParser.g:16224:1: rule__ListOperatorExpression__Group_0__0__Impl : ( () ) ;
    public final void rule__ListOperatorExpression__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16228:1: ( ( () ) )
            // InternalOpenCypherParser.g:16229:1: ( () )
            {
            // InternalOpenCypherParser.g:16229:1: ( () )
            // InternalOpenCypherParser.g:16230:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getIndexLookupExpressionAction_0_0()); 
            }
            // InternalOpenCypherParser.g:16231:2: ()
            // InternalOpenCypherParser.g:16231:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getIndexLookupExpressionAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_0__0__Impl"


    // $ANTLR start "rule__ListOperatorExpression__Group_0__1"
    // InternalOpenCypherParser.g:16239:1: rule__ListOperatorExpression__Group_0__1 : rule__ListOperatorExpression__Group_0__1__Impl rule__ListOperatorExpression__Group_0__2 ;
    public final void rule__ListOperatorExpression__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16243:1: ( rule__ListOperatorExpression__Group_0__1__Impl rule__ListOperatorExpression__Group_0__2 )
            // InternalOpenCypherParser.g:16244:2: rule__ListOperatorExpression__Group_0__1__Impl rule__ListOperatorExpression__Group_0__2
            {
            pushFollow(FOLLOW_43);
            rule__ListOperatorExpression__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_0__1"


    // $ANTLR start "rule__ListOperatorExpression__Group_0__1__Impl"
    // InternalOpenCypherParser.g:16251:1: rule__ListOperatorExpression__Group_0__1__Impl : ( LeftSquareBracket ) ;
    public final void rule__ListOperatorExpression__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16255:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:16256:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:16256:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:16257:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getLeftSquareBracketKeyword_0_1()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getLeftSquareBracketKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_0__1__Impl"


    // $ANTLR start "rule__ListOperatorExpression__Group_0__2"
    // InternalOpenCypherParser.g:16266:1: rule__ListOperatorExpression__Group_0__2 : rule__ListOperatorExpression__Group_0__2__Impl rule__ListOperatorExpression__Group_0__3 ;
    public final void rule__ListOperatorExpression__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16270:1: ( rule__ListOperatorExpression__Group_0__2__Impl rule__ListOperatorExpression__Group_0__3 )
            // InternalOpenCypherParser.g:16271:2: rule__ListOperatorExpression__Group_0__2__Impl rule__ListOperatorExpression__Group_0__3
            {
            pushFollow(FOLLOW_39);
            rule__ListOperatorExpression__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Group_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_0__2"


    // $ANTLR start "rule__ListOperatorExpression__Group_0__2__Impl"
    // InternalOpenCypherParser.g:16278:1: rule__ListOperatorExpression__Group_0__2__Impl : ( ( rule__ListOperatorExpression__ExpressionAssignment_0_2 ) ) ;
    public final void rule__ListOperatorExpression__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16282:1: ( ( ( rule__ListOperatorExpression__ExpressionAssignment_0_2 ) ) )
            // InternalOpenCypherParser.g:16283:1: ( ( rule__ListOperatorExpression__ExpressionAssignment_0_2 ) )
            {
            // InternalOpenCypherParser.g:16283:1: ( ( rule__ListOperatorExpression__ExpressionAssignment_0_2 ) )
            // InternalOpenCypherParser.g:16284:2: ( rule__ListOperatorExpression__ExpressionAssignment_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getExpressionAssignment_0_2()); 
            }
            // InternalOpenCypherParser.g:16285:2: ( rule__ListOperatorExpression__ExpressionAssignment_0_2 )
            // InternalOpenCypherParser.g:16285:3: rule__ListOperatorExpression__ExpressionAssignment_0_2
            {
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__ExpressionAssignment_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getExpressionAssignment_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_0__2__Impl"


    // $ANTLR start "rule__ListOperatorExpression__Group_0__3"
    // InternalOpenCypherParser.g:16293:1: rule__ListOperatorExpression__Group_0__3 : rule__ListOperatorExpression__Group_0__3__Impl ;
    public final void rule__ListOperatorExpression__Group_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16297:1: ( rule__ListOperatorExpression__Group_0__3__Impl )
            // InternalOpenCypherParser.g:16298:2: rule__ListOperatorExpression__Group_0__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Group_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_0__3"


    // $ANTLR start "rule__ListOperatorExpression__Group_0__3__Impl"
    // InternalOpenCypherParser.g:16304:1: rule__ListOperatorExpression__Group_0__3__Impl : ( RightSquareBracket ) ;
    public final void rule__ListOperatorExpression__Group_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16308:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:16309:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:16309:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:16310:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getRightSquareBracketKeyword_0_3()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getRightSquareBracketKeyword_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_0__3__Impl"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__0"
    // InternalOpenCypherParser.g:16320:1: rule__ListOperatorExpression__Group_1__0 : rule__ListOperatorExpression__Group_1__0__Impl rule__ListOperatorExpression__Group_1__1 ;
    public final void rule__ListOperatorExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16324:1: ( rule__ListOperatorExpression__Group_1__0__Impl rule__ListOperatorExpression__Group_1__1 )
            // InternalOpenCypherParser.g:16325:2: rule__ListOperatorExpression__Group_1__0__Impl rule__ListOperatorExpression__Group_1__1
            {
            pushFollow(FOLLOW_38);
            rule__ListOperatorExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__0"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:16332:1: rule__ListOperatorExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__ListOperatorExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16336:1: ( ( () ) )
            // InternalOpenCypherParser.g:16337:1: ( () )
            {
            // InternalOpenCypherParser.g:16337:1: ( () )
            // InternalOpenCypherParser.g:16338:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getIndexRangeExpressionAction_1_0()); 
            }
            // InternalOpenCypherParser.g:16339:2: ()
            // InternalOpenCypherParser.g:16339:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getIndexRangeExpressionAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__0__Impl"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__1"
    // InternalOpenCypherParser.g:16347:1: rule__ListOperatorExpression__Group_1__1 : rule__ListOperatorExpression__Group_1__1__Impl rule__ListOperatorExpression__Group_1__2 ;
    public final void rule__ListOperatorExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16351:1: ( rule__ListOperatorExpression__Group_1__1__Impl rule__ListOperatorExpression__Group_1__2 )
            // InternalOpenCypherParser.g:16352:2: rule__ListOperatorExpression__Group_1__1__Impl rule__ListOperatorExpression__Group_1__2
            {
            pushFollow(FOLLOW_107);
            rule__ListOperatorExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__1"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:16359:1: rule__ListOperatorExpression__Group_1__1__Impl : ( LeftSquareBracket ) ;
    public final void rule__ListOperatorExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16363:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:16364:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:16364:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:16365:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getLeftSquareBracketKeyword_1_1()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getLeftSquareBracketKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__1__Impl"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__2"
    // InternalOpenCypherParser.g:16374:1: rule__ListOperatorExpression__Group_1__2 : rule__ListOperatorExpression__Group_1__2__Impl rule__ListOperatorExpression__Group_1__3 ;
    public final void rule__ListOperatorExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16378:1: ( rule__ListOperatorExpression__Group_1__2__Impl rule__ListOperatorExpression__Group_1__3 )
            // InternalOpenCypherParser.g:16379:2: rule__ListOperatorExpression__Group_1__2__Impl rule__ListOperatorExpression__Group_1__3
            {
            pushFollow(FOLLOW_107);
            rule__ListOperatorExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Group_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__2"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__2__Impl"
    // InternalOpenCypherParser.g:16386:1: rule__ListOperatorExpression__Group_1__2__Impl : ( ( rule__ListOperatorExpression__LowerAssignment_1_2 )? ) ;
    public final void rule__ListOperatorExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16390:1: ( ( ( rule__ListOperatorExpression__LowerAssignment_1_2 )? ) )
            // InternalOpenCypherParser.g:16391:1: ( ( rule__ListOperatorExpression__LowerAssignment_1_2 )? )
            {
            // InternalOpenCypherParser.g:16391:1: ( ( rule__ListOperatorExpression__LowerAssignment_1_2 )? )
            // InternalOpenCypherParser.g:16392:2: ( rule__ListOperatorExpression__LowerAssignment_1_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getLowerAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:16393:2: ( rule__ListOperatorExpression__LowerAssignment_1_2 )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( ((LA126_0>=ALLSHORTESTPATHS && LA126_0<=WHERE)||(LA126_0>=CASE && LA126_0<=XOR)||(LA126_0>=AS && LA126_0<=OR)||LA126_0==DollarSign||LA126_0==LeftParenthesis||LA126_0==PlusSign||LA126_0==HyphenMinus||LA126_0==LeftSquareBracket||LA126_0==LeftCurlyBracket||LA126_0==RULE_ID||(LA126_0>=RULE_STRING_LITERAL && LA126_0<=RULE_DECIMAL)) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // InternalOpenCypherParser.g:16393:3: rule__ListOperatorExpression__LowerAssignment_1_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__ListOperatorExpression__LowerAssignment_1_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getLowerAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__2__Impl"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__3"
    // InternalOpenCypherParser.g:16401:1: rule__ListOperatorExpression__Group_1__3 : rule__ListOperatorExpression__Group_1__3__Impl rule__ListOperatorExpression__Group_1__4 ;
    public final void rule__ListOperatorExpression__Group_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16405:1: ( rule__ListOperatorExpression__Group_1__3__Impl rule__ListOperatorExpression__Group_1__4 )
            // InternalOpenCypherParser.g:16406:2: rule__ListOperatorExpression__Group_1__3__Impl rule__ListOperatorExpression__Group_1__4
            {
            pushFollow(FOLLOW_108);
            rule__ListOperatorExpression__Group_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Group_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__3"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__3__Impl"
    // InternalOpenCypherParser.g:16413:1: rule__ListOperatorExpression__Group_1__3__Impl : ( FullStopFullStop ) ;
    public final void rule__ListOperatorExpression__Group_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16417:1: ( ( FullStopFullStop ) )
            // InternalOpenCypherParser.g:16418:1: ( FullStopFullStop )
            {
            // InternalOpenCypherParser.g:16418:1: ( FullStopFullStop )
            // InternalOpenCypherParser.g:16419:2: FullStopFullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getFullStopFullStopKeyword_1_3()); 
            }
            match(input,FullStopFullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getFullStopFullStopKeyword_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__3__Impl"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__4"
    // InternalOpenCypherParser.g:16428:1: rule__ListOperatorExpression__Group_1__4 : rule__ListOperatorExpression__Group_1__4__Impl rule__ListOperatorExpression__Group_1__5 ;
    public final void rule__ListOperatorExpression__Group_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16432:1: ( rule__ListOperatorExpression__Group_1__4__Impl rule__ListOperatorExpression__Group_1__5 )
            // InternalOpenCypherParser.g:16433:2: rule__ListOperatorExpression__Group_1__4__Impl rule__ListOperatorExpression__Group_1__5
            {
            pushFollow(FOLLOW_108);
            rule__ListOperatorExpression__Group_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Group_1__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__4"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__4__Impl"
    // InternalOpenCypherParser.g:16440:1: rule__ListOperatorExpression__Group_1__4__Impl : ( ( rule__ListOperatorExpression__UpperAssignment_1_4 )? ) ;
    public final void rule__ListOperatorExpression__Group_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16444:1: ( ( ( rule__ListOperatorExpression__UpperAssignment_1_4 )? ) )
            // InternalOpenCypherParser.g:16445:1: ( ( rule__ListOperatorExpression__UpperAssignment_1_4 )? )
            {
            // InternalOpenCypherParser.g:16445:1: ( ( rule__ListOperatorExpression__UpperAssignment_1_4 )? )
            // InternalOpenCypherParser.g:16446:2: ( rule__ListOperatorExpression__UpperAssignment_1_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getUpperAssignment_1_4()); 
            }
            // InternalOpenCypherParser.g:16447:2: ( rule__ListOperatorExpression__UpperAssignment_1_4 )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( ((LA127_0>=ALLSHORTESTPATHS && LA127_0<=WHERE)||(LA127_0>=CASE && LA127_0<=XOR)||(LA127_0>=AS && LA127_0<=OR)||LA127_0==DollarSign||LA127_0==LeftParenthesis||LA127_0==PlusSign||LA127_0==HyphenMinus||LA127_0==LeftSquareBracket||LA127_0==LeftCurlyBracket||LA127_0==RULE_ID||(LA127_0>=RULE_STRING_LITERAL && LA127_0<=RULE_DECIMAL)) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // InternalOpenCypherParser.g:16447:3: rule__ListOperatorExpression__UpperAssignment_1_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__ListOperatorExpression__UpperAssignment_1_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getUpperAssignment_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__4__Impl"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__5"
    // InternalOpenCypherParser.g:16455:1: rule__ListOperatorExpression__Group_1__5 : rule__ListOperatorExpression__Group_1__5__Impl ;
    public final void rule__ListOperatorExpression__Group_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16459:1: ( rule__ListOperatorExpression__Group_1__5__Impl )
            // InternalOpenCypherParser.g:16460:2: rule__ListOperatorExpression__Group_1__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ListOperatorExpression__Group_1__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__5"


    // $ANTLR start "rule__ListOperatorExpression__Group_1__5__Impl"
    // InternalOpenCypherParser.g:16466:1: rule__ListOperatorExpression__Group_1__5__Impl : ( RightSquareBracket ) ;
    public final void rule__ListOperatorExpression__Group_1__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16470:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:16471:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:16471:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:16472:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getRightSquareBracketKeyword_1_5()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getRightSquareBracketKeyword_1_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__Group_1__5__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group__0"
    // InternalOpenCypherParser.g:16482:1: rule__StringOperatorExpression__Group__0 : rule__StringOperatorExpression__Group__0__Impl rule__StringOperatorExpression__Group__1 ;
    public final void rule__StringOperatorExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16486:1: ( rule__StringOperatorExpression__Group__0__Impl rule__StringOperatorExpression__Group__1 )
            // InternalOpenCypherParser.g:16487:2: rule__StringOperatorExpression__Group__0__Impl rule__StringOperatorExpression__Group__1
            {
            pushFollow(FOLLOW_33);
            rule__StringOperatorExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group__0"


    // $ANTLR start "rule__StringOperatorExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:16494:1: rule__StringOperatorExpression__Group__0__Impl : ( ( rule__StringOperatorExpression__Alternatives_0 ) ) ;
    public final void rule__StringOperatorExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16498:1: ( ( ( rule__StringOperatorExpression__Alternatives_0 ) ) )
            // InternalOpenCypherParser.g:16499:1: ( ( rule__StringOperatorExpression__Alternatives_0 ) )
            {
            // InternalOpenCypherParser.g:16499:1: ( ( rule__StringOperatorExpression__Alternatives_0 ) )
            // InternalOpenCypherParser.g:16500:2: ( rule__StringOperatorExpression__Alternatives_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getAlternatives_0()); 
            }
            // InternalOpenCypherParser.g:16501:2: ( rule__StringOperatorExpression__Alternatives_0 )
            // InternalOpenCypherParser.g:16501:3: rule__StringOperatorExpression__Alternatives_0
            {
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Alternatives_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getAlternatives_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group__0__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group__1"
    // InternalOpenCypherParser.g:16509:1: rule__StringOperatorExpression__Group__1 : rule__StringOperatorExpression__Group__1__Impl ;
    public final void rule__StringOperatorExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16513:1: ( rule__StringOperatorExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:16514:2: rule__StringOperatorExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group__1"


    // $ANTLR start "rule__StringOperatorExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:16520:1: rule__StringOperatorExpression__Group__1__Impl : ( ( rule__StringOperatorExpression__RightAssignment_1 ) ) ;
    public final void rule__StringOperatorExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16524:1: ( ( ( rule__StringOperatorExpression__RightAssignment_1 ) ) )
            // InternalOpenCypherParser.g:16525:1: ( ( rule__StringOperatorExpression__RightAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:16525:1: ( ( rule__StringOperatorExpression__RightAssignment_1 ) )
            // InternalOpenCypherParser.g:16526:2: ( rule__StringOperatorExpression__RightAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getRightAssignment_1()); 
            }
            // InternalOpenCypherParser.g:16527:2: ( rule__StringOperatorExpression__RightAssignment_1 )
            // InternalOpenCypherParser.g:16527:3: rule__StringOperatorExpression__RightAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__RightAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getRightAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group__1__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_0__0"
    // InternalOpenCypherParser.g:16536:1: rule__StringOperatorExpression__Group_0_0__0 : rule__StringOperatorExpression__Group_0_0__0__Impl rule__StringOperatorExpression__Group_0_0__1 ;
    public final void rule__StringOperatorExpression__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16540:1: ( rule__StringOperatorExpression__Group_0_0__0__Impl rule__StringOperatorExpression__Group_0_0__1 )
            // InternalOpenCypherParser.g:16541:2: rule__StringOperatorExpression__Group_0_0__0__Impl rule__StringOperatorExpression__Group_0_0__1
            {
            pushFollow(FOLLOW_109);
            rule__StringOperatorExpression__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_0__0"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_0__0__Impl"
    // InternalOpenCypherParser.g:16548:1: rule__StringOperatorExpression__Group_0_0__0__Impl : ( () ) ;
    public final void rule__StringOperatorExpression__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16552:1: ( ( () ) )
            // InternalOpenCypherParser.g:16553:1: ( () )
            {
            // InternalOpenCypherParser.g:16553:1: ( () )
            // InternalOpenCypherParser.g:16554:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getRegExpMatchingExpressionAction_0_0_0()); 
            }
            // InternalOpenCypherParser.g:16555:2: ()
            // InternalOpenCypherParser.g:16555:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getRegExpMatchingExpressionAction_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_0__0__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_0__1"
    // InternalOpenCypherParser.g:16563:1: rule__StringOperatorExpression__Group_0_0__1 : rule__StringOperatorExpression__Group_0_0__1__Impl ;
    public final void rule__StringOperatorExpression__Group_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16567:1: ( rule__StringOperatorExpression__Group_0_0__1__Impl )
            // InternalOpenCypherParser.g:16568:2: rule__StringOperatorExpression__Group_0_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_0__1"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_0__1__Impl"
    // InternalOpenCypherParser.g:16574:1: rule__StringOperatorExpression__Group_0_0__1__Impl : ( EqualsSignTilde ) ;
    public final void rule__StringOperatorExpression__Group_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16578:1: ( ( EqualsSignTilde ) )
            // InternalOpenCypherParser.g:16579:1: ( EqualsSignTilde )
            {
            // InternalOpenCypherParser.g:16579:1: ( EqualsSignTilde )
            // InternalOpenCypherParser.g:16580:2: EqualsSignTilde
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getEqualsSignTildeKeyword_0_0_1()); 
            }
            match(input,EqualsSignTilde,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getEqualsSignTildeKeyword_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_0__1__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_1__0"
    // InternalOpenCypherParser.g:16590:1: rule__StringOperatorExpression__Group_0_1__0 : rule__StringOperatorExpression__Group_0_1__0__Impl rule__StringOperatorExpression__Group_0_1__1 ;
    public final void rule__StringOperatorExpression__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16594:1: ( rule__StringOperatorExpression__Group_0_1__0__Impl rule__StringOperatorExpression__Group_0_1__1 )
            // InternalOpenCypherParser.g:16595:2: rule__StringOperatorExpression__Group_0_1__0__Impl rule__StringOperatorExpression__Group_0_1__1
            {
            pushFollow(FOLLOW_59);
            rule__StringOperatorExpression__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_1__0"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_1__0__Impl"
    // InternalOpenCypherParser.g:16602:1: rule__StringOperatorExpression__Group_0_1__0__Impl : ( () ) ;
    public final void rule__StringOperatorExpression__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16606:1: ( ( () ) )
            // InternalOpenCypherParser.g:16607:1: ( () )
            {
            // InternalOpenCypherParser.g:16607:1: ( () )
            // InternalOpenCypherParser.g:16608:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getInCollectionExpressionAction_0_1_0()); 
            }
            // InternalOpenCypherParser.g:16609:2: ()
            // InternalOpenCypherParser.g:16609:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getInCollectionExpressionAction_0_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_1__0__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_1__1"
    // InternalOpenCypherParser.g:16617:1: rule__StringOperatorExpression__Group_0_1__1 : rule__StringOperatorExpression__Group_0_1__1__Impl ;
    public final void rule__StringOperatorExpression__Group_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16621:1: ( rule__StringOperatorExpression__Group_0_1__1__Impl )
            // InternalOpenCypherParser.g:16622:2: rule__StringOperatorExpression__Group_0_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_1__1"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_1__1__Impl"
    // InternalOpenCypherParser.g:16628:1: rule__StringOperatorExpression__Group_0_1__1__Impl : ( IN ) ;
    public final void rule__StringOperatorExpression__Group_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16632:1: ( ( IN ) )
            // InternalOpenCypherParser.g:16633:1: ( IN )
            {
            // InternalOpenCypherParser.g:16633:1: ( IN )
            // InternalOpenCypherParser.g:16634:2: IN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getINKeyword_0_1_1()); 
            }
            match(input,IN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getINKeyword_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_1__1__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_2__0"
    // InternalOpenCypherParser.g:16644:1: rule__StringOperatorExpression__Group_0_2__0 : rule__StringOperatorExpression__Group_0_2__0__Impl rule__StringOperatorExpression__Group_0_2__1 ;
    public final void rule__StringOperatorExpression__Group_0_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16648:1: ( rule__StringOperatorExpression__Group_0_2__0__Impl rule__StringOperatorExpression__Group_0_2__1 )
            // InternalOpenCypherParser.g:16649:2: rule__StringOperatorExpression__Group_0_2__0__Impl rule__StringOperatorExpression__Group_0_2__1
            {
            pushFollow(FOLLOW_110);
            rule__StringOperatorExpression__Group_0_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_2__0"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_2__0__Impl"
    // InternalOpenCypherParser.g:16656:1: rule__StringOperatorExpression__Group_0_2__0__Impl : ( () ) ;
    public final void rule__StringOperatorExpression__Group_0_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16660:1: ( ( () ) )
            // InternalOpenCypherParser.g:16661:1: ( () )
            {
            // InternalOpenCypherParser.g:16661:1: ( () )
            // InternalOpenCypherParser.g:16662:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getStartsWithExpressionAction_0_2_0()); 
            }
            // InternalOpenCypherParser.g:16663:2: ()
            // InternalOpenCypherParser.g:16663:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getStartsWithExpressionAction_0_2_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_2__0__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_2__1"
    // InternalOpenCypherParser.g:16671:1: rule__StringOperatorExpression__Group_0_2__1 : rule__StringOperatorExpression__Group_0_2__1__Impl rule__StringOperatorExpression__Group_0_2__2 ;
    public final void rule__StringOperatorExpression__Group_0_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16675:1: ( rule__StringOperatorExpression__Group_0_2__1__Impl rule__StringOperatorExpression__Group_0_2__2 )
            // InternalOpenCypherParser.g:16676:2: rule__StringOperatorExpression__Group_0_2__1__Impl rule__StringOperatorExpression__Group_0_2__2
            {
            pushFollow(FOLLOW_111);
            rule__StringOperatorExpression__Group_0_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_2__1"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_2__1__Impl"
    // InternalOpenCypherParser.g:16683:1: rule__StringOperatorExpression__Group_0_2__1__Impl : ( STARTS ) ;
    public final void rule__StringOperatorExpression__Group_0_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16687:1: ( ( STARTS ) )
            // InternalOpenCypherParser.g:16688:1: ( STARTS )
            {
            // InternalOpenCypherParser.g:16688:1: ( STARTS )
            // InternalOpenCypherParser.g:16689:2: STARTS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getSTARTSKeyword_0_2_1()); 
            }
            match(input,STARTS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getSTARTSKeyword_0_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_2__1__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_2__2"
    // InternalOpenCypherParser.g:16698:1: rule__StringOperatorExpression__Group_0_2__2 : rule__StringOperatorExpression__Group_0_2__2__Impl ;
    public final void rule__StringOperatorExpression__Group_0_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16702:1: ( rule__StringOperatorExpression__Group_0_2__2__Impl )
            // InternalOpenCypherParser.g:16703:2: rule__StringOperatorExpression__Group_0_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_2__2"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_2__2__Impl"
    // InternalOpenCypherParser.g:16709:1: rule__StringOperatorExpression__Group_0_2__2__Impl : ( WITH ) ;
    public final void rule__StringOperatorExpression__Group_0_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16713:1: ( ( WITH ) )
            // InternalOpenCypherParser.g:16714:1: ( WITH )
            {
            // InternalOpenCypherParser.g:16714:1: ( WITH )
            // InternalOpenCypherParser.g:16715:2: WITH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_2_2()); 
            }
            match(input,WITH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_2__2__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_3__0"
    // InternalOpenCypherParser.g:16725:1: rule__StringOperatorExpression__Group_0_3__0 : rule__StringOperatorExpression__Group_0_3__0__Impl rule__StringOperatorExpression__Group_0_3__1 ;
    public final void rule__StringOperatorExpression__Group_0_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16729:1: ( rule__StringOperatorExpression__Group_0_3__0__Impl rule__StringOperatorExpression__Group_0_3__1 )
            // InternalOpenCypherParser.g:16730:2: rule__StringOperatorExpression__Group_0_3__0__Impl rule__StringOperatorExpression__Group_0_3__1
            {
            pushFollow(FOLLOW_112);
            rule__StringOperatorExpression__Group_0_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_3__0"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_3__0__Impl"
    // InternalOpenCypherParser.g:16737:1: rule__StringOperatorExpression__Group_0_3__0__Impl : ( () ) ;
    public final void rule__StringOperatorExpression__Group_0_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16741:1: ( ( () ) )
            // InternalOpenCypherParser.g:16742:1: ( () )
            {
            // InternalOpenCypherParser.g:16742:1: ( () )
            // InternalOpenCypherParser.g:16743:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getEndsWithExpressionAction_0_3_0()); 
            }
            // InternalOpenCypherParser.g:16744:2: ()
            // InternalOpenCypherParser.g:16744:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getEndsWithExpressionAction_0_3_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_3__0__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_3__1"
    // InternalOpenCypherParser.g:16752:1: rule__StringOperatorExpression__Group_0_3__1 : rule__StringOperatorExpression__Group_0_3__1__Impl rule__StringOperatorExpression__Group_0_3__2 ;
    public final void rule__StringOperatorExpression__Group_0_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16756:1: ( rule__StringOperatorExpression__Group_0_3__1__Impl rule__StringOperatorExpression__Group_0_3__2 )
            // InternalOpenCypherParser.g:16757:2: rule__StringOperatorExpression__Group_0_3__1__Impl rule__StringOperatorExpression__Group_0_3__2
            {
            pushFollow(FOLLOW_111);
            rule__StringOperatorExpression__Group_0_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_3__1"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_3__1__Impl"
    // InternalOpenCypherParser.g:16764:1: rule__StringOperatorExpression__Group_0_3__1__Impl : ( ENDS ) ;
    public final void rule__StringOperatorExpression__Group_0_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16768:1: ( ( ENDS ) )
            // InternalOpenCypherParser.g:16769:1: ( ENDS )
            {
            // InternalOpenCypherParser.g:16769:1: ( ENDS )
            // InternalOpenCypherParser.g:16770:2: ENDS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getENDSKeyword_0_3_1()); 
            }
            match(input,ENDS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getENDSKeyword_0_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_3__1__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_3__2"
    // InternalOpenCypherParser.g:16779:1: rule__StringOperatorExpression__Group_0_3__2 : rule__StringOperatorExpression__Group_0_3__2__Impl ;
    public final void rule__StringOperatorExpression__Group_0_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16783:1: ( rule__StringOperatorExpression__Group_0_3__2__Impl )
            // InternalOpenCypherParser.g:16784:2: rule__StringOperatorExpression__Group_0_3__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_3__2"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_3__2__Impl"
    // InternalOpenCypherParser.g:16790:1: rule__StringOperatorExpression__Group_0_3__2__Impl : ( WITH ) ;
    public final void rule__StringOperatorExpression__Group_0_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16794:1: ( ( WITH ) )
            // InternalOpenCypherParser.g:16795:1: ( WITH )
            {
            // InternalOpenCypherParser.g:16795:1: ( WITH )
            // InternalOpenCypherParser.g:16796:2: WITH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_3_2()); 
            }
            match(input,WITH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getWITHKeyword_0_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_3__2__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_4__0"
    // InternalOpenCypherParser.g:16806:1: rule__StringOperatorExpression__Group_0_4__0 : rule__StringOperatorExpression__Group_0_4__0__Impl rule__StringOperatorExpression__Group_0_4__1 ;
    public final void rule__StringOperatorExpression__Group_0_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16810:1: ( rule__StringOperatorExpression__Group_0_4__0__Impl rule__StringOperatorExpression__Group_0_4__1 )
            // InternalOpenCypherParser.g:16811:2: rule__StringOperatorExpression__Group_0_4__0__Impl rule__StringOperatorExpression__Group_0_4__1
            {
            pushFollow(FOLLOW_113);
            rule__StringOperatorExpression__Group_0_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_4__0"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_4__0__Impl"
    // InternalOpenCypherParser.g:16818:1: rule__StringOperatorExpression__Group_0_4__0__Impl : ( () ) ;
    public final void rule__StringOperatorExpression__Group_0_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16822:1: ( ( () ) )
            // InternalOpenCypherParser.g:16823:1: ( () )
            {
            // InternalOpenCypherParser.g:16823:1: ( () )
            // InternalOpenCypherParser.g:16824:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getContainsExpressionAction_0_4_0()); 
            }
            // InternalOpenCypherParser.g:16825:2: ()
            // InternalOpenCypherParser.g:16825:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getContainsExpressionAction_0_4_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_4__0__Impl"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_4__1"
    // InternalOpenCypherParser.g:16833:1: rule__StringOperatorExpression__Group_0_4__1 : rule__StringOperatorExpression__Group_0_4__1__Impl ;
    public final void rule__StringOperatorExpression__Group_0_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16837:1: ( rule__StringOperatorExpression__Group_0_4__1__Impl )
            // InternalOpenCypherParser.g:16838:2: rule__StringOperatorExpression__Group_0_4__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StringOperatorExpression__Group_0_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_4__1"


    // $ANTLR start "rule__StringOperatorExpression__Group_0_4__1__Impl"
    // InternalOpenCypherParser.g:16844:1: rule__StringOperatorExpression__Group_0_4__1__Impl : ( CONTAINS ) ;
    public final void rule__StringOperatorExpression__Group_0_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16848:1: ( ( CONTAINS ) )
            // InternalOpenCypherParser.g:16849:1: ( CONTAINS )
            {
            // InternalOpenCypherParser.g:16849:1: ( CONTAINS )
            // InternalOpenCypherParser.g:16850:2: CONTAINS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getCONTAINSKeyword_0_4_1()); 
            }
            match(input,CONTAINS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getCONTAINSKeyword_0_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__Group_0_4__1__Impl"


    // $ANTLR start "rule__NullOperatorExpression__Group_0__0"
    // InternalOpenCypherParser.g:16860:1: rule__NullOperatorExpression__Group_0__0 : rule__NullOperatorExpression__Group_0__0__Impl rule__NullOperatorExpression__Group_0__1 ;
    public final void rule__NullOperatorExpression__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16864:1: ( rule__NullOperatorExpression__Group_0__0__Impl rule__NullOperatorExpression__Group_0__1 )
            // InternalOpenCypherParser.g:16865:2: rule__NullOperatorExpression__Group_0__0__Impl rule__NullOperatorExpression__Group_0__1
            {
            pushFollow(FOLLOW_34);
            rule__NullOperatorExpression__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NullOperatorExpression__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_0__0"


    // $ANTLR start "rule__NullOperatorExpression__Group_0__0__Impl"
    // InternalOpenCypherParser.g:16872:1: rule__NullOperatorExpression__Group_0__0__Impl : ( () ) ;
    public final void rule__NullOperatorExpression__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16876:1: ( ( () ) )
            // InternalOpenCypherParser.g:16877:1: ( () )
            {
            // InternalOpenCypherParser.g:16877:1: ( () )
            // InternalOpenCypherParser.g:16878:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNullOperatorExpressionAccess().getIsNullExpressionAction_0_0()); 
            }
            // InternalOpenCypherParser.g:16879:2: ()
            // InternalOpenCypherParser.g:16879:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNullOperatorExpressionAccess().getIsNullExpressionAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_0__0__Impl"


    // $ANTLR start "rule__NullOperatorExpression__Group_0__1"
    // InternalOpenCypherParser.g:16887:1: rule__NullOperatorExpression__Group_0__1 : rule__NullOperatorExpression__Group_0__1__Impl rule__NullOperatorExpression__Group_0__2 ;
    public final void rule__NullOperatorExpression__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16891:1: ( rule__NullOperatorExpression__Group_0__1__Impl rule__NullOperatorExpression__Group_0__2 )
            // InternalOpenCypherParser.g:16892:2: rule__NullOperatorExpression__Group_0__1__Impl rule__NullOperatorExpression__Group_0__2
            {
            pushFollow(FOLLOW_114);
            rule__NullOperatorExpression__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NullOperatorExpression__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_0__1"


    // $ANTLR start "rule__NullOperatorExpression__Group_0__1__Impl"
    // InternalOpenCypherParser.g:16899:1: rule__NullOperatorExpression__Group_0__1__Impl : ( IS ) ;
    public final void rule__NullOperatorExpression__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16903:1: ( ( IS ) )
            // InternalOpenCypherParser.g:16904:1: ( IS )
            {
            // InternalOpenCypherParser.g:16904:1: ( IS )
            // InternalOpenCypherParser.g:16905:2: IS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_0_1()); 
            }
            match(input,IS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_0__1__Impl"


    // $ANTLR start "rule__NullOperatorExpression__Group_0__2"
    // InternalOpenCypherParser.g:16914:1: rule__NullOperatorExpression__Group_0__2 : rule__NullOperatorExpression__Group_0__2__Impl ;
    public final void rule__NullOperatorExpression__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16918:1: ( rule__NullOperatorExpression__Group_0__2__Impl )
            // InternalOpenCypherParser.g:16919:2: rule__NullOperatorExpression__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NullOperatorExpression__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_0__2"


    // $ANTLR start "rule__NullOperatorExpression__Group_0__2__Impl"
    // InternalOpenCypherParser.g:16925:1: rule__NullOperatorExpression__Group_0__2__Impl : ( NULL ) ;
    public final void rule__NullOperatorExpression__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16929:1: ( ( NULL ) )
            // InternalOpenCypherParser.g:16930:1: ( NULL )
            {
            // InternalOpenCypherParser.g:16930:1: ( NULL )
            // InternalOpenCypherParser.g:16931:2: NULL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_0_2()); 
            }
            match(input,NULL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_0__2__Impl"


    // $ANTLR start "rule__NullOperatorExpression__Group_1__0"
    // InternalOpenCypherParser.g:16941:1: rule__NullOperatorExpression__Group_1__0 : rule__NullOperatorExpression__Group_1__0__Impl rule__NullOperatorExpression__Group_1__1 ;
    public final void rule__NullOperatorExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16945:1: ( rule__NullOperatorExpression__Group_1__0__Impl rule__NullOperatorExpression__Group_1__1 )
            // InternalOpenCypherParser.g:16946:2: rule__NullOperatorExpression__Group_1__0__Impl rule__NullOperatorExpression__Group_1__1
            {
            pushFollow(FOLLOW_105);
            rule__NullOperatorExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NullOperatorExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_1__0"


    // $ANTLR start "rule__NullOperatorExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:16953:1: rule__NullOperatorExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__NullOperatorExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16957:1: ( ( () ) )
            // InternalOpenCypherParser.g:16958:1: ( () )
            {
            // InternalOpenCypherParser.g:16958:1: ( () )
            // InternalOpenCypherParser.g:16959:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNullOperatorExpressionAccess().getIsNotNullExpressionAction_1_0()); 
            }
            // InternalOpenCypherParser.g:16960:2: ()
            // InternalOpenCypherParser.g:16960:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNullOperatorExpressionAccess().getIsNotNullExpressionAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_1__0__Impl"


    // $ANTLR start "rule__NullOperatorExpression__Group_1__1"
    // InternalOpenCypherParser.g:16968:1: rule__NullOperatorExpression__Group_1__1 : rule__NullOperatorExpression__Group_1__1__Impl rule__NullOperatorExpression__Group_1__2 ;
    public final void rule__NullOperatorExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16972:1: ( rule__NullOperatorExpression__Group_1__1__Impl rule__NullOperatorExpression__Group_1__2 )
            // InternalOpenCypherParser.g:16973:2: rule__NullOperatorExpression__Group_1__1__Impl rule__NullOperatorExpression__Group_1__2
            {
            pushFollow(FOLLOW_96);
            rule__NullOperatorExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NullOperatorExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_1__1"


    // $ANTLR start "rule__NullOperatorExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:16980:1: rule__NullOperatorExpression__Group_1__1__Impl : ( IS ) ;
    public final void rule__NullOperatorExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16984:1: ( ( IS ) )
            // InternalOpenCypherParser.g:16985:1: ( IS )
            {
            // InternalOpenCypherParser.g:16985:1: ( IS )
            // InternalOpenCypherParser.g:16986:2: IS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_1_1()); 
            }
            match(input,IS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNullOperatorExpressionAccess().getISKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_1__1__Impl"


    // $ANTLR start "rule__NullOperatorExpression__Group_1__2"
    // InternalOpenCypherParser.g:16995:1: rule__NullOperatorExpression__Group_1__2 : rule__NullOperatorExpression__Group_1__2__Impl rule__NullOperatorExpression__Group_1__3 ;
    public final void rule__NullOperatorExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16999:1: ( rule__NullOperatorExpression__Group_1__2__Impl rule__NullOperatorExpression__Group_1__3 )
            // InternalOpenCypherParser.g:17000:2: rule__NullOperatorExpression__Group_1__2__Impl rule__NullOperatorExpression__Group_1__3
            {
            pushFollow(FOLLOW_114);
            rule__NullOperatorExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NullOperatorExpression__Group_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_1__2"


    // $ANTLR start "rule__NullOperatorExpression__Group_1__2__Impl"
    // InternalOpenCypherParser.g:17007:1: rule__NullOperatorExpression__Group_1__2__Impl : ( NOT ) ;
    public final void rule__NullOperatorExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17011:1: ( ( NOT ) )
            // InternalOpenCypherParser.g:17012:1: ( NOT )
            {
            // InternalOpenCypherParser.g:17012:1: ( NOT )
            // InternalOpenCypherParser.g:17013:2: NOT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNullOperatorExpressionAccess().getNOTKeyword_1_2()); 
            }
            match(input,NOT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNullOperatorExpressionAccess().getNOTKeyword_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_1__2__Impl"


    // $ANTLR start "rule__NullOperatorExpression__Group_1__3"
    // InternalOpenCypherParser.g:17022:1: rule__NullOperatorExpression__Group_1__3 : rule__NullOperatorExpression__Group_1__3__Impl ;
    public final void rule__NullOperatorExpression__Group_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17026:1: ( rule__NullOperatorExpression__Group_1__3__Impl )
            // InternalOpenCypherParser.g:17027:2: rule__NullOperatorExpression__Group_1__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NullOperatorExpression__Group_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_1__3"


    // $ANTLR start "rule__NullOperatorExpression__Group_1__3__Impl"
    // InternalOpenCypherParser.g:17033:1: rule__NullOperatorExpression__Group_1__3__Impl : ( NULL ) ;
    public final void rule__NullOperatorExpression__Group_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17037:1: ( ( NULL ) )
            // InternalOpenCypherParser.g:17038:1: ( NULL )
            {
            // InternalOpenCypherParser.g:17038:1: ( NULL )
            // InternalOpenCypherParser.g:17039:2: NULL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_1_3()); 
            }
            match(input,NULL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNullOperatorExpressionAccess().getNULLKeyword_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NullOperatorExpression__Group_1__3__Impl"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group__0"
    // InternalOpenCypherParser.g:17049:1: rule__PropertyOrLabelsExpression__Group__0 : rule__PropertyOrLabelsExpression__Group__0__Impl rule__PropertyOrLabelsExpression__Group__1 ;
    public final void rule__PropertyOrLabelsExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17053:1: ( rule__PropertyOrLabelsExpression__Group__0__Impl rule__PropertyOrLabelsExpression__Group__1 )
            // InternalOpenCypherParser.g:17054:2: rule__PropertyOrLabelsExpression__Group__0__Impl rule__PropertyOrLabelsExpression__Group__1
            {
            pushFollow(FOLLOW_115);
            rule__PropertyOrLabelsExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PropertyOrLabelsExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group__0"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:17061:1: rule__PropertyOrLabelsExpression__Group__0__Impl : ( ruleAtom ) ;
    public final void rule__PropertyOrLabelsExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17065:1: ( ( ruleAtom ) )
            // InternalOpenCypherParser.g:17066:1: ( ruleAtom )
            {
            // InternalOpenCypherParser.g:17066:1: ( ruleAtom )
            // InternalOpenCypherParser.g:17067:2: ruleAtom
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionAccess().getAtomParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAtom();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionAccess().getAtomParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group__0__Impl"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group__1"
    // InternalOpenCypherParser.g:17076:1: rule__PropertyOrLabelsExpression__Group__1 : rule__PropertyOrLabelsExpression__Group__1__Impl rule__PropertyOrLabelsExpression__Group__2 ;
    public final void rule__PropertyOrLabelsExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17080:1: ( rule__PropertyOrLabelsExpression__Group__1__Impl rule__PropertyOrLabelsExpression__Group__2 )
            // InternalOpenCypherParser.g:17081:2: rule__PropertyOrLabelsExpression__Group__1__Impl rule__PropertyOrLabelsExpression__Group__2
            {
            pushFollow(FOLLOW_115);
            rule__PropertyOrLabelsExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PropertyOrLabelsExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group__1"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:17088:1: rule__PropertyOrLabelsExpression__Group__1__Impl : ( ( rule__PropertyOrLabelsExpression__Group_1__0 )? ) ;
    public final void rule__PropertyOrLabelsExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17092:1: ( ( ( rule__PropertyOrLabelsExpression__Group_1__0 )? ) )
            // InternalOpenCypherParser.g:17093:1: ( ( rule__PropertyOrLabelsExpression__Group_1__0 )? )
            {
            // InternalOpenCypherParser.g:17093:1: ( ( rule__PropertyOrLabelsExpression__Group_1__0 )? )
            // InternalOpenCypherParser.g:17094:2: ( rule__PropertyOrLabelsExpression__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:17095:2: ( rule__PropertyOrLabelsExpression__Group_1__0 )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==FullStop) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // InternalOpenCypherParser.g:17095:3: rule__PropertyOrLabelsExpression__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PropertyOrLabelsExpression__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group__1__Impl"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group__2"
    // InternalOpenCypherParser.g:17103:1: rule__PropertyOrLabelsExpression__Group__2 : rule__PropertyOrLabelsExpression__Group__2__Impl ;
    public final void rule__PropertyOrLabelsExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17107:1: ( rule__PropertyOrLabelsExpression__Group__2__Impl )
            // InternalOpenCypherParser.g:17108:2: rule__PropertyOrLabelsExpression__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PropertyOrLabelsExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group__2"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group__2__Impl"
    // InternalOpenCypherParser.g:17114:1: rule__PropertyOrLabelsExpression__Group__2__Impl : ( ( rule__PropertyOrLabelsExpression__Group_2__0 )? ) ;
    public final void rule__PropertyOrLabelsExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17118:1: ( ( ( rule__PropertyOrLabelsExpression__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:17119:1: ( ( rule__PropertyOrLabelsExpression__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:17119:1: ( ( rule__PropertyOrLabelsExpression__Group_2__0 )? )
            // InternalOpenCypherParser.g:17120:2: ( rule__PropertyOrLabelsExpression__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:17121:2: ( rule__PropertyOrLabelsExpression__Group_2__0 )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==Colon) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // InternalOpenCypherParser.g:17121:3: rule__PropertyOrLabelsExpression__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PropertyOrLabelsExpression__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group__2__Impl"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group_1__0"
    // InternalOpenCypherParser.g:17130:1: rule__PropertyOrLabelsExpression__Group_1__0 : rule__PropertyOrLabelsExpression__Group_1__0__Impl rule__PropertyOrLabelsExpression__Group_1__1 ;
    public final void rule__PropertyOrLabelsExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17134:1: ( rule__PropertyOrLabelsExpression__Group_1__0__Impl rule__PropertyOrLabelsExpression__Group_1__1 )
            // InternalOpenCypherParser.g:17135:2: rule__PropertyOrLabelsExpression__Group_1__0__Impl rule__PropertyOrLabelsExpression__Group_1__1
            {
            pushFollow(FOLLOW_116);
            rule__PropertyOrLabelsExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PropertyOrLabelsExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group_1__0"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:17142:1: rule__PropertyOrLabelsExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__PropertyOrLabelsExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17146:1: ( ( () ) )
            // InternalOpenCypherParser.g:17147:1: ( () )
            {
            // InternalOpenCypherParser.g:17147:1: ( () )
            // InternalOpenCypherParser.g:17148:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupExpressionLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:17149:2: ()
            // InternalOpenCypherParser.g:17149:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupExpressionLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group_1__0__Impl"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group_1__1"
    // InternalOpenCypherParser.g:17157:1: rule__PropertyOrLabelsExpression__Group_1__1 : rule__PropertyOrLabelsExpression__Group_1__1__Impl ;
    public final void rule__PropertyOrLabelsExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17161:1: ( rule__PropertyOrLabelsExpression__Group_1__1__Impl )
            // InternalOpenCypherParser.g:17162:2: rule__PropertyOrLabelsExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PropertyOrLabelsExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group_1__1"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:17168:1: rule__PropertyOrLabelsExpression__Group_1__1__Impl : ( ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 ) ) ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 )* ) ) ;
    public final void rule__PropertyOrLabelsExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17172:1: ( ( ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 ) ) ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 )* ) ) )
            // InternalOpenCypherParser.g:17173:1: ( ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 ) ) ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 )* ) )
            {
            // InternalOpenCypherParser.g:17173:1: ( ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 ) ) ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 )* ) )
            // InternalOpenCypherParser.g:17174:2: ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 ) ) ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 )* )
            {
            // InternalOpenCypherParser.g:17174:2: ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 ) )
            // InternalOpenCypherParser.g:17175:3: ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:17176:3: ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 )
            // InternalOpenCypherParser.g:17176:4: rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1
            {
            pushFollow(FOLLOW_117);
            rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsAssignment_1_1()); 
            }

            }

            // InternalOpenCypherParser.g:17179:2: ( ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 )* )
            // InternalOpenCypherParser.g:17180:3: ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:17181:3: ( rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==FullStop) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // InternalOpenCypherParser.g:17181:4: rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1
            	    {
            	    pushFollow(FOLLOW_117);
            	    rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsAssignment_1_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group_1__1__Impl"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group_2__0"
    // InternalOpenCypherParser.g:17191:1: rule__PropertyOrLabelsExpression__Group_2__0 : rule__PropertyOrLabelsExpression__Group_2__0__Impl rule__PropertyOrLabelsExpression__Group_2__1 ;
    public final void rule__PropertyOrLabelsExpression__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17195:1: ( rule__PropertyOrLabelsExpression__Group_2__0__Impl rule__PropertyOrLabelsExpression__Group_2__1 )
            // InternalOpenCypherParser.g:17196:2: rule__PropertyOrLabelsExpression__Group_2__0__Impl rule__PropertyOrLabelsExpression__Group_2__1
            {
            pushFollow(FOLLOW_29);
            rule__PropertyOrLabelsExpression__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PropertyOrLabelsExpression__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group_2__0"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group_2__0__Impl"
    // InternalOpenCypherParser.g:17203:1: rule__PropertyOrLabelsExpression__Group_2__0__Impl : ( () ) ;
    public final void rule__PropertyOrLabelsExpression__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17207:1: ( ( () ) )
            // InternalOpenCypherParser.g:17208:1: ( () )
            {
            // InternalOpenCypherParser.g:17208:1: ( () )
            // InternalOpenCypherParser.g:17209:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionAccess().getNodeLabelsExpressionLeftAction_2_0()); 
            }
            // InternalOpenCypherParser.g:17210:2: ()
            // InternalOpenCypherParser.g:17210:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionAccess().getNodeLabelsExpressionLeftAction_2_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group_2__0__Impl"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group_2__1"
    // InternalOpenCypherParser.g:17218:1: rule__PropertyOrLabelsExpression__Group_2__1 : rule__PropertyOrLabelsExpression__Group_2__1__Impl ;
    public final void rule__PropertyOrLabelsExpression__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17222:1: ( rule__PropertyOrLabelsExpression__Group_2__1__Impl )
            // InternalOpenCypherParser.g:17223:2: rule__PropertyOrLabelsExpression__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PropertyOrLabelsExpression__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group_2__1"


    // $ANTLR start "rule__PropertyOrLabelsExpression__Group_2__1__Impl"
    // InternalOpenCypherParser.g:17229:1: rule__PropertyOrLabelsExpression__Group_2__1__Impl : ( ruleNodeLabels ) ;
    public final void rule__PropertyOrLabelsExpression__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17233:1: ( ( ruleNodeLabels ) )
            // InternalOpenCypherParser.g:17234:1: ( ruleNodeLabels )
            {
            // InternalOpenCypherParser.g:17234:1: ( ruleNodeLabels )
            // InternalOpenCypherParser.g:17235:2: ruleNodeLabels
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionAccess().getNodeLabelsParserRuleCall_2_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabels();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionAccess().getNodeLabelsParserRuleCall_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__Group_2__1__Impl"


    // $ANTLR start "rule__Atom__Group_4__0"
    // InternalOpenCypherParser.g:17245:1: rule__Atom__Group_4__0 : rule__Atom__Group_4__0__Impl rule__Atom__Group_4__1 ;
    public final void rule__Atom__Group_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17249:1: ( rule__Atom__Group_4__0__Impl rule__Atom__Group_4__1 )
            // InternalOpenCypherParser.g:17250:2: rule__Atom__Group_4__0__Impl rule__Atom__Group_4__1
            {
            pushFollow(FOLLOW_118);
            rule__Atom__Group_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__0"


    // $ANTLR start "rule__Atom__Group_4__0__Impl"
    // InternalOpenCypherParser.g:17257:1: rule__Atom__Group_4__0__Impl : ( () ) ;
    public final void rule__Atom__Group_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17261:1: ( ( () ) )
            // InternalOpenCypherParser.g:17262:1: ( () )
            {
            // InternalOpenCypherParser.g:17262:1: ( () )
            // InternalOpenCypherParser.g:17263:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getCountAction_4_0()); 
            }
            // InternalOpenCypherParser.g:17264:2: ()
            // InternalOpenCypherParser.g:17264:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getCountAction_4_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__0__Impl"


    // $ANTLR start "rule__Atom__Group_4__1"
    // InternalOpenCypherParser.g:17272:1: rule__Atom__Group_4__1 : rule__Atom__Group_4__1__Impl rule__Atom__Group_4__2 ;
    public final void rule__Atom__Group_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17276:1: ( rule__Atom__Group_4__1__Impl rule__Atom__Group_4__2 )
            // InternalOpenCypherParser.g:17277:2: rule__Atom__Group_4__1__Impl rule__Atom__Group_4__2
            {
            pushFollow(FOLLOW_30);
            rule__Atom__Group_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__1"


    // $ANTLR start "rule__Atom__Group_4__1__Impl"
    // InternalOpenCypherParser.g:17284:1: rule__Atom__Group_4__1__Impl : ( COUNT ) ;
    public final void rule__Atom__Group_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17288:1: ( ( COUNT ) )
            // InternalOpenCypherParser.g:17289:1: ( COUNT )
            {
            // InternalOpenCypherParser.g:17289:1: ( COUNT )
            // InternalOpenCypherParser.g:17290:2: COUNT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getCOUNTKeyword_4_1()); 
            }
            match(input,COUNT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getCOUNTKeyword_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__1__Impl"


    // $ANTLR start "rule__Atom__Group_4__2"
    // InternalOpenCypherParser.g:17299:1: rule__Atom__Group_4__2 : rule__Atom__Group_4__2__Impl rule__Atom__Group_4__3 ;
    public final void rule__Atom__Group_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17303:1: ( rule__Atom__Group_4__2__Impl rule__Atom__Group_4__3 )
            // InternalOpenCypherParser.g:17304:2: rule__Atom__Group_4__2__Impl rule__Atom__Group_4__3
            {
            pushFollow(FOLLOW_67);
            rule__Atom__Group_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__2"


    // $ANTLR start "rule__Atom__Group_4__2__Impl"
    // InternalOpenCypherParser.g:17311:1: rule__Atom__Group_4__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17315:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:17316:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:17316:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:17317:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__2__Impl"


    // $ANTLR start "rule__Atom__Group_4__3"
    // InternalOpenCypherParser.g:17326:1: rule__Atom__Group_4__3 : rule__Atom__Group_4__3__Impl rule__Atom__Group_4__4 ;
    public final void rule__Atom__Group_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17330:1: ( rule__Atom__Group_4__3__Impl rule__Atom__Group_4__4 )
            // InternalOpenCypherParser.g:17331:2: rule__Atom__Group_4__3__Impl rule__Atom__Group_4__4
            {
            pushFollow(FOLLOW_31);
            rule__Atom__Group_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_4__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__3"


    // $ANTLR start "rule__Atom__Group_4__3__Impl"
    // InternalOpenCypherParser.g:17338:1: rule__Atom__Group_4__3__Impl : ( Asterisk ) ;
    public final void rule__Atom__Group_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17342:1: ( ( Asterisk ) )
            // InternalOpenCypherParser.g:17343:1: ( Asterisk )
            {
            // InternalOpenCypherParser.g:17343:1: ( Asterisk )
            // InternalOpenCypherParser.g:17344:2: Asterisk
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getAsteriskKeyword_4_3()); 
            }
            match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getAsteriskKeyword_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__3__Impl"


    // $ANTLR start "rule__Atom__Group_4__4"
    // InternalOpenCypherParser.g:17353:1: rule__Atom__Group_4__4 : rule__Atom__Group_4__4__Impl ;
    public final void rule__Atom__Group_4__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17357:1: ( rule__Atom__Group_4__4__Impl )
            // InternalOpenCypherParser.g:17358:2: rule__Atom__Group_4__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_4__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__4"


    // $ANTLR start "rule__Atom__Group_4__4__Impl"
    // InternalOpenCypherParser.g:17364:1: rule__Atom__Group_4__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_4__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17368:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:17369:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:17369:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:17370:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__4__Impl"


    // $ANTLR start "rule__Atom__Group_7__0"
    // InternalOpenCypherParser.g:17380:1: rule__Atom__Group_7__0 : rule__Atom__Group_7__0__Impl rule__Atom__Group_7__1 ;
    public final void rule__Atom__Group_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17384:1: ( rule__Atom__Group_7__0__Impl rule__Atom__Group_7__1 )
            // InternalOpenCypherParser.g:17385:2: rule__Atom__Group_7__0__Impl rule__Atom__Group_7__1
            {
            pushFollow(FOLLOW_119);
            rule__Atom__Group_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__0"


    // $ANTLR start "rule__Atom__Group_7__0__Impl"
    // InternalOpenCypherParser.g:17392:1: rule__Atom__Group_7__0__Impl : ( () ) ;
    public final void rule__Atom__Group_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17396:1: ( ( () ) )
            // InternalOpenCypherParser.g:17397:1: ( () )
            {
            // InternalOpenCypherParser.g:17397:1: ( () )
            // InternalOpenCypherParser.g:17398:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterAction_7_0()); 
            }
            // InternalOpenCypherParser.g:17399:2: ()
            // InternalOpenCypherParser.g:17399:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterAction_7_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__0__Impl"


    // $ANTLR start "rule__Atom__Group_7__1"
    // InternalOpenCypherParser.g:17407:1: rule__Atom__Group_7__1 : rule__Atom__Group_7__1__Impl rule__Atom__Group_7__2 ;
    public final void rule__Atom__Group_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17411:1: ( rule__Atom__Group_7__1__Impl rule__Atom__Group_7__2 )
            // InternalOpenCypherParser.g:17412:2: rule__Atom__Group_7__1__Impl rule__Atom__Group_7__2
            {
            pushFollow(FOLLOW_30);
            rule__Atom__Group_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_7__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__1"


    // $ANTLR start "rule__Atom__Group_7__1__Impl"
    // InternalOpenCypherParser.g:17419:1: rule__Atom__Group_7__1__Impl : ( FILTER ) ;
    public final void rule__Atom__Group_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17423:1: ( ( FILTER ) )
            // InternalOpenCypherParser.g:17424:1: ( FILTER )
            {
            // InternalOpenCypherParser.g:17424:1: ( FILTER )
            // InternalOpenCypherParser.g:17425:2: FILTER
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFILTERKeyword_7_1()); 
            }
            match(input,FILTER,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFILTERKeyword_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__1__Impl"


    // $ANTLR start "rule__Atom__Group_7__2"
    // InternalOpenCypherParser.g:17434:1: rule__Atom__Group_7__2 : rule__Atom__Group_7__2__Impl rule__Atom__Group_7__3 ;
    public final void rule__Atom__Group_7__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17438:1: ( rule__Atom__Group_7__2__Impl rule__Atom__Group_7__3 )
            // InternalOpenCypherParser.g:17439:2: rule__Atom__Group_7__2__Impl rule__Atom__Group_7__3
            {
            pushFollow(FOLLOW_10);
            rule__Atom__Group_7__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_7__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__2"


    // $ANTLR start "rule__Atom__Group_7__2__Impl"
    // InternalOpenCypherParser.g:17446:1: rule__Atom__Group_7__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_7__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17450:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:17451:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:17451:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:17452:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_7_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_7_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__2__Impl"


    // $ANTLR start "rule__Atom__Group_7__3"
    // InternalOpenCypherParser.g:17461:1: rule__Atom__Group_7__3 : rule__Atom__Group_7__3__Impl rule__Atom__Group_7__4 ;
    public final void rule__Atom__Group_7__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17465:1: ( rule__Atom__Group_7__3__Impl rule__Atom__Group_7__4 )
            // InternalOpenCypherParser.g:17466:2: rule__Atom__Group_7__3__Impl rule__Atom__Group_7__4
            {
            pushFollow(FOLLOW_31);
            rule__Atom__Group_7__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_7__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__3"


    // $ANTLR start "rule__Atom__Group_7__3__Impl"
    // InternalOpenCypherParser.g:17473:1: rule__Atom__Group_7__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_7_3 ) ) ;
    public final void rule__Atom__Group_7__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17477:1: ( ( ( rule__Atom__FilterExpressionAssignment_7_3 ) ) )
            // InternalOpenCypherParser.g:17478:1: ( ( rule__Atom__FilterExpressionAssignment_7_3 ) )
            {
            // InternalOpenCypherParser.g:17478:1: ( ( rule__Atom__FilterExpressionAssignment_7_3 ) )
            // InternalOpenCypherParser.g:17479:2: ( rule__Atom__FilterExpressionAssignment_7_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_7_3()); 
            }
            // InternalOpenCypherParser.g:17480:2: ( rule__Atom__FilterExpressionAssignment_7_3 )
            // InternalOpenCypherParser.g:17480:3: rule__Atom__FilterExpressionAssignment_7_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_7_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_7_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__3__Impl"


    // $ANTLR start "rule__Atom__Group_7__4"
    // InternalOpenCypherParser.g:17488:1: rule__Atom__Group_7__4 : rule__Atom__Group_7__4__Impl ;
    public final void rule__Atom__Group_7__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17492:1: ( rule__Atom__Group_7__4__Impl )
            // InternalOpenCypherParser.g:17493:2: rule__Atom__Group_7__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_7__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__4"


    // $ANTLR start "rule__Atom__Group_7__4__Impl"
    // InternalOpenCypherParser.g:17499:1: rule__Atom__Group_7__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_7__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17503:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:17504:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:17504:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:17505:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_7_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_7_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__4__Impl"


    // $ANTLR start "rule__Atom__Group_8__0"
    // InternalOpenCypherParser.g:17515:1: rule__Atom__Group_8__0 : rule__Atom__Group_8__0__Impl rule__Atom__Group_8__1 ;
    public final void rule__Atom__Group_8__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17519:1: ( rule__Atom__Group_8__0__Impl rule__Atom__Group_8__1 )
            // InternalOpenCypherParser.g:17520:2: rule__Atom__Group_8__0__Impl rule__Atom__Group_8__1
            {
            pushFollow(FOLLOW_120);
            rule__Atom__Group_8__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_8__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__0"


    // $ANTLR start "rule__Atom__Group_8__0__Impl"
    // InternalOpenCypherParser.g:17527:1: rule__Atom__Group_8__0__Impl : ( () ) ;
    public final void rule__Atom__Group_8__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17531:1: ( ( () ) )
            // InternalOpenCypherParser.g:17532:1: ( () )
            {
            // InternalOpenCypherParser.g:17532:1: ( () )
            // InternalOpenCypherParser.g:17533:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExtractAction_8_0()); 
            }
            // InternalOpenCypherParser.g:17534:2: ()
            // InternalOpenCypherParser.g:17534:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExtractAction_8_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__0__Impl"


    // $ANTLR start "rule__Atom__Group_8__1"
    // InternalOpenCypherParser.g:17542:1: rule__Atom__Group_8__1 : rule__Atom__Group_8__1__Impl rule__Atom__Group_8__2 ;
    public final void rule__Atom__Group_8__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17546:1: ( rule__Atom__Group_8__1__Impl rule__Atom__Group_8__2 )
            // InternalOpenCypherParser.g:17547:2: rule__Atom__Group_8__1__Impl rule__Atom__Group_8__2
            {
            pushFollow(FOLLOW_30);
            rule__Atom__Group_8__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_8__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__1"


    // $ANTLR start "rule__Atom__Group_8__1__Impl"
    // InternalOpenCypherParser.g:17554:1: rule__Atom__Group_8__1__Impl : ( EXTRACT ) ;
    public final void rule__Atom__Group_8__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17558:1: ( ( EXTRACT ) )
            // InternalOpenCypherParser.g:17559:1: ( EXTRACT )
            {
            // InternalOpenCypherParser.g:17559:1: ( EXTRACT )
            // InternalOpenCypherParser.g:17560:2: EXTRACT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getEXTRACTKeyword_8_1()); 
            }
            match(input,EXTRACT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getEXTRACTKeyword_8_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__1__Impl"


    // $ANTLR start "rule__Atom__Group_8__2"
    // InternalOpenCypherParser.g:17569:1: rule__Atom__Group_8__2 : rule__Atom__Group_8__2__Impl rule__Atom__Group_8__3 ;
    public final void rule__Atom__Group_8__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17573:1: ( rule__Atom__Group_8__2__Impl rule__Atom__Group_8__3 )
            // InternalOpenCypherParser.g:17574:2: rule__Atom__Group_8__2__Impl rule__Atom__Group_8__3
            {
            pushFollow(FOLLOW_10);
            rule__Atom__Group_8__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_8__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__2"


    // $ANTLR start "rule__Atom__Group_8__2__Impl"
    // InternalOpenCypherParser.g:17581:1: rule__Atom__Group_8__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_8__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17585:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:17586:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:17586:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:17587:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_8_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_8_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__2__Impl"


    // $ANTLR start "rule__Atom__Group_8__3"
    // InternalOpenCypherParser.g:17596:1: rule__Atom__Group_8__3 : rule__Atom__Group_8__3__Impl rule__Atom__Group_8__4 ;
    public final void rule__Atom__Group_8__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17600:1: ( rule__Atom__Group_8__3__Impl rule__Atom__Group_8__4 )
            // InternalOpenCypherParser.g:17601:2: rule__Atom__Group_8__3__Impl rule__Atom__Group_8__4
            {
            pushFollow(FOLLOW_121);
            rule__Atom__Group_8__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_8__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__3"


    // $ANTLR start "rule__Atom__Group_8__3__Impl"
    // InternalOpenCypherParser.g:17608:1: rule__Atom__Group_8__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_8_3 ) ) ;
    public final void rule__Atom__Group_8__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17612:1: ( ( ( rule__Atom__FilterExpressionAssignment_8_3 ) ) )
            // InternalOpenCypherParser.g:17613:1: ( ( rule__Atom__FilterExpressionAssignment_8_3 ) )
            {
            // InternalOpenCypherParser.g:17613:1: ( ( rule__Atom__FilterExpressionAssignment_8_3 ) )
            // InternalOpenCypherParser.g:17614:2: ( rule__Atom__FilterExpressionAssignment_8_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_8_3()); 
            }
            // InternalOpenCypherParser.g:17615:2: ( rule__Atom__FilterExpressionAssignment_8_3 )
            // InternalOpenCypherParser.g:17615:3: rule__Atom__FilterExpressionAssignment_8_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_8_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_8_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__3__Impl"


    // $ANTLR start "rule__Atom__Group_8__4"
    // InternalOpenCypherParser.g:17623:1: rule__Atom__Group_8__4 : rule__Atom__Group_8__4__Impl rule__Atom__Group_8__5 ;
    public final void rule__Atom__Group_8__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17627:1: ( rule__Atom__Group_8__4__Impl rule__Atom__Group_8__5 )
            // InternalOpenCypherParser.g:17628:2: rule__Atom__Group_8__4__Impl rule__Atom__Group_8__5
            {
            pushFollow(FOLLOW_121);
            rule__Atom__Group_8__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_8__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__4"


    // $ANTLR start "rule__Atom__Group_8__4__Impl"
    // InternalOpenCypherParser.g:17635:1: rule__Atom__Group_8__4__Impl : ( ( rule__Atom__Group_8_4__0 )? ) ;
    public final void rule__Atom__Group_8__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17639:1: ( ( ( rule__Atom__Group_8_4__0 )? ) )
            // InternalOpenCypherParser.g:17640:1: ( ( rule__Atom__Group_8_4__0 )? )
            {
            // InternalOpenCypherParser.g:17640:1: ( ( rule__Atom__Group_8_4__0 )? )
            // InternalOpenCypherParser.g:17641:2: ( rule__Atom__Group_8_4__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getGroup_8_4()); 
            }
            // InternalOpenCypherParser.g:17642:2: ( rule__Atom__Group_8_4__0 )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==VerticalLine) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // InternalOpenCypherParser.g:17642:3: rule__Atom__Group_8_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_8_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getGroup_8_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__4__Impl"


    // $ANTLR start "rule__Atom__Group_8__5"
    // InternalOpenCypherParser.g:17650:1: rule__Atom__Group_8__5 : rule__Atom__Group_8__5__Impl ;
    public final void rule__Atom__Group_8__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17654:1: ( rule__Atom__Group_8__5__Impl )
            // InternalOpenCypherParser.g:17655:2: rule__Atom__Group_8__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_8__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__5"


    // $ANTLR start "rule__Atom__Group_8__5__Impl"
    // InternalOpenCypherParser.g:17661:1: rule__Atom__Group_8__5__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_8__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17665:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:17666:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:17666:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:17667:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_8_5()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_8_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8__5__Impl"


    // $ANTLR start "rule__Atom__Group_8_4__0"
    // InternalOpenCypherParser.g:17677:1: rule__Atom__Group_8_4__0 : rule__Atom__Group_8_4__0__Impl rule__Atom__Group_8_4__1 ;
    public final void rule__Atom__Group_8_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17681:1: ( rule__Atom__Group_8_4__0__Impl rule__Atom__Group_8_4__1 )
            // InternalOpenCypherParser.g:17682:2: rule__Atom__Group_8_4__0__Impl rule__Atom__Group_8_4__1
            {
            pushFollow(FOLLOW_43);
            rule__Atom__Group_8_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_8_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8_4__0"


    // $ANTLR start "rule__Atom__Group_8_4__0__Impl"
    // InternalOpenCypherParser.g:17689:1: rule__Atom__Group_8_4__0__Impl : ( VerticalLine ) ;
    public final void rule__Atom__Group_8_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17693:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:17694:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:17694:1: ( VerticalLine )
            // InternalOpenCypherParser.g:17695:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getVerticalLineKeyword_8_4_0()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getVerticalLineKeyword_8_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8_4__0__Impl"


    // $ANTLR start "rule__Atom__Group_8_4__1"
    // InternalOpenCypherParser.g:17704:1: rule__Atom__Group_8_4__1 : rule__Atom__Group_8_4__1__Impl ;
    public final void rule__Atom__Group_8_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17708:1: ( rule__Atom__Group_8_4__1__Impl )
            // InternalOpenCypherParser.g:17709:2: rule__Atom__Group_8_4__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_8_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8_4__1"


    // $ANTLR start "rule__Atom__Group_8_4__1__Impl"
    // InternalOpenCypherParser.g:17715:1: rule__Atom__Group_8_4__1__Impl : ( ( rule__Atom__ExpressionAssignment_8_4_1 ) ) ;
    public final void rule__Atom__Group_8_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17719:1: ( ( ( rule__Atom__ExpressionAssignment_8_4_1 ) ) )
            // InternalOpenCypherParser.g:17720:1: ( ( rule__Atom__ExpressionAssignment_8_4_1 ) )
            {
            // InternalOpenCypherParser.g:17720:1: ( ( rule__Atom__ExpressionAssignment_8_4_1 ) )
            // InternalOpenCypherParser.g:17721:2: ( rule__Atom__ExpressionAssignment_8_4_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExpressionAssignment_8_4_1()); 
            }
            // InternalOpenCypherParser.g:17722:2: ( rule__Atom__ExpressionAssignment_8_4_1 )
            // InternalOpenCypherParser.g:17722:3: rule__Atom__ExpressionAssignment_8_4_1
            {
            pushFollow(FOLLOW_2);
            rule__Atom__ExpressionAssignment_8_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExpressionAssignment_8_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_8_4__1__Impl"


    // $ANTLR start "rule__Atom__Group_10__0"
    // InternalOpenCypherParser.g:17731:1: rule__Atom__Group_10__0 : rule__Atom__Group_10__0__Impl rule__Atom__Group_10__1 ;
    public final void rule__Atom__Group_10__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17735:1: ( rule__Atom__Group_10__0__Impl rule__Atom__Group_10__1 )
            // InternalOpenCypherParser.g:17736:2: rule__Atom__Group_10__0__Impl rule__Atom__Group_10__1
            {
            pushFollow(FOLLOW_122);
            rule__Atom__Group_10__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_10__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_10__0"


    // $ANTLR start "rule__Atom__Group_10__0__Impl"
    // InternalOpenCypherParser.g:17743:1: rule__Atom__Group_10__0__Impl : ( () ) ;
    public final void rule__Atom__Group_10__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17747:1: ( ( () ) )
            // InternalOpenCypherParser.g:17748:1: ( () )
            {
            // InternalOpenCypherParser.g:17748:1: ( () )
            // InternalOpenCypherParser.g:17749:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getAllAction_10_0()); 
            }
            // InternalOpenCypherParser.g:17750:2: ()
            // InternalOpenCypherParser.g:17750:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getAllAction_10_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_10__0__Impl"


    // $ANTLR start "rule__Atom__Group_10__1"
    // InternalOpenCypherParser.g:17758:1: rule__Atom__Group_10__1 : rule__Atom__Group_10__1__Impl rule__Atom__Group_10__2 ;
    public final void rule__Atom__Group_10__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17762:1: ( rule__Atom__Group_10__1__Impl rule__Atom__Group_10__2 )
            // InternalOpenCypherParser.g:17763:2: rule__Atom__Group_10__1__Impl rule__Atom__Group_10__2
            {
            pushFollow(FOLLOW_30);
            rule__Atom__Group_10__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_10__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_10__1"


    // $ANTLR start "rule__Atom__Group_10__1__Impl"
    // InternalOpenCypherParser.g:17770:1: rule__Atom__Group_10__1__Impl : ( ALL ) ;
    public final void rule__Atom__Group_10__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17774:1: ( ( ALL ) )
            // InternalOpenCypherParser.g:17775:1: ( ALL )
            {
            // InternalOpenCypherParser.g:17775:1: ( ALL )
            // InternalOpenCypherParser.g:17776:2: ALL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getALLKeyword_10_1()); 
            }
            match(input,ALL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getALLKeyword_10_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_10__1__Impl"


    // $ANTLR start "rule__Atom__Group_10__2"
    // InternalOpenCypherParser.g:17785:1: rule__Atom__Group_10__2 : rule__Atom__Group_10__2__Impl rule__Atom__Group_10__3 ;
    public final void rule__Atom__Group_10__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17789:1: ( rule__Atom__Group_10__2__Impl rule__Atom__Group_10__3 )
            // InternalOpenCypherParser.g:17790:2: rule__Atom__Group_10__2__Impl rule__Atom__Group_10__3
            {
            pushFollow(FOLLOW_10);
            rule__Atom__Group_10__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_10__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_10__2"


    // $ANTLR start "rule__Atom__Group_10__2__Impl"
    // InternalOpenCypherParser.g:17797:1: rule__Atom__Group_10__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_10__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17801:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:17802:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:17802:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:17803:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_10_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_10_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_10__2__Impl"


    // $ANTLR start "rule__Atom__Group_10__3"
    // InternalOpenCypherParser.g:17812:1: rule__Atom__Group_10__3 : rule__Atom__Group_10__3__Impl rule__Atom__Group_10__4 ;
    public final void rule__Atom__Group_10__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17816:1: ( rule__Atom__Group_10__3__Impl rule__Atom__Group_10__4 )
            // InternalOpenCypherParser.g:17817:2: rule__Atom__Group_10__3__Impl rule__Atom__Group_10__4
            {
            pushFollow(FOLLOW_31);
            rule__Atom__Group_10__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_10__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_10__3"


    // $ANTLR start "rule__Atom__Group_10__3__Impl"
    // InternalOpenCypherParser.g:17824:1: rule__Atom__Group_10__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_10_3 ) ) ;
    public final void rule__Atom__Group_10__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17828:1: ( ( ( rule__Atom__FilterExpressionAssignment_10_3 ) ) )
            // InternalOpenCypherParser.g:17829:1: ( ( rule__Atom__FilterExpressionAssignment_10_3 ) )
            {
            // InternalOpenCypherParser.g:17829:1: ( ( rule__Atom__FilterExpressionAssignment_10_3 ) )
            // InternalOpenCypherParser.g:17830:2: ( rule__Atom__FilterExpressionAssignment_10_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_10_3()); 
            }
            // InternalOpenCypherParser.g:17831:2: ( rule__Atom__FilterExpressionAssignment_10_3 )
            // InternalOpenCypherParser.g:17831:3: rule__Atom__FilterExpressionAssignment_10_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_10_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_10_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_10__3__Impl"


    // $ANTLR start "rule__Atom__Group_10__4"
    // InternalOpenCypherParser.g:17839:1: rule__Atom__Group_10__4 : rule__Atom__Group_10__4__Impl ;
    public final void rule__Atom__Group_10__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17843:1: ( rule__Atom__Group_10__4__Impl )
            // InternalOpenCypherParser.g:17844:2: rule__Atom__Group_10__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_10__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_10__4"


    // $ANTLR start "rule__Atom__Group_10__4__Impl"
    // InternalOpenCypherParser.g:17850:1: rule__Atom__Group_10__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_10__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17854:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:17855:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:17855:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:17856:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_10_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_10_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_10__4__Impl"


    // $ANTLR start "rule__Atom__Group_11__0"
    // InternalOpenCypherParser.g:17866:1: rule__Atom__Group_11__0 : rule__Atom__Group_11__0__Impl rule__Atom__Group_11__1 ;
    public final void rule__Atom__Group_11__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17870:1: ( rule__Atom__Group_11__0__Impl rule__Atom__Group_11__1 )
            // InternalOpenCypherParser.g:17871:2: rule__Atom__Group_11__0__Impl rule__Atom__Group_11__1
            {
            pushFollow(FOLLOW_123);
            rule__Atom__Group_11__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__0"


    // $ANTLR start "rule__Atom__Group_11__0__Impl"
    // InternalOpenCypherParser.g:17878:1: rule__Atom__Group_11__0__Impl : ( () ) ;
    public final void rule__Atom__Group_11__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17882:1: ( ( () ) )
            // InternalOpenCypherParser.g:17883:1: ( () )
            {
            // InternalOpenCypherParser.g:17883:1: ( () )
            // InternalOpenCypherParser.g:17884:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getAnyAction_11_0()); 
            }
            // InternalOpenCypherParser.g:17885:2: ()
            // InternalOpenCypherParser.g:17885:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getAnyAction_11_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__0__Impl"


    // $ANTLR start "rule__Atom__Group_11__1"
    // InternalOpenCypherParser.g:17893:1: rule__Atom__Group_11__1 : rule__Atom__Group_11__1__Impl rule__Atom__Group_11__2 ;
    public final void rule__Atom__Group_11__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17897:1: ( rule__Atom__Group_11__1__Impl rule__Atom__Group_11__2 )
            // InternalOpenCypherParser.g:17898:2: rule__Atom__Group_11__1__Impl rule__Atom__Group_11__2
            {
            pushFollow(FOLLOW_30);
            rule__Atom__Group_11__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__1"


    // $ANTLR start "rule__Atom__Group_11__1__Impl"
    // InternalOpenCypherParser.g:17905:1: rule__Atom__Group_11__1__Impl : ( ANY ) ;
    public final void rule__Atom__Group_11__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17909:1: ( ( ANY ) )
            // InternalOpenCypherParser.g:17910:1: ( ANY )
            {
            // InternalOpenCypherParser.g:17910:1: ( ANY )
            // InternalOpenCypherParser.g:17911:2: ANY
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getANYKeyword_11_1()); 
            }
            match(input,ANY,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getANYKeyword_11_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__1__Impl"


    // $ANTLR start "rule__Atom__Group_11__2"
    // InternalOpenCypherParser.g:17920:1: rule__Atom__Group_11__2 : rule__Atom__Group_11__2__Impl rule__Atom__Group_11__3 ;
    public final void rule__Atom__Group_11__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17924:1: ( rule__Atom__Group_11__2__Impl rule__Atom__Group_11__3 )
            // InternalOpenCypherParser.g:17925:2: rule__Atom__Group_11__2__Impl rule__Atom__Group_11__3
            {
            pushFollow(FOLLOW_10);
            rule__Atom__Group_11__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__2"


    // $ANTLR start "rule__Atom__Group_11__2__Impl"
    // InternalOpenCypherParser.g:17932:1: rule__Atom__Group_11__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_11__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17936:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:17937:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:17937:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:17938:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_11_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_11_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__2__Impl"


    // $ANTLR start "rule__Atom__Group_11__3"
    // InternalOpenCypherParser.g:17947:1: rule__Atom__Group_11__3 : rule__Atom__Group_11__3__Impl rule__Atom__Group_11__4 ;
    public final void rule__Atom__Group_11__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17951:1: ( rule__Atom__Group_11__3__Impl rule__Atom__Group_11__4 )
            // InternalOpenCypherParser.g:17952:2: rule__Atom__Group_11__3__Impl rule__Atom__Group_11__4
            {
            pushFollow(FOLLOW_31);
            rule__Atom__Group_11__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__3"


    // $ANTLR start "rule__Atom__Group_11__3__Impl"
    // InternalOpenCypherParser.g:17959:1: rule__Atom__Group_11__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_11_3 ) ) ;
    public final void rule__Atom__Group_11__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17963:1: ( ( ( rule__Atom__FilterExpressionAssignment_11_3 ) ) )
            // InternalOpenCypherParser.g:17964:1: ( ( rule__Atom__FilterExpressionAssignment_11_3 ) )
            {
            // InternalOpenCypherParser.g:17964:1: ( ( rule__Atom__FilterExpressionAssignment_11_3 ) )
            // InternalOpenCypherParser.g:17965:2: ( rule__Atom__FilterExpressionAssignment_11_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_11_3()); 
            }
            // InternalOpenCypherParser.g:17966:2: ( rule__Atom__FilterExpressionAssignment_11_3 )
            // InternalOpenCypherParser.g:17966:3: rule__Atom__FilterExpressionAssignment_11_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_11_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_11_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__3__Impl"


    // $ANTLR start "rule__Atom__Group_11__4"
    // InternalOpenCypherParser.g:17974:1: rule__Atom__Group_11__4 : rule__Atom__Group_11__4__Impl ;
    public final void rule__Atom__Group_11__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17978:1: ( rule__Atom__Group_11__4__Impl )
            // InternalOpenCypherParser.g:17979:2: rule__Atom__Group_11__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__4"


    // $ANTLR start "rule__Atom__Group_11__4__Impl"
    // InternalOpenCypherParser.g:17985:1: rule__Atom__Group_11__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_11__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17989:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:17990:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:17990:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:17991:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_11_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_11_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__4__Impl"


    // $ANTLR start "rule__Atom__Group_12__0"
    // InternalOpenCypherParser.g:18001:1: rule__Atom__Group_12__0 : rule__Atom__Group_12__0__Impl rule__Atom__Group_12__1 ;
    public final void rule__Atom__Group_12__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18005:1: ( rule__Atom__Group_12__0__Impl rule__Atom__Group_12__1 )
            // InternalOpenCypherParser.g:18006:2: rule__Atom__Group_12__0__Impl rule__Atom__Group_12__1
            {
            pushFollow(FOLLOW_124);
            rule__Atom__Group_12__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__0"


    // $ANTLR start "rule__Atom__Group_12__0__Impl"
    // InternalOpenCypherParser.g:18013:1: rule__Atom__Group_12__0__Impl : ( () ) ;
    public final void rule__Atom__Group_12__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18017:1: ( ( () ) )
            // InternalOpenCypherParser.g:18018:1: ( () )
            {
            // InternalOpenCypherParser.g:18018:1: ( () )
            // InternalOpenCypherParser.g:18019:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getNoneAction_12_0()); 
            }
            // InternalOpenCypherParser.g:18020:2: ()
            // InternalOpenCypherParser.g:18020:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getNoneAction_12_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__0__Impl"


    // $ANTLR start "rule__Atom__Group_12__1"
    // InternalOpenCypherParser.g:18028:1: rule__Atom__Group_12__1 : rule__Atom__Group_12__1__Impl rule__Atom__Group_12__2 ;
    public final void rule__Atom__Group_12__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18032:1: ( rule__Atom__Group_12__1__Impl rule__Atom__Group_12__2 )
            // InternalOpenCypherParser.g:18033:2: rule__Atom__Group_12__1__Impl rule__Atom__Group_12__2
            {
            pushFollow(FOLLOW_30);
            rule__Atom__Group_12__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__1"


    // $ANTLR start "rule__Atom__Group_12__1__Impl"
    // InternalOpenCypherParser.g:18040:1: rule__Atom__Group_12__1__Impl : ( NONE ) ;
    public final void rule__Atom__Group_12__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18044:1: ( ( NONE ) )
            // InternalOpenCypherParser.g:18045:1: ( NONE )
            {
            // InternalOpenCypherParser.g:18045:1: ( NONE )
            // InternalOpenCypherParser.g:18046:2: NONE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getNONEKeyword_12_1()); 
            }
            match(input,NONE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getNONEKeyword_12_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__1__Impl"


    // $ANTLR start "rule__Atom__Group_12__2"
    // InternalOpenCypherParser.g:18055:1: rule__Atom__Group_12__2 : rule__Atom__Group_12__2__Impl rule__Atom__Group_12__3 ;
    public final void rule__Atom__Group_12__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18059:1: ( rule__Atom__Group_12__2__Impl rule__Atom__Group_12__3 )
            // InternalOpenCypherParser.g:18060:2: rule__Atom__Group_12__2__Impl rule__Atom__Group_12__3
            {
            pushFollow(FOLLOW_10);
            rule__Atom__Group_12__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__2"


    // $ANTLR start "rule__Atom__Group_12__2__Impl"
    // InternalOpenCypherParser.g:18067:1: rule__Atom__Group_12__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_12__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18071:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:18072:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:18072:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:18073:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_12_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_12_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__2__Impl"


    // $ANTLR start "rule__Atom__Group_12__3"
    // InternalOpenCypherParser.g:18082:1: rule__Atom__Group_12__3 : rule__Atom__Group_12__3__Impl rule__Atom__Group_12__4 ;
    public final void rule__Atom__Group_12__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18086:1: ( rule__Atom__Group_12__3__Impl rule__Atom__Group_12__4 )
            // InternalOpenCypherParser.g:18087:2: rule__Atom__Group_12__3__Impl rule__Atom__Group_12__4
            {
            pushFollow(FOLLOW_31);
            rule__Atom__Group_12__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__3"


    // $ANTLR start "rule__Atom__Group_12__3__Impl"
    // InternalOpenCypherParser.g:18094:1: rule__Atom__Group_12__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_12_3 ) ) ;
    public final void rule__Atom__Group_12__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18098:1: ( ( ( rule__Atom__FilterExpressionAssignment_12_3 ) ) )
            // InternalOpenCypherParser.g:18099:1: ( ( rule__Atom__FilterExpressionAssignment_12_3 ) )
            {
            // InternalOpenCypherParser.g:18099:1: ( ( rule__Atom__FilterExpressionAssignment_12_3 ) )
            // InternalOpenCypherParser.g:18100:2: ( rule__Atom__FilterExpressionAssignment_12_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_12_3()); 
            }
            // InternalOpenCypherParser.g:18101:2: ( rule__Atom__FilterExpressionAssignment_12_3 )
            // InternalOpenCypherParser.g:18101:3: rule__Atom__FilterExpressionAssignment_12_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_12_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_12_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__3__Impl"


    // $ANTLR start "rule__Atom__Group_12__4"
    // InternalOpenCypherParser.g:18109:1: rule__Atom__Group_12__4 : rule__Atom__Group_12__4__Impl ;
    public final void rule__Atom__Group_12__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18113:1: ( rule__Atom__Group_12__4__Impl )
            // InternalOpenCypherParser.g:18114:2: rule__Atom__Group_12__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__4"


    // $ANTLR start "rule__Atom__Group_12__4__Impl"
    // InternalOpenCypherParser.g:18120:1: rule__Atom__Group_12__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_12__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18124:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:18125:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:18125:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:18126:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_12_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_12_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__4__Impl"


    // $ANTLR start "rule__Atom__Group_13__0"
    // InternalOpenCypherParser.g:18136:1: rule__Atom__Group_13__0 : rule__Atom__Group_13__0__Impl rule__Atom__Group_13__1 ;
    public final void rule__Atom__Group_13__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18140:1: ( rule__Atom__Group_13__0__Impl rule__Atom__Group_13__1 )
            // InternalOpenCypherParser.g:18141:2: rule__Atom__Group_13__0__Impl rule__Atom__Group_13__1
            {
            pushFollow(FOLLOW_125);
            rule__Atom__Group_13__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_13__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_13__0"


    // $ANTLR start "rule__Atom__Group_13__0__Impl"
    // InternalOpenCypherParser.g:18148:1: rule__Atom__Group_13__0__Impl : ( () ) ;
    public final void rule__Atom__Group_13__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18152:1: ( ( () ) )
            // InternalOpenCypherParser.g:18153:1: ( () )
            {
            // InternalOpenCypherParser.g:18153:1: ( () )
            // InternalOpenCypherParser.g:18154:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getSingleAction_13_0()); 
            }
            // InternalOpenCypherParser.g:18155:2: ()
            // InternalOpenCypherParser.g:18155:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getSingleAction_13_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_13__0__Impl"


    // $ANTLR start "rule__Atom__Group_13__1"
    // InternalOpenCypherParser.g:18163:1: rule__Atom__Group_13__1 : rule__Atom__Group_13__1__Impl rule__Atom__Group_13__2 ;
    public final void rule__Atom__Group_13__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18167:1: ( rule__Atom__Group_13__1__Impl rule__Atom__Group_13__2 )
            // InternalOpenCypherParser.g:18168:2: rule__Atom__Group_13__1__Impl rule__Atom__Group_13__2
            {
            pushFollow(FOLLOW_30);
            rule__Atom__Group_13__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_13__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_13__1"


    // $ANTLR start "rule__Atom__Group_13__1__Impl"
    // InternalOpenCypherParser.g:18175:1: rule__Atom__Group_13__1__Impl : ( SINGLE ) ;
    public final void rule__Atom__Group_13__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18179:1: ( ( SINGLE ) )
            // InternalOpenCypherParser.g:18180:1: ( SINGLE )
            {
            // InternalOpenCypherParser.g:18180:1: ( SINGLE )
            // InternalOpenCypherParser.g:18181:2: SINGLE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getSINGLEKeyword_13_1()); 
            }
            match(input,SINGLE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getSINGLEKeyword_13_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_13__1__Impl"


    // $ANTLR start "rule__Atom__Group_13__2"
    // InternalOpenCypherParser.g:18190:1: rule__Atom__Group_13__2 : rule__Atom__Group_13__2__Impl rule__Atom__Group_13__3 ;
    public final void rule__Atom__Group_13__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18194:1: ( rule__Atom__Group_13__2__Impl rule__Atom__Group_13__3 )
            // InternalOpenCypherParser.g:18195:2: rule__Atom__Group_13__2__Impl rule__Atom__Group_13__3
            {
            pushFollow(FOLLOW_10);
            rule__Atom__Group_13__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_13__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_13__2"


    // $ANTLR start "rule__Atom__Group_13__2__Impl"
    // InternalOpenCypherParser.g:18202:1: rule__Atom__Group_13__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_13__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18206:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:18207:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:18207:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:18208:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_13_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_13_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_13__2__Impl"


    // $ANTLR start "rule__Atom__Group_13__3"
    // InternalOpenCypherParser.g:18217:1: rule__Atom__Group_13__3 : rule__Atom__Group_13__3__Impl rule__Atom__Group_13__4 ;
    public final void rule__Atom__Group_13__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18221:1: ( rule__Atom__Group_13__3__Impl rule__Atom__Group_13__4 )
            // InternalOpenCypherParser.g:18222:2: rule__Atom__Group_13__3__Impl rule__Atom__Group_13__4
            {
            pushFollow(FOLLOW_31);
            rule__Atom__Group_13__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_13__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_13__3"


    // $ANTLR start "rule__Atom__Group_13__3__Impl"
    // InternalOpenCypherParser.g:18229:1: rule__Atom__Group_13__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_13_3 ) ) ;
    public final void rule__Atom__Group_13__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18233:1: ( ( ( rule__Atom__FilterExpressionAssignment_13_3 ) ) )
            // InternalOpenCypherParser.g:18234:1: ( ( rule__Atom__FilterExpressionAssignment_13_3 ) )
            {
            // InternalOpenCypherParser.g:18234:1: ( ( rule__Atom__FilterExpressionAssignment_13_3 ) )
            // InternalOpenCypherParser.g:18235:2: ( rule__Atom__FilterExpressionAssignment_13_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_13_3()); 
            }
            // InternalOpenCypherParser.g:18236:2: ( rule__Atom__FilterExpressionAssignment_13_3 )
            // InternalOpenCypherParser.g:18236:3: rule__Atom__FilterExpressionAssignment_13_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_13_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_13_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_13__3__Impl"


    // $ANTLR start "rule__Atom__Group_13__4"
    // InternalOpenCypherParser.g:18244:1: rule__Atom__Group_13__4 : rule__Atom__Group_13__4__Impl ;
    public final void rule__Atom__Group_13__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18248:1: ( rule__Atom__Group_13__4__Impl )
            // InternalOpenCypherParser.g:18249:2: rule__Atom__Group_13__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_13__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_13__4"


    // $ANTLR start "rule__Atom__Group_13__4__Impl"
    // InternalOpenCypherParser.g:18255:1: rule__Atom__Group_13__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_13__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18259:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:18260:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:18260:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:18261:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_13_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_13_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_13__4__Impl"


    // $ANTLR start "rule__Atom__Group_18__0"
    // InternalOpenCypherParser.g:18271:1: rule__Atom__Group_18__0 : rule__Atom__Group_18__0__Impl rule__Atom__Group_18__1 ;
    public final void rule__Atom__Group_18__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18275:1: ( rule__Atom__Group_18__0__Impl rule__Atom__Group_18__1 )
            // InternalOpenCypherParser.g:18276:2: rule__Atom__Group_18__0__Impl rule__Atom__Group_18__1
            {
            pushFollow(FOLLOW_33);
            rule__Atom__Group_18__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_18__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__0"


    // $ANTLR start "rule__Atom__Group_18__0__Impl"
    // InternalOpenCypherParser.g:18283:1: rule__Atom__Group_18__0__Impl : ( () ) ;
    public final void rule__Atom__Group_18__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18287:1: ( ( () ) )
            // InternalOpenCypherParser.g:18288:1: ( () )
            {
            // InternalOpenCypherParser.g:18288:1: ( () )
            // InternalOpenCypherParser.g:18289:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getVariableRefAction_18_0()); 
            }
            // InternalOpenCypherParser.g:18290:2: ()
            // InternalOpenCypherParser.g:18290:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getVariableRefAction_18_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__0__Impl"


    // $ANTLR start "rule__Atom__Group_18__1"
    // InternalOpenCypherParser.g:18298:1: rule__Atom__Group_18__1 : rule__Atom__Group_18__1__Impl ;
    public final void rule__Atom__Group_18__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18302:1: ( rule__Atom__Group_18__1__Impl )
            // InternalOpenCypherParser.g:18303:2: rule__Atom__Group_18__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_18__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__1"


    // $ANTLR start "rule__Atom__Group_18__1__Impl"
    // InternalOpenCypherParser.g:18309:1: rule__Atom__Group_18__1__Impl : ( ( rule__Atom__VariableRefAssignment_18_1 ) ) ;
    public final void rule__Atom__Group_18__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18313:1: ( ( ( rule__Atom__VariableRefAssignment_18_1 ) ) )
            // InternalOpenCypherParser.g:18314:1: ( ( rule__Atom__VariableRefAssignment_18_1 ) )
            {
            // InternalOpenCypherParser.g:18314:1: ( ( rule__Atom__VariableRefAssignment_18_1 ) )
            // InternalOpenCypherParser.g:18315:2: ( rule__Atom__VariableRefAssignment_18_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getVariableRefAssignment_18_1()); 
            }
            // InternalOpenCypherParser.g:18316:2: ( rule__Atom__VariableRefAssignment_18_1 )
            // InternalOpenCypherParser.g:18316:3: rule__Atom__VariableRefAssignment_18_1
            {
            pushFollow(FOLLOW_2);
            rule__Atom__VariableRefAssignment_18_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getVariableRefAssignment_18_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__1__Impl"


    // $ANTLR start "rule__Literal__Group_2__0"
    // InternalOpenCypherParser.g:18325:1: rule__Literal__Group_2__0 : rule__Literal__Group_2__0__Impl rule__Literal__Group_2__1 ;
    public final void rule__Literal__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18329:1: ( rule__Literal__Group_2__0__Impl rule__Literal__Group_2__1 )
            // InternalOpenCypherParser.g:18330:2: rule__Literal__Group_2__0__Impl rule__Literal__Group_2__1
            {
            pushFollow(FOLLOW_114);
            rule__Literal__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Literal__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Literal__Group_2__0"


    // $ANTLR start "rule__Literal__Group_2__0__Impl"
    // InternalOpenCypherParser.g:18337:1: rule__Literal__Group_2__0__Impl : ( () ) ;
    public final void rule__Literal__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18341:1: ( ( () ) )
            // InternalOpenCypherParser.g:18342:1: ( () )
            {
            // InternalOpenCypherParser.g:18342:1: ( () )
            // InternalOpenCypherParser.g:18343:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralAccess().getNULLAction_2_0()); 
            }
            // InternalOpenCypherParser.g:18344:2: ()
            // InternalOpenCypherParser.g:18344:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralAccess().getNULLAction_2_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Literal__Group_2__0__Impl"


    // $ANTLR start "rule__Literal__Group_2__1"
    // InternalOpenCypherParser.g:18352:1: rule__Literal__Group_2__1 : rule__Literal__Group_2__1__Impl ;
    public final void rule__Literal__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18356:1: ( rule__Literal__Group_2__1__Impl )
            // InternalOpenCypherParser.g:18357:2: rule__Literal__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Literal__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Literal__Group_2__1"


    // $ANTLR start "rule__Literal__Group_2__1__Impl"
    // InternalOpenCypherParser.g:18363:1: rule__Literal__Group_2__1__Impl : ( NULL ) ;
    public final void rule__Literal__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18367:1: ( ( NULL ) )
            // InternalOpenCypherParser.g:18368:1: ( NULL )
            {
            // InternalOpenCypherParser.g:18368:1: ( NULL )
            // InternalOpenCypherParser.g:18369:2: NULL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralAccess().getNULLKeyword_2_1()); 
            }
            match(input,NULL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralAccess().getNULLKeyword_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Literal__Group_2__1__Impl"


    // $ANTLR start "rule__BooleanLiteral__Group__0"
    // InternalOpenCypherParser.g:18379:1: rule__BooleanLiteral__Group__0 : rule__BooleanLiteral__Group__0__Impl rule__BooleanLiteral__Group__1 ;
    public final void rule__BooleanLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18383:1: ( rule__BooleanLiteral__Group__0__Impl rule__BooleanLiteral__Group__1 )
            // InternalOpenCypherParser.g:18384:2: rule__BooleanLiteral__Group__0__Impl rule__BooleanLiteral__Group__1
            {
            pushFollow(FOLLOW_126);
            rule__BooleanLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__BooleanLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BooleanLiteral__Group__0"


    // $ANTLR start "rule__BooleanLiteral__Group__0__Impl"
    // InternalOpenCypherParser.g:18391:1: rule__BooleanLiteral__Group__0__Impl : ( () ) ;
    public final void rule__BooleanLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18395:1: ( ( () ) )
            // InternalOpenCypherParser.g:18396:1: ( () )
            {
            // InternalOpenCypherParser.g:18396:1: ( () )
            // InternalOpenCypherParser.g:18397:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); 
            }
            // InternalOpenCypherParser.g:18398:2: ()
            // InternalOpenCypherParser.g:18398:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BooleanLiteral__Group__0__Impl"


    // $ANTLR start "rule__BooleanLiteral__Group__1"
    // InternalOpenCypherParser.g:18406:1: rule__BooleanLiteral__Group__1 : rule__BooleanLiteral__Group__1__Impl ;
    public final void rule__BooleanLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18410:1: ( rule__BooleanLiteral__Group__1__Impl )
            // InternalOpenCypherParser.g:18411:2: rule__BooleanLiteral__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__BooleanLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BooleanLiteral__Group__1"


    // $ANTLR start "rule__BooleanLiteral__Group__1__Impl"
    // InternalOpenCypherParser.g:18417:1: rule__BooleanLiteral__Group__1__Impl : ( ( rule__BooleanLiteral__ValueAssignment_1 ) ) ;
    public final void rule__BooleanLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18421:1: ( ( ( rule__BooleanLiteral__ValueAssignment_1 ) ) )
            // InternalOpenCypherParser.g:18422:1: ( ( rule__BooleanLiteral__ValueAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:18422:1: ( ( rule__BooleanLiteral__ValueAssignment_1 ) )
            // InternalOpenCypherParser.g:18423:2: ( rule__BooleanLiteral__ValueAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1()); 
            }
            // InternalOpenCypherParser.g:18424:2: ( rule__BooleanLiteral__ValueAssignment_1 )
            // InternalOpenCypherParser.g:18424:3: rule__BooleanLiteral__ValueAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__BooleanLiteral__ValueAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BooleanLiteral__Group__1__Impl"


    // $ANTLR start "rule__ListLiteral__Group__0"
    // InternalOpenCypherParser.g:18433:1: rule__ListLiteral__Group__0 : rule__ListLiteral__Group__0__Impl rule__ListLiteral__Group__1 ;
    public final void rule__ListLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18437:1: ( rule__ListLiteral__Group__0__Impl rule__ListLiteral__Group__1 )
            // InternalOpenCypherParser.g:18438:2: rule__ListLiteral__Group__0__Impl rule__ListLiteral__Group__1
            {
            pushFollow(FOLLOW_127);
            rule__ListLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group__0"


    // $ANTLR start "rule__ListLiteral__Group__0__Impl"
    // InternalOpenCypherParser.g:18445:1: rule__ListLiteral__Group__0__Impl : ( () ) ;
    public final void rule__ListLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18449:1: ( ( () ) )
            // InternalOpenCypherParser.g:18450:1: ( () )
            {
            // InternalOpenCypherParser.g:18450:1: ( () )
            // InternalOpenCypherParser.g:18451:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getListLiteralAction_0()); 
            }
            // InternalOpenCypherParser.g:18452:2: ()
            // InternalOpenCypherParser.g:18452:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getListLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group__0__Impl"


    // $ANTLR start "rule__ListLiteral__Group__1"
    // InternalOpenCypherParser.g:18460:1: rule__ListLiteral__Group__1 : rule__ListLiteral__Group__1__Impl rule__ListLiteral__Group__2 ;
    public final void rule__ListLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18464:1: ( rule__ListLiteral__Group__1__Impl rule__ListLiteral__Group__2 )
            // InternalOpenCypherParser.g:18465:2: rule__ListLiteral__Group__1__Impl rule__ListLiteral__Group__2
            {
            pushFollow(FOLLOW_108);
            rule__ListLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group__1"


    // $ANTLR start "rule__ListLiteral__Group__1__Impl"
    // InternalOpenCypherParser.g:18472:1: rule__ListLiteral__Group__1__Impl : ( LeftSquareBracket ) ;
    public final void rule__ListLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18476:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:18477:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:18477:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:18478:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group__1__Impl"


    // $ANTLR start "rule__ListLiteral__Group__2"
    // InternalOpenCypherParser.g:18487:1: rule__ListLiteral__Group__2 : rule__ListLiteral__Group__2__Impl rule__ListLiteral__Group__3 ;
    public final void rule__ListLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18491:1: ( rule__ListLiteral__Group__2__Impl rule__ListLiteral__Group__3 )
            // InternalOpenCypherParser.g:18492:2: rule__ListLiteral__Group__2__Impl rule__ListLiteral__Group__3
            {
            pushFollow(FOLLOW_108);
            rule__ListLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListLiteral__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group__2"


    // $ANTLR start "rule__ListLiteral__Group__2__Impl"
    // InternalOpenCypherParser.g:18499:1: rule__ListLiteral__Group__2__Impl : ( ( rule__ListLiteral__Group_2__0 )? ) ;
    public final void rule__ListLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18503:1: ( ( ( rule__ListLiteral__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:18504:1: ( ( rule__ListLiteral__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:18504:1: ( ( rule__ListLiteral__Group_2__0 )? )
            // InternalOpenCypherParser.g:18505:2: ( rule__ListLiteral__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:18506:2: ( rule__ListLiteral__Group_2__0 )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( ((LA132_0>=ALLSHORTESTPATHS && LA132_0<=WHERE)||(LA132_0>=CASE && LA132_0<=XOR)||(LA132_0>=AS && LA132_0<=OR)||LA132_0==DollarSign||LA132_0==LeftParenthesis||LA132_0==PlusSign||LA132_0==HyphenMinus||LA132_0==LeftSquareBracket||LA132_0==LeftCurlyBracket||LA132_0==RULE_ID||(LA132_0>=RULE_STRING_LITERAL && LA132_0<=RULE_DECIMAL)) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // InternalOpenCypherParser.g:18506:3: rule__ListLiteral__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ListLiteral__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group__2__Impl"


    // $ANTLR start "rule__ListLiteral__Group__3"
    // InternalOpenCypherParser.g:18514:1: rule__ListLiteral__Group__3 : rule__ListLiteral__Group__3__Impl ;
    public final void rule__ListLiteral__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18518:1: ( rule__ListLiteral__Group__3__Impl )
            // InternalOpenCypherParser.g:18519:2: rule__ListLiteral__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ListLiteral__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group__3"


    // $ANTLR start "rule__ListLiteral__Group__3__Impl"
    // InternalOpenCypherParser.g:18525:1: rule__ListLiteral__Group__3__Impl : ( RightSquareBracket ) ;
    public final void rule__ListLiteral__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18529:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:18530:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:18530:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:18531:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getRightSquareBracketKeyword_3()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getRightSquareBracketKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group__3__Impl"


    // $ANTLR start "rule__ListLiteral__Group_2__0"
    // InternalOpenCypherParser.g:18541:1: rule__ListLiteral__Group_2__0 : rule__ListLiteral__Group_2__0__Impl rule__ListLiteral__Group_2__1 ;
    public final void rule__ListLiteral__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18545:1: ( rule__ListLiteral__Group_2__0__Impl rule__ListLiteral__Group_2__1 )
            // InternalOpenCypherParser.g:18546:2: rule__ListLiteral__Group_2__0__Impl rule__ListLiteral__Group_2__1
            {
            pushFollow(FOLLOW_55);
            rule__ListLiteral__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListLiteral__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group_2__0"


    // $ANTLR start "rule__ListLiteral__Group_2__0__Impl"
    // InternalOpenCypherParser.g:18553:1: rule__ListLiteral__Group_2__0__Impl : ( ( rule__ListLiteral__ExpressionsAssignment_2_0 ) ) ;
    public final void rule__ListLiteral__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18557:1: ( ( ( rule__ListLiteral__ExpressionsAssignment_2_0 ) ) )
            // InternalOpenCypherParser.g:18558:1: ( ( rule__ListLiteral__ExpressionsAssignment_2_0 ) )
            {
            // InternalOpenCypherParser.g:18558:1: ( ( rule__ListLiteral__ExpressionsAssignment_2_0 ) )
            // InternalOpenCypherParser.g:18559:2: ( rule__ListLiteral__ExpressionsAssignment_2_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getExpressionsAssignment_2_0()); 
            }
            // InternalOpenCypherParser.g:18560:2: ( rule__ListLiteral__ExpressionsAssignment_2_0 )
            // InternalOpenCypherParser.g:18560:3: rule__ListLiteral__ExpressionsAssignment_2_0
            {
            pushFollow(FOLLOW_2);
            rule__ListLiteral__ExpressionsAssignment_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getExpressionsAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group_2__0__Impl"


    // $ANTLR start "rule__ListLiteral__Group_2__1"
    // InternalOpenCypherParser.g:18568:1: rule__ListLiteral__Group_2__1 : rule__ListLiteral__Group_2__1__Impl ;
    public final void rule__ListLiteral__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18572:1: ( rule__ListLiteral__Group_2__1__Impl )
            // InternalOpenCypherParser.g:18573:2: rule__ListLiteral__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ListLiteral__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group_2__1"


    // $ANTLR start "rule__ListLiteral__Group_2__1__Impl"
    // InternalOpenCypherParser.g:18579:1: rule__ListLiteral__Group_2__1__Impl : ( ( rule__ListLiteral__Group_2_1__0 )* ) ;
    public final void rule__ListLiteral__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18583:1: ( ( ( rule__ListLiteral__Group_2_1__0 )* ) )
            // InternalOpenCypherParser.g:18584:1: ( ( rule__ListLiteral__Group_2_1__0 )* )
            {
            // InternalOpenCypherParser.g:18584:1: ( ( rule__ListLiteral__Group_2_1__0 )* )
            // InternalOpenCypherParser.g:18585:2: ( rule__ListLiteral__Group_2_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getGroup_2_1()); 
            }
            // InternalOpenCypherParser.g:18586:2: ( rule__ListLiteral__Group_2_1__0 )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==Comma) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // InternalOpenCypherParser.g:18586:3: rule__ListLiteral__Group_2_1__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__ListLiteral__Group_2_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group_2__1__Impl"


    // $ANTLR start "rule__ListLiteral__Group_2_1__0"
    // InternalOpenCypherParser.g:18595:1: rule__ListLiteral__Group_2_1__0 : rule__ListLiteral__Group_2_1__0__Impl rule__ListLiteral__Group_2_1__1 ;
    public final void rule__ListLiteral__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18599:1: ( rule__ListLiteral__Group_2_1__0__Impl rule__ListLiteral__Group_2_1__1 )
            // InternalOpenCypherParser.g:18600:2: rule__ListLiteral__Group_2_1__0__Impl rule__ListLiteral__Group_2_1__1
            {
            pushFollow(FOLLOW_43);
            rule__ListLiteral__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListLiteral__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group_2_1__0"


    // $ANTLR start "rule__ListLiteral__Group_2_1__0__Impl"
    // InternalOpenCypherParser.g:18607:1: rule__ListLiteral__Group_2_1__0__Impl : ( Comma ) ;
    public final void rule__ListLiteral__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18611:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:18612:1: ( Comma )
            {
            // InternalOpenCypherParser.g:18612:1: ( Comma )
            // InternalOpenCypherParser.g:18613:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getCommaKeyword_2_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getCommaKeyword_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group_2_1__0__Impl"


    // $ANTLR start "rule__ListLiteral__Group_2_1__1"
    // InternalOpenCypherParser.g:18622:1: rule__ListLiteral__Group_2_1__1 : rule__ListLiteral__Group_2_1__1__Impl ;
    public final void rule__ListLiteral__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18626:1: ( rule__ListLiteral__Group_2_1__1__Impl )
            // InternalOpenCypherParser.g:18627:2: rule__ListLiteral__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ListLiteral__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group_2_1__1"


    // $ANTLR start "rule__ListLiteral__Group_2_1__1__Impl"
    // InternalOpenCypherParser.g:18633:1: rule__ListLiteral__Group_2_1__1__Impl : ( ( rule__ListLiteral__ExpressionsAssignment_2_1_1 ) ) ;
    public final void rule__ListLiteral__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18637:1: ( ( ( rule__ListLiteral__ExpressionsAssignment_2_1_1 ) ) )
            // InternalOpenCypherParser.g:18638:1: ( ( rule__ListLiteral__ExpressionsAssignment_2_1_1 ) )
            {
            // InternalOpenCypherParser.g:18638:1: ( ( rule__ListLiteral__ExpressionsAssignment_2_1_1 ) )
            // InternalOpenCypherParser.g:18639:2: ( rule__ListLiteral__ExpressionsAssignment_2_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getExpressionsAssignment_2_1_1()); 
            }
            // InternalOpenCypherParser.g:18640:2: ( rule__ListLiteral__ExpressionsAssignment_2_1_1 )
            // InternalOpenCypherParser.g:18640:3: rule__ListLiteral__ExpressionsAssignment_2_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ListLiteral__ExpressionsAssignment_2_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getExpressionsAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__Group_2_1__1__Impl"


    // $ANTLR start "rule__Reduce__Group__0"
    // InternalOpenCypherParser.g:18649:1: rule__Reduce__Group__0 : rule__Reduce__Group__0__Impl rule__Reduce__Group__1 ;
    public final void rule__Reduce__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18653:1: ( rule__Reduce__Group__0__Impl rule__Reduce__Group__1 )
            // InternalOpenCypherParser.g:18654:2: rule__Reduce__Group__0__Impl rule__Reduce__Group__1
            {
            pushFollow(FOLLOW_30);
            rule__Reduce__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__0"


    // $ANTLR start "rule__Reduce__Group__0__Impl"
    // InternalOpenCypherParser.g:18661:1: rule__Reduce__Group__0__Impl : ( REDUCE ) ;
    public final void rule__Reduce__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18665:1: ( ( REDUCE ) )
            // InternalOpenCypherParser.g:18666:1: ( REDUCE )
            {
            // InternalOpenCypherParser.g:18666:1: ( REDUCE )
            // InternalOpenCypherParser.g:18667:2: REDUCE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getREDUCEKeyword_0()); 
            }
            match(input,REDUCE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getREDUCEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__0__Impl"


    // $ANTLR start "rule__Reduce__Group__1"
    // InternalOpenCypherParser.g:18676:1: rule__Reduce__Group__1 : rule__Reduce__Group__1__Impl rule__Reduce__Group__2 ;
    public final void rule__Reduce__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18680:1: ( rule__Reduce__Group__1__Impl rule__Reduce__Group__2 )
            // InternalOpenCypherParser.g:18681:2: rule__Reduce__Group__1__Impl rule__Reduce__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__Reduce__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__1"


    // $ANTLR start "rule__Reduce__Group__1__Impl"
    // InternalOpenCypherParser.g:18688:1: rule__Reduce__Group__1__Impl : ( LeftParenthesis ) ;
    public final void rule__Reduce__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18692:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:18693:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:18693:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:18694:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__1__Impl"


    // $ANTLR start "rule__Reduce__Group__2"
    // InternalOpenCypherParser.g:18703:1: rule__Reduce__Group__2 : rule__Reduce__Group__2__Impl rule__Reduce__Group__3 ;
    public final void rule__Reduce__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18707:1: ( rule__Reduce__Group__2__Impl rule__Reduce__Group__3 )
            // InternalOpenCypherParser.g:18708:2: rule__Reduce__Group__2__Impl rule__Reduce__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__Reduce__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__2"


    // $ANTLR start "rule__Reduce__Group__2__Impl"
    // InternalOpenCypherParser.g:18715:1: rule__Reduce__Group__2__Impl : ( ( rule__Reduce__AccumulatorAssignment_2 ) ) ;
    public final void rule__Reduce__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18719:1: ( ( ( rule__Reduce__AccumulatorAssignment_2 ) ) )
            // InternalOpenCypherParser.g:18720:1: ( ( rule__Reduce__AccumulatorAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:18720:1: ( ( rule__Reduce__AccumulatorAssignment_2 ) )
            // InternalOpenCypherParser.g:18721:2: ( rule__Reduce__AccumulatorAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getAccumulatorAssignment_2()); 
            }
            // InternalOpenCypherParser.g:18722:2: ( rule__Reduce__AccumulatorAssignment_2 )
            // InternalOpenCypherParser.g:18722:3: rule__Reduce__AccumulatorAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__AccumulatorAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getAccumulatorAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__2__Impl"


    // $ANTLR start "rule__Reduce__Group__3"
    // InternalOpenCypherParser.g:18730:1: rule__Reduce__Group__3 : rule__Reduce__Group__3__Impl rule__Reduce__Group__4 ;
    public final void rule__Reduce__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18734:1: ( rule__Reduce__Group__3__Impl rule__Reduce__Group__4 )
            // InternalOpenCypherParser.g:18735:2: rule__Reduce__Group__3__Impl rule__Reduce__Group__4
            {
            pushFollow(FOLLOW_43);
            rule__Reduce__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__3"


    // $ANTLR start "rule__Reduce__Group__3__Impl"
    // InternalOpenCypherParser.g:18742:1: rule__Reduce__Group__3__Impl : ( EqualsSign ) ;
    public final void rule__Reduce__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18746:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:18747:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:18747:1: ( EqualsSign )
            // InternalOpenCypherParser.g:18748:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getEqualsSignKeyword_3()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getEqualsSignKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__3__Impl"


    // $ANTLR start "rule__Reduce__Group__4"
    // InternalOpenCypherParser.g:18757:1: rule__Reduce__Group__4 : rule__Reduce__Group__4__Impl rule__Reduce__Group__5 ;
    public final void rule__Reduce__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18761:1: ( rule__Reduce__Group__4__Impl rule__Reduce__Group__5 )
            // InternalOpenCypherParser.g:18762:2: rule__Reduce__Group__4__Impl rule__Reduce__Group__5
            {
            pushFollow(FOLLOW_55);
            rule__Reduce__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__4"


    // $ANTLR start "rule__Reduce__Group__4__Impl"
    // InternalOpenCypherParser.g:18769:1: rule__Reduce__Group__4__Impl : ( ( rule__Reduce__AccumulatorExpressionAssignment_4 ) ) ;
    public final void rule__Reduce__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18773:1: ( ( ( rule__Reduce__AccumulatorExpressionAssignment_4 ) ) )
            // InternalOpenCypherParser.g:18774:1: ( ( rule__Reduce__AccumulatorExpressionAssignment_4 ) )
            {
            // InternalOpenCypherParser.g:18774:1: ( ( rule__Reduce__AccumulatorExpressionAssignment_4 ) )
            // InternalOpenCypherParser.g:18775:2: ( rule__Reduce__AccumulatorExpressionAssignment_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getAccumulatorExpressionAssignment_4()); 
            }
            // InternalOpenCypherParser.g:18776:2: ( rule__Reduce__AccumulatorExpressionAssignment_4 )
            // InternalOpenCypherParser.g:18776:3: rule__Reduce__AccumulatorExpressionAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__AccumulatorExpressionAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getAccumulatorExpressionAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__4__Impl"


    // $ANTLR start "rule__Reduce__Group__5"
    // InternalOpenCypherParser.g:18784:1: rule__Reduce__Group__5 : rule__Reduce__Group__5__Impl rule__Reduce__Group__6 ;
    public final void rule__Reduce__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18788:1: ( rule__Reduce__Group__5__Impl rule__Reduce__Group__6 )
            // InternalOpenCypherParser.g:18789:2: rule__Reduce__Group__5__Impl rule__Reduce__Group__6
            {
            pushFollow(FOLLOW_10);
            rule__Reduce__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__5"


    // $ANTLR start "rule__Reduce__Group__5__Impl"
    // InternalOpenCypherParser.g:18796:1: rule__Reduce__Group__5__Impl : ( Comma ) ;
    public final void rule__Reduce__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18800:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:18801:1: ( Comma )
            {
            // InternalOpenCypherParser.g:18801:1: ( Comma )
            // InternalOpenCypherParser.g:18802:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getCommaKeyword_5()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getCommaKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__5__Impl"


    // $ANTLR start "rule__Reduce__Group__6"
    // InternalOpenCypherParser.g:18811:1: rule__Reduce__Group__6 : rule__Reduce__Group__6__Impl rule__Reduce__Group__7 ;
    public final void rule__Reduce__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18815:1: ( rule__Reduce__Group__6__Impl rule__Reduce__Group__7 )
            // InternalOpenCypherParser.g:18816:2: rule__Reduce__Group__6__Impl rule__Reduce__Group__7
            {
            pushFollow(FOLLOW_60);
            rule__Reduce__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__6"


    // $ANTLR start "rule__Reduce__Group__6__Impl"
    // InternalOpenCypherParser.g:18823:1: rule__Reduce__Group__6__Impl : ( ( rule__Reduce__IdInCollAssignment_6 ) ) ;
    public final void rule__Reduce__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18827:1: ( ( ( rule__Reduce__IdInCollAssignment_6 ) ) )
            // InternalOpenCypherParser.g:18828:1: ( ( rule__Reduce__IdInCollAssignment_6 ) )
            {
            // InternalOpenCypherParser.g:18828:1: ( ( rule__Reduce__IdInCollAssignment_6 ) )
            // InternalOpenCypherParser.g:18829:2: ( rule__Reduce__IdInCollAssignment_6 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getIdInCollAssignment_6()); 
            }
            // InternalOpenCypherParser.g:18830:2: ( rule__Reduce__IdInCollAssignment_6 )
            // InternalOpenCypherParser.g:18830:3: rule__Reduce__IdInCollAssignment_6
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__IdInCollAssignment_6();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getIdInCollAssignment_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__6__Impl"


    // $ANTLR start "rule__Reduce__Group__7"
    // InternalOpenCypherParser.g:18838:1: rule__Reduce__Group__7 : rule__Reduce__Group__7__Impl rule__Reduce__Group__8 ;
    public final void rule__Reduce__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18842:1: ( rule__Reduce__Group__7__Impl rule__Reduce__Group__8 )
            // InternalOpenCypherParser.g:18843:2: rule__Reduce__Group__7__Impl rule__Reduce__Group__8
            {
            pushFollow(FOLLOW_43);
            rule__Reduce__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__7"


    // $ANTLR start "rule__Reduce__Group__7__Impl"
    // InternalOpenCypherParser.g:18850:1: rule__Reduce__Group__7__Impl : ( VerticalLine ) ;
    public final void rule__Reduce__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18854:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:18855:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:18855:1: ( VerticalLine )
            // InternalOpenCypherParser.g:18856:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getVerticalLineKeyword_7()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getVerticalLineKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__7__Impl"


    // $ANTLR start "rule__Reduce__Group__8"
    // InternalOpenCypherParser.g:18865:1: rule__Reduce__Group__8 : rule__Reduce__Group__8__Impl rule__Reduce__Group__9 ;
    public final void rule__Reduce__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18869:1: ( rule__Reduce__Group__8__Impl rule__Reduce__Group__9 )
            // InternalOpenCypherParser.g:18870:2: rule__Reduce__Group__8__Impl rule__Reduce__Group__9
            {
            pushFollow(FOLLOW_31);
            rule__Reduce__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__8"


    // $ANTLR start "rule__Reduce__Group__8__Impl"
    // InternalOpenCypherParser.g:18877:1: rule__Reduce__Group__8__Impl : ( ( rule__Reduce__ExpressionAssignment_8 ) ) ;
    public final void rule__Reduce__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18881:1: ( ( ( rule__Reduce__ExpressionAssignment_8 ) ) )
            // InternalOpenCypherParser.g:18882:1: ( ( rule__Reduce__ExpressionAssignment_8 ) )
            {
            // InternalOpenCypherParser.g:18882:1: ( ( rule__Reduce__ExpressionAssignment_8 ) )
            // InternalOpenCypherParser.g:18883:2: ( rule__Reduce__ExpressionAssignment_8 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getExpressionAssignment_8()); 
            }
            // InternalOpenCypherParser.g:18884:2: ( rule__Reduce__ExpressionAssignment_8 )
            // InternalOpenCypherParser.g:18884:3: rule__Reduce__ExpressionAssignment_8
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__ExpressionAssignment_8();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getExpressionAssignment_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__8__Impl"


    // $ANTLR start "rule__Reduce__Group__9"
    // InternalOpenCypherParser.g:18892:1: rule__Reduce__Group__9 : rule__Reduce__Group__9__Impl ;
    public final void rule__Reduce__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18896:1: ( rule__Reduce__Group__9__Impl )
            // InternalOpenCypherParser.g:18897:2: rule__Reduce__Group__9__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__9"


    // $ANTLR start "rule__Reduce__Group__9__Impl"
    // InternalOpenCypherParser.g:18903:1: rule__Reduce__Group__9__Impl : ( RightParenthesis ) ;
    public final void rule__Reduce__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18907:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:18908:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:18908:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:18909:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getRightParenthesisKeyword_9()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getRightParenthesisKeyword_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__9__Impl"


    // $ANTLR start "rule__ParenthesizedExpression__Group__0"
    // InternalOpenCypherParser.g:18919:1: rule__ParenthesizedExpression__Group__0 : rule__ParenthesizedExpression__Group__0__Impl rule__ParenthesizedExpression__Group__1 ;
    public final void rule__ParenthesizedExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18923:1: ( rule__ParenthesizedExpression__Group__0__Impl rule__ParenthesizedExpression__Group__1 )
            // InternalOpenCypherParser.g:18924:2: rule__ParenthesizedExpression__Group__0__Impl rule__ParenthesizedExpression__Group__1
            {
            pushFollow(FOLLOW_43);
            rule__ParenthesizedExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParenthesizedExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__0"


    // $ANTLR start "rule__ParenthesizedExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:18931:1: rule__ParenthesizedExpression__Group__0__Impl : ( LeftParenthesis ) ;
    public final void rule__ParenthesizedExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18935:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:18936:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:18936:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:18937:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__0__Impl"


    // $ANTLR start "rule__ParenthesizedExpression__Group__1"
    // InternalOpenCypherParser.g:18946:1: rule__ParenthesizedExpression__Group__1 : rule__ParenthesizedExpression__Group__1__Impl rule__ParenthesizedExpression__Group__2 ;
    public final void rule__ParenthesizedExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18950:1: ( rule__ParenthesizedExpression__Group__1__Impl rule__ParenthesizedExpression__Group__2 )
            // InternalOpenCypherParser.g:18951:2: rule__ParenthesizedExpression__Group__1__Impl rule__ParenthesizedExpression__Group__2
            {
            pushFollow(FOLLOW_31);
            rule__ParenthesizedExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParenthesizedExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__1"


    // $ANTLR start "rule__ParenthesizedExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:18958:1: rule__ParenthesizedExpression__Group__1__Impl : ( ( rule__ParenthesizedExpression__ExpressionAssignment_1 ) ) ;
    public final void rule__ParenthesizedExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18962:1: ( ( ( rule__ParenthesizedExpression__ExpressionAssignment_1 ) ) )
            // InternalOpenCypherParser.g:18963:1: ( ( rule__ParenthesizedExpression__ExpressionAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:18963:1: ( ( rule__ParenthesizedExpression__ExpressionAssignment_1 ) )
            // InternalOpenCypherParser.g:18964:2: ( rule__ParenthesizedExpression__ExpressionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1()); 
            }
            // InternalOpenCypherParser.g:18965:2: ( rule__ParenthesizedExpression__ExpressionAssignment_1 )
            // InternalOpenCypherParser.g:18965:3: rule__ParenthesizedExpression__ExpressionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ParenthesizedExpression__ExpressionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__1__Impl"


    // $ANTLR start "rule__ParenthesizedExpression__Group__2"
    // InternalOpenCypherParser.g:18973:1: rule__ParenthesizedExpression__Group__2 : rule__ParenthesizedExpression__Group__2__Impl ;
    public final void rule__ParenthesizedExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18977:1: ( rule__ParenthesizedExpression__Group__2__Impl )
            // InternalOpenCypherParser.g:18978:2: rule__ParenthesizedExpression__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ParenthesizedExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__2"


    // $ANTLR start "rule__ParenthesizedExpression__Group__2__Impl"
    // InternalOpenCypherParser.g:18984:1: rule__ParenthesizedExpression__Group__2__Impl : ( RightParenthesis ) ;
    public final void rule__ParenthesizedExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18988:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:18989:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:18989:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:18990:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__2__Impl"


    // $ANTLR start "rule__RelationshipsPattern__Group__0"
    // InternalOpenCypherParser.g:19000:1: rule__RelationshipsPattern__Group__0 : rule__RelationshipsPattern__Group__0__Impl rule__RelationshipsPattern__Group__1 ;
    public final void rule__RelationshipsPattern__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19004:1: ( rule__RelationshipsPattern__Group__0__Impl rule__RelationshipsPattern__Group__1 )
            // InternalOpenCypherParser.g:19005:2: rule__RelationshipsPattern__Group__0__Impl rule__RelationshipsPattern__Group__1
            {
            pushFollow(FOLLOW_37);
            rule__RelationshipsPattern__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipsPattern__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__Group__0"


    // $ANTLR start "rule__RelationshipsPattern__Group__0__Impl"
    // InternalOpenCypherParser.g:19012:1: rule__RelationshipsPattern__Group__0__Impl : ( ( rule__RelationshipsPattern__NodePatternAssignment_0 ) ) ;
    public final void rule__RelationshipsPattern__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19016:1: ( ( ( rule__RelationshipsPattern__NodePatternAssignment_0 ) ) )
            // InternalOpenCypherParser.g:19017:1: ( ( rule__RelationshipsPattern__NodePatternAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:19017:1: ( ( rule__RelationshipsPattern__NodePatternAssignment_0 ) )
            // InternalOpenCypherParser.g:19018:2: ( rule__RelationshipsPattern__NodePatternAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getNodePatternAssignment_0()); 
            }
            // InternalOpenCypherParser.g:19019:2: ( rule__RelationshipsPattern__NodePatternAssignment_0 )
            // InternalOpenCypherParser.g:19019:3: rule__RelationshipsPattern__NodePatternAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipsPattern__NodePatternAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getNodePatternAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__Group__0__Impl"


    // $ANTLR start "rule__RelationshipsPattern__Group__1"
    // InternalOpenCypherParser.g:19027:1: rule__RelationshipsPattern__Group__1 : rule__RelationshipsPattern__Group__1__Impl ;
    public final void rule__RelationshipsPattern__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19031:1: ( rule__RelationshipsPattern__Group__1__Impl )
            // InternalOpenCypherParser.g:19032:2: rule__RelationshipsPattern__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipsPattern__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__Group__1"


    // $ANTLR start "rule__RelationshipsPattern__Group__1__Impl"
    // InternalOpenCypherParser.g:19038:1: rule__RelationshipsPattern__Group__1__Impl : ( ( ( rule__RelationshipsPattern__ChainAssignment_1 ) ) ( ( rule__RelationshipsPattern__ChainAssignment_1 )* ) ) ;
    public final void rule__RelationshipsPattern__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19042:1: ( ( ( ( rule__RelationshipsPattern__ChainAssignment_1 ) ) ( ( rule__RelationshipsPattern__ChainAssignment_1 )* ) ) )
            // InternalOpenCypherParser.g:19043:1: ( ( ( rule__RelationshipsPattern__ChainAssignment_1 ) ) ( ( rule__RelationshipsPattern__ChainAssignment_1 )* ) )
            {
            // InternalOpenCypherParser.g:19043:1: ( ( ( rule__RelationshipsPattern__ChainAssignment_1 ) ) ( ( rule__RelationshipsPattern__ChainAssignment_1 )* ) )
            // InternalOpenCypherParser.g:19044:2: ( ( rule__RelationshipsPattern__ChainAssignment_1 ) ) ( ( rule__RelationshipsPattern__ChainAssignment_1 )* )
            {
            // InternalOpenCypherParser.g:19044:2: ( ( rule__RelationshipsPattern__ChainAssignment_1 ) )
            // InternalOpenCypherParser.g:19045:3: ( rule__RelationshipsPattern__ChainAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); 
            }
            // InternalOpenCypherParser.g:19046:3: ( rule__RelationshipsPattern__ChainAssignment_1 )
            // InternalOpenCypherParser.g:19046:4: rule__RelationshipsPattern__ChainAssignment_1
            {
            pushFollow(FOLLOW_82);
            rule__RelationshipsPattern__ChainAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); 
            }

            }

            // InternalOpenCypherParser.g:19049:2: ( ( rule__RelationshipsPattern__ChainAssignment_1 )* )
            // InternalOpenCypherParser.g:19050:3: ( rule__RelationshipsPattern__ChainAssignment_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); 
            }
            // InternalOpenCypherParser.g:19051:3: ( rule__RelationshipsPattern__ChainAssignment_1 )*
            loop134:
            do {
                int alt134=2;
                alt134 = dfa134.predict(input);
                switch (alt134) {
            	case 1 :
            	    // InternalOpenCypherParser.g:19051:4: rule__RelationshipsPattern__ChainAssignment_1
            	    {
            	    pushFollow(FOLLOW_82);
            	    rule__RelationshipsPattern__ChainAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__Group__1__Impl"


    // $ANTLR start "rule__FilterExpression__Group__0"
    // InternalOpenCypherParser.g:19061:1: rule__FilterExpression__Group__0 : rule__FilterExpression__Group__0__Impl rule__FilterExpression__Group__1 ;
    public final void rule__FilterExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19065:1: ( rule__FilterExpression__Group__0__Impl rule__FilterExpression__Group__1 )
            // InternalOpenCypherParser.g:19066:2: rule__FilterExpression__Group__0__Impl rule__FilterExpression__Group__1
            {
            pushFollow(FOLLOW_65);
            rule__FilterExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FilterExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__Group__0"


    // $ANTLR start "rule__FilterExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:19073:1: rule__FilterExpression__Group__0__Impl : ( ( rule__FilterExpression__IdInCollAssignment_0 ) ) ;
    public final void rule__FilterExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19077:1: ( ( ( rule__FilterExpression__IdInCollAssignment_0 ) ) )
            // InternalOpenCypherParser.g:19078:1: ( ( rule__FilterExpression__IdInCollAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:19078:1: ( ( rule__FilterExpression__IdInCollAssignment_0 ) )
            // InternalOpenCypherParser.g:19079:2: ( rule__FilterExpression__IdInCollAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionAccess().getIdInCollAssignment_0()); 
            }
            // InternalOpenCypherParser.g:19080:2: ( rule__FilterExpression__IdInCollAssignment_0 )
            // InternalOpenCypherParser.g:19080:3: rule__FilterExpression__IdInCollAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__FilterExpression__IdInCollAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionAccess().getIdInCollAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__Group__0__Impl"


    // $ANTLR start "rule__FilterExpression__Group__1"
    // InternalOpenCypherParser.g:19088:1: rule__FilterExpression__Group__1 : rule__FilterExpression__Group__1__Impl ;
    public final void rule__FilterExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19092:1: ( rule__FilterExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:19093:2: rule__FilterExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__FilterExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__Group__1"


    // $ANTLR start "rule__FilterExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:19099:1: rule__FilterExpression__Group__1__Impl : ( ( rule__FilterExpression__WhereAssignment_1 )? ) ;
    public final void rule__FilterExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19103:1: ( ( ( rule__FilterExpression__WhereAssignment_1 )? ) )
            // InternalOpenCypherParser.g:19104:1: ( ( rule__FilterExpression__WhereAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:19104:1: ( ( rule__FilterExpression__WhereAssignment_1 )? )
            // InternalOpenCypherParser.g:19105:2: ( rule__FilterExpression__WhereAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionAccess().getWhereAssignment_1()); 
            }
            // InternalOpenCypherParser.g:19106:2: ( rule__FilterExpression__WhereAssignment_1 )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==WHERE) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // InternalOpenCypherParser.g:19106:3: rule__FilterExpression__WhereAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__FilterExpression__WhereAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionAccess().getWhereAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__Group__1__Impl"


    // $ANTLR start "rule__IdInColl__Group__0"
    // InternalOpenCypherParser.g:19115:1: rule__IdInColl__Group__0 : rule__IdInColl__Group__0__Impl rule__IdInColl__Group__1 ;
    public final void rule__IdInColl__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19119:1: ( rule__IdInColl__Group__0__Impl rule__IdInColl__Group__1 )
            // InternalOpenCypherParser.g:19120:2: rule__IdInColl__Group__0__Impl rule__IdInColl__Group__1
            {
            pushFollow(FOLLOW_59);
            rule__IdInColl__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdInColl__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__0"


    // $ANTLR start "rule__IdInColl__Group__0__Impl"
    // InternalOpenCypherParser.g:19127:1: rule__IdInColl__Group__0__Impl : ( ( rule__IdInColl__VariableAssignment_0 ) ) ;
    public final void rule__IdInColl__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19131:1: ( ( ( rule__IdInColl__VariableAssignment_0 ) ) )
            // InternalOpenCypherParser.g:19132:1: ( ( rule__IdInColl__VariableAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:19132:1: ( ( rule__IdInColl__VariableAssignment_0 ) )
            // InternalOpenCypherParser.g:19133:2: ( rule__IdInColl__VariableAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getVariableAssignment_0()); 
            }
            // InternalOpenCypherParser.g:19134:2: ( rule__IdInColl__VariableAssignment_0 )
            // InternalOpenCypherParser.g:19134:3: rule__IdInColl__VariableAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__IdInColl__VariableAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getVariableAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__0__Impl"


    // $ANTLR start "rule__IdInColl__Group__1"
    // InternalOpenCypherParser.g:19142:1: rule__IdInColl__Group__1 : rule__IdInColl__Group__1__Impl rule__IdInColl__Group__2 ;
    public final void rule__IdInColl__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19146:1: ( rule__IdInColl__Group__1__Impl rule__IdInColl__Group__2 )
            // InternalOpenCypherParser.g:19147:2: rule__IdInColl__Group__1__Impl rule__IdInColl__Group__2
            {
            pushFollow(FOLLOW_43);
            rule__IdInColl__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdInColl__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__1"


    // $ANTLR start "rule__IdInColl__Group__1__Impl"
    // InternalOpenCypherParser.g:19154:1: rule__IdInColl__Group__1__Impl : ( IN ) ;
    public final void rule__IdInColl__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19158:1: ( ( IN ) )
            // InternalOpenCypherParser.g:19159:1: ( IN )
            {
            // InternalOpenCypherParser.g:19159:1: ( IN )
            // InternalOpenCypherParser.g:19160:2: IN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getINKeyword_1()); 
            }
            match(input,IN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getINKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__1__Impl"


    // $ANTLR start "rule__IdInColl__Group__2"
    // InternalOpenCypherParser.g:19169:1: rule__IdInColl__Group__2 : rule__IdInColl__Group__2__Impl ;
    public final void rule__IdInColl__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19173:1: ( rule__IdInColl__Group__2__Impl )
            // InternalOpenCypherParser.g:19174:2: rule__IdInColl__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IdInColl__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__2"


    // $ANTLR start "rule__IdInColl__Group__2__Impl"
    // InternalOpenCypherParser.g:19180:1: rule__IdInColl__Group__2__Impl : ( ( rule__IdInColl__ExpressionAssignment_2 ) ) ;
    public final void rule__IdInColl__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19184:1: ( ( ( rule__IdInColl__ExpressionAssignment_2 ) ) )
            // InternalOpenCypherParser.g:19185:1: ( ( rule__IdInColl__ExpressionAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:19185:1: ( ( rule__IdInColl__ExpressionAssignment_2 ) )
            // InternalOpenCypherParser.g:19186:2: ( rule__IdInColl__ExpressionAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getExpressionAssignment_2()); 
            }
            // InternalOpenCypherParser.g:19187:2: ( rule__IdInColl__ExpressionAssignment_2 )
            // InternalOpenCypherParser.g:19187:3: rule__IdInColl__ExpressionAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__IdInColl__ExpressionAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getExpressionAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__2__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group__0"
    // InternalOpenCypherParser.g:19196:1: rule__FunctionInvocation__Group__0 : rule__FunctionInvocation__Group__0__Impl rule__FunctionInvocation__Group__1 ;
    public final void rule__FunctionInvocation__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19200:1: ( rule__FunctionInvocation__Group__0__Impl rule__FunctionInvocation__Group__1 )
            // InternalOpenCypherParser.g:19201:2: rule__FunctionInvocation__Group__0__Impl rule__FunctionInvocation__Group__1
            {
            pushFollow(FOLLOW_30);
            rule__FunctionInvocation__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__0"


    // $ANTLR start "rule__FunctionInvocation__Group__0__Impl"
    // InternalOpenCypherParser.g:19208:1: rule__FunctionInvocation__Group__0__Impl : ( ( rule__FunctionInvocation__FunctionNameAssignment_0 ) ) ;
    public final void rule__FunctionInvocation__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19212:1: ( ( ( rule__FunctionInvocation__FunctionNameAssignment_0 ) ) )
            // InternalOpenCypherParser.g:19213:1: ( ( rule__FunctionInvocation__FunctionNameAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:19213:1: ( ( rule__FunctionInvocation__FunctionNameAssignment_0 ) )
            // InternalOpenCypherParser.g:19214:2: ( rule__FunctionInvocation__FunctionNameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getFunctionNameAssignment_0()); 
            }
            // InternalOpenCypherParser.g:19215:2: ( rule__FunctionInvocation__FunctionNameAssignment_0 )
            // InternalOpenCypherParser.g:19215:3: rule__FunctionInvocation__FunctionNameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__FunctionNameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getFunctionNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__0__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group__1"
    // InternalOpenCypherParser.g:19223:1: rule__FunctionInvocation__Group__1 : rule__FunctionInvocation__Group__1__Impl rule__FunctionInvocation__Group__2 ;
    public final void rule__FunctionInvocation__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19227:1: ( rule__FunctionInvocation__Group__1__Impl rule__FunctionInvocation__Group__2 )
            // InternalOpenCypherParser.g:19228:2: rule__FunctionInvocation__Group__1__Impl rule__FunctionInvocation__Group__2
            {
            pushFollow(FOLLOW_128);
            rule__FunctionInvocation__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__1"


    // $ANTLR start "rule__FunctionInvocation__Group__1__Impl"
    // InternalOpenCypherParser.g:19235:1: rule__FunctionInvocation__Group__1__Impl : ( LeftParenthesis ) ;
    public final void rule__FunctionInvocation__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19239:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:19240:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:19240:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:19241:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__1__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group__2"
    // InternalOpenCypherParser.g:19250:1: rule__FunctionInvocation__Group__2 : rule__FunctionInvocation__Group__2__Impl rule__FunctionInvocation__Group__3 ;
    public final void rule__FunctionInvocation__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19254:1: ( rule__FunctionInvocation__Group__2__Impl rule__FunctionInvocation__Group__3 )
            // InternalOpenCypherParser.g:19255:2: rule__FunctionInvocation__Group__2__Impl rule__FunctionInvocation__Group__3
            {
            pushFollow(FOLLOW_128);
            rule__FunctionInvocation__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__2"


    // $ANTLR start "rule__FunctionInvocation__Group__2__Impl"
    // InternalOpenCypherParser.g:19262:1: rule__FunctionInvocation__Group__2__Impl : ( ( rule__FunctionInvocation__DistinctAssignment_2 )? ) ;
    public final void rule__FunctionInvocation__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19266:1: ( ( ( rule__FunctionInvocation__DistinctAssignment_2 )? ) )
            // InternalOpenCypherParser.g:19267:1: ( ( rule__FunctionInvocation__DistinctAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:19267:1: ( ( rule__FunctionInvocation__DistinctAssignment_2 )? )
            // InternalOpenCypherParser.g:19268:2: ( rule__FunctionInvocation__DistinctAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getDistinctAssignment_2()); 
            }
            // InternalOpenCypherParser.g:19269:2: ( rule__FunctionInvocation__DistinctAssignment_2 )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==DISTINCT) ) {
                int LA136_1 = input.LA(2);

                if ( (synpred263_InternalOpenCypherParser()) ) {
                    alt136=1;
                }
            }
            switch (alt136) {
                case 1 :
                    // InternalOpenCypherParser.g:19269:3: rule__FunctionInvocation__DistinctAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__FunctionInvocation__DistinctAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getDistinctAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__2__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group__3"
    // InternalOpenCypherParser.g:19277:1: rule__FunctionInvocation__Group__3 : rule__FunctionInvocation__Group__3__Impl rule__FunctionInvocation__Group__4 ;
    public final void rule__FunctionInvocation__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19281:1: ( rule__FunctionInvocation__Group__3__Impl rule__FunctionInvocation__Group__4 )
            // InternalOpenCypherParser.g:19282:2: rule__FunctionInvocation__Group__3__Impl rule__FunctionInvocation__Group__4
            {
            pushFollow(FOLLOW_128);
            rule__FunctionInvocation__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__3"


    // $ANTLR start "rule__FunctionInvocation__Group__3__Impl"
    // InternalOpenCypherParser.g:19289:1: rule__FunctionInvocation__Group__3__Impl : ( ( rule__FunctionInvocation__Group_3__0 )? ) ;
    public final void rule__FunctionInvocation__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19293:1: ( ( ( rule__FunctionInvocation__Group_3__0 )? ) )
            // InternalOpenCypherParser.g:19294:1: ( ( rule__FunctionInvocation__Group_3__0 )? )
            {
            // InternalOpenCypherParser.g:19294:1: ( ( rule__FunctionInvocation__Group_3__0 )? )
            // InternalOpenCypherParser.g:19295:2: ( rule__FunctionInvocation__Group_3__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getGroup_3()); 
            }
            // InternalOpenCypherParser.g:19296:2: ( rule__FunctionInvocation__Group_3__0 )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( ((LA137_0>=ALLSHORTESTPATHS && LA137_0<=WHERE)||(LA137_0>=CASE && LA137_0<=XOR)||(LA137_0>=AS && LA137_0<=OR)||LA137_0==DollarSign||LA137_0==LeftParenthesis||LA137_0==PlusSign||LA137_0==HyphenMinus||LA137_0==LeftSquareBracket||LA137_0==LeftCurlyBracket||LA137_0==RULE_ID||(LA137_0>=RULE_STRING_LITERAL && LA137_0<=RULE_DECIMAL)) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // InternalOpenCypherParser.g:19296:3: rule__FunctionInvocation__Group_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__FunctionInvocation__Group_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__3__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group__4"
    // InternalOpenCypherParser.g:19304:1: rule__FunctionInvocation__Group__4 : rule__FunctionInvocation__Group__4__Impl ;
    public final void rule__FunctionInvocation__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19308:1: ( rule__FunctionInvocation__Group__4__Impl )
            // InternalOpenCypherParser.g:19309:2: rule__FunctionInvocation__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__4"


    // $ANTLR start "rule__FunctionInvocation__Group__4__Impl"
    // InternalOpenCypherParser.g:19315:1: rule__FunctionInvocation__Group__4__Impl : ( RightParenthesis ) ;
    public final void rule__FunctionInvocation__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19319:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:19320:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:19320:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:19321:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__4__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group_3__0"
    // InternalOpenCypherParser.g:19331:1: rule__FunctionInvocation__Group_3__0 : rule__FunctionInvocation__Group_3__0__Impl rule__FunctionInvocation__Group_3__1 ;
    public final void rule__FunctionInvocation__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19335:1: ( rule__FunctionInvocation__Group_3__0__Impl rule__FunctionInvocation__Group_3__1 )
            // InternalOpenCypherParser.g:19336:2: rule__FunctionInvocation__Group_3__0__Impl rule__FunctionInvocation__Group_3__1
            {
            pushFollow(FOLLOW_55);
            rule__FunctionInvocation__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3__0"


    // $ANTLR start "rule__FunctionInvocation__Group_3__0__Impl"
    // InternalOpenCypherParser.g:19343:1: rule__FunctionInvocation__Group_3__0__Impl : ( ( rule__FunctionInvocation__ParameterAssignment_3_0 ) ) ;
    public final void rule__FunctionInvocation__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19347:1: ( ( ( rule__FunctionInvocation__ParameterAssignment_3_0 ) ) )
            // InternalOpenCypherParser.g:19348:1: ( ( rule__FunctionInvocation__ParameterAssignment_3_0 ) )
            {
            // InternalOpenCypherParser.g:19348:1: ( ( rule__FunctionInvocation__ParameterAssignment_3_0 ) )
            // InternalOpenCypherParser.g:19349:2: ( rule__FunctionInvocation__ParameterAssignment_3_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_0()); 
            }
            // InternalOpenCypherParser.g:19350:2: ( rule__FunctionInvocation__ParameterAssignment_3_0 )
            // InternalOpenCypherParser.g:19350:3: rule__FunctionInvocation__ParameterAssignment_3_0
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__ParameterAssignment_3_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3__0__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group_3__1"
    // InternalOpenCypherParser.g:19358:1: rule__FunctionInvocation__Group_3__1 : rule__FunctionInvocation__Group_3__1__Impl ;
    public final void rule__FunctionInvocation__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19362:1: ( rule__FunctionInvocation__Group_3__1__Impl )
            // InternalOpenCypherParser.g:19363:2: rule__FunctionInvocation__Group_3__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3__1"


    // $ANTLR start "rule__FunctionInvocation__Group_3__1__Impl"
    // InternalOpenCypherParser.g:19369:1: rule__FunctionInvocation__Group_3__1__Impl : ( ( rule__FunctionInvocation__Group_3_1__0 )* ) ;
    public final void rule__FunctionInvocation__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19373:1: ( ( ( rule__FunctionInvocation__Group_3_1__0 )* ) )
            // InternalOpenCypherParser.g:19374:1: ( ( rule__FunctionInvocation__Group_3_1__0 )* )
            {
            // InternalOpenCypherParser.g:19374:1: ( ( rule__FunctionInvocation__Group_3_1__0 )* )
            // InternalOpenCypherParser.g:19375:2: ( rule__FunctionInvocation__Group_3_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getGroup_3_1()); 
            }
            // InternalOpenCypherParser.g:19376:2: ( rule__FunctionInvocation__Group_3_1__0 )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==Comma) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // InternalOpenCypherParser.g:19376:3: rule__FunctionInvocation__Group_3_1__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__FunctionInvocation__Group_3_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getGroup_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3__1__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group_3_1__0"
    // InternalOpenCypherParser.g:19385:1: rule__FunctionInvocation__Group_3_1__0 : rule__FunctionInvocation__Group_3_1__0__Impl rule__FunctionInvocation__Group_3_1__1 ;
    public final void rule__FunctionInvocation__Group_3_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19389:1: ( rule__FunctionInvocation__Group_3_1__0__Impl rule__FunctionInvocation__Group_3_1__1 )
            // InternalOpenCypherParser.g:19390:2: rule__FunctionInvocation__Group_3_1__0__Impl rule__FunctionInvocation__Group_3_1__1
            {
            pushFollow(FOLLOW_43);
            rule__FunctionInvocation__Group_3_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group_3_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3_1__0"


    // $ANTLR start "rule__FunctionInvocation__Group_3_1__0__Impl"
    // InternalOpenCypherParser.g:19397:1: rule__FunctionInvocation__Group_3_1__0__Impl : ( Comma ) ;
    public final void rule__FunctionInvocation__Group_3_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19401:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:19402:1: ( Comma )
            {
            // InternalOpenCypherParser.g:19402:1: ( Comma )
            // InternalOpenCypherParser.g:19403:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getCommaKeyword_3_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getCommaKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3_1__0__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group_3_1__1"
    // InternalOpenCypherParser.g:19412:1: rule__FunctionInvocation__Group_3_1__1 : rule__FunctionInvocation__Group_3_1__1__Impl ;
    public final void rule__FunctionInvocation__Group_3_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19416:1: ( rule__FunctionInvocation__Group_3_1__1__Impl )
            // InternalOpenCypherParser.g:19417:2: rule__FunctionInvocation__Group_3_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group_3_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3_1__1"


    // $ANTLR start "rule__FunctionInvocation__Group_3_1__1__Impl"
    // InternalOpenCypherParser.g:19423:1: rule__FunctionInvocation__Group_3_1__1__Impl : ( ( rule__FunctionInvocation__ParameterAssignment_3_1_1 ) ) ;
    public final void rule__FunctionInvocation__Group_3_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19427:1: ( ( ( rule__FunctionInvocation__ParameterAssignment_3_1_1 ) ) )
            // InternalOpenCypherParser.g:19428:1: ( ( rule__FunctionInvocation__ParameterAssignment_3_1_1 ) )
            {
            // InternalOpenCypherParser.g:19428:1: ( ( rule__FunctionInvocation__ParameterAssignment_3_1_1 ) )
            // InternalOpenCypherParser.g:19429:2: ( rule__FunctionInvocation__ParameterAssignment_3_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_1_1()); 
            }
            // InternalOpenCypherParser.g:19430:2: ( rule__FunctionInvocation__ParameterAssignment_3_1_1 )
            // InternalOpenCypherParser.g:19430:3: rule__FunctionInvocation__ParameterAssignment_3_1_1
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__ParameterAssignment_3_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3_1__1__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__0"
    // InternalOpenCypherParser.g:19439:1: rule__ExplicitProcedureInvocation__Group__0 : rule__ExplicitProcedureInvocation__Group__0__Impl rule__ExplicitProcedureInvocation__Group__1 ;
    public final void rule__ExplicitProcedureInvocation__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19443:1: ( rule__ExplicitProcedureInvocation__Group__0__Impl rule__ExplicitProcedureInvocation__Group__1 )
            // InternalOpenCypherParser.g:19444:2: rule__ExplicitProcedureInvocation__Group__0__Impl rule__ExplicitProcedureInvocation__Group__1
            {
            pushFollow(FOLLOW_30);
            rule__ExplicitProcedureInvocation__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__0"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__0__Impl"
    // InternalOpenCypherParser.g:19451:1: rule__ExplicitProcedureInvocation__Group__0__Impl : ( ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 ) ) ;
    public final void rule__ExplicitProcedureInvocation__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19455:1: ( ( ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 ) ) )
            // InternalOpenCypherParser.g:19456:1: ( ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:19456:1: ( ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 ) )
            // InternalOpenCypherParser.g:19457:2: ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameAssignment_0()); 
            }
            // InternalOpenCypherParser.g:19458:2: ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 )
            // InternalOpenCypherParser.g:19458:3: rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__0__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__1"
    // InternalOpenCypherParser.g:19466:1: rule__ExplicitProcedureInvocation__Group__1 : rule__ExplicitProcedureInvocation__Group__1__Impl rule__ExplicitProcedureInvocation__Group__2 ;
    public final void rule__ExplicitProcedureInvocation__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19470:1: ( rule__ExplicitProcedureInvocation__Group__1__Impl rule__ExplicitProcedureInvocation__Group__2 )
            // InternalOpenCypherParser.g:19471:2: rule__ExplicitProcedureInvocation__Group__1__Impl rule__ExplicitProcedureInvocation__Group__2
            {
            pushFollow(FOLLOW_128);
            rule__ExplicitProcedureInvocation__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__1"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__1__Impl"
    // InternalOpenCypherParser.g:19478:1: rule__ExplicitProcedureInvocation__Group__1__Impl : ( LeftParenthesis ) ;
    public final void rule__ExplicitProcedureInvocation__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19482:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:19483:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:19483:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:19484:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__1__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__2"
    // InternalOpenCypherParser.g:19493:1: rule__ExplicitProcedureInvocation__Group__2 : rule__ExplicitProcedureInvocation__Group__2__Impl rule__ExplicitProcedureInvocation__Group__3 ;
    public final void rule__ExplicitProcedureInvocation__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19497:1: ( rule__ExplicitProcedureInvocation__Group__2__Impl rule__ExplicitProcedureInvocation__Group__3 )
            // InternalOpenCypherParser.g:19498:2: rule__ExplicitProcedureInvocation__Group__2__Impl rule__ExplicitProcedureInvocation__Group__3
            {
            pushFollow(FOLLOW_128);
            rule__ExplicitProcedureInvocation__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__2"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__2__Impl"
    // InternalOpenCypherParser.g:19505:1: rule__ExplicitProcedureInvocation__Group__2__Impl : ( ( rule__ExplicitProcedureInvocation__Group_2__0 )? ) ;
    public final void rule__ExplicitProcedureInvocation__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19509:1: ( ( ( rule__ExplicitProcedureInvocation__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:19510:1: ( ( rule__ExplicitProcedureInvocation__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:19510:1: ( ( rule__ExplicitProcedureInvocation__Group_2__0 )? )
            // InternalOpenCypherParser.g:19511:2: ( rule__ExplicitProcedureInvocation__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:19512:2: ( rule__ExplicitProcedureInvocation__Group_2__0 )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( ((LA139_0>=ALLSHORTESTPATHS && LA139_0<=WHERE)||(LA139_0>=CASE && LA139_0<=XOR)||(LA139_0>=AS && LA139_0<=OR)||LA139_0==DollarSign||LA139_0==LeftParenthesis||LA139_0==PlusSign||LA139_0==HyphenMinus||LA139_0==LeftSquareBracket||LA139_0==LeftCurlyBracket||LA139_0==RULE_ID||(LA139_0>=RULE_STRING_LITERAL && LA139_0<=RULE_DECIMAL)) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // InternalOpenCypherParser.g:19512:3: rule__ExplicitProcedureInvocation__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ExplicitProcedureInvocation__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__2__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__3"
    // InternalOpenCypherParser.g:19520:1: rule__ExplicitProcedureInvocation__Group__3 : rule__ExplicitProcedureInvocation__Group__3__Impl ;
    public final void rule__ExplicitProcedureInvocation__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19524:1: ( rule__ExplicitProcedureInvocation__Group__3__Impl )
            // InternalOpenCypherParser.g:19525:2: rule__ExplicitProcedureInvocation__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__3"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__3__Impl"
    // InternalOpenCypherParser.g:19531:1: rule__ExplicitProcedureInvocation__Group__3__Impl : ( RightParenthesis ) ;
    public final void rule__ExplicitProcedureInvocation__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19535:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:19536:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:19536:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:19537:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getRightParenthesisKeyword_3()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getRightParenthesisKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__3__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2__0"
    // InternalOpenCypherParser.g:19547:1: rule__ExplicitProcedureInvocation__Group_2__0 : rule__ExplicitProcedureInvocation__Group_2__0__Impl rule__ExplicitProcedureInvocation__Group_2__1 ;
    public final void rule__ExplicitProcedureInvocation__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19551:1: ( rule__ExplicitProcedureInvocation__Group_2__0__Impl rule__ExplicitProcedureInvocation__Group_2__1 )
            // InternalOpenCypherParser.g:19552:2: rule__ExplicitProcedureInvocation__Group_2__0__Impl rule__ExplicitProcedureInvocation__Group_2__1
            {
            pushFollow(FOLLOW_55);
            rule__ExplicitProcedureInvocation__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2__0"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2__0__Impl"
    // InternalOpenCypherParser.g:19559:1: rule__ExplicitProcedureInvocation__Group_2__0__Impl : ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 ) ) ;
    public final void rule__ExplicitProcedureInvocation__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19563:1: ( ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 ) ) )
            // InternalOpenCypherParser.g:19564:1: ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 ) )
            {
            // InternalOpenCypherParser.g:19564:1: ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 ) )
            // InternalOpenCypherParser.g:19565:2: ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_0()); 
            }
            // InternalOpenCypherParser.g:19566:2: ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 )
            // InternalOpenCypherParser.g:19566:3: rule__ExplicitProcedureInvocation__ParameterAssignment_2_0
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__ParameterAssignment_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2__0__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2__1"
    // InternalOpenCypherParser.g:19574:1: rule__ExplicitProcedureInvocation__Group_2__1 : rule__ExplicitProcedureInvocation__Group_2__1__Impl ;
    public final void rule__ExplicitProcedureInvocation__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19578:1: ( rule__ExplicitProcedureInvocation__Group_2__1__Impl )
            // InternalOpenCypherParser.g:19579:2: rule__ExplicitProcedureInvocation__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2__1"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2__1__Impl"
    // InternalOpenCypherParser.g:19585:1: rule__ExplicitProcedureInvocation__Group_2__1__Impl : ( ( rule__ExplicitProcedureInvocation__Group_2_1__0 )* ) ;
    public final void rule__ExplicitProcedureInvocation__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19589:1: ( ( ( rule__ExplicitProcedureInvocation__Group_2_1__0 )* ) )
            // InternalOpenCypherParser.g:19590:1: ( ( rule__ExplicitProcedureInvocation__Group_2_1__0 )* )
            {
            // InternalOpenCypherParser.g:19590:1: ( ( rule__ExplicitProcedureInvocation__Group_2_1__0 )* )
            // InternalOpenCypherParser.g:19591:2: ( rule__ExplicitProcedureInvocation__Group_2_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2_1()); 
            }
            // InternalOpenCypherParser.g:19592:2: ( rule__ExplicitProcedureInvocation__Group_2_1__0 )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==Comma) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // InternalOpenCypherParser.g:19592:3: rule__ExplicitProcedureInvocation__Group_2_1__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__ExplicitProcedureInvocation__Group_2_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2__1__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2_1__0"
    // InternalOpenCypherParser.g:19601:1: rule__ExplicitProcedureInvocation__Group_2_1__0 : rule__ExplicitProcedureInvocation__Group_2_1__0__Impl rule__ExplicitProcedureInvocation__Group_2_1__1 ;
    public final void rule__ExplicitProcedureInvocation__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19605:1: ( rule__ExplicitProcedureInvocation__Group_2_1__0__Impl rule__ExplicitProcedureInvocation__Group_2_1__1 )
            // InternalOpenCypherParser.g:19606:2: rule__ExplicitProcedureInvocation__Group_2_1__0__Impl rule__ExplicitProcedureInvocation__Group_2_1__1
            {
            pushFollow(FOLLOW_43);
            rule__ExplicitProcedureInvocation__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2_1__0"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2_1__0__Impl"
    // InternalOpenCypherParser.g:19613:1: rule__ExplicitProcedureInvocation__Group_2_1__0__Impl : ( Comma ) ;
    public final void rule__ExplicitProcedureInvocation__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19617:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:19618:1: ( Comma )
            {
            // InternalOpenCypherParser.g:19618:1: ( Comma )
            // InternalOpenCypherParser.g:19619:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getCommaKeyword_2_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getCommaKeyword_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2_1__0__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2_1__1"
    // InternalOpenCypherParser.g:19628:1: rule__ExplicitProcedureInvocation__Group_2_1__1 : rule__ExplicitProcedureInvocation__Group_2_1__1__Impl ;
    public final void rule__ExplicitProcedureInvocation__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19632:1: ( rule__ExplicitProcedureInvocation__Group_2_1__1__Impl )
            // InternalOpenCypherParser.g:19633:2: rule__ExplicitProcedureInvocation__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2_1__1"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2_1__1__Impl"
    // InternalOpenCypherParser.g:19639:1: rule__ExplicitProcedureInvocation__Group_2_1__1__Impl : ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 ) ) ;
    public final void rule__ExplicitProcedureInvocation__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19643:1: ( ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 ) ) )
            // InternalOpenCypherParser.g:19644:1: ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 ) )
            {
            // InternalOpenCypherParser.g:19644:1: ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 ) )
            // InternalOpenCypherParser.g:19645:2: ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_1_1()); 
            }
            // InternalOpenCypherParser.g:19646:2: ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 )
            // InternalOpenCypherParser.g:19646:3: rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2_1__1__Impl"


    // $ANTLR start "rule__ImplicitProcedureInvocation__Group__0"
    // InternalOpenCypherParser.g:19655:1: rule__ImplicitProcedureInvocation__Group__0 : rule__ImplicitProcedureInvocation__Group__0__Impl rule__ImplicitProcedureInvocation__Group__1 ;
    public final void rule__ImplicitProcedureInvocation__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19659:1: ( rule__ImplicitProcedureInvocation__Group__0__Impl rule__ImplicitProcedureInvocation__Group__1 )
            // InternalOpenCypherParser.g:19660:2: rule__ImplicitProcedureInvocation__Group__0__Impl rule__ImplicitProcedureInvocation__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__ImplicitProcedureInvocation__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ImplicitProcedureInvocation__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ImplicitProcedureInvocation__Group__0"


    // $ANTLR start "rule__ImplicitProcedureInvocation__Group__0__Impl"
    // InternalOpenCypherParser.g:19667:1: rule__ImplicitProcedureInvocation__Group__0__Impl : ( () ) ;
    public final void rule__ImplicitProcedureInvocation__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19671:1: ( ( () ) )
            // InternalOpenCypherParser.g:19672:1: ( () )
            {
            // InternalOpenCypherParser.g:19672:1: ( () )
            // InternalOpenCypherParser.g:19673:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImplicitProcedureInvocationAccess().getImplicitProcedureInvocationAction_0()); 
            }
            // InternalOpenCypherParser.g:19674:2: ()
            // InternalOpenCypherParser.g:19674:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getImplicitProcedureInvocationAccess().getImplicitProcedureInvocationAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ImplicitProcedureInvocation__Group__0__Impl"


    // $ANTLR start "rule__ImplicitProcedureInvocation__Group__1"
    // InternalOpenCypherParser.g:19682:1: rule__ImplicitProcedureInvocation__Group__1 : rule__ImplicitProcedureInvocation__Group__1__Impl ;
    public final void rule__ImplicitProcedureInvocation__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19686:1: ( rule__ImplicitProcedureInvocation__Group__1__Impl )
            // InternalOpenCypherParser.g:19687:2: rule__ImplicitProcedureInvocation__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ImplicitProcedureInvocation__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ImplicitProcedureInvocation__Group__1"


    // $ANTLR start "rule__ImplicitProcedureInvocation__Group__1__Impl"
    // InternalOpenCypherParser.g:19693:1: rule__ImplicitProcedureInvocation__Group__1__Impl : ( ( rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1 ) ) ;
    public final void rule__ImplicitProcedureInvocation__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19697:1: ( ( ( rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:19698:1: ( ( rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:19698:1: ( ( rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1 ) )
            // InternalOpenCypherParser.g:19699:2: ( rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:19700:2: ( rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1 )
            // InternalOpenCypherParser.g:19700:3: rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ImplicitProcedureInvocation__Group__1__Impl"


    // $ANTLR start "rule__ProcedureName__Group__0"
    // InternalOpenCypherParser.g:19709:1: rule__ProcedureName__Group__0 : rule__ProcedureName__Group__0__Impl rule__ProcedureName__Group__1 ;
    public final void rule__ProcedureName__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19713:1: ( rule__ProcedureName__Group__0__Impl rule__ProcedureName__Group__1 )
            // InternalOpenCypherParser.g:19714:2: rule__ProcedureName__Group__0__Impl rule__ProcedureName__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__ProcedureName__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ProcedureName__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__Group__0"


    // $ANTLR start "rule__ProcedureName__Group__0__Impl"
    // InternalOpenCypherParser.g:19721:1: rule__ProcedureName__Group__0__Impl : ( ( rule__ProcedureName__NamespaceAssignment_0 ) ) ;
    public final void rule__ProcedureName__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19725:1: ( ( ( rule__ProcedureName__NamespaceAssignment_0 ) ) )
            // InternalOpenCypherParser.g:19726:1: ( ( rule__ProcedureName__NamespaceAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:19726:1: ( ( rule__ProcedureName__NamespaceAssignment_0 ) )
            // InternalOpenCypherParser.g:19727:2: ( rule__ProcedureName__NamespaceAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameAccess().getNamespaceAssignment_0()); 
            }
            // InternalOpenCypherParser.g:19728:2: ( rule__ProcedureName__NamespaceAssignment_0 )
            // InternalOpenCypherParser.g:19728:3: rule__ProcedureName__NamespaceAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__ProcedureName__NamespaceAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameAccess().getNamespaceAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__Group__0__Impl"


    // $ANTLR start "rule__ProcedureName__Group__1"
    // InternalOpenCypherParser.g:19736:1: rule__ProcedureName__Group__1 : rule__ProcedureName__Group__1__Impl ;
    public final void rule__ProcedureName__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19740:1: ( rule__ProcedureName__Group__1__Impl )
            // InternalOpenCypherParser.g:19741:2: rule__ProcedureName__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ProcedureName__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__Group__1"


    // $ANTLR start "rule__ProcedureName__Group__1__Impl"
    // InternalOpenCypherParser.g:19747:1: rule__ProcedureName__Group__1__Impl : ( ( rule__ProcedureName__NameAssignment_1 ) ) ;
    public final void rule__ProcedureName__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19751:1: ( ( ( rule__ProcedureName__NameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:19752:1: ( ( rule__ProcedureName__NameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:19752:1: ( ( rule__ProcedureName__NameAssignment_1 ) )
            // InternalOpenCypherParser.g:19753:2: ( rule__ProcedureName__NameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameAccess().getNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:19754:2: ( rule__ProcedureName__NameAssignment_1 )
            // InternalOpenCypherParser.g:19754:3: rule__ProcedureName__NameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ProcedureName__NameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameAccess().getNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__Group__1__Impl"


    // $ANTLR start "rule__Namespace__Group__0"
    // InternalOpenCypherParser.g:19763:1: rule__Namespace__Group__0 : rule__Namespace__Group__0__Impl rule__Namespace__Group__1 ;
    public final void rule__Namespace__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19767:1: ( rule__Namespace__Group__0__Impl rule__Namespace__Group__1 )
            // InternalOpenCypherParser.g:19768:2: rule__Namespace__Group__0__Impl rule__Namespace__Group__1
            {
            pushFollow(FOLLOW_116);
            rule__Namespace__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Namespace__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Namespace__Group__0"


    // $ANTLR start "rule__Namespace__Group__0__Impl"
    // InternalOpenCypherParser.g:19775:1: rule__Namespace__Group__0__Impl : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__Namespace__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19779:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:19780:1: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:19780:1: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:19781:2: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNamespaceAccess().getSYMBOLIC_NAME_XParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNamespaceAccess().getSYMBOLIC_NAME_XParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Namespace__Group__0__Impl"


    // $ANTLR start "rule__Namespace__Group__1"
    // InternalOpenCypherParser.g:19790:1: rule__Namespace__Group__1 : rule__Namespace__Group__1__Impl ;
    public final void rule__Namespace__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19794:1: ( rule__Namespace__Group__1__Impl )
            // InternalOpenCypherParser.g:19795:2: rule__Namespace__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Namespace__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Namespace__Group__1"


    // $ANTLR start "rule__Namespace__Group__1__Impl"
    // InternalOpenCypherParser.g:19801:1: rule__Namespace__Group__1__Impl : ( FullStop ) ;
    public final void rule__Namespace__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19805:1: ( ( FullStop ) )
            // InternalOpenCypherParser.g:19806:1: ( FullStop )
            {
            // InternalOpenCypherParser.g:19806:1: ( FullStop )
            // InternalOpenCypherParser.g:19807:2: FullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNamespaceAccess().getFullStopKeyword_1()); 
            }
            match(input,FullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNamespaceAccess().getFullStopKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Namespace__Group__1__Impl"


    // $ANTLR start "rule__ListComprehension__Group__0"
    // InternalOpenCypherParser.g:19817:1: rule__ListComprehension__Group__0 : rule__ListComprehension__Group__0__Impl rule__ListComprehension__Group__1 ;
    public final void rule__ListComprehension__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19821:1: ( rule__ListComprehension__Group__0__Impl rule__ListComprehension__Group__1 )
            // InternalOpenCypherParser.g:19822:2: rule__ListComprehension__Group__0__Impl rule__ListComprehension__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__ListComprehension__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__0"


    // $ANTLR start "rule__ListComprehension__Group__0__Impl"
    // InternalOpenCypherParser.g:19829:1: rule__ListComprehension__Group__0__Impl : ( LeftSquareBracket ) ;
    public final void rule__ListComprehension__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19833:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:19834:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:19834:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:19835:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getLeftSquareBracketKeyword_0()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getLeftSquareBracketKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__0__Impl"


    // $ANTLR start "rule__ListComprehension__Group__1"
    // InternalOpenCypherParser.g:19844:1: rule__ListComprehension__Group__1 : rule__ListComprehension__Group__1__Impl rule__ListComprehension__Group__2 ;
    public final void rule__ListComprehension__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19848:1: ( rule__ListComprehension__Group__1__Impl rule__ListComprehension__Group__2 )
            // InternalOpenCypherParser.g:19849:2: rule__ListComprehension__Group__1__Impl rule__ListComprehension__Group__2
            {
            pushFollow(FOLLOW_129);
            rule__ListComprehension__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__1"


    // $ANTLR start "rule__ListComprehension__Group__1__Impl"
    // InternalOpenCypherParser.g:19856:1: rule__ListComprehension__Group__1__Impl : ( ( rule__ListComprehension__FilterExpressionAssignment_1 ) ) ;
    public final void rule__ListComprehension__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19860:1: ( ( ( rule__ListComprehension__FilterExpressionAssignment_1 ) ) )
            // InternalOpenCypherParser.g:19861:1: ( ( rule__ListComprehension__FilterExpressionAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:19861:1: ( ( rule__ListComprehension__FilterExpressionAssignment_1 ) )
            // InternalOpenCypherParser.g:19862:2: ( rule__ListComprehension__FilterExpressionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getFilterExpressionAssignment_1()); 
            }
            // InternalOpenCypherParser.g:19863:2: ( rule__ListComprehension__FilterExpressionAssignment_1 )
            // InternalOpenCypherParser.g:19863:3: rule__ListComprehension__FilterExpressionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ListComprehension__FilterExpressionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getFilterExpressionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__1__Impl"


    // $ANTLR start "rule__ListComprehension__Group__2"
    // InternalOpenCypherParser.g:19871:1: rule__ListComprehension__Group__2 : rule__ListComprehension__Group__2__Impl rule__ListComprehension__Group__3 ;
    public final void rule__ListComprehension__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19875:1: ( rule__ListComprehension__Group__2__Impl rule__ListComprehension__Group__3 )
            // InternalOpenCypherParser.g:19876:2: rule__ListComprehension__Group__2__Impl rule__ListComprehension__Group__3
            {
            pushFollow(FOLLOW_129);
            rule__ListComprehension__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__2"


    // $ANTLR start "rule__ListComprehension__Group__2__Impl"
    // InternalOpenCypherParser.g:19883:1: rule__ListComprehension__Group__2__Impl : ( ( rule__ListComprehension__Group_2__0 )? ) ;
    public final void rule__ListComprehension__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19887:1: ( ( ( rule__ListComprehension__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:19888:1: ( ( rule__ListComprehension__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:19888:1: ( ( rule__ListComprehension__Group_2__0 )? )
            // InternalOpenCypherParser.g:19889:2: ( rule__ListComprehension__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:19890:2: ( rule__ListComprehension__Group_2__0 )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==VerticalLine) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // InternalOpenCypherParser.g:19890:3: rule__ListComprehension__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ListComprehension__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__2__Impl"


    // $ANTLR start "rule__ListComprehension__Group__3"
    // InternalOpenCypherParser.g:19898:1: rule__ListComprehension__Group__3 : rule__ListComprehension__Group__3__Impl ;
    public final void rule__ListComprehension__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19902:1: ( rule__ListComprehension__Group__3__Impl )
            // InternalOpenCypherParser.g:19903:2: rule__ListComprehension__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__3"


    // $ANTLR start "rule__ListComprehension__Group__3__Impl"
    // InternalOpenCypherParser.g:19909:1: rule__ListComprehension__Group__3__Impl : ( RightSquareBracket ) ;
    public final void rule__ListComprehension__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19913:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:19914:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:19914:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:19915:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getRightSquareBracketKeyword_3()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getRightSquareBracketKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__3__Impl"


    // $ANTLR start "rule__ListComprehension__Group_2__0"
    // InternalOpenCypherParser.g:19925:1: rule__ListComprehension__Group_2__0 : rule__ListComprehension__Group_2__0__Impl rule__ListComprehension__Group_2__1 ;
    public final void rule__ListComprehension__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19929:1: ( rule__ListComprehension__Group_2__0__Impl rule__ListComprehension__Group_2__1 )
            // InternalOpenCypherParser.g:19930:2: rule__ListComprehension__Group_2__0__Impl rule__ListComprehension__Group_2__1
            {
            pushFollow(FOLLOW_43);
            rule__ListComprehension__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group_2__0"


    // $ANTLR start "rule__ListComprehension__Group_2__0__Impl"
    // InternalOpenCypherParser.g:19937:1: rule__ListComprehension__Group_2__0__Impl : ( VerticalLine ) ;
    public final void rule__ListComprehension__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19941:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:19942:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:19942:1: ( VerticalLine )
            // InternalOpenCypherParser.g:19943:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getVerticalLineKeyword_2_0()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getVerticalLineKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group_2__0__Impl"


    // $ANTLR start "rule__ListComprehension__Group_2__1"
    // InternalOpenCypherParser.g:19952:1: rule__ListComprehension__Group_2__1 : rule__ListComprehension__Group_2__1__Impl ;
    public final void rule__ListComprehension__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19956:1: ( rule__ListComprehension__Group_2__1__Impl )
            // InternalOpenCypherParser.g:19957:2: rule__ListComprehension__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group_2__1"


    // $ANTLR start "rule__ListComprehension__Group_2__1__Impl"
    // InternalOpenCypherParser.g:19963:1: rule__ListComprehension__Group_2__1__Impl : ( ( rule__ListComprehension__ExpressionAssignment_2_1 ) ) ;
    public final void rule__ListComprehension__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19967:1: ( ( ( rule__ListComprehension__ExpressionAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:19968:1: ( ( rule__ListComprehension__ExpressionAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:19968:1: ( ( rule__ListComprehension__ExpressionAssignment_2_1 ) )
            // InternalOpenCypherParser.g:19969:2: ( rule__ListComprehension__ExpressionAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getExpressionAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:19970:2: ( rule__ListComprehension__ExpressionAssignment_2_1 )
            // InternalOpenCypherParser.g:19970:3: rule__ListComprehension__ExpressionAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__ListComprehension__ExpressionAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getExpressionAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group_2__1__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__0"
    // InternalOpenCypherParser.g:19979:1: rule__PatternComprehension__Group__0 : rule__PatternComprehension__Group__0__Impl rule__PatternComprehension__Group__1 ;
    public final void rule__PatternComprehension__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19983:1: ( rule__PatternComprehension__Group__0__Impl rule__PatternComprehension__Group__1 )
            // InternalOpenCypherParser.g:19984:2: rule__PatternComprehension__Group__0__Impl rule__PatternComprehension__Group__1
            {
            pushFollow(FOLLOW_49);
            rule__PatternComprehension__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__0"


    // $ANTLR start "rule__PatternComprehension__Group__0__Impl"
    // InternalOpenCypherParser.g:19991:1: rule__PatternComprehension__Group__0__Impl : ( LeftSquareBracket ) ;
    public final void rule__PatternComprehension__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19995:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:19996:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:19996:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:19997:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getLeftSquareBracketKeyword_0()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getLeftSquareBracketKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__0__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__1"
    // InternalOpenCypherParser.g:20006:1: rule__PatternComprehension__Group__1 : rule__PatternComprehension__Group__1__Impl rule__PatternComprehension__Group__2 ;
    public final void rule__PatternComprehension__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20010:1: ( rule__PatternComprehension__Group__1__Impl rule__PatternComprehension__Group__2 )
            // InternalOpenCypherParser.g:20011:2: rule__PatternComprehension__Group__1__Impl rule__PatternComprehension__Group__2
            {
            pushFollow(FOLLOW_49);
            rule__PatternComprehension__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__1"


    // $ANTLR start "rule__PatternComprehension__Group__1__Impl"
    // InternalOpenCypherParser.g:20018:1: rule__PatternComprehension__Group__1__Impl : ( ( rule__PatternComprehension__Group_1__0 )? ) ;
    public final void rule__PatternComprehension__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20022:1: ( ( ( rule__PatternComprehension__Group_1__0 )? ) )
            // InternalOpenCypherParser.g:20023:1: ( ( rule__PatternComprehension__Group_1__0 )? )
            {
            // InternalOpenCypherParser.g:20023:1: ( ( rule__PatternComprehension__Group_1__0 )? )
            // InternalOpenCypherParser.g:20024:2: ( rule__PatternComprehension__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:20025:2: ( rule__PatternComprehension__Group_1__0 )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( ((LA142_0>=ALLSHORTESTPATHS && LA142_0<=WHERE)||(LA142_0>=CASE && LA142_0<=XOR)||(LA142_0>=AS && LA142_0<=OR)||LA142_0==RULE_ID) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // InternalOpenCypherParser.g:20025:3: rule__PatternComprehension__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PatternComprehension__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__1__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__2"
    // InternalOpenCypherParser.g:20033:1: rule__PatternComprehension__Group__2 : rule__PatternComprehension__Group__2__Impl rule__PatternComprehension__Group__3 ;
    public final void rule__PatternComprehension__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20037:1: ( rule__PatternComprehension__Group__2__Impl rule__PatternComprehension__Group__3 )
            // InternalOpenCypherParser.g:20038:2: rule__PatternComprehension__Group__2__Impl rule__PatternComprehension__Group__3
            {
            pushFollow(FOLLOW_130);
            rule__PatternComprehension__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__2"


    // $ANTLR start "rule__PatternComprehension__Group__2__Impl"
    // InternalOpenCypherParser.g:20045:1: rule__PatternComprehension__Group__2__Impl : ( ( rule__PatternComprehension__PatternAssignment_2 ) ) ;
    public final void rule__PatternComprehension__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20049:1: ( ( ( rule__PatternComprehension__PatternAssignment_2 ) ) )
            // InternalOpenCypherParser.g:20050:1: ( ( rule__PatternComprehension__PatternAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:20050:1: ( ( rule__PatternComprehension__PatternAssignment_2 ) )
            // InternalOpenCypherParser.g:20051:2: ( rule__PatternComprehension__PatternAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getPatternAssignment_2()); 
            }
            // InternalOpenCypherParser.g:20052:2: ( rule__PatternComprehension__PatternAssignment_2 )
            // InternalOpenCypherParser.g:20052:3: rule__PatternComprehension__PatternAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__PatternAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getPatternAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__2__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__3"
    // InternalOpenCypherParser.g:20060:1: rule__PatternComprehension__Group__3 : rule__PatternComprehension__Group__3__Impl rule__PatternComprehension__Group__4 ;
    public final void rule__PatternComprehension__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20064:1: ( rule__PatternComprehension__Group__3__Impl rule__PatternComprehension__Group__4 )
            // InternalOpenCypherParser.g:20065:2: rule__PatternComprehension__Group__3__Impl rule__PatternComprehension__Group__4
            {
            pushFollow(FOLLOW_130);
            rule__PatternComprehension__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__3"


    // $ANTLR start "rule__PatternComprehension__Group__3__Impl"
    // InternalOpenCypherParser.g:20072:1: rule__PatternComprehension__Group__3__Impl : ( ( rule__PatternComprehension__WhereAssignment_3 )? ) ;
    public final void rule__PatternComprehension__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20076:1: ( ( ( rule__PatternComprehension__WhereAssignment_3 )? ) )
            // InternalOpenCypherParser.g:20077:1: ( ( rule__PatternComprehension__WhereAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:20077:1: ( ( rule__PatternComprehension__WhereAssignment_3 )? )
            // InternalOpenCypherParser.g:20078:2: ( rule__PatternComprehension__WhereAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getWhereAssignment_3()); 
            }
            // InternalOpenCypherParser.g:20079:2: ( rule__PatternComprehension__WhereAssignment_3 )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==WHERE) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // InternalOpenCypherParser.g:20079:3: rule__PatternComprehension__WhereAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__PatternComprehension__WhereAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getWhereAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__3__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__4"
    // InternalOpenCypherParser.g:20087:1: rule__PatternComprehension__Group__4 : rule__PatternComprehension__Group__4__Impl rule__PatternComprehension__Group__5 ;
    public final void rule__PatternComprehension__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20091:1: ( rule__PatternComprehension__Group__4__Impl rule__PatternComprehension__Group__5 )
            // InternalOpenCypherParser.g:20092:2: rule__PatternComprehension__Group__4__Impl rule__PatternComprehension__Group__5
            {
            pushFollow(FOLLOW_43);
            rule__PatternComprehension__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__4"


    // $ANTLR start "rule__PatternComprehension__Group__4__Impl"
    // InternalOpenCypherParser.g:20099:1: rule__PatternComprehension__Group__4__Impl : ( VerticalLine ) ;
    public final void rule__PatternComprehension__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20103:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:20104:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:20104:1: ( VerticalLine )
            // InternalOpenCypherParser.g:20105:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getVerticalLineKeyword_4()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getVerticalLineKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__4__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__5"
    // InternalOpenCypherParser.g:20114:1: rule__PatternComprehension__Group__5 : rule__PatternComprehension__Group__5__Impl rule__PatternComprehension__Group__6 ;
    public final void rule__PatternComprehension__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20118:1: ( rule__PatternComprehension__Group__5__Impl rule__PatternComprehension__Group__6 )
            // InternalOpenCypherParser.g:20119:2: rule__PatternComprehension__Group__5__Impl rule__PatternComprehension__Group__6
            {
            pushFollow(FOLLOW_39);
            rule__PatternComprehension__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__5"


    // $ANTLR start "rule__PatternComprehension__Group__5__Impl"
    // InternalOpenCypherParser.g:20126:1: rule__PatternComprehension__Group__5__Impl : ( ( rule__PatternComprehension__ExpressionAssignment_5 ) ) ;
    public final void rule__PatternComprehension__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20130:1: ( ( ( rule__PatternComprehension__ExpressionAssignment_5 ) ) )
            // InternalOpenCypherParser.g:20131:1: ( ( rule__PatternComprehension__ExpressionAssignment_5 ) )
            {
            // InternalOpenCypherParser.g:20131:1: ( ( rule__PatternComprehension__ExpressionAssignment_5 ) )
            // InternalOpenCypherParser.g:20132:2: ( rule__PatternComprehension__ExpressionAssignment_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getExpressionAssignment_5()); 
            }
            // InternalOpenCypherParser.g:20133:2: ( rule__PatternComprehension__ExpressionAssignment_5 )
            // InternalOpenCypherParser.g:20133:3: rule__PatternComprehension__ExpressionAssignment_5
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__ExpressionAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getExpressionAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__5__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__6"
    // InternalOpenCypherParser.g:20141:1: rule__PatternComprehension__Group__6 : rule__PatternComprehension__Group__6__Impl ;
    public final void rule__PatternComprehension__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20145:1: ( rule__PatternComprehension__Group__6__Impl )
            // InternalOpenCypherParser.g:20146:2: rule__PatternComprehension__Group__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__6"


    // $ANTLR start "rule__PatternComprehension__Group__6__Impl"
    // InternalOpenCypherParser.g:20152:1: rule__PatternComprehension__Group__6__Impl : ( RightSquareBracket ) ;
    public final void rule__PatternComprehension__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20156:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:20157:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:20157:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:20158:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getRightSquareBracketKeyword_6()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getRightSquareBracketKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__6__Impl"


    // $ANTLR start "rule__PatternComprehension__Group_1__0"
    // InternalOpenCypherParser.g:20168:1: rule__PatternComprehension__Group_1__0 : rule__PatternComprehension__Group_1__0__Impl rule__PatternComprehension__Group_1__1 ;
    public final void rule__PatternComprehension__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20172:1: ( rule__PatternComprehension__Group_1__0__Impl rule__PatternComprehension__Group_1__1 )
            // InternalOpenCypherParser.g:20173:2: rule__PatternComprehension__Group_1__0__Impl rule__PatternComprehension__Group_1__1
            {
            pushFollow(FOLLOW_9);
            rule__PatternComprehension__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group_1__0"


    // $ANTLR start "rule__PatternComprehension__Group_1__0__Impl"
    // InternalOpenCypherParser.g:20180:1: rule__PatternComprehension__Group_1__0__Impl : ( ( rule__PatternComprehension__PathVariableAssignment_1_0 ) ) ;
    public final void rule__PatternComprehension__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20184:1: ( ( ( rule__PatternComprehension__PathVariableAssignment_1_0 ) ) )
            // InternalOpenCypherParser.g:20185:1: ( ( rule__PatternComprehension__PathVariableAssignment_1_0 ) )
            {
            // InternalOpenCypherParser.g:20185:1: ( ( rule__PatternComprehension__PathVariableAssignment_1_0 ) )
            // InternalOpenCypherParser.g:20186:2: ( rule__PatternComprehension__PathVariableAssignment_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getPathVariableAssignment_1_0()); 
            }
            // InternalOpenCypherParser.g:20187:2: ( rule__PatternComprehension__PathVariableAssignment_1_0 )
            // InternalOpenCypherParser.g:20187:3: rule__PatternComprehension__PathVariableAssignment_1_0
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__PathVariableAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getPathVariableAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group_1__0__Impl"


    // $ANTLR start "rule__PatternComprehension__Group_1__1"
    // InternalOpenCypherParser.g:20195:1: rule__PatternComprehension__Group_1__1 : rule__PatternComprehension__Group_1__1__Impl ;
    public final void rule__PatternComprehension__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20199:1: ( rule__PatternComprehension__Group_1__1__Impl )
            // InternalOpenCypherParser.g:20200:2: rule__PatternComprehension__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group_1__1"


    // $ANTLR start "rule__PatternComprehension__Group_1__1__Impl"
    // InternalOpenCypherParser.g:20206:1: rule__PatternComprehension__Group_1__1__Impl : ( EqualsSign ) ;
    public final void rule__PatternComprehension__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20210:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:20211:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:20211:1: ( EqualsSign )
            // InternalOpenCypherParser.g:20212:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getEqualsSignKeyword_1_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getEqualsSignKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group_1__1__Impl"


    // $ANTLR start "rule__PropertyLookup__Group__0"
    // InternalOpenCypherParser.g:20222:1: rule__PropertyLookup__Group__0 : rule__PropertyLookup__Group__0__Impl rule__PropertyLookup__Group__1 ;
    public final void rule__PropertyLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20226:1: ( rule__PropertyLookup__Group__0__Impl rule__PropertyLookup__Group__1 )
            // InternalOpenCypherParser.g:20227:2: rule__PropertyLookup__Group__0__Impl rule__PropertyLookup__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__PropertyLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group__0"


    // $ANTLR start "rule__PropertyLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:20234:1: rule__PropertyLookup__Group__0__Impl : ( FullStop ) ;
    public final void rule__PropertyLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20238:1: ( ( FullStop ) )
            // InternalOpenCypherParser.g:20239:1: ( FullStop )
            {
            // InternalOpenCypherParser.g:20239:1: ( FullStop )
            // InternalOpenCypherParser.g:20240:2: FullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getFullStopKeyword_0()); 
            }
            match(input,FullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getFullStopKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group__0__Impl"


    // $ANTLR start "rule__PropertyLookup__Group__1"
    // InternalOpenCypherParser.g:20249:1: rule__PropertyLookup__Group__1 : rule__PropertyLookup__Group__1__Impl ;
    public final void rule__PropertyLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20253:1: ( rule__PropertyLookup__Group__1__Impl )
            // InternalOpenCypherParser.g:20254:2: rule__PropertyLookup__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group__1"


    // $ANTLR start "rule__PropertyLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:20260:1: rule__PropertyLookup__Group__1__Impl : ( ( rule__PropertyLookup__Alternatives_1 ) ) ;
    public final void rule__PropertyLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20264:1: ( ( ( rule__PropertyLookup__Alternatives_1 ) ) )
            // InternalOpenCypherParser.g:20265:1: ( ( rule__PropertyLookup__Alternatives_1 ) )
            {
            // InternalOpenCypherParser.g:20265:1: ( ( rule__PropertyLookup__Alternatives_1 ) )
            // InternalOpenCypherParser.g:20266:2: ( rule__PropertyLookup__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:20267:2: ( rule__PropertyLookup__Alternatives_1 )
            // InternalOpenCypherParser.g:20267:3: rule__PropertyLookup__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group__1__Impl"


    // $ANTLR start "rule__PropertyLookup__Group_1_0__0"
    // InternalOpenCypherParser.g:20276:1: rule__PropertyLookup__Group_1_0__0 : rule__PropertyLookup__Group_1_0__0__Impl rule__PropertyLookup__Group_1_0__1 ;
    public final void rule__PropertyLookup__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20280:1: ( rule__PropertyLookup__Group_1_0__0__Impl rule__PropertyLookup__Group_1_0__1 )
            // InternalOpenCypherParser.g:20281:2: rule__PropertyLookup__Group_1_0__0__Impl rule__PropertyLookup__Group_1_0__1
            {
            pushFollow(FOLLOW_131);
            rule__PropertyLookup__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group_1_0__0"


    // $ANTLR start "rule__PropertyLookup__Group_1_0__0__Impl"
    // InternalOpenCypherParser.g:20288:1: rule__PropertyLookup__Group_1_0__0__Impl : ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 ) ) ;
    public final void rule__PropertyLookup__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20292:1: ( ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 ) ) )
            // InternalOpenCypherParser.g:20293:1: ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 ) )
            {
            // InternalOpenCypherParser.g:20293:1: ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 ) )
            // InternalOpenCypherParser.g:20294:2: ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_0_0()); 
            }
            // InternalOpenCypherParser.g:20295:2: ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 )
            // InternalOpenCypherParser.g:20295:3: rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group_1_0__0__Impl"


    // $ANTLR start "rule__PropertyLookup__Group_1_0__1"
    // InternalOpenCypherParser.g:20303:1: rule__PropertyLookup__Group_1_0__1 : rule__PropertyLookup__Group_1_0__1__Impl ;
    public final void rule__PropertyLookup__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20307:1: ( rule__PropertyLookup__Group_1_0__1__Impl )
            // InternalOpenCypherParser.g:20308:2: rule__PropertyLookup__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group_1_0__1"


    // $ANTLR start "rule__PropertyLookup__Group_1_0__1__Impl"
    // InternalOpenCypherParser.g:20314:1: rule__PropertyLookup__Group_1_0__1__Impl : ( ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 ) ) ;
    public final void rule__PropertyLookup__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20318:1: ( ( ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 ) ) )
            // InternalOpenCypherParser.g:20319:1: ( ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 ) )
            {
            // InternalOpenCypherParser.g:20319:1: ( ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 ) )
            // InternalOpenCypherParser.g:20320:2: ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAssignment_1_0_1()); 
            }
            // InternalOpenCypherParser.g:20321:2: ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 )
            // InternalOpenCypherParser.g:20321:3: rule__PropertyLookup__PropertyOperatorAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__PropertyOperatorAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group_1_0__1__Impl"


    // $ANTLR start "rule__CaseExpression__Group__0"
    // InternalOpenCypherParser.g:20330:1: rule__CaseExpression__Group__0 : rule__CaseExpression__Group__0__Impl rule__CaseExpression__Group__1 ;
    public final void rule__CaseExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20334:1: ( rule__CaseExpression__Group__0__Impl rule__CaseExpression__Group__1 )
            // InternalOpenCypherParser.g:20335:2: rule__CaseExpression__Group__0__Impl rule__CaseExpression__Group__1
            {
            pushFollow(FOLLOW_132);
            rule__CaseExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__0"


    // $ANTLR start "rule__CaseExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:20342:1: rule__CaseExpression__Group__0__Impl : ( ( rule__CaseExpression__Alternatives_0 ) ) ;
    public final void rule__CaseExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20346:1: ( ( ( rule__CaseExpression__Alternatives_0 ) ) )
            // InternalOpenCypherParser.g:20347:1: ( ( rule__CaseExpression__Alternatives_0 ) )
            {
            // InternalOpenCypherParser.g:20347:1: ( ( rule__CaseExpression__Alternatives_0 ) )
            // InternalOpenCypherParser.g:20348:2: ( rule__CaseExpression__Alternatives_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getAlternatives_0()); 
            }
            // InternalOpenCypherParser.g:20349:2: ( rule__CaseExpression__Alternatives_0 )
            // InternalOpenCypherParser.g:20349:3: rule__CaseExpression__Alternatives_0
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Alternatives_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getAlternatives_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__0__Impl"


    // $ANTLR start "rule__CaseExpression__Group__1"
    // InternalOpenCypherParser.g:20357:1: rule__CaseExpression__Group__1 : rule__CaseExpression__Group__1__Impl rule__CaseExpression__Group__2 ;
    public final void rule__CaseExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20361:1: ( rule__CaseExpression__Group__1__Impl rule__CaseExpression__Group__2 )
            // InternalOpenCypherParser.g:20362:2: rule__CaseExpression__Group__1__Impl rule__CaseExpression__Group__2
            {
            pushFollow(FOLLOW_132);
            rule__CaseExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__1"


    // $ANTLR start "rule__CaseExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:20369:1: rule__CaseExpression__Group__1__Impl : ( ( rule__CaseExpression__Group_1__0 )? ) ;
    public final void rule__CaseExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20373:1: ( ( ( rule__CaseExpression__Group_1__0 )? ) )
            // InternalOpenCypherParser.g:20374:1: ( ( rule__CaseExpression__Group_1__0 )? )
            {
            // InternalOpenCypherParser.g:20374:1: ( ( rule__CaseExpression__Group_1__0 )? )
            // InternalOpenCypherParser.g:20375:2: ( rule__CaseExpression__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:20376:2: ( rule__CaseExpression__Group_1__0 )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==ELSE) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // InternalOpenCypherParser.g:20376:3: rule__CaseExpression__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__CaseExpression__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__1__Impl"


    // $ANTLR start "rule__CaseExpression__Group__2"
    // InternalOpenCypherParser.g:20384:1: rule__CaseExpression__Group__2 : rule__CaseExpression__Group__2__Impl ;
    public final void rule__CaseExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20388:1: ( rule__CaseExpression__Group__2__Impl )
            // InternalOpenCypherParser.g:20389:2: rule__CaseExpression__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__2"


    // $ANTLR start "rule__CaseExpression__Group__2__Impl"
    // InternalOpenCypherParser.g:20395:1: rule__CaseExpression__Group__2__Impl : ( END ) ;
    public final void rule__CaseExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20399:1: ( ( END ) )
            // InternalOpenCypherParser.g:20400:1: ( END )
            {
            // InternalOpenCypherParser.g:20400:1: ( END )
            // InternalOpenCypherParser.g:20401:2: END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getENDKeyword_2()); 
            }
            match(input,END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getENDKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__2__Impl"


    // $ANTLR start "rule__CaseExpression__Group_0_0__0"
    // InternalOpenCypherParser.g:20411:1: rule__CaseExpression__Group_0_0__0 : rule__CaseExpression__Group_0_0__0__Impl rule__CaseExpression__Group_0_0__1 ;
    public final void rule__CaseExpression__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20415:1: ( rule__CaseExpression__Group_0_0__0__Impl rule__CaseExpression__Group_0_0__1 )
            // InternalOpenCypherParser.g:20416:2: rule__CaseExpression__Group_0_0__0__Impl rule__CaseExpression__Group_0_0__1
            {
            pushFollow(FOLLOW_133);
            rule__CaseExpression__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_0__0"


    // $ANTLR start "rule__CaseExpression__Group_0_0__0__Impl"
    // InternalOpenCypherParser.g:20423:1: rule__CaseExpression__Group_0_0__0__Impl : ( CASE ) ;
    public final void rule__CaseExpression__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20427:1: ( ( CASE ) )
            // InternalOpenCypherParser.g:20428:1: ( CASE )
            {
            // InternalOpenCypherParser.g:20428:1: ( CASE )
            // InternalOpenCypherParser.g:20429:2: CASE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_0_0()); 
            }
            match(input,CASE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_0__0__Impl"


    // $ANTLR start "rule__CaseExpression__Group_0_0__1"
    // InternalOpenCypherParser.g:20438:1: rule__CaseExpression__Group_0_0__1 : rule__CaseExpression__Group_0_0__1__Impl ;
    public final void rule__CaseExpression__Group_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20442:1: ( rule__CaseExpression__Group_0_0__1__Impl )
            // InternalOpenCypherParser.g:20443:2: rule__CaseExpression__Group_0_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_0__1"


    // $ANTLR start "rule__CaseExpression__Group_0_0__1__Impl"
    // InternalOpenCypherParser.g:20449:1: rule__CaseExpression__Group_0_0__1__Impl : ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* ) ) ;
    public final void rule__CaseExpression__Group_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20453:1: ( ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* ) ) )
            // InternalOpenCypherParser.g:20454:1: ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* ) )
            {
            // InternalOpenCypherParser.g:20454:1: ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* ) )
            // InternalOpenCypherParser.g:20455:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* )
            {
            // InternalOpenCypherParser.g:20455:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) )
            // InternalOpenCypherParser.g:20456:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); 
            }
            // InternalOpenCypherParser.g:20457:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )
            // InternalOpenCypherParser.g:20457:4: rule__CaseExpression__CaseAlternativesAssignment_0_0_1
            {
            pushFollow(FOLLOW_134);
            rule__CaseExpression__CaseAlternativesAssignment_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); 
            }

            }

            // InternalOpenCypherParser.g:20460:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* )
            // InternalOpenCypherParser.g:20461:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); 
            }
            // InternalOpenCypherParser.g:20462:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==WHEN) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    // InternalOpenCypherParser.g:20462:4: rule__CaseExpression__CaseAlternativesAssignment_0_0_1
            	    {
            	    pushFollow(FOLLOW_134);
            	    rule__CaseExpression__CaseAlternativesAssignment_0_0_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_0__1__Impl"


    // $ANTLR start "rule__CaseExpression__Group_0_1__0"
    // InternalOpenCypherParser.g:20472:1: rule__CaseExpression__Group_0_1__0 : rule__CaseExpression__Group_0_1__0__Impl rule__CaseExpression__Group_0_1__1 ;
    public final void rule__CaseExpression__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20476:1: ( rule__CaseExpression__Group_0_1__0__Impl rule__CaseExpression__Group_0_1__1 )
            // InternalOpenCypherParser.g:20477:2: rule__CaseExpression__Group_0_1__0__Impl rule__CaseExpression__Group_0_1__1
            {
            pushFollow(FOLLOW_43);
            rule__CaseExpression__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__0"


    // $ANTLR start "rule__CaseExpression__Group_0_1__0__Impl"
    // InternalOpenCypherParser.g:20484:1: rule__CaseExpression__Group_0_1__0__Impl : ( CASE ) ;
    public final void rule__CaseExpression__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20488:1: ( ( CASE ) )
            // InternalOpenCypherParser.g:20489:1: ( CASE )
            {
            // InternalOpenCypherParser.g:20489:1: ( CASE )
            // InternalOpenCypherParser.g:20490:2: CASE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_1_0()); 
            }
            match(input,CASE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__0__Impl"


    // $ANTLR start "rule__CaseExpression__Group_0_1__1"
    // InternalOpenCypherParser.g:20499:1: rule__CaseExpression__Group_0_1__1 : rule__CaseExpression__Group_0_1__1__Impl rule__CaseExpression__Group_0_1__2 ;
    public final void rule__CaseExpression__Group_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20503:1: ( rule__CaseExpression__Group_0_1__1__Impl rule__CaseExpression__Group_0_1__2 )
            // InternalOpenCypherParser.g:20504:2: rule__CaseExpression__Group_0_1__1__Impl rule__CaseExpression__Group_0_1__2
            {
            pushFollow(FOLLOW_133);
            rule__CaseExpression__Group_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_0_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__1"


    // $ANTLR start "rule__CaseExpression__Group_0_1__1__Impl"
    // InternalOpenCypherParser.g:20511:1: rule__CaseExpression__Group_0_1__1__Impl : ( ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 ) ) ;
    public final void rule__CaseExpression__Group_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20515:1: ( ( ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 ) ) )
            // InternalOpenCypherParser.g:20516:1: ( ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 ) )
            {
            // InternalOpenCypherParser.g:20516:1: ( ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 ) )
            // InternalOpenCypherParser.g:20517:2: ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseExpressionAssignment_0_1_1()); 
            }
            // InternalOpenCypherParser.g:20518:2: ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 )
            // InternalOpenCypherParser.g:20518:3: rule__CaseExpression__CaseExpressionAssignment_0_1_1
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__CaseExpressionAssignment_0_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseExpressionAssignment_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__1__Impl"


    // $ANTLR start "rule__CaseExpression__Group_0_1__2"
    // InternalOpenCypherParser.g:20526:1: rule__CaseExpression__Group_0_1__2 : rule__CaseExpression__Group_0_1__2__Impl ;
    public final void rule__CaseExpression__Group_0_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20530:1: ( rule__CaseExpression__Group_0_1__2__Impl )
            // InternalOpenCypherParser.g:20531:2: rule__CaseExpression__Group_0_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_0_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__2"


    // $ANTLR start "rule__CaseExpression__Group_0_1__2__Impl"
    // InternalOpenCypherParser.g:20537:1: rule__CaseExpression__Group_0_1__2__Impl : ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* ) ) ;
    public final void rule__CaseExpression__Group_0_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20541:1: ( ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* ) ) )
            // InternalOpenCypherParser.g:20542:1: ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* ) )
            {
            // InternalOpenCypherParser.g:20542:1: ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* ) )
            // InternalOpenCypherParser.g:20543:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* )
            {
            // InternalOpenCypherParser.g:20543:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) )
            // InternalOpenCypherParser.g:20544:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); 
            }
            // InternalOpenCypherParser.g:20545:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )
            // InternalOpenCypherParser.g:20545:4: rule__CaseExpression__CaseAlternativesAssignment_0_1_2
            {
            pushFollow(FOLLOW_134);
            rule__CaseExpression__CaseAlternativesAssignment_0_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); 
            }

            }

            // InternalOpenCypherParser.g:20548:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* )
            // InternalOpenCypherParser.g:20549:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); 
            }
            // InternalOpenCypherParser.g:20550:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==WHEN) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // InternalOpenCypherParser.g:20550:4: rule__CaseExpression__CaseAlternativesAssignment_0_1_2
            	    {
            	    pushFollow(FOLLOW_134);
            	    rule__CaseExpression__CaseAlternativesAssignment_0_1_2();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__2__Impl"


    // $ANTLR start "rule__CaseExpression__Group_1__0"
    // InternalOpenCypherParser.g:20560:1: rule__CaseExpression__Group_1__0 : rule__CaseExpression__Group_1__0__Impl rule__CaseExpression__Group_1__1 ;
    public final void rule__CaseExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20564:1: ( rule__CaseExpression__Group_1__0__Impl rule__CaseExpression__Group_1__1 )
            // InternalOpenCypherParser.g:20565:2: rule__CaseExpression__Group_1__0__Impl rule__CaseExpression__Group_1__1
            {
            pushFollow(FOLLOW_43);
            rule__CaseExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_1__0"


    // $ANTLR start "rule__CaseExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:20572:1: rule__CaseExpression__Group_1__0__Impl : ( ELSE ) ;
    public final void rule__CaseExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20576:1: ( ( ELSE ) )
            // InternalOpenCypherParser.g:20577:1: ( ELSE )
            {
            // InternalOpenCypherParser.g:20577:1: ( ELSE )
            // InternalOpenCypherParser.g:20578:2: ELSE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getELSEKeyword_1_0()); 
            }
            match(input,ELSE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getELSEKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_1__0__Impl"


    // $ANTLR start "rule__CaseExpression__Group_1__1"
    // InternalOpenCypherParser.g:20587:1: rule__CaseExpression__Group_1__1 : rule__CaseExpression__Group_1__1__Impl ;
    public final void rule__CaseExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20591:1: ( rule__CaseExpression__Group_1__1__Impl )
            // InternalOpenCypherParser.g:20592:2: rule__CaseExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_1__1"


    // $ANTLR start "rule__CaseExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:20598:1: rule__CaseExpression__Group_1__1__Impl : ( ( rule__CaseExpression__ElseExpressionAssignment_1_1 ) ) ;
    public final void rule__CaseExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20602:1: ( ( ( rule__CaseExpression__ElseExpressionAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:20603:1: ( ( rule__CaseExpression__ElseExpressionAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:20603:1: ( ( rule__CaseExpression__ElseExpressionAssignment_1_1 ) )
            // InternalOpenCypherParser.g:20604:2: ( rule__CaseExpression__ElseExpressionAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getElseExpressionAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:20605:2: ( rule__CaseExpression__ElseExpressionAssignment_1_1 )
            // InternalOpenCypherParser.g:20605:3: rule__CaseExpression__ElseExpressionAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__ElseExpressionAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getElseExpressionAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_1__1__Impl"


    // $ANTLR start "rule__CaseAlternatives__Group__0"
    // InternalOpenCypherParser.g:20614:1: rule__CaseAlternatives__Group__0 : rule__CaseAlternatives__Group__0__Impl rule__CaseAlternatives__Group__1 ;
    public final void rule__CaseAlternatives__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20618:1: ( rule__CaseAlternatives__Group__0__Impl rule__CaseAlternatives__Group__1 )
            // InternalOpenCypherParser.g:20619:2: rule__CaseAlternatives__Group__0__Impl rule__CaseAlternatives__Group__1
            {
            pushFollow(FOLLOW_43);
            rule__CaseAlternatives__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__0"


    // $ANTLR start "rule__CaseAlternatives__Group__0__Impl"
    // InternalOpenCypherParser.g:20626:1: rule__CaseAlternatives__Group__0__Impl : ( WHEN ) ;
    public final void rule__CaseAlternatives__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20630:1: ( ( WHEN ) )
            // InternalOpenCypherParser.g:20631:1: ( WHEN )
            {
            // InternalOpenCypherParser.g:20631:1: ( WHEN )
            // InternalOpenCypherParser.g:20632:2: WHEN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getWHENKeyword_0()); 
            }
            match(input,WHEN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getWHENKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__0__Impl"


    // $ANTLR start "rule__CaseAlternatives__Group__1"
    // InternalOpenCypherParser.g:20641:1: rule__CaseAlternatives__Group__1 : rule__CaseAlternatives__Group__1__Impl rule__CaseAlternatives__Group__2 ;
    public final void rule__CaseAlternatives__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20645:1: ( rule__CaseAlternatives__Group__1__Impl rule__CaseAlternatives__Group__2 )
            // InternalOpenCypherParser.g:20646:2: rule__CaseAlternatives__Group__1__Impl rule__CaseAlternatives__Group__2
            {
            pushFollow(FOLLOW_135);
            rule__CaseAlternatives__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__1"


    // $ANTLR start "rule__CaseAlternatives__Group__1__Impl"
    // InternalOpenCypherParser.g:20653:1: rule__CaseAlternatives__Group__1__Impl : ( ( rule__CaseAlternatives__WhenAssignment_1 ) ) ;
    public final void rule__CaseAlternatives__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20657:1: ( ( ( rule__CaseAlternatives__WhenAssignment_1 ) ) )
            // InternalOpenCypherParser.g:20658:1: ( ( rule__CaseAlternatives__WhenAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:20658:1: ( ( rule__CaseAlternatives__WhenAssignment_1 ) )
            // InternalOpenCypherParser.g:20659:2: ( rule__CaseAlternatives__WhenAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getWhenAssignment_1()); 
            }
            // InternalOpenCypherParser.g:20660:2: ( rule__CaseAlternatives__WhenAssignment_1 )
            // InternalOpenCypherParser.g:20660:3: rule__CaseAlternatives__WhenAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__WhenAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getWhenAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__1__Impl"


    // $ANTLR start "rule__CaseAlternatives__Group__2"
    // InternalOpenCypherParser.g:20668:1: rule__CaseAlternatives__Group__2 : rule__CaseAlternatives__Group__2__Impl rule__CaseAlternatives__Group__3 ;
    public final void rule__CaseAlternatives__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20672:1: ( rule__CaseAlternatives__Group__2__Impl rule__CaseAlternatives__Group__3 )
            // InternalOpenCypherParser.g:20673:2: rule__CaseAlternatives__Group__2__Impl rule__CaseAlternatives__Group__3
            {
            pushFollow(FOLLOW_43);
            rule__CaseAlternatives__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__2"


    // $ANTLR start "rule__CaseAlternatives__Group__2__Impl"
    // InternalOpenCypherParser.g:20680:1: rule__CaseAlternatives__Group__2__Impl : ( THEN ) ;
    public final void rule__CaseAlternatives__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20684:1: ( ( THEN ) )
            // InternalOpenCypherParser.g:20685:1: ( THEN )
            {
            // InternalOpenCypherParser.g:20685:1: ( THEN )
            // InternalOpenCypherParser.g:20686:2: THEN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getTHENKeyword_2()); 
            }
            match(input,THEN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getTHENKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__2__Impl"


    // $ANTLR start "rule__CaseAlternatives__Group__3"
    // InternalOpenCypherParser.g:20695:1: rule__CaseAlternatives__Group__3 : rule__CaseAlternatives__Group__3__Impl ;
    public final void rule__CaseAlternatives__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20699:1: ( rule__CaseAlternatives__Group__3__Impl )
            // InternalOpenCypherParser.g:20700:2: rule__CaseAlternatives__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__3"


    // $ANTLR start "rule__CaseAlternatives__Group__3__Impl"
    // InternalOpenCypherParser.g:20706:1: rule__CaseAlternatives__Group__3__Impl : ( ( rule__CaseAlternatives__ThenAssignment_3 ) ) ;
    public final void rule__CaseAlternatives__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20710:1: ( ( ( rule__CaseAlternatives__ThenAssignment_3 ) ) )
            // InternalOpenCypherParser.g:20711:1: ( ( rule__CaseAlternatives__ThenAssignment_3 ) )
            {
            // InternalOpenCypherParser.g:20711:1: ( ( rule__CaseAlternatives__ThenAssignment_3 ) )
            // InternalOpenCypherParser.g:20712:2: ( rule__CaseAlternatives__ThenAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getThenAssignment_3()); 
            }
            // InternalOpenCypherParser.g:20713:2: ( rule__CaseAlternatives__ThenAssignment_3 )
            // InternalOpenCypherParser.g:20713:3: rule__CaseAlternatives__ThenAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__ThenAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getThenAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__3__Impl"


    // $ANTLR start "rule__VariableDeclaration__Group__0"
    // InternalOpenCypherParser.g:20722:1: rule__VariableDeclaration__Group__0 : rule__VariableDeclaration__Group__0__Impl rule__VariableDeclaration__Group__1 ;
    public final void rule__VariableDeclaration__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20726:1: ( rule__VariableDeclaration__Group__0__Impl rule__VariableDeclaration__Group__1 )
            // InternalOpenCypherParser.g:20727:2: rule__VariableDeclaration__Group__0__Impl rule__VariableDeclaration__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__VariableDeclaration__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__VariableDeclaration__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VariableDeclaration__Group__0"


    // $ANTLR start "rule__VariableDeclaration__Group__0__Impl"
    // InternalOpenCypherParser.g:20734:1: rule__VariableDeclaration__Group__0__Impl : ( () ) ;
    public final void rule__VariableDeclaration__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20738:1: ( ( () ) )
            // InternalOpenCypherParser.g:20739:1: ( () )
            {
            // InternalOpenCypherParser.g:20739:1: ( () )
            // InternalOpenCypherParser.g:20740:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0()); 
            }
            // InternalOpenCypherParser.g:20741:2: ()
            // InternalOpenCypherParser.g:20741:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VariableDeclaration__Group__0__Impl"


    // $ANTLR start "rule__VariableDeclaration__Group__1"
    // InternalOpenCypherParser.g:20749:1: rule__VariableDeclaration__Group__1 : rule__VariableDeclaration__Group__1__Impl ;
    public final void rule__VariableDeclaration__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20753:1: ( rule__VariableDeclaration__Group__1__Impl )
            // InternalOpenCypherParser.g:20754:2: rule__VariableDeclaration__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__VariableDeclaration__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VariableDeclaration__Group__1"


    // $ANTLR start "rule__VariableDeclaration__Group__1__Impl"
    // InternalOpenCypherParser.g:20760:1: rule__VariableDeclaration__Group__1__Impl : ( ( rule__VariableDeclaration__NameAssignment_1 ) ) ;
    public final void rule__VariableDeclaration__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20764:1: ( ( ( rule__VariableDeclaration__NameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:20765:1: ( ( rule__VariableDeclaration__NameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:20765:1: ( ( rule__VariableDeclaration__NameAssignment_1 ) )
            // InternalOpenCypherParser.g:20766:2: ( rule__VariableDeclaration__NameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:20767:2: ( rule__VariableDeclaration__NameAssignment_1 )
            // InternalOpenCypherParser.g:20767:3: rule__VariableDeclaration__NameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__VariableDeclaration__NameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VariableDeclaration__Group__1__Impl"


    // $ANTLR start "rule__MapLiteral__Group__0"
    // InternalOpenCypherParser.g:20776:1: rule__MapLiteral__Group__0 : rule__MapLiteral__Group__0__Impl rule__MapLiteral__Group__1 ;
    public final void rule__MapLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20780:1: ( rule__MapLiteral__Group__0__Impl rule__MapLiteral__Group__1 )
            // InternalOpenCypherParser.g:20781:2: rule__MapLiteral__Group__0__Impl rule__MapLiteral__Group__1
            {
            pushFollow(FOLLOW_136);
            rule__MapLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__0"


    // $ANTLR start "rule__MapLiteral__Group__0__Impl"
    // InternalOpenCypherParser.g:20788:1: rule__MapLiteral__Group__0__Impl : ( () ) ;
    public final void rule__MapLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20792:1: ( ( () ) )
            // InternalOpenCypherParser.g:20793:1: ( () )
            {
            // InternalOpenCypherParser.g:20793:1: ( () )
            // InternalOpenCypherParser.g:20794:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getMapLiteralAction_0()); 
            }
            // InternalOpenCypherParser.g:20795:2: ()
            // InternalOpenCypherParser.g:20795:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getMapLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__0__Impl"


    // $ANTLR start "rule__MapLiteral__Group__1"
    // InternalOpenCypherParser.g:20803:1: rule__MapLiteral__Group__1 : rule__MapLiteral__Group__1__Impl rule__MapLiteral__Group__2 ;
    public final void rule__MapLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20807:1: ( rule__MapLiteral__Group__1__Impl rule__MapLiteral__Group__2 )
            // InternalOpenCypherParser.g:20808:2: rule__MapLiteral__Group__1__Impl rule__MapLiteral__Group__2
            {
            pushFollow(FOLLOW_137);
            rule__MapLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__1"


    // $ANTLR start "rule__MapLiteral__Group__1__Impl"
    // InternalOpenCypherParser.g:20815:1: rule__MapLiteral__Group__1__Impl : ( LeftCurlyBracket ) ;
    public final void rule__MapLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20819:1: ( ( LeftCurlyBracket ) )
            // InternalOpenCypherParser.g:20820:1: ( LeftCurlyBracket )
            {
            // InternalOpenCypherParser.g:20820:1: ( LeftCurlyBracket )
            // InternalOpenCypherParser.g:20821:2: LeftCurlyBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__1__Impl"


    // $ANTLR start "rule__MapLiteral__Group__2"
    // InternalOpenCypherParser.g:20830:1: rule__MapLiteral__Group__2 : rule__MapLiteral__Group__2__Impl rule__MapLiteral__Group__3 ;
    public final void rule__MapLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20834:1: ( rule__MapLiteral__Group__2__Impl rule__MapLiteral__Group__3 )
            // InternalOpenCypherParser.g:20835:2: rule__MapLiteral__Group__2__Impl rule__MapLiteral__Group__3
            {
            pushFollow(FOLLOW_137);
            rule__MapLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__2"


    // $ANTLR start "rule__MapLiteral__Group__2__Impl"
    // InternalOpenCypherParser.g:20842:1: rule__MapLiteral__Group__2__Impl : ( ( rule__MapLiteral__Group_2__0 )? ) ;
    public final void rule__MapLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20846:1: ( ( ( rule__MapLiteral__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:20847:1: ( ( rule__MapLiteral__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:20847:1: ( ( rule__MapLiteral__Group_2__0 )? )
            // InternalOpenCypherParser.g:20848:2: ( rule__MapLiteral__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:20849:2: ( rule__MapLiteral__Group_2__0 )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( ((LA147_0>=ALLSHORTESTPATHS && LA147_0<=WHERE)||(LA147_0>=CASE && LA147_0<=XOR)||(LA147_0>=AS && LA147_0<=OR)||LA147_0==RULE_ID) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // InternalOpenCypherParser.g:20849:3: rule__MapLiteral__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__MapLiteral__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__2__Impl"


    // $ANTLR start "rule__MapLiteral__Group__3"
    // InternalOpenCypherParser.g:20857:1: rule__MapLiteral__Group__3 : rule__MapLiteral__Group__3__Impl ;
    public final void rule__MapLiteral__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20861:1: ( rule__MapLiteral__Group__3__Impl )
            // InternalOpenCypherParser.g:20862:2: rule__MapLiteral__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__3"


    // $ANTLR start "rule__MapLiteral__Group__3__Impl"
    // InternalOpenCypherParser.g:20868:1: rule__MapLiteral__Group__3__Impl : ( RightCurlyBracket ) ;
    public final void rule__MapLiteral__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20872:1: ( ( RightCurlyBracket ) )
            // InternalOpenCypherParser.g:20873:1: ( RightCurlyBracket )
            {
            // InternalOpenCypherParser.g:20873:1: ( RightCurlyBracket )
            // InternalOpenCypherParser.g:20874:2: RightCurlyBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }
            match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__3__Impl"


    // $ANTLR start "rule__MapLiteral__Group_2__0"
    // InternalOpenCypherParser.g:20884:1: rule__MapLiteral__Group_2__0 : rule__MapLiteral__Group_2__0__Impl rule__MapLiteral__Group_2__1 ;
    public final void rule__MapLiteral__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20888:1: ( rule__MapLiteral__Group_2__0__Impl rule__MapLiteral__Group_2__1 )
            // InternalOpenCypherParser.g:20889:2: rule__MapLiteral__Group_2__0__Impl rule__MapLiteral__Group_2__1
            {
            pushFollow(FOLLOW_55);
            rule__MapLiteral__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2__0"


    // $ANTLR start "rule__MapLiteral__Group_2__0__Impl"
    // InternalOpenCypherParser.g:20896:1: rule__MapLiteral__Group_2__0__Impl : ( ( rule__MapLiteral__EntriesAssignment_2_0 ) ) ;
    public final void rule__MapLiteral__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20900:1: ( ( ( rule__MapLiteral__EntriesAssignment_2_0 ) ) )
            // InternalOpenCypherParser.g:20901:1: ( ( rule__MapLiteral__EntriesAssignment_2_0 ) )
            {
            // InternalOpenCypherParser.g:20901:1: ( ( rule__MapLiteral__EntriesAssignment_2_0 ) )
            // InternalOpenCypherParser.g:20902:2: ( rule__MapLiteral__EntriesAssignment_2_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_0()); 
            }
            // InternalOpenCypherParser.g:20903:2: ( rule__MapLiteral__EntriesAssignment_2_0 )
            // InternalOpenCypherParser.g:20903:3: rule__MapLiteral__EntriesAssignment_2_0
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__EntriesAssignment_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2__0__Impl"


    // $ANTLR start "rule__MapLiteral__Group_2__1"
    // InternalOpenCypherParser.g:20911:1: rule__MapLiteral__Group_2__1 : rule__MapLiteral__Group_2__1__Impl ;
    public final void rule__MapLiteral__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20915:1: ( rule__MapLiteral__Group_2__1__Impl )
            // InternalOpenCypherParser.g:20916:2: rule__MapLiteral__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2__1"


    // $ANTLR start "rule__MapLiteral__Group_2__1__Impl"
    // InternalOpenCypherParser.g:20922:1: rule__MapLiteral__Group_2__1__Impl : ( ( rule__MapLiteral__Group_2_1__0 )* ) ;
    public final void rule__MapLiteral__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20926:1: ( ( ( rule__MapLiteral__Group_2_1__0 )* ) )
            // InternalOpenCypherParser.g:20927:1: ( ( rule__MapLiteral__Group_2_1__0 )* )
            {
            // InternalOpenCypherParser.g:20927:1: ( ( rule__MapLiteral__Group_2_1__0 )* )
            // InternalOpenCypherParser.g:20928:2: ( rule__MapLiteral__Group_2_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getGroup_2_1()); 
            }
            // InternalOpenCypherParser.g:20929:2: ( rule__MapLiteral__Group_2_1__0 )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==Comma) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // InternalOpenCypherParser.g:20929:3: rule__MapLiteral__Group_2_1__0
            	    {
            	    pushFollow(FOLLOW_56);
            	    rule__MapLiteral__Group_2_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2__1__Impl"


    // $ANTLR start "rule__MapLiteral__Group_2_1__0"
    // InternalOpenCypherParser.g:20938:1: rule__MapLiteral__Group_2_1__0 : rule__MapLiteral__Group_2_1__0__Impl rule__MapLiteral__Group_2_1__1 ;
    public final void rule__MapLiteral__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20942:1: ( rule__MapLiteral__Group_2_1__0__Impl rule__MapLiteral__Group_2_1__1 )
            // InternalOpenCypherParser.g:20943:2: rule__MapLiteral__Group_2_1__0__Impl rule__MapLiteral__Group_2_1__1
            {
            pushFollow(FOLLOW_10);
            rule__MapLiteral__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2_1__0"


    // $ANTLR start "rule__MapLiteral__Group_2_1__0__Impl"
    // InternalOpenCypherParser.g:20950:1: rule__MapLiteral__Group_2_1__0__Impl : ( Comma ) ;
    public final void rule__MapLiteral__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20954:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:20955:1: ( Comma )
            {
            // InternalOpenCypherParser.g:20955:1: ( Comma )
            // InternalOpenCypherParser.g:20956:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getCommaKeyword_2_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getCommaKeyword_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2_1__0__Impl"


    // $ANTLR start "rule__MapLiteral__Group_2_1__1"
    // InternalOpenCypherParser.g:20965:1: rule__MapLiteral__Group_2_1__1 : rule__MapLiteral__Group_2_1__1__Impl ;
    public final void rule__MapLiteral__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20969:1: ( rule__MapLiteral__Group_2_1__1__Impl )
            // InternalOpenCypherParser.g:20970:2: rule__MapLiteral__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2_1__1"


    // $ANTLR start "rule__MapLiteral__Group_2_1__1__Impl"
    // InternalOpenCypherParser.g:20976:1: rule__MapLiteral__Group_2_1__1__Impl : ( ( rule__MapLiteral__EntriesAssignment_2_1_1 ) ) ;
    public final void rule__MapLiteral__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20980:1: ( ( ( rule__MapLiteral__EntriesAssignment_2_1_1 ) ) )
            // InternalOpenCypherParser.g:20981:1: ( ( rule__MapLiteral__EntriesAssignment_2_1_1 ) )
            {
            // InternalOpenCypherParser.g:20981:1: ( ( rule__MapLiteral__EntriesAssignment_2_1_1 ) )
            // InternalOpenCypherParser.g:20982:2: ( rule__MapLiteral__EntriesAssignment_2_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_1_1()); 
            }
            // InternalOpenCypherParser.g:20983:2: ( rule__MapLiteral__EntriesAssignment_2_1_1 )
            // InternalOpenCypherParser.g:20983:3: rule__MapLiteral__EntriesAssignment_2_1_1
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__EntriesAssignment_2_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2_1__1__Impl"


    // $ANTLR start "rule__MapLiteralEntry__Group__0"
    // InternalOpenCypherParser.g:20992:1: rule__MapLiteralEntry__Group__0 : rule__MapLiteralEntry__Group__0__Impl rule__MapLiteralEntry__Group__1 ;
    public final void rule__MapLiteralEntry__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20996:1: ( rule__MapLiteralEntry__Group__0__Impl rule__MapLiteralEntry__Group__1 )
            // InternalOpenCypherParser.g:20997:2: rule__MapLiteralEntry__Group__0__Impl rule__MapLiteralEntry__Group__1
            {
            pushFollow(FOLLOW_29);
            rule__MapLiteralEntry__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__0"


    // $ANTLR start "rule__MapLiteralEntry__Group__0__Impl"
    // InternalOpenCypherParser.g:21004:1: rule__MapLiteralEntry__Group__0__Impl : ( ( rule__MapLiteralEntry__KeyAssignment_0 ) ) ;
    public final void rule__MapLiteralEntry__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21008:1: ( ( ( rule__MapLiteralEntry__KeyAssignment_0 ) ) )
            // InternalOpenCypherParser.g:21009:1: ( ( rule__MapLiteralEntry__KeyAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:21009:1: ( ( rule__MapLiteralEntry__KeyAssignment_0 ) )
            // InternalOpenCypherParser.g:21010:2: ( rule__MapLiteralEntry__KeyAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getKeyAssignment_0()); 
            }
            // InternalOpenCypherParser.g:21011:2: ( rule__MapLiteralEntry__KeyAssignment_0 )
            // InternalOpenCypherParser.g:21011:3: rule__MapLiteralEntry__KeyAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__KeyAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getKeyAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__0__Impl"


    // $ANTLR start "rule__MapLiteralEntry__Group__1"
    // InternalOpenCypherParser.g:21019:1: rule__MapLiteralEntry__Group__1 : rule__MapLiteralEntry__Group__1__Impl rule__MapLiteralEntry__Group__2 ;
    public final void rule__MapLiteralEntry__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21023:1: ( rule__MapLiteralEntry__Group__1__Impl rule__MapLiteralEntry__Group__2 )
            // InternalOpenCypherParser.g:21024:2: rule__MapLiteralEntry__Group__1__Impl rule__MapLiteralEntry__Group__2
            {
            pushFollow(FOLLOW_43);
            rule__MapLiteralEntry__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__1"


    // $ANTLR start "rule__MapLiteralEntry__Group__1__Impl"
    // InternalOpenCypherParser.g:21031:1: rule__MapLiteralEntry__Group__1__Impl : ( Colon ) ;
    public final void rule__MapLiteralEntry__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21035:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:21036:1: ( Colon )
            {
            // InternalOpenCypherParser.g:21036:1: ( Colon )
            // InternalOpenCypherParser.g:21037:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__1__Impl"


    // $ANTLR start "rule__MapLiteralEntry__Group__2"
    // InternalOpenCypherParser.g:21046:1: rule__MapLiteralEntry__Group__2 : rule__MapLiteralEntry__Group__2__Impl ;
    public final void rule__MapLiteralEntry__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21050:1: ( rule__MapLiteralEntry__Group__2__Impl )
            // InternalOpenCypherParser.g:21051:2: rule__MapLiteralEntry__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__2"


    // $ANTLR start "rule__MapLiteralEntry__Group__2__Impl"
    // InternalOpenCypherParser.g:21057:1: rule__MapLiteralEntry__Group__2__Impl : ( ( rule__MapLiteralEntry__ValueAssignment_2 ) ) ;
    public final void rule__MapLiteralEntry__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21061:1: ( ( ( rule__MapLiteralEntry__ValueAssignment_2 ) ) )
            // InternalOpenCypherParser.g:21062:1: ( ( rule__MapLiteralEntry__ValueAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:21062:1: ( ( rule__MapLiteralEntry__ValueAssignment_2 ) )
            // InternalOpenCypherParser.g:21063:2: ( rule__MapLiteralEntry__ValueAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getValueAssignment_2()); 
            }
            // InternalOpenCypherParser.g:21064:2: ( rule__MapLiteralEntry__ValueAssignment_2 )
            // InternalOpenCypherParser.g:21064:3: rule__MapLiteralEntry__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__ValueAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getValueAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__2__Impl"


    // $ANTLR start "rule__LegacyParameter__Group__0"
    // InternalOpenCypherParser.g:21073:1: rule__LegacyParameter__Group__0 : rule__LegacyParameter__Group__0__Impl rule__LegacyParameter__Group__1 ;
    public final void rule__LegacyParameter__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21077:1: ( rule__LegacyParameter__Group__0__Impl rule__LegacyParameter__Group__1 )
            // InternalOpenCypherParser.g:21078:2: rule__LegacyParameter__Group__0__Impl rule__LegacyParameter__Group__1
            {
            pushFollow(FOLLOW_8);
            rule__LegacyParameter__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__0"


    // $ANTLR start "rule__LegacyParameter__Group__0__Impl"
    // InternalOpenCypherParser.g:21085:1: rule__LegacyParameter__Group__0__Impl : ( LeftCurlyBracket ) ;
    public final void rule__LegacyParameter__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21089:1: ( ( LeftCurlyBracket ) )
            // InternalOpenCypherParser.g:21090:1: ( LeftCurlyBracket )
            {
            // InternalOpenCypherParser.g:21090:1: ( LeftCurlyBracket )
            // InternalOpenCypherParser.g:21091:2: LeftCurlyBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterAccess().getLeftCurlyBracketKeyword_0()); 
            }
            match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterAccess().getLeftCurlyBracketKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__0__Impl"


    // $ANTLR start "rule__LegacyParameter__Group__1"
    // InternalOpenCypherParser.g:21100:1: rule__LegacyParameter__Group__1 : rule__LegacyParameter__Group__1__Impl rule__LegacyParameter__Group__2 ;
    public final void rule__LegacyParameter__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21104:1: ( rule__LegacyParameter__Group__1__Impl rule__LegacyParameter__Group__2 )
            // InternalOpenCypherParser.g:21105:2: rule__LegacyParameter__Group__1__Impl rule__LegacyParameter__Group__2
            {
            pushFollow(FOLLOW_138);
            rule__LegacyParameter__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__1"


    // $ANTLR start "rule__LegacyParameter__Group__1__Impl"
    // InternalOpenCypherParser.g:21112:1: rule__LegacyParameter__Group__1__Impl : ( ( rule__LegacyParameter__ParameterAssignment_1 ) ) ;
    public final void rule__LegacyParameter__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21116:1: ( ( ( rule__LegacyParameter__ParameterAssignment_1 ) ) )
            // InternalOpenCypherParser.g:21117:1: ( ( rule__LegacyParameter__ParameterAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:21117:1: ( ( rule__LegacyParameter__ParameterAssignment_1 ) )
            // InternalOpenCypherParser.g:21118:2: ( rule__LegacyParameter__ParameterAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterAccess().getParameterAssignment_1()); 
            }
            // InternalOpenCypherParser.g:21119:2: ( rule__LegacyParameter__ParameterAssignment_1 )
            // InternalOpenCypherParser.g:21119:3: rule__LegacyParameter__ParameterAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__ParameterAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterAccess().getParameterAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__1__Impl"


    // $ANTLR start "rule__LegacyParameter__Group__2"
    // InternalOpenCypherParser.g:21127:1: rule__LegacyParameter__Group__2 : rule__LegacyParameter__Group__2__Impl ;
    public final void rule__LegacyParameter__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21131:1: ( rule__LegacyParameter__Group__2__Impl )
            // InternalOpenCypherParser.g:21132:2: rule__LegacyParameter__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__2"


    // $ANTLR start "rule__LegacyParameter__Group__2__Impl"
    // InternalOpenCypherParser.g:21138:1: rule__LegacyParameter__Group__2__Impl : ( RightCurlyBracket ) ;
    public final void rule__LegacyParameter__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21142:1: ( ( RightCurlyBracket ) )
            // InternalOpenCypherParser.g:21143:1: ( RightCurlyBracket )
            {
            // InternalOpenCypherParser.g:21143:1: ( RightCurlyBracket )
            // InternalOpenCypherParser.g:21144:2: RightCurlyBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterAccess().getRightCurlyBracketKeyword_2()); 
            }
            match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__2__Impl"


    // $ANTLR start "rule__Parameter__Group__0"
    // InternalOpenCypherParser.g:21154:1: rule__Parameter__Group__0 : rule__Parameter__Group__0__Impl rule__Parameter__Group__1 ;
    public final void rule__Parameter__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21158:1: ( rule__Parameter__Group__0__Impl rule__Parameter__Group__1 )
            // InternalOpenCypherParser.g:21159:2: rule__Parameter__Group__0__Impl rule__Parameter__Group__1
            {
            pushFollow(FOLLOW_8);
            rule__Parameter__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__Group__0"


    // $ANTLR start "rule__Parameter__Group__0__Impl"
    // InternalOpenCypherParser.g:21166:1: rule__Parameter__Group__0__Impl : ( DollarSign ) ;
    public final void rule__Parameter__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21170:1: ( ( DollarSign ) )
            // InternalOpenCypherParser.g:21171:1: ( DollarSign )
            {
            // InternalOpenCypherParser.g:21171:1: ( DollarSign )
            // InternalOpenCypherParser.g:21172:2: DollarSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParameterAccess().getDollarSignKeyword_0()); 
            }
            match(input,DollarSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParameterAccess().getDollarSignKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__Group__0__Impl"


    // $ANTLR start "rule__Parameter__Group__1"
    // InternalOpenCypherParser.g:21181:1: rule__Parameter__Group__1 : rule__Parameter__Group__1__Impl ;
    public final void rule__Parameter__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21185:1: ( rule__Parameter__Group__1__Impl )
            // InternalOpenCypherParser.g:21186:2: rule__Parameter__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__Group__1"


    // $ANTLR start "rule__Parameter__Group__1__Impl"
    // InternalOpenCypherParser.g:21192:1: rule__Parameter__Group__1__Impl : ( ( rule__Parameter__ParameterAssignment_1 ) ) ;
    public final void rule__Parameter__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21196:1: ( ( ( rule__Parameter__ParameterAssignment_1 ) ) )
            // InternalOpenCypherParser.g:21197:1: ( ( rule__Parameter__ParameterAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:21197:1: ( ( rule__Parameter__ParameterAssignment_1 ) )
            // InternalOpenCypherParser.g:21198:2: ( rule__Parameter__ParameterAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParameterAccess().getParameterAssignment_1()); 
            }
            // InternalOpenCypherParser.g:21199:2: ( rule__Parameter__ParameterAssignment_1 )
            // InternalOpenCypherParser.g:21199:3: rule__Parameter__ParameterAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__ParameterAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getParameterAccess().getParameterAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__Group__1__Impl"


    // $ANTLR start "rule__PropertyExpression__Group__0"
    // InternalOpenCypherParser.g:21208:1: rule__PropertyExpression__Group__0 : rule__PropertyExpression__Group__0__Impl rule__PropertyExpression__Group__1 ;
    public final void rule__PropertyExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21212:1: ( rule__PropertyExpression__Group__0__Impl rule__PropertyExpression__Group__1 )
            // InternalOpenCypherParser.g:21213:2: rule__PropertyExpression__Group__0__Impl rule__PropertyExpression__Group__1
            {
            pushFollow(FOLLOW_116);
            rule__PropertyExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PropertyExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__Group__0"


    // $ANTLR start "rule__PropertyExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:21220:1: rule__PropertyExpression__Group__0__Impl : ( ruleAtom ) ;
    public final void rule__PropertyExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21224:1: ( ( ruleAtom ) )
            // InternalOpenCypherParser.g:21225:1: ( ruleAtom )
            {
            // InternalOpenCypherParser.g:21225:1: ( ruleAtom )
            // InternalOpenCypherParser.g:21226:2: ruleAtom
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getAtomParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAtom();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getAtomParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__Group__0__Impl"


    // $ANTLR start "rule__PropertyExpression__Group__1"
    // InternalOpenCypherParser.g:21235:1: rule__PropertyExpression__Group__1 : rule__PropertyExpression__Group__1__Impl ;
    public final void rule__PropertyExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21239:1: ( rule__PropertyExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:21240:2: rule__PropertyExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PropertyExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__Group__1"


    // $ANTLR start "rule__PropertyExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:21246:1: rule__PropertyExpression__Group__1__Impl : ( ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) ) ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* ) ) ;
    public final void rule__PropertyExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21250:1: ( ( ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) ) ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* ) ) )
            // InternalOpenCypherParser.g:21251:1: ( ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) ) ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* ) )
            {
            // InternalOpenCypherParser.g:21251:1: ( ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) ) ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* ) )
            // InternalOpenCypherParser.g:21252:2: ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) ) ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* )
            {
            // InternalOpenCypherParser.g:21252:2: ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) )
            // InternalOpenCypherParser.g:21253:3: ( rule__PropertyExpression__PropertyLookupsAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:21254:3: ( rule__PropertyExpression__PropertyLookupsAssignment_1 )
            // InternalOpenCypherParser.g:21254:4: rule__PropertyExpression__PropertyLookupsAssignment_1
            {
            pushFollow(FOLLOW_117);
            rule__PropertyExpression__PropertyLookupsAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); 
            }

            }

            // InternalOpenCypherParser.g:21257:2: ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* )
            // InternalOpenCypherParser.g:21258:3: ( rule__PropertyExpression__PropertyLookupsAssignment_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:21259:3: ( rule__PropertyExpression__PropertyLookupsAssignment_1 )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==FullStop) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // InternalOpenCypherParser.g:21259:4: rule__PropertyExpression__PropertyLookupsAssignment_1
            	    {
            	    pushFollow(FOLLOW_117);
            	    rule__PropertyExpression__PropertyLookupsAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__Group__1__Impl"


    // $ANTLR start "rule__DecimalInteger__Group__0"
    // InternalOpenCypherParser.g:21269:1: rule__DecimalInteger__Group__0 : rule__DecimalInteger__Group__0__Impl rule__DecimalInteger__Group__1 ;
    public final void rule__DecimalInteger__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21273:1: ( rule__DecimalInteger__Group__0__Impl rule__DecimalInteger__Group__1 )
            // InternalOpenCypherParser.g:21274:2: rule__DecimalInteger__Group__0__Impl rule__DecimalInteger__Group__1
            {
            pushFollow(FOLLOW_17);
            rule__DecimalInteger__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DecimalInteger__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DecimalInteger__Group__0"


    // $ANTLR start "rule__DecimalInteger__Group__0__Impl"
    // InternalOpenCypherParser.g:21281:1: rule__DecimalInteger__Group__0__Impl : ( () ) ;
    public final void rule__DecimalInteger__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21285:1: ( ( () ) )
            // InternalOpenCypherParser.g:21286:1: ( () )
            {
            // InternalOpenCypherParser.g:21286:1: ( () )
            // InternalOpenCypherParser.g:21287:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDecimalIntegerAccess().getDecimalIntegerAction_0()); 
            }
            // InternalOpenCypherParser.g:21288:2: ()
            // InternalOpenCypherParser.g:21288:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDecimalIntegerAccess().getDecimalIntegerAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DecimalInteger__Group__0__Impl"


    // $ANTLR start "rule__DecimalInteger__Group__1"
    // InternalOpenCypherParser.g:21296:1: rule__DecimalInteger__Group__1 : rule__DecimalInteger__Group__1__Impl ;
    public final void rule__DecimalInteger__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21300:1: ( rule__DecimalInteger__Group__1__Impl )
            // InternalOpenCypherParser.g:21301:2: rule__DecimalInteger__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DecimalInteger__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DecimalInteger__Group__1"


    // $ANTLR start "rule__DecimalInteger__Group__1__Impl"
    // InternalOpenCypherParser.g:21307:1: rule__DecimalInteger__Group__1__Impl : ( ( rule__DecimalInteger__ValueAssignment_1 ) ) ;
    public final void rule__DecimalInteger__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21311:1: ( ( ( rule__DecimalInteger__ValueAssignment_1 ) ) )
            // InternalOpenCypherParser.g:21312:1: ( ( rule__DecimalInteger__ValueAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:21312:1: ( ( rule__DecimalInteger__ValueAssignment_1 ) )
            // InternalOpenCypherParser.g:21313:2: ( rule__DecimalInteger__ValueAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDecimalIntegerAccess().getValueAssignment_1()); 
            }
            // InternalOpenCypherParser.g:21314:2: ( rule__DecimalInteger__ValueAssignment_1 )
            // InternalOpenCypherParser.g:21314:3: rule__DecimalInteger__ValueAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DecimalInteger__ValueAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDecimalIntegerAccess().getValueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DecimalInteger__Group__1__Impl"


    // $ANTLR start "rule__Number__Group_1__0"
    // InternalOpenCypherParser.g:21323:1: rule__Number__Group_1__0 : rule__Number__Group_1__0__Impl rule__Number__Group_1__1 ;
    public final void rule__Number__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21327:1: ( rule__Number__Group_1__0__Impl rule__Number__Group_1__1 )
            // InternalOpenCypherParser.g:21328:2: rule__Number__Group_1__0__Impl rule__Number__Group_1__1
            {
            pushFollow(FOLLOW_116);
            rule__Number__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Number__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1__0"


    // $ANTLR start "rule__Number__Group_1__0__Impl"
    // InternalOpenCypherParser.g:21335:1: rule__Number__Group_1__0__Impl : ( ( rule__Number__Alternatives_1_0 ) ) ;
    public final void rule__Number__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21339:1: ( ( ( rule__Number__Alternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:21340:1: ( ( rule__Number__Alternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:21340:1: ( ( rule__Number__Alternatives_1_0 ) )
            // InternalOpenCypherParser.g:21341:2: ( rule__Number__Alternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:21342:2: ( rule__Number__Alternatives_1_0 )
            // InternalOpenCypherParser.g:21342:3: rule__Number__Alternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1__0__Impl"


    // $ANTLR start "rule__Number__Group_1__1"
    // InternalOpenCypherParser.g:21350:1: rule__Number__Group_1__1 : rule__Number__Group_1__1__Impl ;
    public final void rule__Number__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21354:1: ( rule__Number__Group_1__1__Impl )
            // InternalOpenCypherParser.g:21355:2: rule__Number__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Number__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1__1"


    // $ANTLR start "rule__Number__Group_1__1__Impl"
    // InternalOpenCypherParser.g:21361:1: rule__Number__Group_1__1__Impl : ( ( rule__Number__Group_1_1__0 )? ) ;
    public final void rule__Number__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21365:1: ( ( ( rule__Number__Group_1_1__0 )? ) )
            // InternalOpenCypherParser.g:21366:1: ( ( rule__Number__Group_1_1__0 )? )
            {
            // InternalOpenCypherParser.g:21366:1: ( ( rule__Number__Group_1_1__0 )? )
            // InternalOpenCypherParser.g:21367:2: ( rule__Number__Group_1_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getGroup_1_1()); 
            }
            // InternalOpenCypherParser.g:21368:2: ( rule__Number__Group_1_1__0 )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==FullStop) ) {
                int LA150_1 = input.LA(2);

                if ( ((LA150_1>=RULE_INT && LA150_1<=RULE_DECIMAL)) ) {
                    alt150=1;
                }
            }
            switch (alt150) {
                case 1 :
                    // InternalOpenCypherParser.g:21368:3: rule__Number__Group_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Number__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getGroup_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1__1__Impl"


    // $ANTLR start "rule__Number__Group_1_1__0"
    // InternalOpenCypherParser.g:21377:1: rule__Number__Group_1_1__0 : rule__Number__Group_1_1__0__Impl rule__Number__Group_1_1__1 ;
    public final void rule__Number__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21381:1: ( rule__Number__Group_1_1__0__Impl rule__Number__Group_1_1__1 )
            // InternalOpenCypherParser.g:21382:2: rule__Number__Group_1_1__0__Impl rule__Number__Group_1_1__1
            {
            pushFollow(FOLLOW_139);
            rule__Number__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Number__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1_1__0"


    // $ANTLR start "rule__Number__Group_1_1__0__Impl"
    // InternalOpenCypherParser.g:21389:1: rule__Number__Group_1_1__0__Impl : ( FullStop ) ;
    public final void rule__Number__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21393:1: ( ( FullStop ) )
            // InternalOpenCypherParser.g:21394:1: ( FullStop )
            {
            // InternalOpenCypherParser.g:21394:1: ( FullStop )
            // InternalOpenCypherParser.g:21395:2: FullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
            }
            match(input,FullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1_1__0__Impl"


    // $ANTLR start "rule__Number__Group_1_1__1"
    // InternalOpenCypherParser.g:21404:1: rule__Number__Group_1_1__1 : rule__Number__Group_1_1__1__Impl ;
    public final void rule__Number__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21408:1: ( rule__Number__Group_1_1__1__Impl )
            // InternalOpenCypherParser.g:21409:2: rule__Number__Group_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Number__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1_1__1"


    // $ANTLR start "rule__Number__Group_1_1__1__Impl"
    // InternalOpenCypherParser.g:21415:1: rule__Number__Group_1_1__1__Impl : ( ( rule__Number__Alternatives_1_1_1 ) ) ;
    public final void rule__Number__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21419:1: ( ( ( rule__Number__Alternatives_1_1_1 ) ) )
            // InternalOpenCypherParser.g:21420:1: ( ( rule__Number__Alternatives_1_1_1 ) )
            {
            // InternalOpenCypherParser.g:21420:1: ( ( rule__Number__Alternatives_1_1_1 ) )
            // InternalOpenCypherParser.g:21421:2: ( rule__Number__Alternatives_1_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); 
            }
            // InternalOpenCypherParser.g:21422:2: ( rule__Number__Alternatives_1_1_1 )
            // InternalOpenCypherParser.g:21422:3: rule__Number__Alternatives_1_1_1
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1_1__1__Impl"


    // $ANTLR start "rule__QueryOptions__UnorderedGroup_1"
    // InternalOpenCypherParser.g:21431:1: rule__QueryOptions__UnorderedGroup_1 : ( rule__QueryOptions__UnorderedGroup_1__0 )? ;
    public final void rule__QueryOptions__UnorderedGroup_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
        	
        try {
            // InternalOpenCypherParser.g:21436:1: ( ( rule__QueryOptions__UnorderedGroup_1__0 )? )
            // InternalOpenCypherParser.g:21437:2: ( rule__QueryOptions__UnorderedGroup_1__0 )?
            {
            // InternalOpenCypherParser.g:21437:2: ( rule__QueryOptions__UnorderedGroup_1__0 )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( LA151_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                alt151=1;
            }
            else if ( LA151_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                alt151=1;
            }
            else if ( LA151_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // InternalOpenCypherParser.g:0:0: rule__QueryOptions__UnorderedGroup_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__QueryOptions__UnorderedGroup_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__UnorderedGroup_1"


    // $ANTLR start "rule__QueryOptions__UnorderedGroup_1__Impl"
    // InternalOpenCypherParser.g:21445:1: rule__QueryOptions__UnorderedGroup_1__Impl : ( ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) ) | ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) ) | ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) ) ) ;
    public final void rule__QueryOptions__UnorderedGroup_1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalOpenCypherParser.g:21450:1: ( ( ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) ) | ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) ) | ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) ) ) )
            // InternalOpenCypherParser.g:21451:3: ( ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) ) | ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) ) | ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) ) )
            {
            // InternalOpenCypherParser.g:21451:3: ( ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) ) | ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) ) | ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) ) )
            int alt153=3;
            int LA153_0 = input.LA(1);

            if ( LA153_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                alt153=1;
            }
            else if ( LA153_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                alt153=2;
            }
            else if ( LA153_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                alt153=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    // InternalOpenCypherParser.g:21452:3: ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) )
                    {
                    // InternalOpenCypherParser.g:21452:3: ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) )
                    // InternalOpenCypherParser.g:21453:4: {...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__QueryOptions__UnorderedGroup_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)");
                    }
                    // InternalOpenCypherParser.g:21453:108: ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) )
                    // InternalOpenCypherParser.g:21454:5: ( ( rule__QueryOptions__ExplainAssignment_1_0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
                    selected = true;
                    // InternalOpenCypherParser.g:21460:5: ( ( rule__QueryOptions__ExplainAssignment_1_0 ) )
                    // InternalOpenCypherParser.g:21461:6: ( rule__QueryOptions__ExplainAssignment_1_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryOptionsAccess().getExplainAssignment_1_0()); 
                    }
                    // InternalOpenCypherParser.g:21462:6: ( rule__QueryOptions__ExplainAssignment_1_0 )
                    // InternalOpenCypherParser.g:21462:7: rule__QueryOptions__ExplainAssignment_1_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__QueryOptions__ExplainAssignment_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryOptionsAccess().getExplainAssignment_1_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:21467:3: ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) )
                    {
                    // InternalOpenCypherParser.g:21467:3: ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) )
                    // InternalOpenCypherParser.g:21468:4: {...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__QueryOptions__UnorderedGroup_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)");
                    }
                    // InternalOpenCypherParser.g:21468:108: ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) )
                    // InternalOpenCypherParser.g:21469:5: ( ( rule__QueryOptions__ProfileAssignment_1_1 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
                    selected = true;
                    // InternalOpenCypherParser.g:21475:5: ( ( rule__QueryOptions__ProfileAssignment_1_1 ) )
                    // InternalOpenCypherParser.g:21476:6: ( rule__QueryOptions__ProfileAssignment_1_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryOptionsAccess().getProfileAssignment_1_1()); 
                    }
                    // InternalOpenCypherParser.g:21477:6: ( rule__QueryOptions__ProfileAssignment_1_1 )
                    // InternalOpenCypherParser.g:21477:7: rule__QueryOptions__ProfileAssignment_1_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__QueryOptions__ProfileAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryOptionsAccess().getProfileAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:21482:3: ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) )
                    {
                    // InternalOpenCypherParser.g:21482:3: ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) )
                    // InternalOpenCypherParser.g:21483:4: {...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__QueryOptions__UnorderedGroup_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2)");
                    }
                    // InternalOpenCypherParser.g:21483:108: ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) )
                    // InternalOpenCypherParser.g:21484:5: ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2);
                    selected = true;
                    // InternalOpenCypherParser.g:21490:5: ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) )
                    // InternalOpenCypherParser.g:21491:6: ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* )
                    {
                    // InternalOpenCypherParser.g:21491:6: ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) )
                    // InternalOpenCypherParser.g:21492:7: ( rule__QueryOptions__CypherOptionAssignment_1_2 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); 
                    }
                    // InternalOpenCypherParser.g:21493:7: ( rule__QueryOptions__CypherOptionAssignment_1_2 )
                    // InternalOpenCypherParser.g:21493:8: rule__QueryOptions__CypherOptionAssignment_1_2
                    {
                    pushFollow(FOLLOW_140);
                    rule__QueryOptions__CypherOptionAssignment_1_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); 
                    }

                    }

                    // InternalOpenCypherParser.g:21496:6: ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* )
                    // InternalOpenCypherParser.g:21497:7: ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )*
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); 
                    }
                    // InternalOpenCypherParser.g:21498:7: ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )*
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==CYPHER) ) {
                            int LA152_2 = input.LA(2);

                            if ( (synpred281_InternalOpenCypherParser()) ) {
                                alt152=1;
                            }


                        }


                        switch (alt152) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:21498:8: ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2
                    	    {
                    	    pushFollow(FOLLOW_140);
                    	    rule__QueryOptions__CypherOptionAssignment_1_2();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__UnorderedGroup_1__Impl"


    // $ANTLR start "rule__QueryOptions__UnorderedGroup_1__0"
    // InternalOpenCypherParser.g:21512:1: rule__QueryOptions__UnorderedGroup_1__0 : rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__1 )? ;
    public final void rule__QueryOptions__UnorderedGroup_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21516:1: ( rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__1 )? )
            // InternalOpenCypherParser.g:21517:2: rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__1 )?
            {
            pushFollow(FOLLOW_140);
            rule__QueryOptions__UnorderedGroup_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalOpenCypherParser.g:21518:2: ( rule__QueryOptions__UnorderedGroup_1__1 )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( LA154_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                alt154=1;
            }
            else if ( LA154_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                alt154=1;
            }
            else if ( LA154_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // InternalOpenCypherParser.g:0:0: rule__QueryOptions__UnorderedGroup_1__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__QueryOptions__UnorderedGroup_1__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__UnorderedGroup_1__0"


    // $ANTLR start "rule__QueryOptions__UnorderedGroup_1__1"
    // InternalOpenCypherParser.g:21524:1: rule__QueryOptions__UnorderedGroup_1__1 : rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__2 )? ;
    public final void rule__QueryOptions__UnorderedGroup_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21528:1: ( rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__2 )? )
            // InternalOpenCypherParser.g:21529:2: rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__2 )?
            {
            pushFollow(FOLLOW_140);
            rule__QueryOptions__UnorderedGroup_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalOpenCypherParser.g:21530:2: ( rule__QueryOptions__UnorderedGroup_1__2 )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( LA155_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                alt155=1;
            }
            else if ( LA155_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                alt155=1;
            }
            else if ( LA155_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // InternalOpenCypherParser.g:0:0: rule__QueryOptions__UnorderedGroup_1__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__QueryOptions__UnorderedGroup_1__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__UnorderedGroup_1__1"


    // $ANTLR start "rule__QueryOptions__UnorderedGroup_1__2"
    // InternalOpenCypherParser.g:21536:1: rule__QueryOptions__UnorderedGroup_1__2 : rule__QueryOptions__UnorderedGroup_1__Impl ;
    public final void rule__QueryOptions__UnorderedGroup_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21540:1: ( rule__QueryOptions__UnorderedGroup_1__Impl )
            // InternalOpenCypherParser.g:21541:2: rule__QueryOptions__UnorderedGroup_1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__QueryOptions__UnorderedGroup_1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__UnorderedGroup_1__2"


    // $ANTLR start "rule__Cypher__QueryOptionsAssignment_1"
    // InternalOpenCypherParser.g:21548:1: rule__Cypher__QueryOptionsAssignment_1 : ( ruleQueryOptions ) ;
    public final void rule__Cypher__QueryOptionsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21552:1: ( ( ruleQueryOptions ) )
            // InternalOpenCypherParser.g:21553:2: ( ruleQueryOptions )
            {
            // InternalOpenCypherParser.g:21553:2: ( ruleQueryOptions )
            // InternalOpenCypherParser.g:21554:3: ruleQueryOptions
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getQueryOptionsQueryOptionsParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleQueryOptions();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getQueryOptionsQueryOptionsParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__QueryOptionsAssignment_1"


    // $ANTLR start "rule__Cypher__StatementsAssignment_2"
    // InternalOpenCypherParser.g:21563:1: rule__Cypher__StatementsAssignment_2 : ( ruleStatement ) ;
    public final void rule__Cypher__StatementsAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21567:1: ( ( ruleStatement ) )
            // InternalOpenCypherParser.g:21568:2: ( ruleStatement )
            {
            // InternalOpenCypherParser.g:21568:2: ( ruleStatement )
            // InternalOpenCypherParser.g:21569:3: ruleStatement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getStatementsStatementParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getStatementsStatementParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__StatementsAssignment_2"


    // $ANTLR start "rule__QueryOptions__ExplainAssignment_1_0"
    // InternalOpenCypherParser.g:21578:1: rule__QueryOptions__ExplainAssignment_1_0 : ( ( EXPLAIN ) ) ;
    public final void rule__QueryOptions__ExplainAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21582:1: ( ( ( EXPLAIN ) ) )
            // InternalOpenCypherParser.g:21583:2: ( ( EXPLAIN ) )
            {
            // InternalOpenCypherParser.g:21583:2: ( ( EXPLAIN ) )
            // InternalOpenCypherParser.g:21584:3: ( EXPLAIN )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); 
            }
            // InternalOpenCypherParser.g:21585:3: ( EXPLAIN )
            // InternalOpenCypherParser.g:21586:4: EXPLAIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); 
            }
            match(input,EXPLAIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__ExplainAssignment_1_0"


    // $ANTLR start "rule__QueryOptions__ProfileAssignment_1_1"
    // InternalOpenCypherParser.g:21597:1: rule__QueryOptions__ProfileAssignment_1_1 : ( ( PROFILE ) ) ;
    public final void rule__QueryOptions__ProfileAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21601:1: ( ( ( PROFILE ) ) )
            // InternalOpenCypherParser.g:21602:2: ( ( PROFILE ) )
            {
            // InternalOpenCypherParser.g:21602:2: ( ( PROFILE ) )
            // InternalOpenCypherParser.g:21603:3: ( PROFILE )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); 
            }
            // InternalOpenCypherParser.g:21604:3: ( PROFILE )
            // InternalOpenCypherParser.g:21605:4: PROFILE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); 
            }
            match(input,PROFILE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__ProfileAssignment_1_1"


    // $ANTLR start "rule__QueryOptions__CypherOptionAssignment_1_2"
    // InternalOpenCypherParser.g:21616:1: rule__QueryOptions__CypherOptionAssignment_1_2 : ( ruleCypherOption ) ;
    public final void rule__QueryOptions__CypherOptionAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21620:1: ( ( ruleCypherOption ) )
            // InternalOpenCypherParser.g:21621:2: ( ruleCypherOption )
            {
            // InternalOpenCypherParser.g:21621:2: ( ruleCypherOption )
            // InternalOpenCypherParser.g:21622:3: ruleCypherOption
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCypherOption();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__CypherOptionAssignment_1_2"


    // $ANTLR start "rule__CypherOption__VersionNumberAssignment_2"
    // InternalOpenCypherParser.g:21631:1: rule__CypherOption__VersionNumberAssignment_2 : ( ruleVersionNumber ) ;
    public final void rule__CypherOption__VersionNumberAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21635:1: ( ( ruleVersionNumber ) )
            // InternalOpenCypherParser.g:21636:2: ( ruleVersionNumber )
            {
            // InternalOpenCypherParser.g:21636:2: ( ruleVersionNumber )
            // InternalOpenCypherParser.g:21637:3: ruleVersionNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getVersionNumberVersionNumberParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVersionNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getVersionNumberVersionNumberParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__VersionNumberAssignment_2"


    // $ANTLR start "rule__CypherOption__ConfigurationOptionAssignment_3"
    // InternalOpenCypherParser.g:21646:1: rule__CypherOption__ConfigurationOptionAssignment_3 : ( ruleConfigurationOption ) ;
    public final void rule__CypherOption__ConfigurationOptionAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21650:1: ( ( ruleConfigurationOption ) )
            // InternalOpenCypherParser.g:21651:2: ( ruleConfigurationOption )
            {
            // InternalOpenCypherParser.g:21651:2: ( ruleConfigurationOption )
            // InternalOpenCypherParser.g:21652:3: ruleConfigurationOption
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getConfigurationOptionConfigurationOptionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleConfigurationOption();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getConfigurationOptionConfigurationOptionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__ConfigurationOptionAssignment_3"


    // $ANTLR start "rule__VersionNumber__VersionNumberAssignment"
    // InternalOpenCypherParser.g:21661:1: rule__VersionNumber__VersionNumberAssignment : ( ruleNumber ) ;
    public final void rule__VersionNumber__VersionNumberAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21665:1: ( ( ruleNumber ) )
            // InternalOpenCypherParser.g:21666:2: ( ruleNumber )
            {
            // InternalOpenCypherParser.g:21666:2: ( ruleNumber )
            // InternalOpenCypherParser.g:21667:3: ruleNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVersionNumberAccess().getVersionNumberNumberParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getVersionNumberAccess().getVersionNumberNumberParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VersionNumber__VersionNumberAssignment"


    // $ANTLR start "rule__ConfigurationOption__KeyAssignment_0"
    // InternalOpenCypherParser.g:21676:1: rule__ConfigurationOption__KeyAssignment_0 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__ConfigurationOption__KeyAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21680:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:21681:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:21681:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:21682:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getKeySYMBOLIC_NAME_XParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getKeySYMBOLIC_NAME_XParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__KeyAssignment_0"


    // $ANTLR start "rule__ConfigurationOption__ValueAssignment_2"
    // InternalOpenCypherParser.g:21691:1: rule__ConfigurationOption__ValueAssignment_2 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__ConfigurationOption__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21695:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:21696:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:21696:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:21697:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getValueSYMBOLIC_NAME_XParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getValueSYMBOLIC_NAME_XParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__ValueAssignment_2"


    // $ANTLR start "rule__RegularQuery__UnionAssignment_1_1"
    // InternalOpenCypherParser.g:21706:1: rule__RegularQuery__UnionAssignment_1_1 : ( ruleUnion ) ;
    public final void rule__RegularQuery__UnionAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21710:1: ( ( ruleUnion ) )
            // InternalOpenCypherParser.g:21711:2: ( ruleUnion )
            {
            // InternalOpenCypherParser.g:21711:2: ( ruleUnion )
            // InternalOpenCypherParser.g:21712:3: ruleUnion
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getUnionUnionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUnion();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getUnionUnionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__UnionAssignment_1_1"


    // $ANTLR start "rule__BulkImportQuery__PeriodicCommitHintAssignment_0"
    // InternalOpenCypherParser.g:21721:1: rule__BulkImportQuery__PeriodicCommitHintAssignment_0 : ( rulePeriodicCommitHint ) ;
    public final void rule__BulkImportQuery__PeriodicCommitHintAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21725:1: ( ( rulePeriodicCommitHint ) )
            // InternalOpenCypherParser.g:21726:2: ( rulePeriodicCommitHint )
            {
            // InternalOpenCypherParser.g:21726:2: ( rulePeriodicCommitHint )
            // InternalOpenCypherParser.g:21727:3: rulePeriodicCommitHint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePeriodicCommitHint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__PeriodicCommitHintAssignment_0"


    // $ANTLR start "rule__BulkImportQuery__LoadCSVQueryAssignment_1"
    // InternalOpenCypherParser.g:21736:1: rule__BulkImportQuery__LoadCSVQueryAssignment_1 : ( ruleLoadCSVQuery ) ;
    public final void rule__BulkImportQuery__LoadCSVQueryAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21740:1: ( ( ruleLoadCSVQuery ) )
            // InternalOpenCypherParser.g:21741:2: ( ruleLoadCSVQuery )
            {
            // InternalOpenCypherParser.g:21741:2: ( ruleLoadCSVQuery )
            // InternalOpenCypherParser.g:21742:3: ruleLoadCSVQuery
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryLoadCSVQueryParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLoadCSVQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryLoadCSVQueryParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__LoadCSVQueryAssignment_1"


    // $ANTLR start "rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4"
    // InternalOpenCypherParser.g:21751:1: rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 : ( ruleDecimalInteger ) ;
    public final void rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21755:1: ( ( ruleDecimalInteger ) )
            // InternalOpenCypherParser.g:21756:2: ( ruleDecimalInteger )
            {
            // InternalOpenCypherParser.g:21756:2: ( ruleDecimalInteger )
            // InternalOpenCypherParser.g:21757:3: ruleDecimalInteger
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4"


    // $ANTLR start "rule__LoadCSVQuery__LoadCSVAssignment_0"
    // InternalOpenCypherParser.g:21766:1: rule__LoadCSVQuery__LoadCSVAssignment_0 : ( ruleLoadCSV ) ;
    public final void rule__LoadCSVQuery__LoadCSVAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21770:1: ( ( ruleLoadCSV ) )
            // InternalOpenCypherParser.g:21771:2: ( ruleLoadCSV )
            {
            // InternalOpenCypherParser.g:21771:2: ( ruleLoadCSV )
            // InternalOpenCypherParser.g:21772:3: ruleLoadCSV
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryAccess().getLoadCSVLoadCSVParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLoadCSV();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryAccess().getLoadCSVLoadCSVParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__LoadCSVAssignment_0"


    // $ANTLR start "rule__LoadCSVQuery__SingleQueryAssignment_1"
    // InternalOpenCypherParser.g:21781:1: rule__LoadCSVQuery__SingleQueryAssignment_1 : ( ruleSingleQuery ) ;
    public final void rule__LoadCSVQuery__SingleQueryAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21785:1: ( ( ruleSingleQuery ) )
            // InternalOpenCypherParser.g:21786:2: ( ruleSingleQuery )
            {
            // InternalOpenCypherParser.g:21786:2: ( ruleSingleQuery )
            // InternalOpenCypherParser.g:21787:3: ruleSingleQuery
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryAccess().getSingleQuerySingleQueryParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSingleQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryAccess().getSingleQuerySingleQueryParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__SingleQueryAssignment_1"


    // $ANTLR start "rule__Union__AllAssignment_1"
    // InternalOpenCypherParser.g:21796:1: rule__Union__AllAssignment_1 : ( ( ALL ) ) ;
    public final void rule__Union__AllAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21800:1: ( ( ( ALL ) ) )
            // InternalOpenCypherParser.g:21801:2: ( ( ALL ) )
            {
            // InternalOpenCypherParser.g:21801:2: ( ( ALL ) )
            // InternalOpenCypherParser.g:21802:3: ( ALL )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); 
            }
            // InternalOpenCypherParser.g:21803:3: ( ALL )
            // InternalOpenCypherParser.g:21804:4: ALL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); 
            }
            match(input,ALL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__AllAssignment_1"


    // $ANTLR start "rule__Union__SingleQueryAssignment_2"
    // InternalOpenCypherParser.g:21815:1: rule__Union__SingleQueryAssignment_2 : ( ruleSingleQuery ) ;
    public final void rule__Union__SingleQueryAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21819:1: ( ( ruleSingleQuery ) )
            // InternalOpenCypherParser.g:21820:2: ( ruleSingleQuery )
            {
            // InternalOpenCypherParser.g:21820:2: ( ruleSingleQuery )
            // InternalOpenCypherParser.g:21821:3: ruleSingleQuery
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getSingleQuerySingleQueryParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSingleQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getSingleQuerySingleQueryParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__SingleQueryAssignment_2"


    // $ANTLR start "rule__SinglePartQuery__ReadingClausesAssignment_0_0"
    // InternalOpenCypherParser.g:21830:1: rule__SinglePartQuery__ReadingClausesAssignment_0_0 : ( ruleReadingClause ) ;
    public final void rule__SinglePartQuery__ReadingClausesAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21834:1: ( ( ruleReadingClause ) )
            // InternalOpenCypherParser.g:21835:2: ( ruleReadingClause )
            {
            // InternalOpenCypherParser.g:21835:2: ( ruleReadingClause )
            // InternalOpenCypherParser.g:21836:3: ruleReadingClause
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReadingClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__ReadingClausesAssignment_0_0"


    // $ANTLR start "rule__SinglePartQuery__ReturnAssignment_0_1"
    // InternalOpenCypherParser.g:21845:1: rule__SinglePartQuery__ReturnAssignment_0_1 : ( ruleReturn ) ;
    public final void rule__SinglePartQuery__ReturnAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21849:1: ( ( ruleReturn ) )
            // InternalOpenCypherParser.g:21850:2: ( ruleReturn )
            {
            // InternalOpenCypherParser.g:21850:2: ( ruleReturn )
            // InternalOpenCypherParser.g:21851:3: ruleReturn
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturn();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__ReturnAssignment_0_1"


    // $ANTLR start "rule__SinglePartQuery__ReadingClausesAssignment_1_0"
    // InternalOpenCypherParser.g:21860:1: rule__SinglePartQuery__ReadingClausesAssignment_1_0 : ( ruleReadingClause ) ;
    public final void rule__SinglePartQuery__ReadingClausesAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21864:1: ( ( ruleReadingClause ) )
            // InternalOpenCypherParser.g:21865:2: ( ruleReadingClause )
            {
            // InternalOpenCypherParser.g:21865:2: ( ruleReadingClause )
            // InternalOpenCypherParser.g:21866:3: ruleReadingClause
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReadingClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getReadingClausesReadingClauseParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__ReadingClausesAssignment_1_0"


    // $ANTLR start "rule__SinglePartQuery__UpdatingClausesAssignment_1_1"
    // InternalOpenCypherParser.g:21875:1: rule__SinglePartQuery__UpdatingClausesAssignment_1_1 : ( ruleUpdatingClause ) ;
    public final void rule__SinglePartQuery__UpdatingClausesAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21879:1: ( ( ruleUpdatingClause ) )
            // InternalOpenCypherParser.g:21880:2: ( ruleUpdatingClause )
            {
            // InternalOpenCypherParser.g:21880:2: ( ruleUpdatingClause )
            // InternalOpenCypherParser.g:21881:3: ruleUpdatingClause
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUpdatingClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__UpdatingClausesAssignment_1_1"


    // $ANTLR start "rule__SinglePartQuery__ReturnAssignment_1_2"
    // InternalOpenCypherParser.g:21890:1: rule__SinglePartQuery__ReturnAssignment_1_2 : ( ruleReturn ) ;
    public final void rule__SinglePartQuery__ReturnAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21894:1: ( ( ruleReturn ) )
            // InternalOpenCypherParser.g:21895:2: ( ruleReturn )
            {
            // InternalOpenCypherParser.g:21895:2: ( ruleReturn )
            // InternalOpenCypherParser.g:21896:3: ruleReturn
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturn();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSinglePartQueryAccess().getReturnReturnParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SinglePartQuery__ReturnAssignment_1_2"


    // $ANTLR start "rule__MultiPartQuery__SubQueriesAssignment_0"
    // InternalOpenCypherParser.g:21905:1: rule__MultiPartQuery__SubQueriesAssignment_0 : ( ruleMultiPartSubQuery ) ;
    public final void rule__MultiPartQuery__SubQueriesAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21909:1: ( ( ruleMultiPartSubQuery ) )
            // InternalOpenCypherParser.g:21910:2: ( ruleMultiPartSubQuery )
            {
            // InternalOpenCypherParser.g:21910:2: ( ruleMultiPartSubQuery )
            // InternalOpenCypherParser.g:21911:3: ruleMultiPartSubQuery
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartQueryAccess().getSubQueriesMultiPartSubQueryParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMultiPartSubQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartQueryAccess().getSubQueriesMultiPartSubQueryParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartQuery__SubQueriesAssignment_0"


    // $ANTLR start "rule__MultiPartQuery__SinglePartQueryAssignment_1"
    // InternalOpenCypherParser.g:21920:1: rule__MultiPartQuery__SinglePartQueryAssignment_1 : ( ruleSinglePartQuery ) ;
    public final void rule__MultiPartQuery__SinglePartQueryAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21924:1: ( ( ruleSinglePartQuery ) )
            // InternalOpenCypherParser.g:21925:2: ( ruleSinglePartQuery )
            {
            // InternalOpenCypherParser.g:21925:2: ( ruleSinglePartQuery )
            // InternalOpenCypherParser.g:21926:3: ruleSinglePartQuery
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartQueryAccess().getSinglePartQuerySinglePartQueryParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSinglePartQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartQueryAccess().getSinglePartQuerySinglePartQueryParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartQuery__SinglePartQueryAssignment_1"


    // $ANTLR start "rule__MultiPartSubQuery__ReadingClausesAssignment_0"
    // InternalOpenCypherParser.g:21935:1: rule__MultiPartSubQuery__ReadingClausesAssignment_0 : ( ruleReadingClause ) ;
    public final void rule__MultiPartSubQuery__ReadingClausesAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21939:1: ( ( ruleReadingClause ) )
            // InternalOpenCypherParser.g:21940:2: ( ruleReadingClause )
            {
            // InternalOpenCypherParser.g:21940:2: ( ruleReadingClause )
            // InternalOpenCypherParser.g:21941:3: ruleReadingClause
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartSubQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReadingClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartSubQueryAccess().getReadingClausesReadingClauseParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartSubQuery__ReadingClausesAssignment_0"


    // $ANTLR start "rule__MultiPartSubQuery__UpdatingClausesAssignment_1"
    // InternalOpenCypherParser.g:21950:1: rule__MultiPartSubQuery__UpdatingClausesAssignment_1 : ( ruleUpdatingClause ) ;
    public final void rule__MultiPartSubQuery__UpdatingClausesAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21954:1: ( ( ruleUpdatingClause ) )
            // InternalOpenCypherParser.g:21955:2: ( ruleUpdatingClause )
            {
            // InternalOpenCypherParser.g:21955:2: ( ruleUpdatingClause )
            // InternalOpenCypherParser.g:21956:3: ruleUpdatingClause
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartSubQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUpdatingClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartSubQueryAccess().getUpdatingClausesUpdatingClauseParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartSubQuery__UpdatingClausesAssignment_1"


    // $ANTLR start "rule__MultiPartSubQuery__WithPartAssignment_2"
    // InternalOpenCypherParser.g:21965:1: rule__MultiPartSubQuery__WithPartAssignment_2 : ( ruleWith ) ;
    public final void rule__MultiPartSubQuery__WithPartAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21969:1: ( ( ruleWith ) )
            // InternalOpenCypherParser.g:21970:2: ( ruleWith )
            {
            // InternalOpenCypherParser.g:21970:2: ( ruleWith )
            // InternalOpenCypherParser.g:21971:3: ruleWith
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiPartSubQueryAccess().getWithPartWithParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWith();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiPartSubQueryAccess().getWithPartWithParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiPartSubQuery__WithPartAssignment_2"


    // $ANTLR start "rule__CreateIndex__IndexAssignment_1"
    // InternalOpenCypherParser.g:21980:1: rule__CreateIndex__IndexAssignment_1 : ( ruleIndex ) ;
    public final void rule__CreateIndex__IndexAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21984:1: ( ( ruleIndex ) )
            // InternalOpenCypherParser.g:21985:2: ( ruleIndex )
            {
            // InternalOpenCypherParser.g:21985:2: ( ruleIndex )
            // InternalOpenCypherParser.g:21986:3: ruleIndex
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateIndexAccess().getIndexIndexParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleIndex();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateIndexAccess().getIndexIndexParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateIndex__IndexAssignment_1"


    // $ANTLR start "rule__DropUniqueConstraint__UniqueConstraintAssignment_1"
    // InternalOpenCypherParser.g:21995:1: rule__DropUniqueConstraint__UniqueConstraintAssignment_1 : ( ruleUniqueConstraint ) ;
    public final void rule__DropUniqueConstraint__UniqueConstraintAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21999:1: ( ( ruleUniqueConstraint ) )
            // InternalOpenCypherParser.g:22000:2: ( ruleUniqueConstraint )
            {
            // InternalOpenCypherParser.g:22000:2: ( ruleUniqueConstraint )
            // InternalOpenCypherParser.g:22001:3: ruleUniqueConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintUniqueConstraintParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintUniqueConstraintParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropUniqueConstraint__UniqueConstraintAssignment_1"


    // $ANTLR start "rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1"
    // InternalOpenCypherParser.g:22010:1: rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 : ( ruleNodePropertyExistenceConstraint ) ;
    public final void rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22014:1: ( ( ruleNodePropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:22015:2: ( ruleNodePropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:22015:2: ( ruleNodePropertyExistenceConstraint )
            // InternalOpenCypherParser.g:22016:3: ruleNodePropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1"


    // $ANTLR start "rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1"
    // InternalOpenCypherParser.g:22025:1: rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 : ( ruleRelationshipPropertyExistenceConstraint ) ;
    public final void rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22029:1: ( ( ruleRelationshipPropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:22030:2: ( ruleRelationshipPropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:22030:2: ( ruleRelationshipPropertyExistenceConstraint )
            // InternalOpenCypherParser.g:22031:3: ruleRelationshipPropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1"


    // $ANTLR start "rule__DropIndex__IndexAssignment_1"
    // InternalOpenCypherParser.g:22040:1: rule__DropIndex__IndexAssignment_1 : ( ruleIndex ) ;
    public final void rule__DropIndex__IndexAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22044:1: ( ( ruleIndex ) )
            // InternalOpenCypherParser.g:22045:2: ( ruleIndex )
            {
            // InternalOpenCypherParser.g:22045:2: ( ruleIndex )
            // InternalOpenCypherParser.g:22046:3: ruleIndex
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropIndexAccess().getIndexIndexParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleIndex();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropIndexAccess().getIndexIndexParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropIndex__IndexAssignment_1"


    // $ANTLR start "rule__Index__NodeLabelAssignment_2"
    // InternalOpenCypherParser.g:22055:1: rule__Index__NodeLabelAssignment_2 : ( ruleNodeLabel ) ;
    public final void rule__Index__NodeLabelAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22059:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:22060:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:22060:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:22061:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getNodeLabelNodeLabelParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getNodeLabelNodeLabelParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__NodeLabelAssignment_2"


    // $ANTLR start "rule__Index__PropertyKeyNameAssignment_4"
    // InternalOpenCypherParser.g:22070:1: rule__Index__PropertyKeyNameAssignment_4 : ( rulePropertyKeyName ) ;
    public final void rule__Index__PropertyKeyNameAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22074:1: ( ( rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:22075:2: ( rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:22075:2: ( rulePropertyKeyName )
            // InternalOpenCypherParser.g:22076:3: rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__PropertyKeyNameAssignment_4"


    // $ANTLR start "rule__UniqueConstraint__VariableAssignment_3"
    // InternalOpenCypherParser.g:22085:1: rule__UniqueConstraint__VariableAssignment_3 : ( ruleVariableDeclaration ) ;
    public final void rule__UniqueConstraint__VariableAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22089:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22090:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22090:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22091:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__VariableAssignment_3"


    // $ANTLR start "rule__UniqueConstraint__NodeLabelAssignment_4"
    // InternalOpenCypherParser.g:22100:1: rule__UniqueConstraint__NodeLabelAssignment_4 : ( ruleNodeLabel ) ;
    public final void rule__UniqueConstraint__NodeLabelAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22104:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:22105:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:22105:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:22106:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__NodeLabelAssignment_4"


    // $ANTLR start "rule__UniqueConstraint__PropertyExpressionAssignment_7"
    // InternalOpenCypherParser.g:22115:1: rule__UniqueConstraint__PropertyExpressionAssignment_7 : ( rulePropertyExpression ) ;
    public final void rule__UniqueConstraint__PropertyExpressionAssignment_7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22119:1: ( ( rulePropertyExpression ) )
            // InternalOpenCypherParser.g:22120:2: ( rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:22120:2: ( rulePropertyExpression )
            // InternalOpenCypherParser.g:22121:3: rulePropertyExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_7_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__PropertyExpressionAssignment_7"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__VariableAssignment_3"
    // InternalOpenCypherParser.g:22130:1: rule__NodePropertyExistenceConstraint__VariableAssignment_3 : ( ruleVariableDeclaration ) ;
    public final void rule__NodePropertyExistenceConstraint__VariableAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22134:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22135:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22135:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22136:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__VariableAssignment_3"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4"
    // InternalOpenCypherParser.g:22145:1: rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 : ( ruleNodeLabel ) ;
    public final void rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22149:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:22150:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:22150:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:22151:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9"
    // InternalOpenCypherParser.g:22160:1: rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 : ( rulePropertyExpression ) ;
    public final void rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22164:1: ( ( rulePropertyExpression ) )
            // InternalOpenCypherParser.g:22165:2: ( rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:22165:2: ( rulePropertyExpression )
            // InternalOpenCypherParser.g:22166:3: rulePropertyExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_9_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2"
    // InternalOpenCypherParser.g:22175:1: rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 : ( ruleRelationshipPatternSyntax ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22179:1: ( ( ruleRelationshipPatternSyntax ) )
            // InternalOpenCypherParser.g:22180:2: ( ruleRelationshipPatternSyntax )
            {
            // InternalOpenCypherParser.g:22180:2: ( ruleRelationshipPatternSyntax )
            // InternalOpenCypherParser.g:22181:3: ruleRelationshipPatternSyntax
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipPatternSyntax();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6"
    // InternalOpenCypherParser.g:22190:1: rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 : ( rulePropertyExpression ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22194:1: ( ( rulePropertyExpression ) )
            // InternalOpenCypherParser.g:22195:2: ( rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:22195:2: ( rulePropertyExpression )
            // InternalOpenCypherParser.g:22196:3: rulePropertyExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6"


    // $ANTLR start "rule__RelationshipPatternSyntax__IncomingAssignment_2"
    // InternalOpenCypherParser.g:22205:1: rule__RelationshipPatternSyntax__IncomingAssignment_2 : ( ruleLeftArrowHead ) ;
    public final void rule__RelationshipPatternSyntax__IncomingAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22209:1: ( ( ruleLeftArrowHead ) )
            // InternalOpenCypherParser.g:22210:2: ( ruleLeftArrowHead )
            {
            // InternalOpenCypherParser.g:22210:2: ( ruleLeftArrowHead )
            // InternalOpenCypherParser.g:22211:3: ruleLeftArrowHead
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingLeftArrowHeadParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLeftArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingLeftArrowHeadParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__IncomingAssignment_2"


    // $ANTLR start "rule__RelationshipPatternSyntax__VariableAssignment_5"
    // InternalOpenCypherParser.g:22220:1: rule__RelationshipPatternSyntax__VariableAssignment_5 : ( ruleVariableDeclaration ) ;
    public final void rule__RelationshipPatternSyntax__VariableAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22224:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22225:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22225:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22226:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableVariableDeclarationParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableVariableDeclarationParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__VariableAssignment_5"


    // $ANTLR start "rule__RelationshipPatternSyntax__RelTypeAssignment_6"
    // InternalOpenCypherParser.g:22235:1: rule__RelationshipPatternSyntax__RelTypeAssignment_6 : ( ruleRelType ) ;
    public final void rule__RelationshipPatternSyntax__RelTypeAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22239:1: ( ( ruleRelType ) )
            // InternalOpenCypherParser.g:22240:2: ( ruleRelType )
            {
            // InternalOpenCypherParser.g:22240:2: ( ruleRelType )
            // InternalOpenCypherParser.g:22241:3: ruleRelType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeRelTypeParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeRelTypeParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__RelTypeAssignment_6"


    // $ANTLR start "rule__RelationshipPatternSyntax__OutgoingAssignment_9"
    // InternalOpenCypherParser.g:22250:1: rule__RelationshipPatternSyntax__OutgoingAssignment_9 : ( ruleRightArrowHead ) ;
    public final void rule__RelationshipPatternSyntax__OutgoingAssignment_9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22254:1: ( ( ruleRightArrowHead ) )
            // InternalOpenCypherParser.g:22255:2: ( ruleRightArrowHead )
            {
            // InternalOpenCypherParser.g:22255:2: ( ruleRightArrowHead )
            // InternalOpenCypherParser.g:22256:3: ruleRightArrowHead
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingRightArrowHeadParserRuleCall_9_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRightArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingRightArrowHeadParserRuleCall_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__OutgoingAssignment_9"


    // $ANTLR start "rule__LoadCSV__WithHeadersAssignment_3"
    // InternalOpenCypherParser.g:22265:1: rule__LoadCSV__WithHeadersAssignment_3 : ( ruleLoadCSVWithHeaders ) ;
    public final void rule__LoadCSV__WithHeadersAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22269:1: ( ( ruleLoadCSVWithHeaders ) )
            // InternalOpenCypherParser.g:22270:2: ( ruleLoadCSVWithHeaders )
            {
            // InternalOpenCypherParser.g:22270:2: ( ruleLoadCSVWithHeaders )
            // InternalOpenCypherParser.g:22271:3: ruleLoadCSVWithHeaders
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getWithHeadersLoadCSVWithHeadersParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLoadCSVWithHeaders();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getWithHeadersLoadCSVWithHeadersParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__WithHeadersAssignment_3"


    // $ANTLR start "rule__LoadCSV__ExpressionAssignment_5"
    // InternalOpenCypherParser.g:22280:1: rule__LoadCSV__ExpressionAssignment_5 : ( ruleExpression ) ;
    public final void rule__LoadCSV__ExpressionAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22284:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22285:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22285:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22286:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getExpressionExpressionParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getExpressionExpressionParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__ExpressionAssignment_5"


    // $ANTLR start "rule__LoadCSV__VariableAssignment_7"
    // InternalOpenCypherParser.g:22295:1: rule__LoadCSV__VariableAssignment_7 : ( ruleVariableDeclaration ) ;
    public final void rule__LoadCSV__VariableAssignment_7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22299:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22300:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22300:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22301:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getVariableVariableDeclarationParserRuleCall_7_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getVariableVariableDeclarationParserRuleCall_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__VariableAssignment_7"


    // $ANTLR start "rule__LoadCSV__FieldterminatorAssignment_8_1"
    // InternalOpenCypherParser.g:22310:1: rule__LoadCSV__FieldterminatorAssignment_8_1 : ( RULE_STRING_LITERAL ) ;
    public final void rule__LoadCSV__FieldterminatorAssignment_8_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22314:1: ( ( RULE_STRING_LITERAL ) )
            // InternalOpenCypherParser.g:22315:2: ( RULE_STRING_LITERAL )
            {
            // InternalOpenCypherParser.g:22315:2: ( RULE_STRING_LITERAL )
            // InternalOpenCypherParser.g:22316:3: RULE_STRING_LITERAL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0()); 
            }
            match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__FieldterminatorAssignment_8_1"


    // $ANTLR start "rule__Match__OptionalAssignment_0"
    // InternalOpenCypherParser.g:22325:1: rule__Match__OptionalAssignment_0 : ( ( OPTIONAL ) ) ;
    public final void rule__Match__OptionalAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22329:1: ( ( ( OPTIONAL ) ) )
            // InternalOpenCypherParser.g:22330:2: ( ( OPTIONAL ) )
            {
            // InternalOpenCypherParser.g:22330:2: ( ( OPTIONAL ) )
            // InternalOpenCypherParser.g:22331:3: ( OPTIONAL )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); 
            }
            // InternalOpenCypherParser.g:22332:3: ( OPTIONAL )
            // InternalOpenCypherParser.g:22333:4: OPTIONAL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); 
            }
            match(input,OPTIONAL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__OptionalAssignment_0"


    // $ANTLR start "rule__Match__PatternAssignment_2"
    // InternalOpenCypherParser.g:22344:1: rule__Match__PatternAssignment_2 : ( rulePattern ) ;
    public final void rule__Match__PatternAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22348:1: ( ( rulePattern ) )
            // InternalOpenCypherParser.g:22349:2: ( rulePattern )
            {
            // InternalOpenCypherParser.g:22349:2: ( rulePattern )
            // InternalOpenCypherParser.g:22350:3: rulePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getPatternPatternParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getPatternPatternParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__PatternAssignment_2"


    // $ANTLR start "rule__Match__HintsAssignment_3"
    // InternalOpenCypherParser.g:22359:1: rule__Match__HintsAssignment_3 : ( ruleHint ) ;
    public final void rule__Match__HintsAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22363:1: ( ( ruleHint ) )
            // InternalOpenCypherParser.g:22364:2: ( ruleHint )
            {
            // InternalOpenCypherParser.g:22364:2: ( ruleHint )
            // InternalOpenCypherParser.g:22365:3: ruleHint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getHintsHintParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleHint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getHintsHintParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__HintsAssignment_3"


    // $ANTLR start "rule__Match__WhereAssignment_4"
    // InternalOpenCypherParser.g:22374:1: rule__Match__WhereAssignment_4 : ( ruleWhere ) ;
    public final void rule__Match__WhereAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22378:1: ( ( ruleWhere ) )
            // InternalOpenCypherParser.g:22379:2: ( ruleWhere )
            {
            // InternalOpenCypherParser.g:22379:2: ( ruleWhere )
            // InternalOpenCypherParser.g:22380:3: ruleWhere
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getWhereWhereParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getWhereWhereParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__WhereAssignment_4"


    // $ANTLR start "rule__Unwind__ExpressionAssignment_1"
    // InternalOpenCypherParser.g:22389:1: rule__Unwind__ExpressionAssignment_1 : ( ruleExpression ) ;
    public final void rule__Unwind__ExpressionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22393:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22394:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22394:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22395:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__ExpressionAssignment_1"


    // $ANTLR start "rule__Unwind__VariableAssignment_3"
    // InternalOpenCypherParser.g:22404:1: rule__Unwind__VariableAssignment_3 : ( ruleVariableDeclaration ) ;
    public final void rule__Unwind__VariableAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22408:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22409:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22409:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22410:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__VariableAssignment_3"


    // $ANTLR start "rule__Merge__PatternPartAssignment_1"
    // InternalOpenCypherParser.g:22419:1: rule__Merge__PatternPartAssignment_1 : ( rulePatternPart ) ;
    public final void rule__Merge__PatternPartAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22423:1: ( ( rulePatternPart ) )
            // InternalOpenCypherParser.g:22424:2: ( rulePatternPart )
            {
            // InternalOpenCypherParser.g:22424:2: ( rulePatternPart )
            // InternalOpenCypherParser.g:22425:3: rulePatternPart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getPatternPartPatternPartParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getPatternPartPatternPartParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__PatternPartAssignment_1"


    // $ANTLR start "rule__Merge__MergeActionsAssignment_2"
    // InternalOpenCypherParser.g:22434:1: rule__Merge__MergeActionsAssignment_2 : ( ruleMergeAction ) ;
    public final void rule__Merge__MergeActionsAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22438:1: ( ( ruleMergeAction ) )
            // InternalOpenCypherParser.g:22439:2: ( ruleMergeAction )
            {
            // InternalOpenCypherParser.g:22439:2: ( ruleMergeAction )
            // InternalOpenCypherParser.g:22440:3: ruleMergeAction
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getMergeActionsMergeActionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMergeAction();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getMergeActionsMergeActionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__MergeActionsAssignment_2"


    // $ANTLR start "rule__MergeAction__ActionAssignment_1"
    // InternalOpenCypherParser.g:22449:1: rule__MergeAction__ActionAssignment_1 : ( ( rule__MergeAction__ActionAlternatives_1_0 ) ) ;
    public final void rule__MergeAction__ActionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22453:1: ( ( ( rule__MergeAction__ActionAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:22454:2: ( ( rule__MergeAction__ActionAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:22454:2: ( ( rule__MergeAction__ActionAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:22455:3: ( rule__MergeAction__ActionAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getActionAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:22456:3: ( rule__MergeAction__ActionAlternatives_1_0 )
            // InternalOpenCypherParser.g:22456:4: rule__MergeAction__ActionAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__MergeAction__ActionAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getActionAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__ActionAssignment_1"


    // $ANTLR start "rule__MergeAction__SetAssignment_2"
    // InternalOpenCypherParser.g:22464:1: rule__MergeAction__SetAssignment_2 : ( ruleSet ) ;
    public final void rule__MergeAction__SetAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22468:1: ( ( ruleSet ) )
            // InternalOpenCypherParser.g:22469:2: ( ruleSet )
            {
            // InternalOpenCypherParser.g:22469:2: ( ruleSet )
            // InternalOpenCypherParser.g:22470:3: ruleSet
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getSetSetParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSet();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getSetSetParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__SetAssignment_2"


    // $ANTLR start "rule__Create__UniqueContraintAssignment_1"
    // InternalOpenCypherParser.g:22479:1: rule__Create__UniqueContraintAssignment_1 : ( ( UNIQUE ) ) ;
    public final void rule__Create__UniqueContraintAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22483:1: ( ( ( UNIQUE ) ) )
            // InternalOpenCypherParser.g:22484:2: ( ( UNIQUE ) )
            {
            // InternalOpenCypherParser.g:22484:2: ( ( UNIQUE ) )
            // InternalOpenCypherParser.g:22485:3: ( UNIQUE )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getUniqueContraintUNIQUEKeyword_1_0()); 
            }
            // InternalOpenCypherParser.g:22486:3: ( UNIQUE )
            // InternalOpenCypherParser.g:22487:4: UNIQUE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getUniqueContraintUNIQUEKeyword_1_0()); 
            }
            match(input,UNIQUE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getUniqueContraintUNIQUEKeyword_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getUniqueContraintUNIQUEKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__UniqueContraintAssignment_1"


    // $ANTLR start "rule__Create__PatternAssignment_2"
    // InternalOpenCypherParser.g:22498:1: rule__Create__PatternAssignment_2 : ( rulePattern ) ;
    public final void rule__Create__PatternAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22502:1: ( ( rulePattern ) )
            // InternalOpenCypherParser.g:22503:2: ( rulePattern )
            {
            // InternalOpenCypherParser.g:22503:2: ( rulePattern )
            // InternalOpenCypherParser.g:22504:3: rulePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getPatternPatternParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getPatternPatternParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__PatternAssignment_2"


    // $ANTLR start "rule__Set__SetItemsAssignment_1"
    // InternalOpenCypherParser.g:22513:1: rule__Set__SetItemsAssignment_1 : ( ruleSetItem ) ;
    public final void rule__Set__SetItemsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22517:1: ( ( ruleSetItem ) )
            // InternalOpenCypherParser.g:22518:2: ( ruleSetItem )
            {
            // InternalOpenCypherParser.g:22518:2: ( ruleSetItem )
            // InternalOpenCypherParser.g:22519:3: ruleSetItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSetItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__SetItemsAssignment_1"


    // $ANTLR start "rule__Set__SetItemsAssignment_2_1"
    // InternalOpenCypherParser.g:22528:1: rule__Set__SetItemsAssignment_2_1 : ( ruleSetItem ) ;
    public final void rule__Set__SetItemsAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22532:1: ( ( ruleSetItem ) )
            // InternalOpenCypherParser.g:22533:2: ( ruleSetItem )
            {
            // InternalOpenCypherParser.g:22533:2: ( ruleSetItem )
            // InternalOpenCypherParser.g:22534:3: ruleSetItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSetItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__SetItemsAssignment_2_1"


    // $ANTLR start "rule__SetItem__PropertyExpressionAssignment_0_0"
    // InternalOpenCypherParser.g:22543:1: rule__SetItem__PropertyExpressionAssignment_0_0 : ( rulePropertyExpression ) ;
    public final void rule__SetItem__PropertyExpressionAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22547:1: ( ( rulePropertyExpression ) )
            // InternalOpenCypherParser.g:22548:2: ( rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:22548:2: ( rulePropertyExpression )
            // InternalOpenCypherParser.g:22549:3: rulePropertyExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__PropertyExpressionAssignment_0_0"


    // $ANTLR start "rule__SetItem__ExpressionAssignment_0_2"
    // InternalOpenCypherParser.g:22558:1: rule__SetItem__ExpressionAssignment_0_2 : ( ruleExpression ) ;
    public final void rule__SetItem__ExpressionAssignment_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22562:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22563:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22563:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22564:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__ExpressionAssignment_0_2"


    // $ANTLR start "rule__SetItem__VariableAssignment_1_0"
    // InternalOpenCypherParser.g:22573:1: rule__SetItem__VariableAssignment_1_0 : ( ruleVariableDeclaration ) ;
    public final void rule__SetItem__VariableAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22577:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22578:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22578:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22579:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__VariableAssignment_1_0"


    // $ANTLR start "rule__SetItem__ExpressionAssignment_1_2"
    // InternalOpenCypherParser.g:22588:1: rule__SetItem__ExpressionAssignment_1_2 : ( ruleExpression ) ;
    public final void rule__SetItem__ExpressionAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22592:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22593:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22593:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22594:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__ExpressionAssignment_1_2"


    // $ANTLR start "rule__SetItem__VariableAssignment_2_0"
    // InternalOpenCypherParser.g:22603:1: rule__SetItem__VariableAssignment_2_0 : ( ruleVariableDeclaration ) ;
    public final void rule__SetItem__VariableAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22607:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22608:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22608:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22609:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__VariableAssignment_2_0"


    // $ANTLR start "rule__SetItem__ExpressionAssignment_2_2"
    // InternalOpenCypherParser.g:22618:1: rule__SetItem__ExpressionAssignment_2_2 : ( ruleExpression ) ;
    public final void rule__SetItem__ExpressionAssignment_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22622:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22623:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22623:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22624:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__ExpressionAssignment_2_2"


    // $ANTLR start "rule__SetItem__VariableAssignment_3_0"
    // InternalOpenCypherParser.g:22633:1: rule__SetItem__VariableAssignment_3_0 : ( ruleVariableDeclaration ) ;
    public final void rule__SetItem__VariableAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22637:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22638:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22638:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22639:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_3_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__VariableAssignment_3_0"


    // $ANTLR start "rule__Delete__DetachAssignment_0"
    // InternalOpenCypherParser.g:22648:1: rule__Delete__DetachAssignment_0 : ( ( DETACH ) ) ;
    public final void rule__Delete__DetachAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22652:1: ( ( ( DETACH ) ) )
            // InternalOpenCypherParser.g:22653:2: ( ( DETACH ) )
            {
            // InternalOpenCypherParser.g:22653:2: ( ( DETACH ) )
            // InternalOpenCypherParser.g:22654:3: ( DETACH )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); 
            }
            // InternalOpenCypherParser.g:22655:3: ( DETACH )
            // InternalOpenCypherParser.g:22656:4: DETACH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); 
            }
            match(input,DETACH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__DetachAssignment_0"


    // $ANTLR start "rule__Delete__ExpressionsAssignment_2"
    // InternalOpenCypherParser.g:22667:1: rule__Delete__ExpressionsAssignment_2 : ( ruleExpression ) ;
    public final void rule__Delete__ExpressionsAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22671:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22672:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22672:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22673:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__ExpressionsAssignment_2"


    // $ANTLR start "rule__Delete__ExpressionsAssignment_3_1"
    // InternalOpenCypherParser.g:22682:1: rule__Delete__ExpressionsAssignment_3_1 : ( ruleExpression ) ;
    public final void rule__Delete__ExpressionsAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22686:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22687:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22687:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22688:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__ExpressionsAssignment_3_1"


    // $ANTLR start "rule__Remove__RemoveItemsAssignment_1"
    // InternalOpenCypherParser.g:22697:1: rule__Remove__RemoveItemsAssignment_1 : ( ruleRemoveItem ) ;
    public final void rule__Remove__RemoveItemsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22701:1: ( ( ruleRemoveItem ) )
            // InternalOpenCypherParser.g:22702:2: ( ruleRemoveItem )
            {
            // InternalOpenCypherParser.g:22702:2: ( ruleRemoveItem )
            // InternalOpenCypherParser.g:22703:3: ruleRemoveItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRemoveItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__RemoveItemsAssignment_1"


    // $ANTLR start "rule__Remove__RemoveItemsAssignment_2_1"
    // InternalOpenCypherParser.g:22712:1: rule__Remove__RemoveItemsAssignment_2_1 : ( ruleRemoveItem ) ;
    public final void rule__Remove__RemoveItemsAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22716:1: ( ( ruleRemoveItem ) )
            // InternalOpenCypherParser.g:22717:2: ( ruleRemoveItem )
            {
            // InternalOpenCypherParser.g:22717:2: ( ruleRemoveItem )
            // InternalOpenCypherParser.g:22718:3: ruleRemoveItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRemoveItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__RemoveItemsAssignment_2_1"


    // $ANTLR start "rule__RemoveItem__VariableAssignment_0_1"
    // InternalOpenCypherParser.g:22727:1: rule__RemoveItem__VariableAssignment_0_1 : ( ruleVariableDeclaration ) ;
    public final void rule__RemoveItem__VariableAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22731:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22732:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22732:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22733:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getVariableVariableDeclarationParserRuleCall_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getVariableVariableDeclarationParserRuleCall_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__VariableAssignment_0_1"


    // $ANTLR start "rule__RemoveItem__PropertyExpressionAssignment_1_1"
    // InternalOpenCypherParser.g:22742:1: rule__RemoveItem__PropertyExpressionAssignment_1_1 : ( rulePropertyExpression ) ;
    public final void rule__RemoveItem__PropertyExpressionAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22746:1: ( ( rulePropertyExpression ) )
            // InternalOpenCypherParser.g:22747:2: ( rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:22747:2: ( rulePropertyExpression )
            // InternalOpenCypherParser.g:22748:3: rulePropertyExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__PropertyExpressionAssignment_1_1"


    // $ANTLR start "rule__Foreach__VariableAssignment_2"
    // InternalOpenCypherParser.g:22757:1: rule__Foreach__VariableAssignment_2 : ( ruleVariableDeclaration ) ;
    public final void rule__Foreach__VariableAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22761:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22762:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22762:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22763:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__VariableAssignment_2"


    // $ANTLR start "rule__Foreach__ExpressionAssignment_4"
    // InternalOpenCypherParser.g:22772:1: rule__Foreach__ExpressionAssignment_4 : ( ruleExpression ) ;
    public final void rule__Foreach__ExpressionAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22776:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22777:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22777:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22778:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getExpressionExpressionParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getExpressionExpressionParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__ExpressionAssignment_4"


    // $ANTLR start "rule__Foreach__UpdatingClausesAssignment_6"
    // InternalOpenCypherParser.g:22787:1: rule__Foreach__UpdatingClausesAssignment_6 : ( ruleUpdatingClause ) ;
    public final void rule__Foreach__UpdatingClausesAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22791:1: ( ( ruleUpdatingClause ) )
            // InternalOpenCypherParser.g:22792:2: ( ruleUpdatingClause )
            {
            // InternalOpenCypherParser.g:22792:2: ( ruleUpdatingClause )
            // InternalOpenCypherParser.g:22793:3: ruleUpdatingClause
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getUpdatingClausesUpdatingClauseParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUpdatingClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getUpdatingClausesUpdatingClauseParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__UpdatingClausesAssignment_6"


    // $ANTLR start "rule__InQueryCall__InvocationAssignment_1"
    // InternalOpenCypherParser.g:22802:1: rule__InQueryCall__InvocationAssignment_1 : ( ruleExplicitProcedureInvocation ) ;
    public final void rule__InQueryCall__InvocationAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22806:1: ( ( ruleExplicitProcedureInvocation ) )
            // InternalOpenCypherParser.g:22807:2: ( ruleExplicitProcedureInvocation )
            {
            // InternalOpenCypherParser.g:22807:2: ( ruleExplicitProcedureInvocation )
            // InternalOpenCypherParser.g:22808:3: ruleExplicitProcedureInvocation
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__InvocationAssignment_1"


    // $ANTLR start "rule__InQueryCall__YieldItemsAssignment_2_1"
    // InternalOpenCypherParser.g:22817:1: rule__InQueryCall__YieldItemsAssignment_2_1 : ( ruleYieldItems ) ;
    public final void rule__InQueryCall__YieldItemsAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22821:1: ( ( ruleYieldItems ) )
            // InternalOpenCypherParser.g:22822:2: ( ruleYieldItems )
            {
            // InternalOpenCypherParser.g:22822:2: ( ruleYieldItems )
            // InternalOpenCypherParser.g:22823:3: ruleYieldItems
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleYieldItems();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__YieldItemsAssignment_2_1"


    // $ANTLR start "rule__StandaloneCall__InvocationAssignment_1"
    // InternalOpenCypherParser.g:22832:1: rule__StandaloneCall__InvocationAssignment_1 : ( ( rule__StandaloneCall__InvocationAlternatives_1_0 ) ) ;
    public final void rule__StandaloneCall__InvocationAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22836:1: ( ( ( rule__StandaloneCall__InvocationAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:22837:2: ( ( rule__StandaloneCall__InvocationAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:22837:2: ( ( rule__StandaloneCall__InvocationAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:22838:3: ( rule__StandaloneCall__InvocationAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getInvocationAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:22839:3: ( rule__StandaloneCall__InvocationAlternatives_1_0 )
            // InternalOpenCypherParser.g:22839:4: rule__StandaloneCall__InvocationAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__InvocationAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getInvocationAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__InvocationAssignment_1"


    // $ANTLR start "rule__StandaloneCall__YieldItemsAssignment_2_1"
    // InternalOpenCypherParser.g:22847:1: rule__StandaloneCall__YieldItemsAssignment_2_1 : ( ruleYieldItems ) ;
    public final void rule__StandaloneCall__YieldItemsAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22851:1: ( ( ruleYieldItems ) )
            // InternalOpenCypherParser.g:22852:2: ( ruleYieldItems )
            {
            // InternalOpenCypherParser.g:22852:2: ( ruleYieldItems )
            // InternalOpenCypherParser.g:22853:3: ruleYieldItems
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleYieldItems();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__YieldItemsAssignment_2_1"


    // $ANTLR start "rule__YieldItems__ItemsAssignment_1_0_0"
    // InternalOpenCypherParser.g:22862:1: rule__YieldItems__ItemsAssignment_1_0_0 : ( ruleYieldItem ) ;
    public final void rule__YieldItems__ItemsAssignment_1_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22866:1: ( ( ruleYieldItem ) )
            // InternalOpenCypherParser.g:22867:2: ( ruleYieldItem )
            {
            // InternalOpenCypherParser.g:22867:2: ( ruleYieldItem )
            // InternalOpenCypherParser.g:22868:3: ruleYieldItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleYieldItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__ItemsAssignment_1_0_0"


    // $ANTLR start "rule__YieldItems__ItemsAssignment_1_0_1_1"
    // InternalOpenCypherParser.g:22877:1: rule__YieldItems__ItemsAssignment_1_0_1_1 : ( ruleYieldItem ) ;
    public final void rule__YieldItems__ItemsAssignment_1_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22881:1: ( ( ruleYieldItem ) )
            // InternalOpenCypherParser.g:22882:2: ( ruleYieldItem )
            {
            // InternalOpenCypherParser.g:22882:2: ( ruleYieldItem )
            // InternalOpenCypherParser.g:22883:3: ruleYieldItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleYieldItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__ItemsAssignment_1_0_1_1"


    // $ANTLR start "rule__YieldItem__FieldAssignment_0_0"
    // InternalOpenCypherParser.g:22892:1: rule__YieldItem__FieldAssignment_0_0 : ( ruleProcedureResultField ) ;
    public final void rule__YieldItem__FieldAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22896:1: ( ( ruleProcedureResultField ) )
            // InternalOpenCypherParser.g:22897:2: ( ruleProcedureResultField )
            {
            // InternalOpenCypherParser.g:22897:2: ( ruleProcedureResultField )
            // InternalOpenCypherParser.g:22898:3: ruleProcedureResultField
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getFieldProcedureResultFieldParserRuleCall_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleProcedureResultField();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getFieldProcedureResultFieldParserRuleCall_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__FieldAssignment_0_0"


    // $ANTLR start "rule__YieldItem__VariableAssignment_1"
    // InternalOpenCypherParser.g:22907:1: rule__YieldItem__VariableAssignment_1 : ( ruleVariableDeclaration ) ;
    public final void rule__YieldItem__VariableAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22911:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22912:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22912:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22913:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getVariableVariableDeclarationParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getVariableVariableDeclarationParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__VariableAssignment_1"


    // $ANTLR start "rule__With__ReturnBodyAssignment_1"
    // InternalOpenCypherParser.g:22922:1: rule__With__ReturnBodyAssignment_1 : ( ruleReturnBody ) ;
    public final void rule__With__ReturnBodyAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22926:1: ( ( ruleReturnBody ) )
            // InternalOpenCypherParser.g:22927:2: ( ruleReturnBody )
            {
            // InternalOpenCypherParser.g:22927:2: ( ruleReturnBody )
            // InternalOpenCypherParser.g:22928:3: ruleReturnBody
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getReturnBodyReturnBodyParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnBody();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getReturnBodyReturnBodyParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__ReturnBodyAssignment_1"


    // $ANTLR start "rule__With__WhereAssignment_2"
    // InternalOpenCypherParser.g:22937:1: rule__With__WhereAssignment_2 : ( ruleWhere ) ;
    public final void rule__With__WhereAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22941:1: ( ( ruleWhere ) )
            // InternalOpenCypherParser.g:22942:2: ( ruleWhere )
            {
            // InternalOpenCypherParser.g:22942:2: ( ruleWhere )
            // InternalOpenCypherParser.g:22943:3: ruleWhere
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getWhereWhereParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getWhereWhereParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__WhereAssignment_2"


    // $ANTLR start "rule__Return__ReturnAssignment_0"
    // InternalOpenCypherParser.g:22952:1: rule__Return__ReturnAssignment_0 : ( ( RETURN ) ) ;
    public final void rule__Return__ReturnAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22956:1: ( ( ( RETURN ) ) )
            // InternalOpenCypherParser.g:22957:2: ( ( RETURN ) )
            {
            // InternalOpenCypherParser.g:22957:2: ( ( RETURN ) )
            // InternalOpenCypherParser.g:22958:3: ( RETURN )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); 
            }
            // InternalOpenCypherParser.g:22959:3: ( RETURN )
            // InternalOpenCypherParser.g:22960:4: RETURN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); 
            }
            match(input,RETURN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__ReturnAssignment_0"


    // $ANTLR start "rule__Return__BodyAssignment_1"
    // InternalOpenCypherParser.g:22971:1: rule__Return__BodyAssignment_1 : ( ruleReturnBody ) ;
    public final void rule__Return__BodyAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22975:1: ( ( ruleReturnBody ) )
            // InternalOpenCypherParser.g:22976:2: ( ruleReturnBody )
            {
            // InternalOpenCypherParser.g:22976:2: ( ruleReturnBody )
            // InternalOpenCypherParser.g:22977:3: ruleReturnBody
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getBodyReturnBodyParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnBody();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getBodyReturnBodyParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__BodyAssignment_1"


    // $ANTLR start "rule__ReturnBody__DistinctAssignment_0"
    // InternalOpenCypherParser.g:22986:1: rule__ReturnBody__DistinctAssignment_0 : ( ( DISTINCT ) ) ;
    public final void rule__ReturnBody__DistinctAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22990:1: ( ( ( DISTINCT ) ) )
            // InternalOpenCypherParser.g:22991:2: ( ( DISTINCT ) )
            {
            // InternalOpenCypherParser.g:22991:2: ( ( DISTINCT ) )
            // InternalOpenCypherParser.g:22992:3: ( DISTINCT )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getDistinctDISTINCTKeyword_0_0()); 
            }
            // InternalOpenCypherParser.g:22993:3: ( DISTINCT )
            // InternalOpenCypherParser.g:22994:4: DISTINCT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getDistinctDISTINCTKeyword_0_0()); 
            }
            match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getDistinctDISTINCTKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getDistinctDISTINCTKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__DistinctAssignment_0"


    // $ANTLR start "rule__ReturnBody__ReturnItemsAssignment_1"
    // InternalOpenCypherParser.g:23005:1: rule__ReturnBody__ReturnItemsAssignment_1 : ( ruleReturnItems ) ;
    public final void rule__ReturnBody__ReturnItemsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23009:1: ( ( ruleReturnItems ) )
            // InternalOpenCypherParser.g:23010:2: ( ruleReturnItems )
            {
            // InternalOpenCypherParser.g:23010:2: ( ruleReturnItems )
            // InternalOpenCypherParser.g:23011:3: ruleReturnItems
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getReturnItemsReturnItemsParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnItems();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getReturnItemsReturnItemsParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__ReturnItemsAssignment_1"


    // $ANTLR start "rule__ReturnBody__OrderAssignment_2"
    // InternalOpenCypherParser.g:23020:1: rule__ReturnBody__OrderAssignment_2 : ( ruleOrder ) ;
    public final void rule__ReturnBody__OrderAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23024:1: ( ( ruleOrder ) )
            // InternalOpenCypherParser.g:23025:2: ( ruleOrder )
            {
            // InternalOpenCypherParser.g:23025:2: ( ruleOrder )
            // InternalOpenCypherParser.g:23026:3: ruleOrder
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getOrderOrderParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleOrder();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getOrderOrderParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__OrderAssignment_2"


    // $ANTLR start "rule__ReturnBody__SkipAssignment_3"
    // InternalOpenCypherParser.g:23035:1: rule__ReturnBody__SkipAssignment_3 : ( ruleSkip ) ;
    public final void rule__ReturnBody__SkipAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23039:1: ( ( ruleSkip ) )
            // InternalOpenCypherParser.g:23040:2: ( ruleSkip )
            {
            // InternalOpenCypherParser.g:23040:2: ( ruleSkip )
            // InternalOpenCypherParser.g:23041:3: ruleSkip
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getSkipSkipParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSkip();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getSkipSkipParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__SkipAssignment_3"


    // $ANTLR start "rule__ReturnBody__LimitAssignment_4"
    // InternalOpenCypherParser.g:23050:1: rule__ReturnBody__LimitAssignment_4 : ( ruleLimit ) ;
    public final void rule__ReturnBody__LimitAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23054:1: ( ( ruleLimit ) )
            // InternalOpenCypherParser.g:23055:2: ( ruleLimit )
            {
            // InternalOpenCypherParser.g:23055:2: ( ruleLimit )
            // InternalOpenCypherParser.g:23056:3: ruleLimit
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getLimitLimitParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLimit();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getLimitLimitParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__LimitAssignment_4"


    // $ANTLR start "rule__ReturnItems__AllAssignment_0_1_0"
    // InternalOpenCypherParser.g:23065:1: rule__ReturnItems__AllAssignment_0_1_0 : ( ( Asterisk ) ) ;
    public final void rule__ReturnItems__AllAssignment_0_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23069:1: ( ( ( Asterisk ) ) )
            // InternalOpenCypherParser.g:23070:2: ( ( Asterisk ) )
            {
            // InternalOpenCypherParser.g:23070:2: ( ( Asterisk ) )
            // InternalOpenCypherParser.g:23071:3: ( Asterisk )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); 
            }
            // InternalOpenCypherParser.g:23072:3: ( Asterisk )
            // InternalOpenCypherParser.g:23073:4: Asterisk
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); 
            }
            match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__AllAssignment_0_1_0"


    // $ANTLR start "rule__ReturnItems__ItemsAssignment_0_1_1_1"
    // InternalOpenCypherParser.g:23084:1: rule__ReturnItems__ItemsAssignment_0_1_1_1 : ( ruleReturnItem ) ;
    public final void rule__ReturnItems__ItemsAssignment_0_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23088:1: ( ( ruleReturnItem ) )
            // InternalOpenCypherParser.g:23089:2: ( ruleReturnItem )
            {
            // InternalOpenCypherParser.g:23089:2: ( ruleReturnItem )
            // InternalOpenCypherParser.g:23090:3: ruleReturnItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_0_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_0_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__ItemsAssignment_0_1_1_1"


    // $ANTLR start "rule__ReturnItems__ItemsAssignment_1_0"
    // InternalOpenCypherParser.g:23099:1: rule__ReturnItems__ItemsAssignment_1_0 : ( ruleReturnItem ) ;
    public final void rule__ReturnItems__ItemsAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23103:1: ( ( ruleReturnItem ) )
            // InternalOpenCypherParser.g:23104:2: ( ruleReturnItem )
            {
            // InternalOpenCypherParser.g:23104:2: ( ruleReturnItem )
            // InternalOpenCypherParser.g:23105:3: ruleReturnItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__ItemsAssignment_1_0"


    // $ANTLR start "rule__ReturnItems__ItemsAssignment_1_1_1"
    // InternalOpenCypherParser.g:23114:1: rule__ReturnItems__ItemsAssignment_1_1_1 : ( ruleReturnItem ) ;
    public final void rule__ReturnItems__ItemsAssignment_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23118:1: ( ( ruleReturnItem ) )
            // InternalOpenCypherParser.g:23119:2: ( ruleReturnItem )
            {
            // InternalOpenCypherParser.g:23119:2: ( ruleReturnItem )
            // InternalOpenCypherParser.g:23120:3: ruleReturnItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__ItemsAssignment_1_1_1"


    // $ANTLR start "rule__ReturnItem__ExpressionAssignment_0"
    // InternalOpenCypherParser.g:23129:1: rule__ReturnItem__ExpressionAssignment_0 : ( ruleExpression ) ;
    public final void rule__ReturnItem__ExpressionAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23133:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23134:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23134:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23135:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getExpressionExpressionParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getExpressionExpressionParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__ExpressionAssignment_0"


    // $ANTLR start "rule__ReturnItem__AliasAssignment_1_1"
    // InternalOpenCypherParser.g:23144:1: rule__ReturnItem__AliasAssignment_1_1 : ( ruleVariableDeclaration ) ;
    public final void rule__ReturnItem__AliasAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23148:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23149:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23149:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23150:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getAliasVariableDeclarationParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getAliasVariableDeclarationParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__AliasAssignment_1_1"


    // $ANTLR start "rule__Order__OrderByAssignment_2"
    // InternalOpenCypherParser.g:23159:1: rule__Order__OrderByAssignment_2 : ( ruleSortItem ) ;
    public final void rule__Order__OrderByAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23163:1: ( ( ruleSortItem ) )
            // InternalOpenCypherParser.g:23164:2: ( ruleSortItem )
            {
            // InternalOpenCypherParser.g:23164:2: ( ruleSortItem )
            // InternalOpenCypherParser.g:23165:3: ruleSortItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSortItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__OrderByAssignment_2"


    // $ANTLR start "rule__Order__OrderByAssignment_3_1"
    // InternalOpenCypherParser.g:23174:1: rule__Order__OrderByAssignment_3_1 : ( ruleSortItem ) ;
    public final void rule__Order__OrderByAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23178:1: ( ( ruleSortItem ) )
            // InternalOpenCypherParser.g:23179:2: ( ruleSortItem )
            {
            // InternalOpenCypherParser.g:23179:2: ( ruleSortItem )
            // InternalOpenCypherParser.g:23180:3: ruleSortItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSortItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__OrderByAssignment_3_1"


    // $ANTLR start "rule__Skip__SkipAssignment_1"
    // InternalOpenCypherParser.g:23189:1: rule__Skip__SkipAssignment_1 : ( ruleExpression ) ;
    public final void rule__Skip__SkipAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23193:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23194:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23194:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23195:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSkipAccess().getSkipExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSkipAccess().getSkipExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__SkipAssignment_1"


    // $ANTLR start "rule__Limit__LimitAssignment_1"
    // InternalOpenCypherParser.g:23204:1: rule__Limit__LimitAssignment_1 : ( ruleExpression ) ;
    public final void rule__Limit__LimitAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23208:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23209:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23209:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23210:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLimitAccess().getLimitExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLimitAccess().getLimitExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Limit__LimitAssignment_1"


    // $ANTLR start "rule__SortItem__ExpressionAssignment_0"
    // InternalOpenCypherParser.g:23219:1: rule__SortItem__ExpressionAssignment_0 : ( ruleExpression ) ;
    public final void rule__SortItem__ExpressionAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23223:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23224:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23224:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23225:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemAccess().getExpressionExpressionParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemAccess().getExpressionExpressionParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__ExpressionAssignment_0"


    // $ANTLR start "rule__SortItem__SortAssignment_1"
    // InternalOpenCypherParser.g:23234:1: rule__SortItem__SortAssignment_1 : ( ( rule__SortItem__SortAlternatives_1_0 ) ) ;
    public final void rule__SortItem__SortAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23238:1: ( ( ( rule__SortItem__SortAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:23239:2: ( ( rule__SortItem__SortAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:23239:2: ( ( rule__SortItem__SortAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:23240:3: ( rule__SortItem__SortAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemAccess().getSortAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:23241:3: ( rule__SortItem__SortAlternatives_1_0 )
            // InternalOpenCypherParser.g:23241:4: rule__SortItem__SortAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__SortItem__SortAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemAccess().getSortAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__SortAssignment_1"


    // $ANTLR start "rule__Hint__VariableAssignment_0_5"
    // InternalOpenCypherParser.g:23249:1: rule__Hint__VariableAssignment_0_5 : ( ruleVariableDeclaration ) ;
    public final void rule__Hint__VariableAssignment_0_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23253:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23254:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23254:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23255:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_0_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_0_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__VariableAssignment_0_5"


    // $ANTLR start "rule__Hint__NodeLabelAssignment_0_6"
    // InternalOpenCypherParser.g:23264:1: rule__Hint__NodeLabelAssignment_0_6 : ( ruleNodeLabel ) ;
    public final void rule__Hint__NodeLabelAssignment_0_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23268:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:23269:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:23269:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:23270:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_0_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_0_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__NodeLabelAssignment_0_6"


    // $ANTLR start "rule__Hint__PropertyKeyNameAssignment_0_9"
    // InternalOpenCypherParser.g:23279:1: rule__Hint__PropertyKeyNameAssignment_0_9 : ( rulePropertyKeyName ) ;
    public final void rule__Hint__PropertyKeyNameAssignment_0_9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23283:1: ( ( rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:23284:2: ( rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:23284:2: ( rulePropertyKeyName )
            // InternalOpenCypherParser.g:23285:3: rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__PropertyKeyNameAssignment_0_9"


    // $ANTLR start "rule__Hint__VariablesAssignment_1_1_5"
    // InternalOpenCypherParser.g:23294:1: rule__Hint__VariablesAssignment_1_1_5 : ( ruleVariableDeclaration ) ;
    public final void rule__Hint__VariablesAssignment_1_1_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23298:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23299:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23299:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23300:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__VariablesAssignment_1_1_5"


    // $ANTLR start "rule__Hint__VariablesAssignment_1_1_6_1"
    // InternalOpenCypherParser.g:23309:1: rule__Hint__VariablesAssignment_1_1_6_1 : ( ruleVariableDeclaration ) ;
    public final void rule__Hint__VariablesAssignment_1_1_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23313:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23314:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23314:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23315:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_6_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__VariablesAssignment_1_1_6_1"


    // $ANTLR start "rule__Hint__VariableAssignment_2_1_4"
    // InternalOpenCypherParser.g:23324:1: rule__Hint__VariableAssignment_2_1_4 : ( ruleVariableDeclaration ) ;
    public final void rule__Hint__VariableAssignment_2_1_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23328:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23329:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23329:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23330:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_2_1_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_2_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__VariableAssignment_2_1_4"


    // $ANTLR start "rule__Hint__NodeLabelAssignment_2_1_5"
    // InternalOpenCypherParser.g:23339:1: rule__Hint__NodeLabelAssignment_2_1_5 : ( ruleNodeLabel ) ;
    public final void rule__Hint__NodeLabelAssignment_2_1_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23343:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:23344:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:23344:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:23345:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_2_1_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_2_1_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__NodeLabelAssignment_2_1_5"


    // $ANTLR start "rule__Start__StartPointAssignment_1"
    // InternalOpenCypherParser.g:23354:1: rule__Start__StartPointAssignment_1 : ( ruleStartPoint ) ;
    public final void rule__Start__StartPointAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23358:1: ( ( ruleStartPoint ) )
            // InternalOpenCypherParser.g:23359:2: ( ruleStartPoint )
            {
            // InternalOpenCypherParser.g:23359:2: ( ruleStartPoint )
            // InternalOpenCypherParser.g:23360:3: ruleStartPoint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleStartPoint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__StartPointAssignment_1"


    // $ANTLR start "rule__Start__StartPointAssignment_2_1"
    // InternalOpenCypherParser.g:23369:1: rule__Start__StartPointAssignment_2_1 : ( ruleStartPoint ) ;
    public final void rule__Start__StartPointAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23373:1: ( ( ruleStartPoint ) )
            // InternalOpenCypherParser.g:23374:2: ( ruleStartPoint )
            {
            // InternalOpenCypherParser.g:23374:2: ( ruleStartPoint )
            // InternalOpenCypherParser.g:23375:3: ruleStartPoint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleStartPoint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__StartPointAssignment_2_1"


    // $ANTLR start "rule__Start__WhereAssignment_3"
    // InternalOpenCypherParser.g:23384:1: rule__Start__WhereAssignment_3 : ( ruleWhere ) ;
    public final void rule__Start__WhereAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23388:1: ( ( ruleWhere ) )
            // InternalOpenCypherParser.g:23389:2: ( ruleWhere )
            {
            // InternalOpenCypherParser.g:23389:2: ( ruleWhere )
            // InternalOpenCypherParser.g:23390:3: ruleWhere
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getWhereWhereParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getWhereWhereParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__WhereAssignment_3"


    // $ANTLR start "rule__StartPoint__VariableAssignment_0"
    // InternalOpenCypherParser.g:23399:1: rule__StartPoint__VariableAssignment_0 : ( ruleVariableDeclaration ) ;
    public final void rule__StartPoint__VariableAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23403:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23404:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23404:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23405:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getVariableVariableDeclarationParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getVariableVariableDeclarationParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__VariableAssignment_0"


    // $ANTLR start "rule__StartPoint__LookupAssignment_2"
    // InternalOpenCypherParser.g:23414:1: rule__StartPoint__LookupAssignment_2 : ( ruleLookup ) ;
    public final void rule__StartPoint__LookupAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23418:1: ( ( ruleLookup ) )
            // InternalOpenCypherParser.g:23419:2: ( ruleLookup )
            {
            // InternalOpenCypherParser.g:23419:2: ( ruleLookup )
            // InternalOpenCypherParser.g:23420:3: ruleLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getLookupLookupParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getLookupLookupParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__LookupAssignment_2"


    // $ANTLR start "rule__IdentifiedIndexLookup__IndexNameAssignment_1"
    // InternalOpenCypherParser.g:23429:1: rule__IdentifiedIndexLookup__IndexNameAssignment_1 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__IdentifiedIndexLookup__IndexNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23433:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:23434:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:23434:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:23435:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__IndexNameAssignment_1"


    // $ANTLR start "rule__IdentifiedIndexLookup__KeyAssignment_3"
    // InternalOpenCypherParser.g:23444:1: rule__IdentifiedIndexLookup__KeyAssignment_3 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__IdentifiedIndexLookup__KeyAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23448:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:23449:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:23449:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:23450:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getKeySYMBOLIC_NAME_XParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getKeySYMBOLIC_NAME_XParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__KeyAssignment_3"


    // $ANTLR start "rule__IdentifiedIndexLookup__ValueAssignment_5_0"
    // InternalOpenCypherParser.g:23459:1: rule__IdentifiedIndexLookup__ValueAssignment_5_0 : ( RULE_STRING_LITERAL ) ;
    public final void rule__IdentifiedIndexLookup__ValueAssignment_5_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23463:1: ( ( RULE_STRING_LITERAL ) )
            // InternalOpenCypherParser.g:23464:2: ( RULE_STRING_LITERAL )
            {
            // InternalOpenCypherParser.g:23464:2: ( RULE_STRING_LITERAL )
            // InternalOpenCypherParser.g:23465:3: RULE_STRING_LITERAL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getValueSTRING_LITERALTerminalRuleCall_5_0_0()); 
            }
            match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getValueSTRING_LITERALTerminalRuleCall_5_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__ValueAssignment_5_0"


    // $ANTLR start "rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1"
    // InternalOpenCypherParser.g:23474:1: rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 : ( ruleLegacyParameter ) ;
    public final void rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23478:1: ( ( ruleLegacyParameter ) )
            // InternalOpenCypherParser.g:23479:2: ( ruleLegacyParameter )
            {
            // InternalOpenCypherParser.g:23479:2: ( ruleLegacyParameter )
            // InternalOpenCypherParser.g:23480:3: ruleLegacyParameter
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterLegacyParameterParserRuleCall_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLegacyParameter();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterLegacyParameterParserRuleCall_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1"


    // $ANTLR start "rule__IndexQuery__IndexNameAssignment_1"
    // InternalOpenCypherParser.g:23489:1: rule__IndexQuery__IndexNameAssignment_1 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__IndexQuery__IndexNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23493:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:23494:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:23494:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:23495:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__IndexNameAssignment_1"


    // $ANTLR start "rule__IndexQuery__QueryAssignment_3_0"
    // InternalOpenCypherParser.g:23504:1: rule__IndexQuery__QueryAssignment_3_0 : ( RULE_STRING_LITERAL ) ;
    public final void rule__IndexQuery__QueryAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23508:1: ( ( RULE_STRING_LITERAL ) )
            // InternalOpenCypherParser.g:23509:2: ( RULE_STRING_LITERAL )
            {
            // InternalOpenCypherParser.g:23509:2: ( RULE_STRING_LITERAL )
            // InternalOpenCypherParser.g:23510:3: RULE_STRING_LITERAL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getQuerySTRING_LITERALTerminalRuleCall_3_0_0()); 
            }
            match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getQuerySTRING_LITERALTerminalRuleCall_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__QueryAssignment_3_0"


    // $ANTLR start "rule__IndexQuery__ParameterAssignment_3_1"
    // InternalOpenCypherParser.g:23519:1: rule__IndexQuery__ParameterAssignment_3_1 : ( ruleParameter ) ;
    public final void rule__IndexQuery__ParameterAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23523:1: ( ( ruleParameter ) )
            // InternalOpenCypherParser.g:23524:2: ( ruleParameter )
            {
            // InternalOpenCypherParser.g:23524:2: ( ruleParameter )
            // InternalOpenCypherParser.g:23525:3: ruleParameter
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getParameterParameterParserRuleCall_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getParameterParameterParserRuleCall_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__ParameterAssignment_3_1"


    // $ANTLR start "rule__IdLookup__IdsAssignment_1_0"
    // InternalOpenCypherParser.g:23534:1: rule__IdLookup__IdsAssignment_1_0 : ( ruleLiteralIds ) ;
    public final void rule__IdLookup__IdsAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23538:1: ( ( ruleLiteralIds ) )
            // InternalOpenCypherParser.g:23539:2: ( ruleLiteralIds )
            {
            // InternalOpenCypherParser.g:23539:2: ( ruleLiteralIds )
            // InternalOpenCypherParser.g:23540:3: ruleLiteralIds
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getIdsLiteralIdsParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLiteralIds();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getIdsLiteralIdsParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__IdsAssignment_1_0"


    // $ANTLR start "rule__IdLookup__LegacyParameterAssignment_1_1"
    // InternalOpenCypherParser.g:23549:1: rule__IdLookup__LegacyParameterAssignment_1_1 : ( ruleParameter ) ;
    public final void rule__IdLookup__LegacyParameterAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23553:1: ( ( ruleParameter ) )
            // InternalOpenCypherParser.g:23554:2: ( ruleParameter )
            {
            // InternalOpenCypherParser.g:23554:2: ( ruleParameter )
            // InternalOpenCypherParser.g:23555:3: ruleParameter
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getLegacyParameterParameterParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getLegacyParameterParameterParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__LegacyParameterAssignment_1_1"


    // $ANTLR start "rule__IdLookup__WildcardAssignment_1_2"
    // InternalOpenCypherParser.g:23564:1: rule__IdLookup__WildcardAssignment_1_2 : ( ( Asterisk ) ) ;
    public final void rule__IdLookup__WildcardAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23568:1: ( ( ( Asterisk ) ) )
            // InternalOpenCypherParser.g:23569:2: ( ( Asterisk ) )
            {
            // InternalOpenCypherParser.g:23569:2: ( ( Asterisk ) )
            // InternalOpenCypherParser.g:23570:3: ( Asterisk )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); 
            }
            // InternalOpenCypherParser.g:23571:3: ( Asterisk )
            // InternalOpenCypherParser.g:23572:4: Asterisk
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); 
            }
            match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__WildcardAssignment_1_2"


    // $ANTLR start "rule__LiteralIds__IdsAssignment_0"
    // InternalOpenCypherParser.g:23583:1: rule__LiteralIds__IdsAssignment_0 : ( ruleDecimalInteger ) ;
    public final void rule__LiteralIds__IdsAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23587:1: ( ( ruleDecimalInteger ) )
            // InternalOpenCypherParser.g:23588:2: ( ruleDecimalInteger )
            {
            // InternalOpenCypherParser.g:23588:2: ( ruleDecimalInteger )
            // InternalOpenCypherParser.g:23589:3: ruleDecimalInteger
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__IdsAssignment_0"


    // $ANTLR start "rule__LiteralIds__IdsAssignment_1_1"
    // InternalOpenCypherParser.g:23598:1: rule__LiteralIds__IdsAssignment_1_1 : ( ruleDecimalInteger ) ;
    public final void rule__LiteralIds__IdsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23602:1: ( ( ruleDecimalInteger ) )
            // InternalOpenCypherParser.g:23603:2: ( ruleDecimalInteger )
            {
            // InternalOpenCypherParser.g:23603:2: ( ruleDecimalInteger )
            // InternalOpenCypherParser.g:23604:3: ruleDecimalInteger
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__IdsAssignment_1_1"


    // $ANTLR start "rule__Where__ExpressionAssignment_1"
    // InternalOpenCypherParser.g:23613:1: rule__Where__ExpressionAssignment_1 : ( ruleExpression ) ;
    public final void rule__Where__ExpressionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23617:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23618:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23618:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23619:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWhereAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWhereAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Where__ExpressionAssignment_1"


    // $ANTLR start "rule__Pattern__PatternsAssignment_0"
    // InternalOpenCypherParser.g:23628:1: rule__Pattern__PatternsAssignment_0 : ( rulePatternPart ) ;
    public final void rule__Pattern__PatternsAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23632:1: ( ( rulePatternPart ) )
            // InternalOpenCypherParser.g:23633:2: ( rulePatternPart )
            {
            // InternalOpenCypherParser.g:23633:2: ( rulePatternPart )
            // InternalOpenCypherParser.g:23634:3: rulePatternPart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__PatternsAssignment_0"


    // $ANTLR start "rule__Pattern__PatternsAssignment_1_1"
    // InternalOpenCypherParser.g:23643:1: rule__Pattern__PatternsAssignment_1_1 : ( rulePatternPart ) ;
    public final void rule__Pattern__PatternsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23647:1: ( ( rulePatternPart ) )
            // InternalOpenCypherParser.g:23648:2: ( rulePatternPart )
            {
            // InternalOpenCypherParser.g:23648:2: ( rulePatternPart )
            // InternalOpenCypherParser.g:23649:3: rulePatternPart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__PatternsAssignment_1_1"


    // $ANTLR start "rule__PatternPart__VarAssignment_0_0"
    // InternalOpenCypherParser.g:23658:1: rule__PatternPart__VarAssignment_0_0 : ( ruleVariableDeclaration ) ;
    public final void rule__PatternPart__VarAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23662:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23663:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23663:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23664:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getVarVariableDeclarationParserRuleCall_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getVarVariableDeclarationParserRuleCall_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__VarAssignment_0_0"


    // $ANTLR start "rule__PatternPart__PartAssignment_0_2"
    // InternalOpenCypherParser.g:23673:1: rule__PatternPart__PartAssignment_0_2 : ( ruleAnonymousPatternPart ) ;
    public final void rule__PatternPart__PartAssignment_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23677:1: ( ( ruleAnonymousPatternPart ) )
            // InternalOpenCypherParser.g:23678:2: ( ruleAnonymousPatternPart )
            {
            // InternalOpenCypherParser.g:23678:2: ( ruleAnonymousPatternPart )
            // InternalOpenCypherParser.g:23679:3: ruleAnonymousPatternPart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getPartAnonymousPatternPartParserRuleCall_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAnonymousPatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getPartAnonymousPatternPartParserRuleCall_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__PartAssignment_0_2"


    // $ANTLR start "rule__ShortestPathPattern__PatternElementAssignment_0_3"
    // InternalOpenCypherParser.g:23688:1: rule__ShortestPathPattern__PatternElementAssignment_0_3 : ( rulePatternElement ) ;
    public final void rule__ShortestPathPattern__PatternElementAssignment_0_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23692:1: ( ( rulePatternElement ) )
            // InternalOpenCypherParser.g:23693:2: ( rulePatternElement )
            {
            // InternalOpenCypherParser.g:23693:2: ( rulePatternElement )
            // InternalOpenCypherParser.g:23694:3: rulePatternElement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_0_3_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_0_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__PatternElementAssignment_0_3"


    // $ANTLR start "rule__ShortestPathPattern__PatternElementAssignment_1_3"
    // InternalOpenCypherParser.g:23703:1: rule__ShortestPathPattern__PatternElementAssignment_1_3 : ( rulePatternElement ) ;
    public final void rule__ShortestPathPattern__PatternElementAssignment_1_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23707:1: ( ( rulePatternElement ) )
            // InternalOpenCypherParser.g:23708:2: ( rulePatternElement )
            {
            // InternalOpenCypherParser.g:23708:2: ( rulePatternElement )
            // InternalOpenCypherParser.g:23709:3: rulePatternElement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_1_3_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__PatternElementAssignment_1_3"


    // $ANTLR start "rule__PatternElement__NodepatternAssignment_0_0"
    // InternalOpenCypherParser.g:23718:1: rule__PatternElement__NodepatternAssignment_0_0 : ( ruleNodePattern ) ;
    public final void rule__PatternElement__NodepatternAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23722:1: ( ( ruleNodePattern ) )
            // InternalOpenCypherParser.g:23723:2: ( ruleNodePattern )
            {
            // InternalOpenCypherParser.g:23723:2: ( ruleNodePattern )
            // InternalOpenCypherParser.g:23724:3: ruleNodePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getNodepatternNodePatternParserRuleCall_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getNodepatternNodePatternParserRuleCall_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__NodepatternAssignment_0_0"


    // $ANTLR start "rule__PatternElement__ChainAssignment_0_1"
    // InternalOpenCypherParser.g:23733:1: rule__PatternElement__ChainAssignment_0_1 : ( rulePatternElementChain ) ;
    public final void rule__PatternElement__ChainAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23737:1: ( ( rulePatternElementChain ) )
            // InternalOpenCypherParser.g:23738:2: ( rulePatternElementChain )
            {
            // InternalOpenCypherParser.g:23738:2: ( rulePatternElementChain )
            // InternalOpenCypherParser.g:23739:3: rulePatternElementChain
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getChainPatternElementChainParserRuleCall_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternElementChain();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getChainPatternElementChainParserRuleCall_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__ChainAssignment_0_1"


    // $ANTLR start "rule__NodePattern__VariableAssignment_2"
    // InternalOpenCypherParser.g:23748:1: rule__NodePattern__VariableAssignment_2 : ( ruleVariableDeclaration ) ;
    public final void rule__NodePattern__VariableAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23752:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23753:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23753:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23754:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__VariableAssignment_2"


    // $ANTLR start "rule__NodePattern__PropertiesAssignment_4"
    // InternalOpenCypherParser.g:23763:1: rule__NodePattern__PropertiesAssignment_4 : ( ruleProperties ) ;
    public final void rule__NodePattern__PropertiesAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23767:1: ( ( ruleProperties ) )
            // InternalOpenCypherParser.g:23768:2: ( ruleProperties )
            {
            // InternalOpenCypherParser.g:23768:2: ( ruleProperties )
            // InternalOpenCypherParser.g:23769:3: ruleProperties
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getPropertiesPropertiesParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleProperties();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getPropertiesPropertiesParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__PropertiesAssignment_4"


    // $ANTLR start "rule__PatternElementChain__RelationshipPatternAssignment_0"
    // InternalOpenCypherParser.g:23778:1: rule__PatternElementChain__RelationshipPatternAssignment_0 : ( ruleRelationshipPattern ) ;
    public final void rule__PatternElementChain__RelationshipPatternAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23782:1: ( ( ruleRelationshipPattern ) )
            // InternalOpenCypherParser.g:23783:2: ( ruleRelationshipPattern )
            {
            // InternalOpenCypherParser.g:23783:2: ( ruleRelationshipPattern )
            // InternalOpenCypherParser.g:23784:3: ruleRelationshipPattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainAccess().getRelationshipPatternRelationshipPatternParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainAccess().getRelationshipPatternRelationshipPatternParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__RelationshipPatternAssignment_0"


    // $ANTLR start "rule__PatternElementChain__NodePatternAssignment_1"
    // InternalOpenCypherParser.g:23793:1: rule__PatternElementChain__NodePatternAssignment_1 : ( ruleNodePattern ) ;
    public final void rule__PatternElementChain__NodePatternAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23797:1: ( ( ruleNodePattern ) )
            // InternalOpenCypherParser.g:23798:2: ( ruleNodePattern )
            {
            // InternalOpenCypherParser.g:23798:2: ( ruleNodePattern )
            // InternalOpenCypherParser.g:23799:3: ruleNodePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainAccess().getNodePatternNodePatternParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainAccess().getNodePatternNodePatternParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__NodePatternAssignment_1"


    // $ANTLR start "rule__RelationshipPattern__IncomingAssignment_1_0"
    // InternalOpenCypherParser.g:23808:1: rule__RelationshipPattern__IncomingAssignment_1_0 : ( ruleLeftArrowHead ) ;
    public final void rule__RelationshipPattern__IncomingAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23812:1: ( ( ruleLeftArrowHead ) )
            // InternalOpenCypherParser.g:23813:2: ( ruleLeftArrowHead )
            {
            // InternalOpenCypherParser.g:23813:2: ( ruleLeftArrowHead )
            // InternalOpenCypherParser.g:23814:3: ruleLeftArrowHead
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getIncomingLeftArrowHeadParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLeftArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getIncomingLeftArrowHeadParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__IncomingAssignment_1_0"


    // $ANTLR start "rule__RelationshipPattern__DetailAssignment_1_2"
    // InternalOpenCypherParser.g:23823:1: rule__RelationshipPattern__DetailAssignment_1_2 : ( ruleRelationshipDetail ) ;
    public final void rule__RelationshipPattern__DetailAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23827:1: ( ( ruleRelationshipDetail ) )
            // InternalOpenCypherParser.g:23828:2: ( ruleRelationshipDetail )
            {
            // InternalOpenCypherParser.g:23828:2: ( ruleRelationshipDetail )
            // InternalOpenCypherParser.g:23829:3: ruleRelationshipDetail
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getDetailRelationshipDetailParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipDetail();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getDetailRelationshipDetailParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__DetailAssignment_1_2"


    // $ANTLR start "rule__RelationshipPattern__OutgoingAssignment_1_4"
    // InternalOpenCypherParser.g:23838:1: rule__RelationshipPattern__OutgoingAssignment_1_4 : ( ruleRightArrowHead ) ;
    public final void rule__RelationshipPattern__OutgoingAssignment_1_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23842:1: ( ( ruleRightArrowHead ) )
            // InternalOpenCypherParser.g:23843:2: ( ruleRightArrowHead )
            {
            // InternalOpenCypherParser.g:23843:2: ( ruleRightArrowHead )
            // InternalOpenCypherParser.g:23844:3: ruleRightArrowHead
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getOutgoingRightArrowHeadParserRuleCall_1_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRightArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getOutgoingRightArrowHeadParserRuleCall_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__OutgoingAssignment_1_4"


    // $ANTLR start "rule__RelationshipDetail__VariableAssignment_2"
    // InternalOpenCypherParser.g:23853:1: rule__RelationshipDetail__VariableAssignment_2 : ( ruleVariableDeclaration ) ;
    public final void rule__RelationshipDetail__VariableAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23857:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23858:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23858:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23859:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__VariableAssignment_2"


    // $ANTLR start "rule__RelationshipDetail__OptionalAssignment_3"
    // InternalOpenCypherParser.g:23868:1: rule__RelationshipDetail__OptionalAssignment_3 : ( ( QuestionMark ) ) ;
    public final void rule__RelationshipDetail__OptionalAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23872:1: ( ( ( QuestionMark ) ) )
            // InternalOpenCypherParser.g:23873:2: ( ( QuestionMark ) )
            {
            // InternalOpenCypherParser.g:23873:2: ( ( QuestionMark ) )
            // InternalOpenCypherParser.g:23874:3: ( QuestionMark )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); 
            }
            // InternalOpenCypherParser.g:23875:3: ( QuestionMark )
            // InternalOpenCypherParser.g:23876:4: QuestionMark
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); 
            }
            match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__OptionalAssignment_3"


    // $ANTLR start "rule__RelationshipDetail__RangeAssignment_5"
    // InternalOpenCypherParser.g:23887:1: rule__RelationshipDetail__RangeAssignment_5 : ( ruleRangeLiteral ) ;
    public final void rule__RelationshipDetail__RangeAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23891:1: ( ( ruleRangeLiteral ) )
            // InternalOpenCypherParser.g:23892:2: ( ruleRangeLiteral )
            {
            // InternalOpenCypherParser.g:23892:2: ( ruleRangeLiteral )
            // InternalOpenCypherParser.g:23893:3: ruleRangeLiteral
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getRangeRangeLiteralParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRangeLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getRangeRangeLiteralParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__RangeAssignment_5"


    // $ANTLR start "rule__RelationshipDetail__PropertiesAssignment_6"
    // InternalOpenCypherParser.g:23902:1: rule__RelationshipDetail__PropertiesAssignment_6 : ( ruleProperties ) ;
    public final void rule__RelationshipDetail__PropertiesAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23906:1: ( ( ruleProperties ) )
            // InternalOpenCypherParser.g:23907:2: ( ruleProperties )
            {
            // InternalOpenCypherParser.g:23907:2: ( ruleProperties )
            // InternalOpenCypherParser.g:23908:3: ruleProperties
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getPropertiesPropertiesParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleProperties();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getPropertiesPropertiesParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__PropertiesAssignment_6"


    // $ANTLR start "rule__RelationshipTypes__RelTypeNamesAssignment_1"
    // InternalOpenCypherParser.g:23917:1: rule__RelationshipTypes__RelTypeNamesAssignment_1 : ( ruleRelTypeName ) ;
    public final void rule__RelationshipTypes__RelTypeNamesAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23921:1: ( ( ruleRelTypeName ) )
            // InternalOpenCypherParser.g:23922:2: ( ruleRelTypeName )
            {
            // InternalOpenCypherParser.g:23922:2: ( ruleRelTypeName )
            // InternalOpenCypherParser.g:23923:3: ruleRelTypeName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesRelTypeNameParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelTypeName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesRelTypeNameParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__RelTypeNamesAssignment_1"


    // $ANTLR start "rule__RelationshipTypes__RelTypeNamesAssignment_2_2"
    // InternalOpenCypherParser.g:23932:1: rule__RelationshipTypes__RelTypeNamesAssignment_2_2 : ( ruleRelTypeName ) ;
    public final void rule__RelationshipTypes__RelTypeNamesAssignment_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23936:1: ( ( ruleRelTypeName ) )
            // InternalOpenCypherParser.g:23937:2: ( ruleRelTypeName )
            {
            // InternalOpenCypherParser.g:23937:2: ( ruleRelTypeName )
            // InternalOpenCypherParser.g:23938:3: ruleRelTypeName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesRelTypeNameParserRuleCall_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelTypeName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getRelTypeNamesRelTypeNameParserRuleCall_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__RelTypeNamesAssignment_2_2"


    // $ANTLR start "rule__NodeLabels__NodeLabelsAssignment"
    // InternalOpenCypherParser.g:23947:1: rule__NodeLabels__NodeLabelsAssignment : ( ruleNodeLabel ) ;
    public final void rule__NodeLabels__NodeLabelsAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23951:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:23952:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:23952:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:23953:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabels__NodeLabelsAssignment"


    // $ANTLR start "rule__NodeLabel__LabelNameAssignment_1"
    // InternalOpenCypherParser.g:23962:1: rule__NodeLabel__LabelNameAssignment_1 : ( ruleLabelName ) ;
    public final void rule__NodeLabel__LabelNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23966:1: ( ( ruleLabelName ) )
            // InternalOpenCypherParser.g:23967:2: ( ruleLabelName )
            {
            // InternalOpenCypherParser.g:23967:2: ( ruleLabelName )
            // InternalOpenCypherParser.g:23968:3: ruleLabelName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelAccess().getLabelNameLabelNameParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLabelName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelAccess().getLabelNameLabelNameParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabel__LabelNameAssignment_1"


    // $ANTLR start "rule__RangeLiteral__LowerAssignment_2_0"
    // InternalOpenCypherParser.g:23977:1: rule__RangeLiteral__LowerAssignment_2_0 : ( ruleNumber ) ;
    public final void rule__RangeLiteral__LowerAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23981:1: ( ( ruleNumber ) )
            // InternalOpenCypherParser.g:23982:2: ( ruleNumber )
            {
            // InternalOpenCypherParser.g:23982:2: ( ruleNumber )
            // InternalOpenCypherParser.g:23983:3: ruleNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__LowerAssignment_2_0"


    // $ANTLR start "rule__RangeLiteral__VariableLengthAssignment_2_1_0"
    // InternalOpenCypherParser.g:23992:1: rule__RangeLiteral__VariableLengthAssignment_2_1_0 : ( ( FullStopFullStop ) ) ;
    public final void rule__RangeLiteral__VariableLengthAssignment_2_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23996:1: ( ( ( FullStopFullStop ) ) )
            // InternalOpenCypherParser.g:23997:2: ( ( FullStopFullStop ) )
            {
            // InternalOpenCypherParser.g:23997:2: ( ( FullStopFullStop ) )
            // InternalOpenCypherParser.g:23998:3: ( FullStopFullStop )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getVariableLengthFullStopFullStopKeyword_2_1_0_0()); 
            }
            // InternalOpenCypherParser.g:23999:3: ( FullStopFullStop )
            // InternalOpenCypherParser.g:24000:4: FullStopFullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getVariableLengthFullStopFullStopKeyword_2_1_0_0()); 
            }
            match(input,FullStopFullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getVariableLengthFullStopFullStopKeyword_2_1_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getVariableLengthFullStopFullStopKeyword_2_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__VariableLengthAssignment_2_1_0"


    // $ANTLR start "rule__RangeLiteral__UpperAssignment_2_1_1"
    // InternalOpenCypherParser.g:24011:1: rule__RangeLiteral__UpperAssignment_2_1_1 : ( ruleNumber ) ;
    public final void rule__RangeLiteral__UpperAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24015:1: ( ( ruleNumber ) )
            // InternalOpenCypherParser.g:24016:2: ( ruleNumber )
            {
            // InternalOpenCypherParser.g:24016:2: ( ruleNumber )
            // InternalOpenCypherParser.g:24017:3: ruleNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__UpperAssignment_2_1_1"


    // $ANTLR start "rule__OrExpression__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:24026:1: rule__OrExpression__OperatorAssignment_1_1 : ( ( OR ) ) ;
    public final void rule__OrExpression__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24030:1: ( ( ( OR ) ) )
            // InternalOpenCypherParser.g:24031:2: ( ( OR ) )
            {
            // InternalOpenCypherParser.g:24031:2: ( ( OR ) )
            // InternalOpenCypherParser.g:24032:3: ( OR )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); 
            }
            // InternalOpenCypherParser.g:24033:3: ( OR )
            // InternalOpenCypherParser.g:24034:4: OR
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); 
            }
            match(input,OR,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__OperatorAssignment_1_1"


    // $ANTLR start "rule__OrExpression__RightAssignment_1_2"
    // InternalOpenCypherParser.g:24045:1: rule__OrExpression__RightAssignment_1_2 : ( ruleXorExpression ) ;
    public final void rule__OrExpression__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24049:1: ( ( ruleXorExpression ) )
            // InternalOpenCypherParser.g:24050:2: ( ruleXorExpression )
            {
            // InternalOpenCypherParser.g:24050:2: ( ruleXorExpression )
            // InternalOpenCypherParser.g:24051:3: ruleXorExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXorExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__OrExpression__RightAssignment_1_2"


    // $ANTLR start "rule__XorExpression__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:24060:1: rule__XorExpression__OperatorAssignment_1_1 : ( ( XOR ) ) ;
    public final void rule__XorExpression__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24064:1: ( ( ( XOR ) ) )
            // InternalOpenCypherParser.g:24065:2: ( ( XOR ) )
            {
            // InternalOpenCypherParser.g:24065:2: ( ( XOR ) )
            // InternalOpenCypherParser.g:24066:3: ( XOR )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); 
            }
            // InternalOpenCypherParser.g:24067:3: ( XOR )
            // InternalOpenCypherParser.g:24068:4: XOR
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); 
            }
            match(input,XOR,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__OperatorAssignment_1_1"


    // $ANTLR start "rule__XorExpression__RightAssignment_1_2"
    // InternalOpenCypherParser.g:24079:1: rule__XorExpression__RightAssignment_1_2 : ( ruleAndExpression ) ;
    public final void rule__XorExpression__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24083:1: ( ( ruleAndExpression ) )
            // InternalOpenCypherParser.g:24084:2: ( ruleAndExpression )
            {
            // InternalOpenCypherParser.g:24084:2: ( ruleAndExpression )
            // InternalOpenCypherParser.g:24085:3: ruleAndExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAndExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__XorExpression__RightAssignment_1_2"


    // $ANTLR start "rule__AndExpression__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:24094:1: rule__AndExpression__OperatorAssignment_1_1 : ( ( AND ) ) ;
    public final void rule__AndExpression__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24098:1: ( ( ( AND ) ) )
            // InternalOpenCypherParser.g:24099:2: ( ( AND ) )
            {
            // InternalOpenCypherParser.g:24099:2: ( ( AND ) )
            // InternalOpenCypherParser.g:24100:3: ( AND )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); 
            }
            // InternalOpenCypherParser.g:24101:3: ( AND )
            // InternalOpenCypherParser.g:24102:4: AND
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); 
            }
            match(input,AND,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__OperatorAssignment_1_1"


    // $ANTLR start "rule__AndExpression__RightAssignment_1_2"
    // InternalOpenCypherParser.g:24113:1: rule__AndExpression__RightAssignment_1_2 : ( ruleNotExpression ) ;
    public final void rule__AndExpression__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24117:1: ( ( ruleNotExpression ) )
            // InternalOpenCypherParser.g:24118:2: ( ruleNotExpression )
            {
            // InternalOpenCypherParser.g:24118:2: ( ruleNotExpression )
            // InternalOpenCypherParser.g:24119:3: ruleNotExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndExpressionAccess().getRightNotExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNotExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndExpressionAccess().getRightNotExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndExpression__RightAssignment_1_2"


    // $ANTLR start "rule__NotExpression__OperatorAssignment_0_1"
    // InternalOpenCypherParser.g:24128:1: rule__NotExpression__OperatorAssignment_0_1 : ( ( NOT ) ) ;
    public final void rule__NotExpression__OperatorAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24132:1: ( ( ( NOT ) ) )
            // InternalOpenCypherParser.g:24133:2: ( ( NOT ) )
            {
            // InternalOpenCypherParser.g:24133:2: ( ( NOT ) )
            // InternalOpenCypherParser.g:24134:3: ( NOT )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); 
            }
            // InternalOpenCypherParser.g:24135:3: ( NOT )
            // InternalOpenCypherParser.g:24136:4: NOT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); 
            }
            match(input,NOT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNotExpressionAccess().getOperatorNOTKeyword_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NotExpression__OperatorAssignment_0_1"


    // $ANTLR start "rule__NotExpression__LeftAssignment_0_2"
    // InternalOpenCypherParser.g:24147:1: rule__NotExpression__LeftAssignment_0_2 : ( ruleNotExpression ) ;
    public final void rule__NotExpression__LeftAssignment_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24151:1: ( ( ruleNotExpression ) )
            // InternalOpenCypherParser.g:24152:2: ( ruleNotExpression )
            {
            // InternalOpenCypherParser.g:24152:2: ( ruleNotExpression )
            // InternalOpenCypherParser.g:24153:3: ruleNotExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNotExpressionAccess().getLeftNotExpressionParserRuleCall_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNotExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNotExpressionAccess().getLeftNotExpressionParserRuleCall_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NotExpression__LeftAssignment_0_2"


    // $ANTLR start "rule__ComparisonExpression__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:24162:1: rule__ComparisonExpression__OperatorAssignment_1_1 : ( ( rule__ComparisonExpression__OperatorAlternatives_1_1_0 ) ) ;
    public final void rule__ComparisonExpression__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24166:1: ( ( ( rule__ComparisonExpression__OperatorAlternatives_1_1_0 ) ) )
            // InternalOpenCypherParser.g:24167:2: ( ( rule__ComparisonExpression__OperatorAlternatives_1_1_0 ) )
            {
            // InternalOpenCypherParser.g:24167:2: ( ( rule__ComparisonExpression__OperatorAlternatives_1_1_0 ) )
            // InternalOpenCypherParser.g:24168:3: ( rule__ComparisonExpression__OperatorAlternatives_1_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); 
            }
            // InternalOpenCypherParser.g:24169:3: ( rule__ComparisonExpression__OperatorAlternatives_1_1_0 )
            // InternalOpenCypherParser.g:24169:4: rule__ComparisonExpression__OperatorAlternatives_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__ComparisonExpression__OperatorAlternatives_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__OperatorAssignment_1_1"


    // $ANTLR start "rule__ComparisonExpression__RightAssignment_1_2"
    // InternalOpenCypherParser.g:24177:1: rule__ComparisonExpression__RightAssignment_1_2 : ( ruleAddOrSubtractExpression ) ;
    public final void rule__ComparisonExpression__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24181:1: ( ( ruleAddOrSubtractExpression ) )
            // InternalOpenCypherParser.g:24182:2: ( ruleAddOrSubtractExpression )
            {
            // InternalOpenCypherParser.g:24182:2: ( ruleAddOrSubtractExpression )
            // InternalOpenCypherParser.g:24183:3: ruleAddOrSubtractExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getComparisonExpressionAccess().getRightAddOrSubtractExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getComparisonExpressionAccess().getRightAddOrSubtractExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ComparisonExpression__RightAssignment_1_2"


    // $ANTLR start "rule__AddOrSubtractExpression__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:24192:1: rule__AddOrSubtractExpression__OperatorAssignment_1_1 : ( ( rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0 ) ) ;
    public final void rule__AddOrSubtractExpression__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24196:1: ( ( ( rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0 ) ) )
            // InternalOpenCypherParser.g:24197:2: ( ( rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0 ) )
            {
            // InternalOpenCypherParser.g:24197:2: ( ( rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0 ) )
            // InternalOpenCypherParser.g:24198:3: ( rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); 
            }
            // InternalOpenCypherParser.g:24199:3: ( rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0 )
            // InternalOpenCypherParser.g:24199:4: rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__AddOrSubtractExpression__OperatorAlternatives_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__OperatorAssignment_1_1"


    // $ANTLR start "rule__AddOrSubtractExpression__RightAssignment_1_2"
    // InternalOpenCypherParser.g:24207:1: rule__AddOrSubtractExpression__RightAssignment_1_2 : ( ruleMultiplyDivideModuloExpression ) ;
    public final void rule__AddOrSubtractExpression__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24211:1: ( ( ruleMultiplyDivideModuloExpression ) )
            // InternalOpenCypherParser.g:24212:2: ( ruleMultiplyDivideModuloExpression )
            {
            // InternalOpenCypherParser.g:24212:2: ( ruleMultiplyDivideModuloExpression )
            // InternalOpenCypherParser.g:24213:3: ruleMultiplyDivideModuloExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAddOrSubtractExpressionAccess().getRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMultiplyDivideModuloExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAddOrSubtractExpressionAccess().getRightMultiplyDivideModuloExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddOrSubtractExpression__RightAssignment_1_2"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:24222:1: rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1 : ( ( rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0 ) ) ;
    public final void rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24226:1: ( ( ( rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0 ) ) )
            // InternalOpenCypherParser.g:24227:2: ( ( rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0 ) )
            {
            // InternalOpenCypherParser.g:24227:2: ( ( rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0 ) )
            // InternalOpenCypherParser.g:24228:3: ( rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAlternatives_1_1_0()); 
            }
            // InternalOpenCypherParser.g:24229:3: ( rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0 )
            // InternalOpenCypherParser.g:24229:4: rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__MultiplyDivideModuloExpression__OperatorAlternatives_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getOperatorAlternatives_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__OperatorAssignment_1_1"


    // $ANTLR start "rule__MultiplyDivideModuloExpression__RightAssignment_1_2"
    // InternalOpenCypherParser.g:24237:1: rule__MultiplyDivideModuloExpression__RightAssignment_1_2 : ( rulePowerOfExpression ) ;
    public final void rule__MultiplyDivideModuloExpression__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24241:1: ( ( rulePowerOfExpression ) )
            // InternalOpenCypherParser.g:24242:2: ( rulePowerOfExpression )
            {
            // InternalOpenCypherParser.g:24242:2: ( rulePowerOfExpression )
            // InternalOpenCypherParser.g:24243:3: rulePowerOfExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightPowerOfExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePowerOfExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMultiplyDivideModuloExpressionAccess().getRightPowerOfExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MultiplyDivideModuloExpression__RightAssignment_1_2"


    // $ANTLR start "rule__PowerOfExpression__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:24252:1: rule__PowerOfExpression__OperatorAssignment_1_1 : ( ( CircumflexAccent ) ) ;
    public final void rule__PowerOfExpression__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24256:1: ( ( ( CircumflexAccent ) ) )
            // InternalOpenCypherParser.g:24257:2: ( ( CircumflexAccent ) )
            {
            // InternalOpenCypherParser.g:24257:2: ( ( CircumflexAccent ) )
            // InternalOpenCypherParser.g:24258:3: ( CircumflexAccent )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); 
            }
            // InternalOpenCypherParser.g:24259:3: ( CircumflexAccent )
            // InternalOpenCypherParser.g:24260:4: CircumflexAccent
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); 
            }
            match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOfExpressionAccess().getOperatorCircumflexAccentKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__OperatorAssignment_1_1"


    // $ANTLR start "rule__PowerOfExpression__RightAssignment_1_2"
    // InternalOpenCypherParser.g:24271:1: rule__PowerOfExpression__RightAssignment_1_2 : ( ruleUnaryAddOrSubtractExpression ) ;
    public final void rule__PowerOfExpression__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24275:1: ( ( ruleUnaryAddOrSubtractExpression ) )
            // InternalOpenCypherParser.g:24276:2: ( ruleUnaryAddOrSubtractExpression )
            {
            // InternalOpenCypherParser.g:24276:2: ( ruleUnaryAddOrSubtractExpression )
            // InternalOpenCypherParser.g:24277:3: ruleUnaryAddOrSubtractExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOfExpressionAccess().getRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUnaryAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOfExpressionAccess().getRightUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PowerOfExpression__RightAssignment_1_2"


    // $ANTLR start "rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:24286:1: rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1 : ( ( rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0 ) ) ;
    public final void rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24290:1: ( ( ( rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0 ) ) )
            // InternalOpenCypherParser.g:24291:2: ( ( rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0 ) )
            {
            // InternalOpenCypherParser.g:24291:2: ( ( rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0 ) )
            // InternalOpenCypherParser.g:24292:3: ( rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); 
            }
            // InternalOpenCypherParser.g:24293:3: ( rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0 )
            // InternalOpenCypherParser.g:24293:4: rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__UnaryAddOrSubtractExpression__OperatorAlternatives_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getOperatorAlternatives_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryAddOrSubtractExpression__OperatorAssignment_1_1"


    // $ANTLR start "rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2"
    // InternalOpenCypherParser.g:24301:1: rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2 : ( ruleUnaryAddOrSubtractExpression ) ;
    public final void rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24305:1: ( ( ruleUnaryAddOrSubtractExpression ) )
            // InternalOpenCypherParser.g:24306:2: ( ruleUnaryAddOrSubtractExpression )
            {
            // InternalOpenCypherParser.g:24306:2: ( ruleUnaryAddOrSubtractExpression )
            // InternalOpenCypherParser.g:24307:3: ruleUnaryAddOrSubtractExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUnaryAddOrSubtractExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnaryAddOrSubtractExpressionAccess().getLeftUnaryAddOrSubtractExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryAddOrSubtractExpression__LeftAssignment_1_2"


    // $ANTLR start "rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1"
    // InternalOpenCypherParser.g:24316:1: rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1 : ( ( rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0 ) ) ;
    public final void rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24320:1: ( ( ( rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0 ) ) )
            // InternalOpenCypherParser.g:24321:2: ( ( rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0 ) )
            {
            // InternalOpenCypherParser.g:24321:2: ( ( rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0 ) )
            // InternalOpenCypherParser.g:24322:3: ( rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAlternatives_1_1_0()); 
            }
            // InternalOpenCypherParser.g:24323:3: ( rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0 )
            // InternalOpenCypherParser.g:24323:4: rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__StringListNullOperatorExpression__ExpressionsAlternatives_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringListNullOperatorExpressionAccess().getExpressionsAlternatives_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringListNullOperatorExpression__ExpressionsAssignment_1_1"


    // $ANTLR start "rule__ListOperatorExpression__ExpressionAssignment_0_2"
    // InternalOpenCypherParser.g:24331:1: rule__ListOperatorExpression__ExpressionAssignment_0_2 : ( ruleExpression ) ;
    public final void rule__ListOperatorExpression__ExpressionAssignment_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24335:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24336:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24336:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24337:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getExpressionExpressionParserRuleCall_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getExpressionExpressionParserRuleCall_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__ExpressionAssignment_0_2"


    // $ANTLR start "rule__ListOperatorExpression__LowerAssignment_1_2"
    // InternalOpenCypherParser.g:24346:1: rule__ListOperatorExpression__LowerAssignment_1_2 : ( ruleExpression ) ;
    public final void rule__ListOperatorExpression__LowerAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24350:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24351:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24351:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24352:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getLowerExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getLowerExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__LowerAssignment_1_2"


    // $ANTLR start "rule__ListOperatorExpression__UpperAssignment_1_4"
    // InternalOpenCypherParser.g:24361:1: rule__ListOperatorExpression__UpperAssignment_1_4 : ( ruleExpression ) ;
    public final void rule__ListOperatorExpression__UpperAssignment_1_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24365:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24366:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24366:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24367:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListOperatorExpressionAccess().getUpperExpressionParserRuleCall_1_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListOperatorExpressionAccess().getUpperExpressionParserRuleCall_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListOperatorExpression__UpperAssignment_1_4"


    // $ANTLR start "rule__StringOperatorExpression__RightAssignment_1"
    // InternalOpenCypherParser.g:24376:1: rule__StringOperatorExpression__RightAssignment_1 : ( rulePropertyOrLabelsExpression ) ;
    public final void rule__StringOperatorExpression__RightAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24380:1: ( ( rulePropertyOrLabelsExpression ) )
            // InternalOpenCypherParser.g:24381:2: ( rulePropertyOrLabelsExpression )
            {
            // InternalOpenCypherParser.g:24381:2: ( rulePropertyOrLabelsExpression )
            // InternalOpenCypherParser.g:24382:3: rulePropertyOrLabelsExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringOperatorExpressionAccess().getRightPropertyOrLabelsExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyOrLabelsExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringOperatorExpressionAccess().getRightPropertyOrLabelsExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringOperatorExpression__RightAssignment_1"


    // $ANTLR start "rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1"
    // InternalOpenCypherParser.g:24391:1: rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1 : ( rulePropertyLookup ) ;
    public final void rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24395:1: ( ( rulePropertyLookup ) )
            // InternalOpenCypherParser.g:24396:2: ( rulePropertyLookup )
            {
            // InternalOpenCypherParser.g:24396:2: ( rulePropertyLookup )
            // InternalOpenCypherParser.g:24397:3: rulePropertyLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyOrLabelsExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyOrLabelsExpression__PropertyLookupsAssignment_1_1"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_7_3"
    // InternalOpenCypherParser.g:24406:1: rule__Atom__FilterExpressionAssignment_7_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_7_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24410:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24411:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24411:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24412:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_7_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_7_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_7_3"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_8_3"
    // InternalOpenCypherParser.g:24421:1: rule__Atom__FilterExpressionAssignment_8_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_8_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24425:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24426:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24426:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24427:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_8_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_8_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_8_3"


    // $ANTLR start "rule__Atom__ExpressionAssignment_8_4_1"
    // InternalOpenCypherParser.g:24436:1: rule__Atom__ExpressionAssignment_8_4_1 : ( ruleExpression ) ;
    public final void rule__Atom__ExpressionAssignment_8_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24440:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24441:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24441:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24442:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_8_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_8_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__ExpressionAssignment_8_4_1"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_10_3"
    // InternalOpenCypherParser.g:24451:1: rule__Atom__FilterExpressionAssignment_10_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_10_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24455:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24456:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24456:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24457:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_10_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_10_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_10_3"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_11_3"
    // InternalOpenCypherParser.g:24466:1: rule__Atom__FilterExpressionAssignment_11_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_11_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24470:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24471:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24471:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24472:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_11_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_11_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_11_3"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_12_3"
    // InternalOpenCypherParser.g:24481:1: rule__Atom__FilterExpressionAssignment_12_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_12_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24485:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24486:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24486:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24487:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_12_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_12_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_12_3"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_13_3"
    // InternalOpenCypherParser.g:24496:1: rule__Atom__FilterExpressionAssignment_13_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_13_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24500:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24501:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24501:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24502:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_13_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_13_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_13_3"


    // $ANTLR start "rule__Atom__VariableRefAssignment_18_1"
    // InternalOpenCypherParser.g:24511:1: rule__Atom__VariableRefAssignment_18_1 : ( ( ruleSYMBOLIC_NAME_X ) ) ;
    public final void rule__Atom__VariableRefAssignment_18_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24515:1: ( ( ( ruleSYMBOLIC_NAME_X ) ) )
            // InternalOpenCypherParser.g:24516:2: ( ( ruleSYMBOLIC_NAME_X ) )
            {
            // InternalOpenCypherParser.g:24516:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:24517:3: ( ruleSYMBOLIC_NAME_X )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationCrossReference_18_1_0()); 
            }
            // InternalOpenCypherParser.g:24518:3: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:24519:4: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationSYMBOLIC_NAME_XParserRuleCall_18_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationSYMBOLIC_NAME_XParserRuleCall_18_1_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationCrossReference_18_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__VariableRefAssignment_18_1"


    // $ANTLR start "rule__BooleanLiteral__ValueAssignment_1"
    // InternalOpenCypherParser.g:24530:1: rule__BooleanLiteral__ValueAssignment_1 : ( ( rule__BooleanLiteral__ValueAlternatives_1_0 ) ) ;
    public final void rule__BooleanLiteral__ValueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24534:1: ( ( ( rule__BooleanLiteral__ValueAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:24535:2: ( ( rule__BooleanLiteral__ValueAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:24535:2: ( ( rule__BooleanLiteral__ValueAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:24536:3: ( rule__BooleanLiteral__ValueAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:24537:3: ( rule__BooleanLiteral__ValueAlternatives_1_0 )
            // InternalOpenCypherParser.g:24537:4: rule__BooleanLiteral__ValueAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__BooleanLiteral__ValueAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BooleanLiteral__ValueAssignment_1"


    // $ANTLR start "rule__ListLiteral__ExpressionsAssignment_2_0"
    // InternalOpenCypherParser.g:24545:1: rule__ListLiteral__ExpressionsAssignment_2_0 : ( ruleExpression ) ;
    public final void rule__ListLiteral__ExpressionsAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24549:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24550:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24550:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24551:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getExpressionsExpressionParserRuleCall_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getExpressionsExpressionParserRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__ExpressionsAssignment_2_0"


    // $ANTLR start "rule__ListLiteral__ExpressionsAssignment_2_1_1"
    // InternalOpenCypherParser.g:24560:1: rule__ListLiteral__ExpressionsAssignment_2_1_1 : ( ruleExpression ) ;
    public final void rule__ListLiteral__ExpressionsAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24564:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24565:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24565:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24566:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListLiteralAccess().getExpressionsExpressionParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListLiteralAccess().getExpressionsExpressionParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListLiteral__ExpressionsAssignment_2_1_1"


    // $ANTLR start "rule__Reduce__AccumulatorAssignment_2"
    // InternalOpenCypherParser.g:24575:1: rule__Reduce__AccumulatorAssignment_2 : ( ruleVariableDeclaration ) ;
    public final void rule__Reduce__AccumulatorAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24579:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:24580:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:24580:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:24581:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getAccumulatorVariableDeclarationParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getAccumulatorVariableDeclarationParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__AccumulatorAssignment_2"


    // $ANTLR start "rule__Reduce__AccumulatorExpressionAssignment_4"
    // InternalOpenCypherParser.g:24590:1: rule__Reduce__AccumulatorExpressionAssignment_4 : ( ruleExpression ) ;
    public final void rule__Reduce__AccumulatorExpressionAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24594:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24595:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24595:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24596:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getAccumulatorExpressionExpressionParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getAccumulatorExpressionExpressionParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__AccumulatorExpressionAssignment_4"


    // $ANTLR start "rule__Reduce__IdInCollAssignment_6"
    // InternalOpenCypherParser.g:24605:1: rule__Reduce__IdInCollAssignment_6 : ( ruleIdInColl ) ;
    public final void rule__Reduce__IdInCollAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24609:1: ( ( ruleIdInColl ) )
            // InternalOpenCypherParser.g:24610:2: ( ruleIdInColl )
            {
            // InternalOpenCypherParser.g:24610:2: ( ruleIdInColl )
            // InternalOpenCypherParser.g:24611:3: ruleIdInColl
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getIdInCollIdInCollParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleIdInColl();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getIdInCollIdInCollParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__IdInCollAssignment_6"


    // $ANTLR start "rule__Reduce__ExpressionAssignment_8"
    // InternalOpenCypherParser.g:24620:1: rule__Reduce__ExpressionAssignment_8 : ( ruleExpression ) ;
    public final void rule__Reduce__ExpressionAssignment_8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24624:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24625:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24625:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24626:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getExpressionExpressionParserRuleCall_8_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getExpressionExpressionParserRuleCall_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__ExpressionAssignment_8"


    // $ANTLR start "rule__ParenthesizedExpression__ExpressionAssignment_1"
    // InternalOpenCypherParser.g:24635:1: rule__ParenthesizedExpression__ExpressionAssignment_1 : ( ruleExpression ) ;
    public final void rule__ParenthesizedExpression__ExpressionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24639:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24640:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24640:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24641:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__ExpressionAssignment_1"


    // $ANTLR start "rule__RelationshipsPattern__NodePatternAssignment_0"
    // InternalOpenCypherParser.g:24650:1: rule__RelationshipsPattern__NodePatternAssignment_0 : ( ruleNodePattern ) ;
    public final void rule__RelationshipsPattern__NodePatternAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24654:1: ( ( ruleNodePattern ) )
            // InternalOpenCypherParser.g:24655:2: ( ruleNodePattern )
            {
            // InternalOpenCypherParser.g:24655:2: ( ruleNodePattern )
            // InternalOpenCypherParser.g:24656:3: ruleNodePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getNodePatternNodePatternParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getNodePatternNodePatternParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__NodePatternAssignment_0"


    // $ANTLR start "rule__RelationshipsPattern__ChainAssignment_1"
    // InternalOpenCypherParser.g:24665:1: rule__RelationshipsPattern__ChainAssignment_1 : ( rulePatternElementChain ) ;
    public final void rule__RelationshipsPattern__ChainAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24669:1: ( ( rulePatternElementChain ) )
            // InternalOpenCypherParser.g:24670:2: ( rulePatternElementChain )
            {
            // InternalOpenCypherParser.g:24670:2: ( rulePatternElementChain )
            // InternalOpenCypherParser.g:24671:3: rulePatternElementChain
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternElementChain();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__ChainAssignment_1"


    // $ANTLR start "rule__FilterExpression__IdInCollAssignment_0"
    // InternalOpenCypherParser.g:24680:1: rule__FilterExpression__IdInCollAssignment_0 : ( ruleIdInColl ) ;
    public final void rule__FilterExpression__IdInCollAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24684:1: ( ( ruleIdInColl ) )
            // InternalOpenCypherParser.g:24685:2: ( ruleIdInColl )
            {
            // InternalOpenCypherParser.g:24685:2: ( ruleIdInColl )
            // InternalOpenCypherParser.g:24686:3: ruleIdInColl
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionAccess().getIdInCollIdInCollParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleIdInColl();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionAccess().getIdInCollIdInCollParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__IdInCollAssignment_0"


    // $ANTLR start "rule__FilterExpression__WhereAssignment_1"
    // InternalOpenCypherParser.g:24695:1: rule__FilterExpression__WhereAssignment_1 : ( ruleWhere ) ;
    public final void rule__FilterExpression__WhereAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24699:1: ( ( ruleWhere ) )
            // InternalOpenCypherParser.g:24700:2: ( ruleWhere )
            {
            // InternalOpenCypherParser.g:24700:2: ( ruleWhere )
            // InternalOpenCypherParser.g:24701:3: ruleWhere
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionAccess().getWhereWhereParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionAccess().getWhereWhereParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__WhereAssignment_1"


    // $ANTLR start "rule__IdInColl__VariableAssignment_0"
    // InternalOpenCypherParser.g:24710:1: rule__IdInColl__VariableAssignment_0 : ( ruleVariableDeclaration ) ;
    public final void rule__IdInColl__VariableAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24714:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:24715:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:24715:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:24716:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getVariableVariableDeclarationParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getVariableVariableDeclarationParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__VariableAssignment_0"


    // $ANTLR start "rule__IdInColl__ExpressionAssignment_2"
    // InternalOpenCypherParser.g:24725:1: rule__IdInColl__ExpressionAssignment_2 : ( ruleExpression ) ;
    public final void rule__IdInColl__ExpressionAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24729:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24730:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24730:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24731:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getExpressionExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getExpressionExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__ExpressionAssignment_2"


    // $ANTLR start "rule__FunctionInvocation__FunctionNameAssignment_0"
    // InternalOpenCypherParser.g:24740:1: rule__FunctionInvocation__FunctionNameAssignment_0 : ( ruleFunctionName ) ;
    public final void rule__FunctionInvocation__FunctionNameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24744:1: ( ( ruleFunctionName ) )
            // InternalOpenCypherParser.g:24745:2: ( ruleFunctionName )
            {
            // InternalOpenCypherParser.g:24745:2: ( ruleFunctionName )
            // InternalOpenCypherParser.g:24746:3: ruleFunctionName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFunctionName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__FunctionNameAssignment_0"


    // $ANTLR start "rule__FunctionInvocation__DistinctAssignment_2"
    // InternalOpenCypherParser.g:24755:1: rule__FunctionInvocation__DistinctAssignment_2 : ( ( DISTINCT ) ) ;
    public final void rule__FunctionInvocation__DistinctAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24759:1: ( ( ( DISTINCT ) ) )
            // InternalOpenCypherParser.g:24760:2: ( ( DISTINCT ) )
            {
            // InternalOpenCypherParser.g:24760:2: ( ( DISTINCT ) )
            // InternalOpenCypherParser.g:24761:3: ( DISTINCT )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); 
            }
            // InternalOpenCypherParser.g:24762:3: ( DISTINCT )
            // InternalOpenCypherParser.g:24763:4: DISTINCT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); 
            }
            match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__DistinctAssignment_2"


    // $ANTLR start "rule__FunctionInvocation__ParameterAssignment_3_0"
    // InternalOpenCypherParser.g:24774:1: rule__FunctionInvocation__ParameterAssignment_3_0 : ( ruleExpression ) ;
    public final void rule__FunctionInvocation__ParameterAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24778:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24779:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24779:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24780:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__ParameterAssignment_3_0"


    // $ANTLR start "rule__FunctionInvocation__ParameterAssignment_3_1_1"
    // InternalOpenCypherParser.g:24789:1: rule__FunctionInvocation__ParameterAssignment_3_1_1 : ( ruleExpression ) ;
    public final void rule__FunctionInvocation__ParameterAssignment_3_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24793:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24794:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24794:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24795:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__ParameterAssignment_3_1_1"


    // $ANTLR start "rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0"
    // InternalOpenCypherParser.g:24804:1: rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 : ( ruleProcedureName ) ;
    public final void rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24808:1: ( ( ruleProcedureName ) )
            // InternalOpenCypherParser.g:24809:2: ( ruleProcedureName )
            {
            // InternalOpenCypherParser.g:24809:2: ( ruleProcedureName )
            // InternalOpenCypherParser.g:24810:3: ruleProcedureName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleProcedureName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0"


    // $ANTLR start "rule__ExplicitProcedureInvocation__ParameterAssignment_2_0"
    // InternalOpenCypherParser.g:24819:1: rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 : ( ruleExpression ) ;
    public final void rule__ExplicitProcedureInvocation__ParameterAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24823:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24824:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24824:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24825:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__ParameterAssignment_2_0"


    // $ANTLR start "rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1"
    // InternalOpenCypherParser.g:24834:1: rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 : ( ruleExpression ) ;
    public final void rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24838:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24839:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24839:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24840:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1"


    // $ANTLR start "rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1"
    // InternalOpenCypherParser.g:24849:1: rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1 : ( ruleProcedureName ) ;
    public final void rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24853:1: ( ( ruleProcedureName ) )
            // InternalOpenCypherParser.g:24854:2: ( ruleProcedureName )
            {
            // InternalOpenCypherParser.g:24854:2: ( ruleProcedureName )
            // InternalOpenCypherParser.g:24855:3: ruleProcedureName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleProcedureName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ImplicitProcedureInvocation__ProcedureNameAssignment_1"


    // $ANTLR start "rule__ProcedureName__NamespaceAssignment_0"
    // InternalOpenCypherParser.g:24864:1: rule__ProcedureName__NamespaceAssignment_0 : ( ruleNamespace ) ;
    public final void rule__ProcedureName__NamespaceAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24868:1: ( ( ruleNamespace ) )
            // InternalOpenCypherParser.g:24869:2: ( ruleNamespace )
            {
            // InternalOpenCypherParser.g:24869:2: ( ruleNamespace )
            // InternalOpenCypherParser.g:24870:3: ruleNamespace
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameAccess().getNamespaceNamespaceParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNamespace();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameAccess().getNamespaceNamespaceParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__NamespaceAssignment_0"


    // $ANTLR start "rule__ProcedureName__NameAssignment_1"
    // InternalOpenCypherParser.g:24879:1: rule__ProcedureName__NameAssignment_1 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__ProcedureName__NameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24883:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:24884:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:24884:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:24885:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__NameAssignment_1"


    // $ANTLR start "rule__ListComprehension__FilterExpressionAssignment_1"
    // InternalOpenCypherParser.g:24894:1: rule__ListComprehension__FilterExpressionAssignment_1 : ( ruleFilterExpression ) ;
    public final void rule__ListComprehension__FilterExpressionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24898:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24899:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24899:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24900:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getFilterExpressionFilterExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getFilterExpressionFilterExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__FilterExpressionAssignment_1"


    // $ANTLR start "rule__ListComprehension__ExpressionAssignment_2_1"
    // InternalOpenCypherParser.g:24909:1: rule__ListComprehension__ExpressionAssignment_2_1 : ( ruleExpression ) ;
    public final void rule__ListComprehension__ExpressionAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24913:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24914:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24914:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24915:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__ExpressionAssignment_2_1"


    // $ANTLR start "rule__PatternComprehension__PathVariableAssignment_1_0"
    // InternalOpenCypherParser.g:24924:1: rule__PatternComprehension__PathVariableAssignment_1_0 : ( ruleVariableDeclaration ) ;
    public final void rule__PatternComprehension__PathVariableAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24928:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:24929:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:24929:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:24930:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getPathVariableVariableDeclarationParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getPathVariableVariableDeclarationParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__PathVariableAssignment_1_0"


    // $ANTLR start "rule__PatternComprehension__PatternAssignment_2"
    // InternalOpenCypherParser.g:24939:1: rule__PatternComprehension__PatternAssignment_2 : ( ruleRelationshipsPattern ) ;
    public final void rule__PatternComprehension__PatternAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24943:1: ( ( ruleRelationshipsPattern ) )
            // InternalOpenCypherParser.g:24944:2: ( ruleRelationshipsPattern )
            {
            // InternalOpenCypherParser.g:24944:2: ( ruleRelationshipsPattern )
            // InternalOpenCypherParser.g:24945:3: ruleRelationshipsPattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getPatternRelationshipsPatternParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipsPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getPatternRelationshipsPatternParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__PatternAssignment_2"


    // $ANTLR start "rule__PatternComprehension__WhereAssignment_3"
    // InternalOpenCypherParser.g:24954:1: rule__PatternComprehension__WhereAssignment_3 : ( ruleWhere ) ;
    public final void rule__PatternComprehension__WhereAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24958:1: ( ( ruleWhere ) )
            // InternalOpenCypherParser.g:24959:2: ( ruleWhere )
            {
            // InternalOpenCypherParser.g:24959:2: ( ruleWhere )
            // InternalOpenCypherParser.g:24960:3: ruleWhere
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getWhereWhereParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getWhereWhereParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__WhereAssignment_3"


    // $ANTLR start "rule__PatternComprehension__ExpressionAssignment_5"
    // InternalOpenCypherParser.g:24969:1: rule__PatternComprehension__ExpressionAssignment_5 : ( ruleExpression ) ;
    public final void rule__PatternComprehension__ExpressionAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24973:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24974:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24974:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24975:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getExpressionExpressionParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getExpressionExpressionParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__ExpressionAssignment_5"


    // $ANTLR start "rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0"
    // InternalOpenCypherParser.g:24984:1: rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 : ( rulePropertyKeyName ) ;
    public final void rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24988:1: ( ( rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:24989:2: ( rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:24989:2: ( rulePropertyKeyName )
            // InternalOpenCypherParser.g:24990:3: rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0"


    // $ANTLR start "rule__PropertyLookup__PropertyOperatorAssignment_1_0_1"
    // InternalOpenCypherParser.g:24999:1: rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 : ( ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 ) ) ;
    public final void rule__PropertyLookup__PropertyOperatorAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25003:1: ( ( ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 ) ) )
            // InternalOpenCypherParser.g:25004:2: ( ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 ) )
            {
            // InternalOpenCypherParser.g:25004:2: ( ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 ) )
            // InternalOpenCypherParser.g:25005:3: ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAlternatives_1_0_1_0()); 
            }
            // InternalOpenCypherParser.g:25006:3: ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 )
            // InternalOpenCypherParser.g:25006:4: rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAlternatives_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__PropertyOperatorAssignment_1_0_1"


    // $ANTLR start "rule__PropertyLookup__PropertyKeyNameAssignment_1_1"
    // InternalOpenCypherParser.g:25014:1: rule__PropertyLookup__PropertyKeyNameAssignment_1_1 : ( rulePropertyKeyName ) ;
    public final void rule__PropertyLookup__PropertyKeyNameAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25018:1: ( ( rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:25019:2: ( rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:25019:2: ( rulePropertyKeyName )
            // InternalOpenCypherParser.g:25020:3: rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__PropertyKeyNameAssignment_1_1"


    // $ANTLR start "rule__CaseExpression__CaseAlternativesAssignment_0_0_1"
    // InternalOpenCypherParser.g:25029:1: rule__CaseExpression__CaseAlternativesAssignment_0_0_1 : ( ruleCaseAlternatives ) ;
    public final void rule__CaseExpression__CaseAlternativesAssignment_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25033:1: ( ( ruleCaseAlternatives ) )
            // InternalOpenCypherParser.g:25034:2: ( ruleCaseAlternatives )
            {
            // InternalOpenCypherParser.g:25034:2: ( ruleCaseAlternatives )
            // InternalOpenCypherParser.g:25035:3: ruleCaseAlternatives
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCaseAlternatives();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__CaseAlternativesAssignment_0_0_1"


    // $ANTLR start "rule__CaseExpression__CaseExpressionAssignment_0_1_1"
    // InternalOpenCypherParser.g:25044:1: rule__CaseExpression__CaseExpressionAssignment_0_1_1 : ( ruleExpression ) ;
    public final void rule__CaseExpression__CaseExpressionAssignment_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25048:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:25049:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:25049:2: ( ruleExpression )
            // InternalOpenCypherParser.g:25050:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseExpressionExpressionParserRuleCall_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseExpressionExpressionParserRuleCall_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__CaseExpressionAssignment_0_1_1"


    // $ANTLR start "rule__CaseExpression__CaseAlternativesAssignment_0_1_2"
    // InternalOpenCypherParser.g:25059:1: rule__CaseExpression__CaseAlternativesAssignment_0_1_2 : ( ruleCaseAlternatives ) ;
    public final void rule__CaseExpression__CaseAlternativesAssignment_0_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25063:1: ( ( ruleCaseAlternatives ) )
            // InternalOpenCypherParser.g:25064:2: ( ruleCaseAlternatives )
            {
            // InternalOpenCypherParser.g:25064:2: ( ruleCaseAlternatives )
            // InternalOpenCypherParser.g:25065:3: ruleCaseAlternatives
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCaseAlternatives();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__CaseAlternativesAssignment_0_1_2"


    // $ANTLR start "rule__CaseExpression__ElseExpressionAssignment_1_1"
    // InternalOpenCypherParser.g:25074:1: rule__CaseExpression__ElseExpressionAssignment_1_1 : ( ruleExpression ) ;
    public final void rule__CaseExpression__ElseExpressionAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25078:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:25079:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:25079:2: ( ruleExpression )
            // InternalOpenCypherParser.g:25080:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getElseExpressionExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getElseExpressionExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__ElseExpressionAssignment_1_1"


    // $ANTLR start "rule__CaseAlternatives__WhenAssignment_1"
    // InternalOpenCypherParser.g:25089:1: rule__CaseAlternatives__WhenAssignment_1 : ( ruleExpression ) ;
    public final void rule__CaseAlternatives__WhenAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25093:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:25094:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:25094:2: ( ruleExpression )
            // InternalOpenCypherParser.g:25095:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getWhenExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getWhenExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__WhenAssignment_1"


    // $ANTLR start "rule__CaseAlternatives__ThenAssignment_3"
    // InternalOpenCypherParser.g:25104:1: rule__CaseAlternatives__ThenAssignment_3 : ( ruleExpression ) ;
    public final void rule__CaseAlternatives__ThenAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25108:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:25109:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:25109:2: ( ruleExpression )
            // InternalOpenCypherParser.g:25110:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getThenExpressionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getThenExpressionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__ThenAssignment_3"


    // $ANTLR start "rule__VariableDeclaration__NameAssignment_1"
    // InternalOpenCypherParser.g:25119:1: rule__VariableDeclaration__NameAssignment_1 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__VariableDeclaration__NameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25123:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:25124:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:25124:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:25125:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VariableDeclaration__NameAssignment_1"


    // $ANTLR start "rule__StringLiteral__ValueAssignment"
    // InternalOpenCypherParser.g:25134:1: rule__StringLiteral__ValueAssignment : ( RULE_STRING_LITERAL ) ;
    public final void rule__StringLiteral__ValueAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25138:1: ( ( RULE_STRING_LITERAL ) )
            // InternalOpenCypherParser.g:25139:2: ( RULE_STRING_LITERAL )
            {
            // InternalOpenCypherParser.g:25139:2: ( RULE_STRING_LITERAL )
            // InternalOpenCypherParser.g:25140:3: RULE_STRING_LITERAL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStringLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_0()); 
            }
            match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStringLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StringLiteral__ValueAssignment"


    // $ANTLR start "rule__NumberLiteral__ValueAssignment"
    // InternalOpenCypherParser.g:25149:1: rule__NumberLiteral__ValueAssignment : ( ruleNumber ) ;
    public final void rule__NumberLiteral__ValueAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25153:1: ( ( ruleNumber ) )
            // InternalOpenCypherParser.g:25154:2: ( ruleNumber )
            {
            // InternalOpenCypherParser.g:25154:2: ( ruleNumber )
            // InternalOpenCypherParser.g:25155:3: ruleNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NumberLiteral__ValueAssignment"


    // $ANTLR start "rule__MapLiteral__EntriesAssignment_2_0"
    // InternalOpenCypherParser.g:25164:1: rule__MapLiteral__EntriesAssignment_2_0 : ( ruleMapLiteralEntry ) ;
    public final void rule__MapLiteral__EntriesAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25168:1: ( ( ruleMapLiteralEntry ) )
            // InternalOpenCypherParser.g:25169:2: ( ruleMapLiteralEntry )
            {
            // InternalOpenCypherParser.g:25169:2: ( ruleMapLiteralEntry )
            // InternalOpenCypherParser.g:25170:3: ruleMapLiteralEntry
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMapLiteralEntry();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__EntriesAssignment_2_0"


    // $ANTLR start "rule__MapLiteral__EntriesAssignment_2_1_1"
    // InternalOpenCypherParser.g:25179:1: rule__MapLiteral__EntriesAssignment_2_1_1 : ( ruleMapLiteralEntry ) ;
    public final void rule__MapLiteral__EntriesAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25183:1: ( ( ruleMapLiteralEntry ) )
            // InternalOpenCypherParser.g:25184:2: ( ruleMapLiteralEntry )
            {
            // InternalOpenCypherParser.g:25184:2: ( ruleMapLiteralEntry )
            // InternalOpenCypherParser.g:25185:3: ruleMapLiteralEntry
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMapLiteralEntry();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__EntriesAssignment_2_1_1"


    // $ANTLR start "rule__MapLiteralEntry__KeyAssignment_0"
    // InternalOpenCypherParser.g:25194:1: rule__MapLiteralEntry__KeyAssignment_0 : ( rulePropertyKeyName ) ;
    public final void rule__MapLiteralEntry__KeyAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25198:1: ( ( rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:25199:2: ( rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:25199:2: ( rulePropertyKeyName )
            // InternalOpenCypherParser.g:25200:3: rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getKeyPropertyKeyNameParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getKeyPropertyKeyNameParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__KeyAssignment_0"


    // $ANTLR start "rule__MapLiteralEntry__ValueAssignment_2"
    // InternalOpenCypherParser.g:25209:1: rule__MapLiteralEntry__ValueAssignment_2 : ( ruleExpression ) ;
    public final void rule__MapLiteralEntry__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25213:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:25214:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:25214:2: ( ruleExpression )
            // InternalOpenCypherParser.g:25215:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getValueExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getValueExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__ValueAssignment_2"


    // $ANTLR start "rule__LegacyParameter__ParameterAssignment_1"
    // InternalOpenCypherParser.g:25224:1: rule__LegacyParameter__ParameterAssignment_1 : ( ( rule__LegacyParameter__ParameterAlternatives_1_0 ) ) ;
    public final void rule__LegacyParameter__ParameterAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25228:1: ( ( ( rule__LegacyParameter__ParameterAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:25229:2: ( ( rule__LegacyParameter__ParameterAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:25229:2: ( ( rule__LegacyParameter__ParameterAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:25230:3: ( rule__LegacyParameter__ParameterAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterAccess().getParameterAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:25231:3: ( rule__LegacyParameter__ParameterAlternatives_1_0 )
            // InternalOpenCypherParser.g:25231:4: rule__LegacyParameter__ParameterAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__ParameterAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterAccess().getParameterAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__ParameterAssignment_1"


    // $ANTLR start "rule__Parameter__ParameterAssignment_1"
    // InternalOpenCypherParser.g:25239:1: rule__Parameter__ParameterAssignment_1 : ( ( rule__Parameter__ParameterAlternatives_1_0 ) ) ;
    public final void rule__Parameter__ParameterAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25243:1: ( ( ( rule__Parameter__ParameterAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:25244:2: ( ( rule__Parameter__ParameterAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:25244:2: ( ( rule__Parameter__ParameterAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:25245:3: ( rule__Parameter__ParameterAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParameterAccess().getParameterAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:25246:3: ( rule__Parameter__ParameterAlternatives_1_0 )
            // InternalOpenCypherParser.g:25246:4: rule__Parameter__ParameterAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__ParameterAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getParameterAccess().getParameterAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__ParameterAssignment_1"


    // $ANTLR start "rule__PropertyExpression__PropertyLookupsAssignment_1"
    // InternalOpenCypherParser.g:25254:1: rule__PropertyExpression__PropertyLookupsAssignment_1 : ( rulePropertyLookup ) ;
    public final void rule__PropertyExpression__PropertyLookupsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25258:1: ( ( rulePropertyLookup ) )
            // InternalOpenCypherParser.g:25259:2: ( rulePropertyLookup )
            {
            // InternalOpenCypherParser.g:25259:2: ( rulePropertyLookup )
            // InternalOpenCypherParser.g:25260:3: rulePropertyLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__PropertyLookupsAssignment_1"


    // $ANTLR start "rule__DecimalInteger__ValueAssignment_1"
    // InternalOpenCypherParser.g:25269:1: rule__DecimalInteger__ValueAssignment_1 : ( ruleNumber ) ;
    public final void rule__DecimalInteger__ValueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:25273:1: ( ( ruleNumber ) )
            // InternalOpenCypherParser.g:25274:2: ( ruleNumber )
            {
            // InternalOpenCypherParser.g:25274:2: ( ruleNumber )
            // InternalOpenCypherParser.g:25275:3: ruleNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDecimalIntegerAccess().getValueNumberParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDecimalIntegerAccess().getValueNumberParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DecimalInteger__ValueAssignment_1"

    // $ANTLR start synpred4_InternalOpenCypherParser
    public final void synpred4_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3619:2: ( ( ruleRegularQuery ) )
        // InternalOpenCypherParser.g:3619:2: ( ruleRegularQuery )
        {
        // InternalOpenCypherParser.g:3619:2: ( ruleRegularQuery )
        // InternalOpenCypherParser.g:3620:3: ruleRegularQuery
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0()); 
        }
        pushFollow(FOLLOW_2);
        ruleRegularQuery();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred4_InternalOpenCypherParser

    // $ANTLR start synpred5_InternalOpenCypherParser
    public final void synpred5_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3625:2: ( ( ruleStandaloneCall ) )
        // InternalOpenCypherParser.g:3625:2: ( ruleStandaloneCall )
        {
        // InternalOpenCypherParser.g:3625:2: ( ruleStandaloneCall )
        // InternalOpenCypherParser.g:3626:3: ruleStandaloneCall
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getQueryAccess().getStandaloneCallParserRuleCall_1()); 
        }
        pushFollow(FOLLOW_2);
        ruleStandaloneCall();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred5_InternalOpenCypherParser

    // $ANTLR start synpred6_InternalOpenCypherParser
    public final void synpred6_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3646:2: ( ( ruleMultiPartQuery ) )
        // InternalOpenCypherParser.g:3646:2: ( ruleMultiPartQuery )
        {
        // InternalOpenCypherParser.g:3646:2: ( ruleMultiPartQuery )
        // InternalOpenCypherParser.g:3647:3: ruleMultiPartQuery
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getSingleQueryAccess().getMultiPartQueryParserRuleCall_0()); 
        }
        pushFollow(FOLLOW_2);
        ruleMultiPartQuery();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred6_InternalOpenCypherParser

    // $ANTLR start synpred7_InternalOpenCypherParser
    public final void synpred7_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3667:2: ( ( ( rule__SinglePartQuery__Group_0__0 ) ) )
        // InternalOpenCypherParser.g:3667:2: ( ( rule__SinglePartQuery__Group_0__0 ) )
        {
        // InternalOpenCypherParser.g:3667:2: ( ( rule__SinglePartQuery__Group_0__0 ) )
        // InternalOpenCypherParser.g:3668:3: ( rule__SinglePartQuery__Group_0__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getSinglePartQueryAccess().getGroup_0()); 
        }
        // InternalOpenCypherParser.g:3669:3: ( rule__SinglePartQuery__Group_0__0 )
        // InternalOpenCypherParser.g:3669:4: rule__SinglePartQuery__Group_0__0
        {
        pushFollow(FOLLOW_2);
        rule__SinglePartQuery__Group_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred7_InternalOpenCypherParser

    // $ANTLR start synpred17_InternalOpenCypherParser
    public final void synpred17_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3772:2: ( ( ruleCreateIndex ) )
        // InternalOpenCypherParser.g:3772:2: ( ruleCreateIndex )
        {
        // InternalOpenCypherParser.g:3772:2: ( ruleCreateIndex )
        // InternalOpenCypherParser.g:3773:3: ruleCreateIndex
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0()); 
        }
        pushFollow(FOLLOW_2);
        ruleCreateIndex();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred17_InternalOpenCypherParser

    // $ANTLR start synpred18_InternalOpenCypherParser
    public final void synpred18_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3778:2: ( ( ruleDropIndex ) )
        // InternalOpenCypherParser.g:3778:2: ( ruleDropIndex )
        {
        // InternalOpenCypherParser.g:3778:2: ( ruleDropIndex )
        // InternalOpenCypherParser.g:3779:3: ruleDropIndex
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1()); 
        }
        pushFollow(FOLLOW_2);
        ruleDropIndex();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred18_InternalOpenCypherParser

    // $ANTLR start synpred19_InternalOpenCypherParser
    public final void synpred19_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3784:2: ( ( ruleCreateUniqueConstraint ) )
        // InternalOpenCypherParser.g:3784:2: ( ruleCreateUniqueConstraint )
        {
        // InternalOpenCypherParser.g:3784:2: ( ruleCreateUniqueConstraint )
        // InternalOpenCypherParser.g:3785:3: ruleCreateUniqueConstraint
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2()); 
        }
        pushFollow(FOLLOW_2);
        ruleCreateUniqueConstraint();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred19_InternalOpenCypherParser

    // $ANTLR start synpred20_InternalOpenCypherParser
    public final void synpred20_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3790:2: ( ( ruleDropUniqueConstraint ) )
        // InternalOpenCypherParser.g:3790:2: ( ruleDropUniqueConstraint )
        {
        // InternalOpenCypherParser.g:3790:2: ( ruleDropUniqueConstraint )
        // InternalOpenCypherParser.g:3791:3: ruleDropUniqueConstraint
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3()); 
        }
        pushFollow(FOLLOW_2);
        ruleDropUniqueConstraint();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred20_InternalOpenCypherParser

    // $ANTLR start synpred21_InternalOpenCypherParser
    public final void synpred21_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3796:2: ( ( ruleCreateNodePropertyExistenceConstraint ) )
        // InternalOpenCypherParser.g:3796:2: ( ruleCreateNodePropertyExistenceConstraint )
        {
        // InternalOpenCypherParser.g:3796:2: ( ruleCreateNodePropertyExistenceConstraint )
        // InternalOpenCypherParser.g:3797:3: ruleCreateNodePropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4()); 
        }
        pushFollow(FOLLOW_2);
        ruleCreateNodePropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred21_InternalOpenCypherParser

    // $ANTLR start synpred22_InternalOpenCypherParser
    public final void synpred22_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3802:2: ( ( ruleDropNodePropertyExistenceConstraint ) )
        // InternalOpenCypherParser.g:3802:2: ( ruleDropNodePropertyExistenceConstraint )
        {
        // InternalOpenCypherParser.g:3802:2: ( ruleDropNodePropertyExistenceConstraint )
        // InternalOpenCypherParser.g:3803:3: ruleDropNodePropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5()); 
        }
        pushFollow(FOLLOW_2);
        ruleDropNodePropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred22_InternalOpenCypherParser

    // $ANTLR start synpred23_InternalOpenCypherParser
    public final void synpred23_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3808:2: ( ( ruleCreateRelationshipPropertyExistenceConstraint ) )
        // InternalOpenCypherParser.g:3808:2: ( ruleCreateRelationshipPropertyExistenceConstraint )
        {
        // InternalOpenCypherParser.g:3808:2: ( ruleCreateRelationshipPropertyExistenceConstraint )
        // InternalOpenCypherParser.g:3809:3: ruleCreateRelationshipPropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6()); 
        }
        pushFollow(FOLLOW_2);
        ruleCreateRelationshipPropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred23_InternalOpenCypherParser

    // $ANTLR start synpred53_InternalOpenCypherParser
    public final void synpred53_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4303:2: ( ( ( rule__NotExpression__Group_0__0 ) ) )
        // InternalOpenCypherParser.g:4303:2: ( ( rule__NotExpression__Group_0__0 ) )
        {
        // InternalOpenCypherParser.g:4303:2: ( ( rule__NotExpression__Group_0__0 ) )
        // InternalOpenCypherParser.g:4304:3: ( rule__NotExpression__Group_0__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getNotExpressionAccess().getGroup_0()); 
        }
        // InternalOpenCypherParser.g:4305:3: ( rule__NotExpression__Group_0__0 )
        // InternalOpenCypherParser.g:4305:4: rule__NotExpression__Group_0__0
        {
        pushFollow(FOLLOW_2);
        rule__NotExpression__Group_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred53_InternalOpenCypherParser

    // $ANTLR start synpred66_InternalOpenCypherParser
    public final void synpred66_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4486:2: ( ( ( rule__ListOperatorExpression__Group_0__0 ) ) )
        // InternalOpenCypherParser.g:4486:2: ( ( rule__ListOperatorExpression__Group_0__0 ) )
        {
        // InternalOpenCypherParser.g:4486:2: ( ( rule__ListOperatorExpression__Group_0__0 ) )
        // InternalOpenCypherParser.g:4487:3: ( rule__ListOperatorExpression__Group_0__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getListOperatorExpressionAccess().getGroup_0()); 
        }
        // InternalOpenCypherParser.g:4488:3: ( rule__ListOperatorExpression__Group_0__0 )
        // InternalOpenCypherParser.g:4488:4: rule__ListOperatorExpression__Group_0__0
        {
        pushFollow(FOLLOW_2);
        rule__ListOperatorExpression__Group_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred66_InternalOpenCypherParser

    // $ANTLR start synpred72_InternalOpenCypherParser
    public final void synpred72_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4567:2: ( ( ruleLiteral ) )
        // InternalOpenCypherParser.g:4567:2: ( ruleLiteral )
        {
        // InternalOpenCypherParser.g:4567:2: ( ruleLiteral )
        // InternalOpenCypherParser.g:4568:3: ruleLiteral
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getLiteralParserRuleCall_0()); 
        }
        pushFollow(FOLLOW_2);
        ruleLiteral();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred72_InternalOpenCypherParser

    // $ANTLR start synpred74_InternalOpenCypherParser
    public final void synpred74_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4579:2: ( ( ruleLegacyParameter ) )
        // InternalOpenCypherParser.g:4579:2: ( ruleLegacyParameter )
        {
        // InternalOpenCypherParser.g:4579:2: ( ruleLegacyParameter )
        // InternalOpenCypherParser.g:4580:3: ruleLegacyParameter
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_2()); 
        }
        pushFollow(FOLLOW_2);
        ruleLegacyParameter();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred74_InternalOpenCypherParser

    // $ANTLR start synpred75_InternalOpenCypherParser
    public final void synpred75_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4585:2: ( ( ruleCaseExpression ) )
        // InternalOpenCypherParser.g:4585:2: ( ruleCaseExpression )
        {
        // InternalOpenCypherParser.g:4585:2: ( ruleCaseExpression )
        // InternalOpenCypherParser.g:4586:3: ruleCaseExpression
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getCaseExpressionParserRuleCall_3()); 
        }
        pushFollow(FOLLOW_2);
        ruleCaseExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred75_InternalOpenCypherParser

    // $ANTLR start synpred76_InternalOpenCypherParser
    public final void synpred76_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4591:2: ( ( ( rule__Atom__Group_4__0 ) ) )
        // InternalOpenCypherParser.g:4591:2: ( ( rule__Atom__Group_4__0 ) )
        {
        // InternalOpenCypherParser.g:4591:2: ( ( rule__Atom__Group_4__0 ) )
        // InternalOpenCypherParser.g:4592:3: ( rule__Atom__Group_4__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_4()); 
        }
        // InternalOpenCypherParser.g:4593:3: ( rule__Atom__Group_4__0 )
        // InternalOpenCypherParser.g:4593:4: rule__Atom__Group_4__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_4__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred76_InternalOpenCypherParser

    // $ANTLR start synpred77_InternalOpenCypherParser
    public final void synpred77_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4597:2: ( ( ruleListComprehension ) )
        // InternalOpenCypherParser.g:4597:2: ( ruleListComprehension )
        {
        // InternalOpenCypherParser.g:4597:2: ( ruleListComprehension )
        // InternalOpenCypherParser.g:4598:3: ruleListComprehension
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_5()); 
        }
        pushFollow(FOLLOW_2);
        ruleListComprehension();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred77_InternalOpenCypherParser

    // $ANTLR start synpred78_InternalOpenCypherParser
    public final void synpred78_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4603:2: ( ( rulePatternComprehension ) )
        // InternalOpenCypherParser.g:4603:2: ( rulePatternComprehension )
        {
        // InternalOpenCypherParser.g:4603:2: ( rulePatternComprehension )
        // InternalOpenCypherParser.g:4604:3: rulePatternComprehension
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getPatternComprehensionParserRuleCall_6()); 
        }
        pushFollow(FOLLOW_2);
        rulePatternComprehension();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred78_InternalOpenCypherParser

    // $ANTLR start synpred79_InternalOpenCypherParser
    public final void synpred79_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4609:2: ( ( ( rule__Atom__Group_7__0 ) ) )
        // InternalOpenCypherParser.g:4609:2: ( ( rule__Atom__Group_7__0 ) )
        {
        // InternalOpenCypherParser.g:4609:2: ( ( rule__Atom__Group_7__0 ) )
        // InternalOpenCypherParser.g:4610:3: ( rule__Atom__Group_7__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_7()); 
        }
        // InternalOpenCypherParser.g:4611:3: ( rule__Atom__Group_7__0 )
        // InternalOpenCypherParser.g:4611:4: rule__Atom__Group_7__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_7__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred79_InternalOpenCypherParser

    // $ANTLR start synpred80_InternalOpenCypherParser
    public final void synpred80_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4615:2: ( ( ( rule__Atom__Group_8__0 ) ) )
        // InternalOpenCypherParser.g:4615:2: ( ( rule__Atom__Group_8__0 ) )
        {
        // InternalOpenCypherParser.g:4615:2: ( ( rule__Atom__Group_8__0 ) )
        // InternalOpenCypherParser.g:4616:3: ( rule__Atom__Group_8__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_8()); 
        }
        // InternalOpenCypherParser.g:4617:3: ( rule__Atom__Group_8__0 )
        // InternalOpenCypherParser.g:4617:4: rule__Atom__Group_8__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_8__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred80_InternalOpenCypherParser

    // $ANTLR start synpred81_InternalOpenCypherParser
    public final void synpred81_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4621:2: ( ( ruleReduce ) )
        // InternalOpenCypherParser.g:4621:2: ( ruleReduce )
        {
        // InternalOpenCypherParser.g:4621:2: ( ruleReduce )
        // InternalOpenCypherParser.g:4622:3: ruleReduce
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getReduceParserRuleCall_9()); 
        }
        pushFollow(FOLLOW_2);
        ruleReduce();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred81_InternalOpenCypherParser

    // $ANTLR start synpred82_InternalOpenCypherParser
    public final void synpred82_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4627:2: ( ( ( rule__Atom__Group_10__0 ) ) )
        // InternalOpenCypherParser.g:4627:2: ( ( rule__Atom__Group_10__0 ) )
        {
        // InternalOpenCypherParser.g:4627:2: ( ( rule__Atom__Group_10__0 ) )
        // InternalOpenCypherParser.g:4628:3: ( rule__Atom__Group_10__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_10()); 
        }
        // InternalOpenCypherParser.g:4629:3: ( rule__Atom__Group_10__0 )
        // InternalOpenCypherParser.g:4629:4: rule__Atom__Group_10__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_10__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred82_InternalOpenCypherParser

    // $ANTLR start synpred83_InternalOpenCypherParser
    public final void synpred83_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4633:2: ( ( ( rule__Atom__Group_11__0 ) ) )
        // InternalOpenCypherParser.g:4633:2: ( ( rule__Atom__Group_11__0 ) )
        {
        // InternalOpenCypherParser.g:4633:2: ( ( rule__Atom__Group_11__0 ) )
        // InternalOpenCypherParser.g:4634:3: ( rule__Atom__Group_11__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_11()); 
        }
        // InternalOpenCypherParser.g:4635:3: ( rule__Atom__Group_11__0 )
        // InternalOpenCypherParser.g:4635:4: rule__Atom__Group_11__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_11__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred83_InternalOpenCypherParser

    // $ANTLR start synpred84_InternalOpenCypherParser
    public final void synpred84_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4639:2: ( ( ( rule__Atom__Group_12__0 ) ) )
        // InternalOpenCypherParser.g:4639:2: ( ( rule__Atom__Group_12__0 ) )
        {
        // InternalOpenCypherParser.g:4639:2: ( ( rule__Atom__Group_12__0 ) )
        // InternalOpenCypherParser.g:4640:3: ( rule__Atom__Group_12__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_12()); 
        }
        // InternalOpenCypherParser.g:4641:3: ( rule__Atom__Group_12__0 )
        // InternalOpenCypherParser.g:4641:4: rule__Atom__Group_12__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_12__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred84_InternalOpenCypherParser

    // $ANTLR start synpred85_InternalOpenCypherParser
    public final void synpred85_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4645:2: ( ( ( rule__Atom__Group_13__0 ) ) )
        // InternalOpenCypherParser.g:4645:2: ( ( rule__Atom__Group_13__0 ) )
        {
        // InternalOpenCypherParser.g:4645:2: ( ( rule__Atom__Group_13__0 ) )
        // InternalOpenCypherParser.g:4646:3: ( rule__Atom__Group_13__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_13()); 
        }
        // InternalOpenCypherParser.g:4647:3: ( rule__Atom__Group_13__0 )
        // InternalOpenCypherParser.g:4647:4: rule__Atom__Group_13__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_13__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred85_InternalOpenCypherParser

    // $ANTLR start synpred86_InternalOpenCypherParser
    public final void synpred86_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4651:2: ( ( ruleShortestPathPattern ) )
        // InternalOpenCypherParser.g:4651:2: ( ruleShortestPathPattern )
        {
        // InternalOpenCypherParser.g:4651:2: ( ruleShortestPathPattern )
        // InternalOpenCypherParser.g:4652:3: ruleShortestPathPattern
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_14()); 
        }
        pushFollow(FOLLOW_2);
        ruleShortestPathPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred86_InternalOpenCypherParser

    // $ANTLR start synpred87_InternalOpenCypherParser
    public final void synpred87_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4657:2: ( ( ruleRelationshipsPattern ) )
        // InternalOpenCypherParser.g:4657:2: ( ruleRelationshipsPattern )
        {
        // InternalOpenCypherParser.g:4657:2: ( ruleRelationshipsPattern )
        // InternalOpenCypherParser.g:4658:3: ruleRelationshipsPattern
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_15()); 
        }
        pushFollow(FOLLOW_2);
        ruleRelationshipsPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred87_InternalOpenCypherParser

    // $ANTLR start synpred88_InternalOpenCypherParser
    public final void synpred88_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4663:2: ( ( ruleParenthesizedExpression ) )
        // InternalOpenCypherParser.g:4663:2: ( ruleParenthesizedExpression )
        {
        // InternalOpenCypherParser.g:4663:2: ( ruleParenthesizedExpression )
        // InternalOpenCypherParser.g:4664:3: ruleParenthesizedExpression
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_16()); 
        }
        pushFollow(FOLLOW_2);
        ruleParenthesizedExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred88_InternalOpenCypherParser

    // $ANTLR start synpred89_InternalOpenCypherParser
    public final void synpred89_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4669:2: ( ( ruleFunctionInvocation ) )
        // InternalOpenCypherParser.g:4669:2: ( ruleFunctionInvocation )
        {
        // InternalOpenCypherParser.g:4669:2: ( ruleFunctionInvocation )
        // InternalOpenCypherParser.g:4670:3: ruleFunctionInvocation
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_17()); 
        }
        pushFollow(FOLLOW_2);
        ruleFunctionInvocation();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred89_InternalOpenCypherParser

    // $ANTLR start synpred98_InternalOpenCypherParser
    public final void synpred98_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4798:2: ( ( ( rule__CaseExpression__Group_0_0__0 ) ) )
        // InternalOpenCypherParser.g:4798:2: ( ( rule__CaseExpression__Group_0_0__0 ) )
        {
        // InternalOpenCypherParser.g:4798:2: ( ( rule__CaseExpression__Group_0_0__0 ) )
        // InternalOpenCypherParser.g:4799:3: ( rule__CaseExpression__Group_0_0__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCaseExpressionAccess().getGroup_0_0()); 
        }
        // InternalOpenCypherParser.g:4800:3: ( rule__CaseExpression__Group_0_0__0 )
        // InternalOpenCypherParser.g:4800:4: rule__CaseExpression__Group_0_0__0
        {
        pushFollow(FOLLOW_2);
        rule__CaseExpression__Group_0_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred98_InternalOpenCypherParser

    // $ANTLR start synpred189_InternalOpenCypherParser
    public final void synpred189_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:6280:4: ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )
        // InternalOpenCypherParser.g:6280:4: rule__SinglePartQuery__UpdatingClausesAssignment_1_1
        {
        pushFollow(FOLLOW_2);
        rule__SinglePartQuery__UpdatingClausesAssignment_1_1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_InternalOpenCypherParser

    // $ANTLR start synpred190_InternalOpenCypherParser
    public final void synpred190_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:6307:3: ( rule__SinglePartQuery__ReturnAssignment_1_2 )
        // InternalOpenCypherParser.g:6307:3: rule__SinglePartQuery__ReturnAssignment_1_2
        {
        pushFollow(FOLLOW_2);
        rule__SinglePartQuery__ReturnAssignment_1_2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_InternalOpenCypherParser

    // $ANTLR start synpred191_InternalOpenCypherParser
    public final void synpred191_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:6341:4: ( rule__MultiPartQuery__SubQueriesAssignment_0 )
        // InternalOpenCypherParser.g:6341:4: rule__MultiPartQuery__SubQueriesAssignment_0
        {
        pushFollow(FOLLOW_2);
        rule__MultiPartQuery__SubQueriesAssignment_0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_InternalOpenCypherParser

    // $ANTLR start synpred213_InternalOpenCypherParser
    public final void synpred213_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:10777:3: ( rule__ReturnBody__DistinctAssignment_0 )
        // InternalOpenCypherParser.g:10777:3: rule__ReturnBody__DistinctAssignment_0
        {
        pushFollow(FOLLOW_2);
        rule__ReturnBody__DistinctAssignment_0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_InternalOpenCypherParser

    // $ANTLR start synpred241_InternalOpenCypherParser
    public final void synpred241_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:14880:3: ( rule__RangeLiteral__Group_2__0 )
        // InternalOpenCypherParser.g:14880:3: rule__RangeLiteral__Group_2__0
        {
        pushFollow(FOLLOW_2);
        rule__RangeLiteral__Group_2__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_InternalOpenCypherParser

    // $ANTLR start synpred261_InternalOpenCypherParser
    public final void synpred261_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:19051:4: ( rule__RelationshipsPattern__ChainAssignment_1 )
        // InternalOpenCypherParser.g:19051:4: rule__RelationshipsPattern__ChainAssignment_1
        {
        pushFollow(FOLLOW_2);
        rule__RelationshipsPattern__ChainAssignment_1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_InternalOpenCypherParser

    // $ANTLR start synpred263_InternalOpenCypherParser
    public final void synpred263_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:19269:3: ( rule__FunctionInvocation__DistinctAssignment_2 )
        // InternalOpenCypherParser.g:19269:3: rule__FunctionInvocation__DistinctAssignment_2
        {
        pushFollow(FOLLOW_2);
        rule__FunctionInvocation__DistinctAssignment_2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_InternalOpenCypherParser

    // $ANTLR start synpred278_InternalOpenCypherParser
    public final void synpred278_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:21437:2: ( rule__QueryOptions__UnorderedGroup_1__0 )
        // InternalOpenCypherParser.g:21437:2: rule__QueryOptions__UnorderedGroup_1__0
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__UnorderedGroup_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_InternalOpenCypherParser

    // $ANTLR start synpred279_InternalOpenCypherParser
    public final void synpred279_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:21452:3: ( ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) ) )
        // InternalOpenCypherParser.g:21452:3: ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) )
        {
        // InternalOpenCypherParser.g:21452:3: ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) )
        // InternalOpenCypherParser.g:21453:4: {...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred279_InternalOpenCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)");
        }
        // InternalOpenCypherParser.g:21453:108: ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) )
        // InternalOpenCypherParser.g:21454:5: ( ( rule__QueryOptions__ExplainAssignment_1_0 ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
        // InternalOpenCypherParser.g:21460:5: ( ( rule__QueryOptions__ExplainAssignment_1_0 ) )
        // InternalOpenCypherParser.g:21461:6: ( rule__QueryOptions__ExplainAssignment_1_0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getQueryOptionsAccess().getExplainAssignment_1_0()); 
        }
        // InternalOpenCypherParser.g:21462:6: ( rule__QueryOptions__ExplainAssignment_1_0 )
        // InternalOpenCypherParser.g:21462:7: rule__QueryOptions__ExplainAssignment_1_0
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__ExplainAssignment_1_0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred279_InternalOpenCypherParser

    // $ANTLR start synpred280_InternalOpenCypherParser
    public final void synpred280_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:21467:3: ( ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) ) )
        // InternalOpenCypherParser.g:21467:3: ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) )
        {
        // InternalOpenCypherParser.g:21467:3: ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) )
        // InternalOpenCypherParser.g:21468:4: {...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred280_InternalOpenCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)");
        }
        // InternalOpenCypherParser.g:21468:108: ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) )
        // InternalOpenCypherParser.g:21469:5: ( ( rule__QueryOptions__ProfileAssignment_1_1 ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
        // InternalOpenCypherParser.g:21475:5: ( ( rule__QueryOptions__ProfileAssignment_1_1 ) )
        // InternalOpenCypherParser.g:21476:6: ( rule__QueryOptions__ProfileAssignment_1_1 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getQueryOptionsAccess().getProfileAssignment_1_1()); 
        }
        // InternalOpenCypherParser.g:21477:6: ( rule__QueryOptions__ProfileAssignment_1_1 )
        // InternalOpenCypherParser.g:21477:7: rule__QueryOptions__ProfileAssignment_1_1
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__ProfileAssignment_1_1();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred280_InternalOpenCypherParser

    // $ANTLR start synpred281_InternalOpenCypherParser
    public final void synpred281_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:21498:8: ( rule__QueryOptions__CypherOptionAssignment_1_2 )
        // InternalOpenCypherParser.g:21498:9: rule__QueryOptions__CypherOptionAssignment_1_2
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__CypherOptionAssignment_1_2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_InternalOpenCypherParser

    // $ANTLR start synpred282_InternalOpenCypherParser
    public final void synpred282_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:21518:2: ( rule__QueryOptions__UnorderedGroup_1__1 )
        // InternalOpenCypherParser.g:21518:2: rule__QueryOptions__UnorderedGroup_1__1
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__UnorderedGroup_1__1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_InternalOpenCypherParser

    // $ANTLR start synpred283_InternalOpenCypherParser
    public final void synpred283_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:21530:2: ( rule__QueryOptions__UnorderedGroup_1__2 )
        // InternalOpenCypherParser.g:21530:2: rule__QueryOptions__UnorderedGroup_1__2
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__UnorderedGroup_1__2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_InternalOpenCypherParser

    // Delegated rules

    public final boolean synpred84_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA134 dfa134 = new DFA134(this);
    static final String dfa_1s = "\117\uffff";
    static final String dfa_2s = "\1\1\1\uffff\114\1\1\uffff";
    static final String dfa_3s = "\1\4\1\uffff\114\15\1\uffff";
    static final String dfa_4s = "\1\156\1\uffff\114\143\1\uffff";
    static final String dfa_5s = "\1\uffff\1\2\114\uffff\1\1";
    static final String dfa_6s = "\117\uffff}>";
    static final String[] dfa_7s = {
            "\1\67\1\32\1\63\1\66\1\17\1\53\1\55\1\76\1\45\1\33\1\7\1\4\1\104\1\43\1\27\1\5\1\20\1\10\1\13\1\3\1\40\1\41\1\23\1\103\1\110\1\42\1\46\1\107\1\74\1\22\1\35\1\102\1\101\1\14\1\52\1\34\1\36\1\47\1\61\1\11\1\6\1\65\2\uffff\1\111\1\54\1\16\1\112\1\75\1\30\1\57\1\24\1\62\1\106\1\77\1\60\1\51\1\115\1\100\1\114\1\26\1\12\1\72\1\105\1\56\1\25\1\113\1\73\1\64\1\37\1\71\6\uffff\1\31\1\50\1\44\1\21\1\15\1\70\27\uffff\1\2",
            "",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\20\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "()* loopback of 3077:3: ( rule__Namespace__Group__0 )*";
        }
    }
    static final String dfa_8s = "\22\uffff";
    static final String dfa_9s = "\1\15\5\uffff\1\0\13\uffff";
    static final String dfa_10s = "\1\111\5\uffff\1\0\13\uffff";
    static final String dfa_11s = "\1\uffff\1\1\16\uffff\1\3\1\2";
    static final String dfa_12s = "\6\uffff\1\0\13\uffff}>";
    static final String[] dfa_13s = {
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\20\2\uffff\1\6\7\uffff\1\1\10\uffff\1\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = dfa_8;
            this.eof = dfa_8;
            this.min = dfa_9;
            this.max = dfa_10;
            this.accept = dfa_11;
            this.special = dfa_12;
            this.transition = dfa_13;
        }
        public String getDescription() {
            return "3614:1: rule__Query__Alternatives : ( ( ruleRegularQuery ) | ( ruleStandaloneCall ) | ( ruleBulkImportQuery ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalOpenCypherParser()) ) {s = 1;}

                        else if ( (synpred5_InternalOpenCypherParser()) ) {s = 17;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_14s = "\20\uffff";
    static final String dfa_15s = "\1\15\15\0\2\uffff";
    static final String dfa_16s = "\1\111\15\0\2\uffff";
    static final String dfa_17s = "\16\uffff\1\1\1\2";
    static final String dfa_18s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\uffff}>";
    static final String[] dfa_19s = {
            "\1\3\3\uffff\1\11\4\uffff\1\7\1\uffff\1\13\1\12\3\uffff\1\15\1\17\3\uffff\1\5\4\uffff\1\4\1\10\1\uffff\1\2\4\uffff\1\6\7\uffff\1\1\10\uffff\1\16\10\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[][] dfa_19 = unpackEncodedStringArray(dfa_19s);

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = dfa_14;
            this.eof = dfa_14;
            this.min = dfa_15;
            this.max = dfa_16;
            this.accept = dfa_17;
            this.special = dfa_18;
            this.transition = dfa_19;
        }
        public String getDescription() {
            return "3641:1: rule__SingleQuery__Alternatives : ( ( ruleMultiPartQuery ) | ( ruleSinglePartQuery ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_7 = input.LA(1);

                         
                        int index5_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_8 = input.LA(1);

                         
                        int index5_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_9 = input.LA(1);

                         
                        int index5_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_10 = input.LA(1);

                         
                        int index5_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_11 = input.LA(1);

                         
                        int index5_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalOpenCypherParser()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_20s = "\17\uffff";
    static final String dfa_21s = "\1\15\6\0\10\uffff";
    static final String dfa_22s = "\1\111\6\0\10\uffff";
    static final String dfa_23s = "\7\uffff\1\1\1\2\6\uffff";
    static final String dfa_24s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\10\uffff}>";
    static final String[] dfa_25s = {
            "\1\3\3\uffff\1\10\4\uffff\1\10\1\uffff\2\10\3\uffff\1\10\1\7\3\uffff\1\5\4\uffff\1\4\1\10\1\uffff\1\2\4\uffff\1\6\7\uffff\1\1\21\uffff\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[][] dfa_25 = unpackEncodedStringArray(dfa_25s);

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_21;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_25;
        }
        public String getDescription() {
            return "3662:1: rule__SinglePartQuery__Alternatives : ( ( ( rule__SinglePartQuery__Group_0__0 ) ) | ( ( rule__SinglePartQuery__Group_1__0 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA6_1 = input.LA(1);

                         
                        int index6_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_InternalOpenCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index6_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA6_2 = input.LA(1);

                         
                        int index6_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_InternalOpenCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index6_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA6_3 = input.LA(1);

                         
                        int index6_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_InternalOpenCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index6_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA6_4 = input.LA(1);

                         
                        int index6_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_InternalOpenCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index6_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_InternalOpenCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_InternalOpenCypherParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_26s = "\13\uffff";
    static final String dfa_27s = "\1\26\2\0\10\uffff";
    static final String dfa_28s = "\1\62\2\0\10\uffff";
    static final String dfa_29s = "\3\uffff\1\1\1\3\1\5\1\7\1\2\1\4\1\6\1\10";
    static final String dfa_30s = "\1\uffff\1\0\1\1\10\uffff}>";
    static final String[] dfa_31s = {
            "\1\1\33\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = dfa_26;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "3767:1: rule__Command__Alternatives : ( ( ruleCreateIndex ) | ( ruleDropIndex ) | ( ruleCreateUniqueConstraint ) | ( ruleDropUniqueConstraint ) | ( ruleCreateNodePropertyExistenceConstraint ) | ( ruleDropNodePropertyExistenceConstraint ) | ( ruleCreateRelationshipPropertyExistenceConstraint ) | ( ruleDropRelationshipPropertyExistenceConstraint ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_1 = input.LA(1);

                         
                        int index9_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_InternalOpenCypherParser()) ) {s = 3;}

                        else if ( (synpred19_InternalOpenCypherParser()) ) {s = 4;}

                        else if ( (synpred21_InternalOpenCypherParser()) ) {s = 5;}

                        else if ( (synpred23_InternalOpenCypherParser()) ) {s = 6;}

                         
                        input.seek(index9_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_2 = input.LA(1);

                         
                        int index9_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalOpenCypherParser()) ) {s = 7;}

                        else if ( (synpred20_InternalOpenCypherParser()) ) {s = 8;}

                        else if ( (synpred22_InternalOpenCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index9_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_32s = "\121\uffff";
    static final String dfa_33s = "\1\4\1\uffff\3\113\1\4\110\113\3\uffff";
    static final String dfa_34s = "\1\165\1\uffff\3\145\1\165\110\145\3\uffff";
    static final String dfa_35s = "\1\uffff\1\1\114\uffff\1\3\1\2\1\4";
    static final String dfa_36s = "\121\uffff}>";
    static final String[] dfa_37s = {
            "\1\17\1\47\1\100\1\16\1\34\1\70\1\72\1\111\1\62\1\50\1\25\1\22\1\10\1\60\1\44\1\23\1\35\1\26\1\30\1\21\1\55\1\56\1\40\1\7\1\11\1\57\1\63\1\15\1\107\1\37\1\52\1\6\1\4\1\31\1\67\1\51\1\53\1\64\1\76\1\27\1\24\1\102\2\uffff\1\5\1\71\1\33\1\112\1\110\1\45\1\74\1\41\1\77\1\14\1\2\1\75\1\66\1\115\1\3\1\114\1\43\1\12\1\105\1\13\1\73\1\42\1\113\1\106\1\101\1\54\1\104\6\uffff\1\46\1\65\1\61\1\36\1\32\1\103\1\uffff\1\1\1\uffff\1\1\15\uffff\1\1\2\uffff\1\1\2\uffff\1\20\3\uffff\4\1",
            "",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\52\1\2\uffff\33\1\1\116\5\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\120\2\uffff\1\117\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "",
            "",
            ""
    };

    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final char[] dfa_33 = DFA.unpackEncodedStringToUnsignedChars(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final short[] dfa_35 = DFA.unpackEncodedString(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[][] dfa_37 = unpackEncodedStringArray(dfa_37s);

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = dfa_32;
            this.eof = dfa_32;
            this.min = dfa_33;
            this.max = dfa_34;
            this.accept = dfa_35;
            this.special = dfa_36;
            this.transition = dfa_37;
        }
        public String getDescription() {
            return "3845:1: rule__SetItem__Alternatives : ( ( ( rule__SetItem__Group_0__0 ) ) | ( ( rule__SetItem__Group_1__0 ) ) | ( ( rule__SetItem__Group_2__0 ) ) | ( ( rule__SetItem__Group_3__0 ) ) );";
        }
    }
    static final String dfa_38s = "\1\4\107\132\1\4\4\132\2\uffff";
    static final String dfa_39s = "\1\165\107\142\1\165\4\142\2\uffff";
    static final String dfa_40s = "\115\uffff\1\2\1\1";
    static final String[] dfa_41s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\1\uffff\1\115\1\uffff\1\115\15\uffff\1\115\2\uffff\1\115\2\uffff\1\1\3\uffff\4\115",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\52\115\2\uffff\33\115\6\uffff\6\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\1\uffff\2\115\1\uffff\1\116\5\uffff\1\115\2\uffff\1\115\2\uffff\1\115\3\uffff\4\115",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "",
            ""
    };
    static final char[] dfa_38 = DFA.unpackEncodedStringToUnsignedChars(dfa_38s);
    static final char[] dfa_39 = DFA.unpackEncodedStringToUnsignedChars(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[][] dfa_41 = unpackEncodedStringArray(dfa_41s);

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_38;
            this.max = dfa_39;
            this.accept = dfa_40;
            this.special = dfa_6;
            this.transition = dfa_41;
        }
        public String getDescription() {
            return "3878:1: rule__RemoveItem__Alternatives : ( ( ( rule__RemoveItem__Group_0__0 ) ) | ( ( rule__RemoveItem__Group_1__0 ) ) );";
        }
    }
    static final String dfa_42s = "\120\uffff";
    static final String dfa_43s = "\1\uffff\114\117\3\uffff";
    static final String dfa_44s = "\1\4\114\15\1\4\2\uffff";
    static final String dfa_45s = "\1\156\114\143\1\156\2\uffff";
    static final String dfa_46s = "\116\uffff\1\1\1\2";
    static final String dfa_47s = "\120\uffff}>";
    static final String[] dfa_48s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\117\3\uffff\1\117\4\uffff\1\117\1\uffff\2\117\3\uffff\2\117\3\uffff\1\117\4\uffff\2\117\1\uffff\1\117\1\uffff\1\117\1\uffff\2\117\2\uffff\1\117\4\uffff\1\117\10\uffff\1\117\10\uffff\1\117\20\uffff\1\116\5\uffff\1\115\2\uffff\1\117",
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "",
            ""
    };

    static final short[] dfa_42 = DFA.unpackEncodedString(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final char[] dfa_44 = DFA.unpackEncodedStringToUnsignedChars(dfa_44s);
    static final char[] dfa_45 = DFA.unpackEncodedStringToUnsignedChars(dfa_45s);
    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final short[][] dfa_48 = unpackEncodedStringArray(dfa_48s);

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = dfa_42;
            this.eof = dfa_43;
            this.min = dfa_44;
            this.max = dfa_45;
            this.accept = dfa_46;
            this.special = dfa_47;
            this.transition = dfa_48;
        }
        public String getDescription() {
            return "3899:1: rule__StandaloneCall__InvocationAlternatives_1_0 : ( ( ruleExplicitProcedureInvocation ) | ( ruleImplicitProcedureInvocation ) );";
        }
    }
    static final String dfa_49s = "\122\uffff";
    static final String dfa_50s = "\1\132\1\4\1\uffff\114\132\1\4\2\uffff";
    static final String dfa_51s = "\1\142\1\156\1\uffff\114\132\1\162\2\uffff";
    static final String dfa_52s = "\2\uffff\1\3\115\uffff\1\2\1\1";
    static final String dfa_53s = "\122\uffff}>";
    static final String[] dfa_54s = {
            "\1\2\7\uffff\1\1",
            "\1\70\1\33\1\64\1\67\1\20\1\54\1\56\1\77\1\46\1\34\1\10\1\5\1\105\1\44\1\30\1\6\1\21\1\11\1\14\1\4\1\41\1\42\1\24\1\104\1\111\1\43\1\47\1\110\1\75\1\23\1\36\1\103\1\102\1\15\1\53\1\35\1\37\1\50\1\62\1\12\1\7\1\66\2\uffff\1\112\1\55\1\17\1\113\1\76\1\31\1\60\1\25\1\63\1\107\1\100\1\61\1\52\1\116\1\101\1\115\1\27\1\13\1\73\1\106\1\57\1\26\1\114\1\74\1\65\1\40\1\72\6\uffff\1\32\1\51\1\45\1\22\1\16\1\71\27\uffff\1\3",
            "",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\52\121\2\uffff\33\121\6\uffff\6\121\1\uffff\1\120\25\uffff\1\121\3\uffff\1\120",
            "",
            ""
    };

    static final short[] dfa_49 = DFA.unpackEncodedString(dfa_49s);
    static final char[] dfa_50 = DFA.unpackEncodedStringToUnsignedChars(dfa_50s);
    static final char[] dfa_51 = DFA.unpackEncodedStringToUnsignedChars(dfa_51s);
    static final short[] dfa_52 = DFA.unpackEncodedString(dfa_52s);
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[][] dfa_54 = unpackEncodedStringArray(dfa_54s);

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_50;
            this.max = dfa_51;
            this.accept = dfa_52;
            this.special = dfa_53;
            this.transition = dfa_54;
        }
        public String getDescription() {
            return "4043:1: rule__NodeLookup__Alternatives_1 : ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) );";
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_50;
            this.max = dfa_51;
            this.accept = dfa_52;
            this.special = dfa_53;
            this.transition = dfa_54;
        }
        public String getDescription() {
            return "4091:1: rule__RelationshipLookup__Alternatives_1 : ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) );";
        }
    }
    static final String dfa_55s = "\1\130\1\4\1\uffff\114\142\2\uffff";
    static final String dfa_56s = "\1\153\1\165\1\uffff\114\155\2\uffff";
    static final String dfa_57s = "\2\uffff\1\2\114\uffff\1\1\1\3";
    static final String[] dfa_58s = {
            "\1\2\22\uffff\1\1",
            "\1\70\1\33\1\64\1\67\1\20\1\54\1\56\1\77\1\46\1\34\1\10\1\5\1\105\1\44\1\30\1\6\1\21\1\11\1\14\1\4\1\41\1\42\1\24\1\104\1\111\1\43\1\47\1\110\1\75\1\23\1\36\1\103\1\102\1\15\1\53\1\35\1\37\1\50\1\62\1\12\1\7\1\66\2\uffff\1\112\1\55\1\17\1\113\1\76\1\31\1\60\1\25\1\63\1\107\1\100\1\61\1\52\1\116\1\101\1\115\1\27\1\13\1\73\1\106\1\57\1\26\1\114\1\74\1\65\1\40\1\72\6\uffff\1\32\1\51\1\45\1\22\1\16\1\71\26\uffff\1\117\1\3\4\uffff\3\120",
            "",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "",
            ""
    };
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[][] dfa_58 = unpackEncodedStringArray(dfa_58s);

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = dfa_32;
            this.eof = dfa_32;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_36;
            this.transition = dfa_58;
        }
        public String getDescription() {
            return "4271:1: rule__Properties__Alternatives : ( ( ruleMapLiteral ) | ( ruleParameter ) | ( ruleLegacyParameter ) );";
        }
    }
    static final String dfa_59s = "\130\uffff";
    static final String dfa_60s = "\1\4\1\0\126\uffff";
    static final String dfa_61s = "\1\165\1\0\126\uffff";
    static final String dfa_62s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_63s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_64s = {
            "\52\2\2\uffff\27\2\1\1\3\2\6\uffff\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\10\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_59 = DFA.unpackEncodedString(dfa_59s);
    static final char[] dfa_60 = DFA.unpackEncodedStringToUnsignedChars(dfa_60s);
    static final char[] dfa_61 = DFA.unpackEncodedStringToUnsignedChars(dfa_61s);
    static final short[] dfa_62 = DFA.unpackEncodedString(dfa_62s);
    static final short[] dfa_63 = DFA.unpackEncodedString(dfa_63s);
    static final short[][] dfa_64 = unpackEncodedStringArray(dfa_64s);

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = dfa_59;
            this.eof = dfa_59;
            this.min = dfa_60;
            this.max = dfa_61;
            this.accept = dfa_62;
            this.special = dfa_63;
            this.transition = dfa_64;
        }
        public String getDescription() {
            return "4298:1: rule__NotExpression__Alternatives : ( ( ( rule__NotExpression__Group_0__0 ) ) | ( ruleComparisonExpression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_1 = input.LA(1);

                         
                        int index30_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_InternalOpenCypherParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index30_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_65s = "\146\uffff";
    static final String dfa_66s = "\1\4\4\uffff\5\0\1\uffff\112\0\21\uffff";
    static final String dfa_67s = "\1\165\4\uffff\5\0\1\uffff\112\0\21\uffff";
    static final String dfa_68s = "\1\uffff\1\1\10\uffff\1\2\112\uffff\1\22\1\23\1\3\1\6\1\7\1\4\1\5\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21";
    static final String dfa_69s = "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\21\uffff}>";
    static final String[] dfa_70s = {
            "\1\25\1\56\1\107\1\24\1\43\1\77\1\101\1\120\1\71\1\57\1\34\1\31\1\16\1\67\1\53\1\32\1\44\1\35\1\37\1\30\1\64\1\65\1\47\1\15\1\17\1\66\1\72\1\23\1\116\1\46\1\61\1\14\1\7\1\40\1\76\1\60\1\62\1\73\1\105\1\36\1\33\1\111\2\uffff\1\13\1\100\1\42\1\121\1\117\1\54\1\103\1\50\1\106\1\22\1\5\1\104\1\75\1\124\1\6\1\123\1\52\1\20\1\114\1\21\1\102\1\51\1\122\1\115\1\110\1\63\1\113\6\uffff\1\55\1\74\1\70\1\45\1\41\1\112\1\uffff\1\12\1\uffff\1\26\15\uffff\1\11\2\uffff\1\10\2\uffff\1\27\3\uffff\4\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final char[] dfa_66 = DFA.unpackEncodedStringToUnsignedChars(dfa_66s);
    static final char[] dfa_67 = DFA.unpackEncodedStringToUnsignedChars(dfa_67s);
    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[] dfa_69 = DFA.unpackEncodedString(dfa_69s);
    static final short[][] dfa_70 = unpackEncodedStringArray(dfa_70s);

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = dfa_65;
            this.eof = dfa_65;
            this.min = dfa_66;
            this.max = dfa_67;
            this.accept = dfa_68;
            this.special = dfa_69;
            this.transition = dfa_70;
        }
        public String getDescription() {
            return "4562:1: rule__Atom__Alternatives : ( ( ruleLiteral ) | ( ruleParameter ) | ( ruleLegacyParameter ) | ( ruleCaseExpression ) | ( ( rule__Atom__Group_4__0 ) ) | ( ruleListComprehension ) | ( rulePatternComprehension ) | ( ( rule__Atom__Group_7__0 ) ) | ( ( rule__Atom__Group_8__0 ) ) | ( ruleReduce ) | ( ( rule__Atom__Group_10__0 ) ) | ( ( rule__Atom__Group_11__0 ) ) | ( ( rule__Atom__Group_12__0 ) ) | ( ( rule__Atom__Group_13__0 ) ) | ( ruleShortestPathPattern ) | ( ruleRelationshipsPattern ) | ( ruleParenthesizedExpression ) | ( ruleFunctionInvocation ) | ( ( rule__Atom__Group_18__0 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalOpenCypherParser()) ) {s = 1;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalOpenCypherParser()) ) {s = 1;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalOpenCypherParser()) ) {s = 1;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalOpenCypherParser()) ) {s = 1;}

                        else if ( (synpred74_InternalOpenCypherParser()) ) {s = 87;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalOpenCypherParser()) ) {s = 1;}

                        else if ( (synpred77_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (synpred78_InternalOpenCypherParser()) ) {s = 89;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_InternalOpenCypherParser()) ) {s = 90;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalOpenCypherParser()) ) {s = 91;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalOpenCypherParser()) ) {s = 92;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA40_14 = input.LA(1);

                         
                        int index40_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_InternalOpenCypherParser()) ) {s = 93;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA40_15 = input.LA(1);

                         
                        int index40_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_InternalOpenCypherParser()) ) {s = 94;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA40_16 = input.LA(1);

                         
                        int index40_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred82_InternalOpenCypherParser()) ) {s = 95;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA40_17 = input.LA(1);

                         
                        int index40_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalOpenCypherParser()) ) {s = 96;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA40_18 = input.LA(1);

                         
                        int index40_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalOpenCypherParser()) ) {s = 97;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA40_19 = input.LA(1);

                         
                        int index40_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalOpenCypherParser()) ) {s = 98;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA40_20 = input.LA(1);

                         
                        int index40_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalOpenCypherParser()) ) {s = 99;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA40_21 = input.LA(1);

                         
                        int index40_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalOpenCypherParser()) ) {s = 99;}

                        else if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA40_22 = input.LA(1);

                         
                        int index40_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalOpenCypherParser()) ) {s = 100;}

                        else if ( (synpred88_InternalOpenCypherParser()) ) {s = 101;}

                         
                        input.seek(index40_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA40_23 = input.LA(1);

                         
                        int index40_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA40_24 = input.LA(1);

                         
                        int index40_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_24);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA40_25 = input.LA(1);

                         
                        int index40_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA40_26 = input.LA(1);

                         
                        int index40_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA40_27 = input.LA(1);

                         
                        int index40_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_27);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA40_28 = input.LA(1);

                         
                        int index40_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_28);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA40_29 = input.LA(1);

                         
                        int index40_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_29);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA40_30 = input.LA(1);

                         
                        int index40_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_30);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA40_31 = input.LA(1);

                         
                        int index40_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_31);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA40_32 = input.LA(1);

                         
                        int index40_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_32);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA40_33 = input.LA(1);

                         
                        int index40_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_33);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA40_34 = input.LA(1);

                         
                        int index40_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_34);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA40_35 = input.LA(1);

                         
                        int index40_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_35);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA40_36 = input.LA(1);

                         
                        int index40_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_36);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA40_37 = input.LA(1);

                         
                        int index40_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_37);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA40_38 = input.LA(1);

                         
                        int index40_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_38);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA40_39 = input.LA(1);

                         
                        int index40_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_39);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA40_40 = input.LA(1);

                         
                        int index40_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_40);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA40_41 = input.LA(1);

                         
                        int index40_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_41);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA40_42 = input.LA(1);

                         
                        int index40_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_42);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA40_43 = input.LA(1);

                         
                        int index40_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_43);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA40_44 = input.LA(1);

                         
                        int index40_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_44);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA40_45 = input.LA(1);

                         
                        int index40_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_45);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA40_46 = input.LA(1);

                         
                        int index40_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_46);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA40_47 = input.LA(1);

                         
                        int index40_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_47);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA40_48 = input.LA(1);

                         
                        int index40_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_48);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA40_49 = input.LA(1);

                         
                        int index40_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_49);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA40_50 = input.LA(1);

                         
                        int index40_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_50);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA40_51 = input.LA(1);

                         
                        int index40_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_51);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA40_52 = input.LA(1);

                         
                        int index40_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_52);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA40_53 = input.LA(1);

                         
                        int index40_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_53);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA40_54 = input.LA(1);

                         
                        int index40_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_54);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA40_55 = input.LA(1);

                         
                        int index40_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_55);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA40_56 = input.LA(1);

                         
                        int index40_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_56);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA40_57 = input.LA(1);

                         
                        int index40_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_57);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA40_58 = input.LA(1);

                         
                        int index40_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_58);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA40_59 = input.LA(1);

                         
                        int index40_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_59);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA40_60 = input.LA(1);

                         
                        int index40_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_60);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA40_61 = input.LA(1);

                         
                        int index40_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_61);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA40_62 = input.LA(1);

                         
                        int index40_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_62);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA40_63 = input.LA(1);

                         
                        int index40_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_63);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA40_64 = input.LA(1);

                         
                        int index40_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_64);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA40_65 = input.LA(1);

                         
                        int index40_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_65);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA40_66 = input.LA(1);

                         
                        int index40_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_66);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA40_67 = input.LA(1);

                         
                        int index40_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_67);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA40_68 = input.LA(1);

                         
                        int index40_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_68);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA40_69 = input.LA(1);

                         
                        int index40_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_69);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA40_70 = input.LA(1);

                         
                        int index40_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_70);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA40_71 = input.LA(1);

                         
                        int index40_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_71);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA40_72 = input.LA(1);

                         
                        int index40_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_72);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA40_73 = input.LA(1);

                         
                        int index40_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_73);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA40_74 = input.LA(1);

                         
                        int index40_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_74);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA40_75 = input.LA(1);

                         
                        int index40_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_75);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA40_76 = input.LA(1);

                         
                        int index40_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_76);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA40_77 = input.LA(1);

                         
                        int index40_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_77);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA40_78 = input.LA(1);

                         
                        int index40_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_78);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA40_79 = input.LA(1);

                         
                        int index40_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_79);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA40_80 = input.LA(1);

                         
                        int index40_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_80);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA40_81 = input.LA(1);

                         
                        int index40_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_81);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA40_82 = input.LA(1);

                         
                        int index40_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_82);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA40_83 = input.LA(1);

                         
                        int index40_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_83);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA40_84 = input.LA(1);

                         
                        int index40_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index40_84);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_71s = "\1\uffff\114\116\2\uffff";
    static final String dfa_72s = "\1\4\114\11\2\uffff";
    static final String dfa_73s = "\1\156\114\155\2\uffff";
    static final String dfa_74s = "\115\uffff\1\1\1\2";
    static final String[] dfa_75s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\10\116\1\uffff\1\116\1\uffff\4\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "",
            ""
    };
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final char[] dfa_72 = DFA.unpackEncodedStringToUnsignedChars(dfa_72s);
    static final char[] dfa_73 = DFA.unpackEncodedStringToUnsignedChars(dfa_73s);
    static final short[] dfa_74 = DFA.unpackEncodedString(dfa_74s);
    static final short[][] dfa_75 = unpackEncodedStringArray(dfa_75s);

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = dfa_1;
            this.eof = dfa_71;
            this.min = dfa_72;
            this.max = dfa_73;
            this.accept = dfa_74;
            this.special = dfa_6;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "4751:1: rule__PropertyLookup__Alternatives_1 : ( ( ( rule__PropertyLookup__Group_1_0__0 ) ) | ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 ) ) );";
        }
    }
    static final String dfa_76s = "\26\uffff";
    static final String dfa_77s = "\1\1\1\uffff\3\1\21\uffff";
    static final String dfa_78s = "\1\4\1\uffff\1\4\2\15\1\4\1\10\1\105\1\4\1\47\3\4\1\132\1\30\5\4\1\16\1\uffff";
    static final String dfa_79s = "\1\156\1\uffff\1\165\2\145\1\156\2\145\1\156\1\145\1\156\1\165\1\156\2\145\5\165\1\145\1\uffff";
    static final String dfa_80s = "\1\uffff\1\2\23\uffff\1\1";
    static final String dfa_81s = "\26\uffff}>";
    static final String[] dfa_82s = {
            "\11\25\1\11\1\25\1\3\1\25\1\15\1\25\1\4\2\25\1\5\1\2\1\17\1\16\3\25\1\21\1\23\3\25\1\13\4\25\1\12\1\14\1\25\1\10\1\25\1\24\1\25\1\uffff\1\1\2\25\1\6\4\25\1\7\10\25\1\22\10\25\1\20\1\25\6\uffff\6\25\14\uffff\1\1\12\uffff\1\25",
            "",
            "\52\1\1\uffff\34\1\6\uffff\6\1\14\uffff\1\1\1\uffff\1\25\10\uffff\1\1\4\uffff\3\1",
            "\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\31\uffff\1\1\1\uffff\1\25",
            "\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\31\uffff\1\1\1\uffff\1\25",
            "\52\1\2\uffff\33\1\6\uffff\6\1\3\uffff\1\1\12\uffff\1\25\10\uffff\1\1",
            "\1\1\34\uffff\1\1\77\uffff\1\25",
            "\1\1\37\uffff\1\25",
            "\52\1\2\uffff\33\1\6\uffff\6\1\16\uffff\1\25\10\uffff\1\1",
            "\1\1\75\uffff\1\25",
            "\52\1\2\uffff\33\1\6\uffff\6\1\3\uffff\1\1\12\uffff\1\25\10\uffff\1\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\3\uffff\1\1\12\uffff\1\25\10\uffff\1\1",
            "\1\1\12\uffff\1\25",
            "\1\1\114\uffff\1\25",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\12\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\12\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\1\5\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\1\5\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\1\1\126\uffff\1\25",
            ""
    };

    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final char[] dfa_78 = DFA.unpackEncodedStringToUnsignedChars(dfa_78s);
    static final char[] dfa_79 = DFA.unpackEncodedStringToUnsignedChars(dfa_79s);
    static final short[] dfa_80 = DFA.unpackEncodedString(dfa_80s);
    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final short[][] dfa_82 = unpackEncodedStringArray(dfa_82s);

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = dfa_76;
            this.eof = dfa_77;
            this.min = dfa_78;
            this.max = dfa_79;
            this.accept = dfa_80;
            this.special = dfa_81;
            this.transition = dfa_82;
        }
        public String getDescription() {
            return "()* loopback of 5645:2: ( rule__CypherOption__ConfigurationOptionAssignment_3 )*";
        }
    }
    static final String dfa_83s = "\1\1\25\uffff";
    static final String dfa_84s = "\1\15\4\uffff\1\0\7\uffff\6\0\3\uffff";
    static final String dfa_85s = "\1\143\4\uffff\1\0\7\uffff\6\0\3\uffff";
    static final String dfa_86s = "\5\uffff\1\0\7\uffff\1\1\1\2\1\3\1\4\1\5\1\6\3\uffff}>";
    static final String[] dfa_87s = {
            "\1\1\3\uffff\1\16\4\uffff\1\5\1\uffff\1\20\1\17\3\uffff\1\22\1\1\3\uffff\1\1\4\uffff\1\1\1\15\1\uffff\3\1\2\uffff\1\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\21\31\uffff\1\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final short[] dfa_83 = DFA.unpackEncodedString(dfa_83s);
    static final char[] dfa_84 = DFA.unpackEncodedStringToUnsignedChars(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final short[] dfa_86 = DFA.unpackEncodedString(dfa_86s);
    static final short[][] dfa_87 = unpackEncodedStringArray(dfa_87s);

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = dfa_76;
            this.eof = dfa_83;
            this.min = dfa_84;
            this.max = dfa_85;
            this.accept = dfa_80;
            this.special = dfa_86;
            this.transition = dfa_87;
        }
        public String getDescription() {
            return "()* loopback of 6280:3: ( rule__SinglePartQuery__UpdatingClausesAssignment_1_1 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA62_5 = input.LA(1);

                         
                        int index62_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_InternalOpenCypherParser()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index62_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA62_13 = input.LA(1);

                         
                        int index62_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_InternalOpenCypherParser()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index62_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA62_14 = input.LA(1);

                         
                        int index62_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_InternalOpenCypherParser()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index62_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA62_15 = input.LA(1);

                         
                        int index62_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_InternalOpenCypherParser()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index62_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA62_16 = input.LA(1);

                         
                        int index62_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_InternalOpenCypherParser()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index62_16);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA62_17 = input.LA(1);

                         
                        int index62_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_InternalOpenCypherParser()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index62_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA62_18 = input.LA(1);

                         
                        int index62_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_InternalOpenCypherParser()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index62_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 62, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_88s = "\1\2\25\uffff";
    static final String dfa_89s = "\1\15\1\0\24\uffff";
    static final String dfa_90s = "\1\143\1\0\24\uffff";
    static final String dfa_91s = "\2\uffff\1\2\22\uffff\1\1";
    static final String dfa_92s = "\1\uffff\1\0\24\uffff}>";
    static final String[] dfa_93s = {
            "\1\2\3\uffff\1\2\4\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\1\3\uffff\1\2\4\uffff\2\2\1\uffff\3\2\2\uffff\1\2\2\uffff\1\2\4\uffff\1\2\10\uffff\1\2\10\uffff\1\2\31\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final char[] dfa_89 = DFA.unpackEncodedStringToUnsignedChars(dfa_89s);
    static final char[] dfa_90 = DFA.unpackEncodedStringToUnsignedChars(dfa_90s);
    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final short[] dfa_92 = DFA.unpackEncodedString(dfa_92s);
    static final short[][] dfa_93 = unpackEncodedStringArray(dfa_93s);

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = dfa_76;
            this.eof = dfa_88;
            this.min = dfa_89;
            this.max = dfa_90;
            this.accept = dfa_91;
            this.special = dfa_92;
            this.transition = dfa_93;
        }
        public String getDescription() {
            return "6307:2: ( rule__SinglePartQuery__ReturnAssignment_1_2 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA63_1 = input.LA(1);

                         
                        int index63_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_InternalOpenCypherParser()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index63_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 63, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_94s = "\1\15\6\0\1\uffff\7\0\1\uffff";
    static final String dfa_95s = "\1\111\6\0\1\uffff\7\0\1\uffff";
    static final String dfa_96s = "\7\uffff\1\2\7\uffff\1\1";
    static final String dfa_97s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\uffff}>";
    static final String[] dfa_98s = {
            "\1\3\3\uffff\1\12\4\uffff\1\10\1\uffff\1\14\1\13\3\uffff\1\16\1\7\3\uffff\1\5\4\uffff\1\4\1\11\1\uffff\1\2\4\uffff\1\6\7\uffff\1\1\10\uffff\1\17\10\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final char[] dfa_94 = DFA.unpackEncodedStringToUnsignedChars(dfa_94s);
    static final char[] dfa_95 = DFA.unpackEncodedStringToUnsignedChars(dfa_95s);
    static final short[] dfa_96 = DFA.unpackEncodedString(dfa_96s);
    static final short[] dfa_97 = DFA.unpackEncodedString(dfa_97s);
    static final short[][] dfa_98 = unpackEncodedStringArray(dfa_98s);

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = dfa_14;
            this.eof = dfa_14;
            this.min = dfa_94;
            this.max = dfa_95;
            this.accept = dfa_96;
            this.special = dfa_97;
            this.transition = dfa_98;
        }
        public String getDescription() {
            return "()* loopback of 6341:3: ( rule__MultiPartQuery__SubQueriesAssignment_0 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA64_1 = input.LA(1);

                         
                        int index64_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA64_2 = input.LA(1);

                         
                        int index64_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA64_3 = input.LA(1);

                         
                        int index64_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA64_4 = input.LA(1);

                         
                        int index64_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA64_5 = input.LA(1);

                         
                        int index64_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA64_6 = input.LA(1);

                         
                        int index64_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA64_8 = input.LA(1);

                         
                        int index64_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA64_9 = input.LA(1);

                         
                        int index64_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA64_10 = input.LA(1);

                         
                        int index64_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA64_11 = input.LA(1);

                         
                        int index64_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA64_12 = input.LA(1);

                         
                        int index64_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA64_13 = input.LA(1);

                         
                        int index64_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA64_14 = input.LA(1);

                         
                        int index64_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_InternalOpenCypherParser()) ) {s = 15;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index64_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_99s = "\1\uffff\114\115\2\uffff";
    static final String dfa_100s = "\1\4\114\15\2\uffff";
    static final String dfa_101s = "\1\156\114\143\2\uffff";
    static final String[] dfa_102s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\2\uffff\1\115\4\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\14\uffff\1\115\4\uffff\1\115",
            "",
            ""
    };
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final char[] dfa_100 = DFA.unpackEncodedStringToUnsignedChars(dfa_100s);
    static final char[] dfa_101 = DFA.unpackEncodedStringToUnsignedChars(dfa_101s);
    static final short[][] dfa_102 = unpackEncodedStringArray(dfa_102s);

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = dfa_1;
            this.eof = dfa_99;
            this.min = dfa_100;
            this.max = dfa_101;
            this.accept = dfa_40;
            this.special = dfa_6;
            this.transition = dfa_102;
        }
        public String getDescription() {
            return "10534:2: ( rule__YieldItem__Group_0__0 )?";
        }
    }
    static final String dfa_103s = "\131\uffff";
    static final String dfa_104s = "\1\4\1\0\127\uffff";
    static final String dfa_105s = "\1\165\1\0\127\uffff";
    static final String dfa_106s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_107s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_108s = {
            "\10\2\1\1\41\2\2\uffff\33\2\6\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\10\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_103 = DFA.unpackEncodedString(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final char[] dfa_105 = DFA.unpackEncodedStringToUnsignedChars(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[] dfa_107 = DFA.unpackEncodedString(dfa_107s);
    static final short[][] dfa_108 = unpackEncodedStringArray(dfa_108s);

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = dfa_103;
            this.eof = dfa_103;
            this.min = dfa_104;
            this.max = dfa_105;
            this.accept = dfa_106;
            this.special = dfa_107;
            this.transition = dfa_108;
        }
        public String getDescription() {
            return "10777:2: ( rule__ReturnBody__DistinctAssignment_0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_1 = input.LA(1);

                         
                        int index86_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred213_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index86_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_109s = "\102\uffff";
    static final String dfa_110s = "\1\1\101\uffff";
    static final String dfa_111s = "\1\11\17\uffff\1\0\2\uffff\1\0\56\uffff";
    static final String dfa_112s = "\1\155\17\uffff\1\0\2\uffff\1\0\56\uffff";
    static final String dfa_113s = "\1\uffff\1\2\77\uffff\1\1";
    static final String dfa_114s = "\20\uffff\1\0\2\uffff\1\1\56\uffff}>";
    static final String[] dfa_115s = {
            "\3\1\1\uffff\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\10\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\6\1\1\uffff\4\1\2\uffff\1\1\1\uffff\4\1\1\20\4\1\1\23\2\1\1\uffff\3\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_109 = DFA.unpackEncodedString(dfa_109s);
    static final short[] dfa_110 = DFA.unpackEncodedString(dfa_110s);
    static final char[] dfa_111 = DFA.unpackEncodedStringToUnsignedChars(dfa_111s);
    static final char[] dfa_112 = DFA.unpackEncodedStringToUnsignedChars(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final short[][] dfa_115 = unpackEncodedStringArray(dfa_115s);

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = dfa_109;
            this.eof = dfa_110;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "()* loopback of 19051:3: ( rule__RelationshipsPattern__ChainAssignment_1 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_16 = input.LA(1);

                         
                        int index134_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalOpenCypherParser()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index134_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA134_19 = input.LA(1);

                         
                        int index134_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalOpenCypherParser()) ) {s = 65;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index134_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF2L,0x00004000007E07FFL});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000888000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0084958463422000L,0x0000000800000201L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0084958463422002L,0x0000000000000201L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00384000007E07FFL});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000007E07FFL});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0084958463422000L,0x0000000000000201L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0038000000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0080858463422000L,0x0000000000000201L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0080858463422000L,0x0000000000000203L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0080848440002000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0080848400002002L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0080858463422002L,0x0000000000000201L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0080858423422002L,0x0000000000000201L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0080858423422000L,0x0000000000000201L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000010023420002L,0x0000000000000200L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900057E07FFL});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000004004000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900A57E07FFL});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000008000002000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000047E07FFL});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000300000000000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000008000400000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000003000000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000010023420000L,0x0000000000000200L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000807E07FFL});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900B57E07FFL});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x1000024000000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0002000000000600L,0x0000000000000010L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000200000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0100000000000040L,0x0000000000000100L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000000404000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0004080000000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0004000001000000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0038000011000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000090L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000002L,0x0000001080000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004804097E07FFL});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000011080000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004A84117E07FFL});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004004007E07FFL});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000000000000L,0x0038000000001000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000000L,0x0000007000016000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000002L,0x0000007000016000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000002L,0x00000000A0000000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000000L,0x0000000212000000L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000002L,0x0000000212000000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0010000100000800L,0x0000010000188000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0010000100000802L,0x0000010000188000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900A57E17FFL});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4B00A57E07FFL});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0010000100000800L,0x0000000000088000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000000L,0x0000100008000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x4000001000000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x4400001000000000L,0x003C090000000000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900AD7E07FFL});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000000L,0x0000120000000000L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000200000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000000L,0x0000008000800000L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00006000007E07FFL});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000000000888002L});

}
