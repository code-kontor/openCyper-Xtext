/**
 * generated by Xtext 2.15.0
 */
package io.codekontor.opencypher.xtext.openCypher.impl;

import io.codekontor.opencypher.xtext.openCypher.Index;
import io.codekontor.opencypher.xtext.openCypher.NodeLabel;
import io.codekontor.opencypher.xtext.openCypher.OpenCypherPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Index</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.codekontor.opencypher.xtext.openCypher.impl.IndexImpl#getNodeLabel <em>Node Label</em>}</li>
 *   <li>{@link io.codekontor.opencypher.xtext.openCypher.impl.IndexImpl#getPropertyKeyName <em>Property Key Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IndexImpl extends MinimalEObjectImpl.Container implements Index
{
  /**
   * The cached value of the '{@link #getNodeLabel() <em>Node Label</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeLabel()
   * @generated
   * @ordered
   */
  protected NodeLabel nodeLabel;

  /**
   * The default value of the '{@link #getPropertyKeyName() <em>Property Key Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyKeyName()
   * @generated
   * @ordered
   */
  protected static final String PROPERTY_KEY_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPropertyKeyName() <em>Property Key Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyKeyName()
   * @generated
   * @ordered
   */
  protected String propertyKeyName = PROPERTY_KEY_NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndexImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenCypherPackage.Literals.INDEX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeLabel getNodeLabel()
  {
    return nodeLabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNodeLabel(NodeLabel newNodeLabel, NotificationChain msgs)
  {
    NodeLabel oldNodeLabel = nodeLabel;
    nodeLabel = newNodeLabel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenCypherPackage.INDEX__NODE_LABEL, oldNodeLabel, newNodeLabel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNodeLabel(NodeLabel newNodeLabel)
  {
    if (newNodeLabel != nodeLabel)
    {
      NotificationChain msgs = null;
      if (nodeLabel != null)
        msgs = ((InternalEObject)nodeLabel).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenCypherPackage.INDEX__NODE_LABEL, null, msgs);
      if (newNodeLabel != null)
        msgs = ((InternalEObject)newNodeLabel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenCypherPackage.INDEX__NODE_LABEL, null, msgs);
      msgs = basicSetNodeLabel(newNodeLabel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenCypherPackage.INDEX__NODE_LABEL, newNodeLabel, newNodeLabel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPropertyKeyName()
  {
    return propertyKeyName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPropertyKeyName(String newPropertyKeyName)
  {
    String oldPropertyKeyName = propertyKeyName;
    propertyKeyName = newPropertyKeyName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenCypherPackage.INDEX__PROPERTY_KEY_NAME, oldPropertyKeyName, propertyKeyName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenCypherPackage.INDEX__NODE_LABEL:
        return basicSetNodeLabel(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenCypherPackage.INDEX__NODE_LABEL:
        return getNodeLabel();
      case OpenCypherPackage.INDEX__PROPERTY_KEY_NAME:
        return getPropertyKeyName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenCypherPackage.INDEX__NODE_LABEL:
        setNodeLabel((NodeLabel)newValue);
        return;
      case OpenCypherPackage.INDEX__PROPERTY_KEY_NAME:
        setPropertyKeyName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenCypherPackage.INDEX__NODE_LABEL:
        setNodeLabel((NodeLabel)null);
        return;
      case OpenCypherPackage.INDEX__PROPERTY_KEY_NAME:
        setPropertyKeyName(PROPERTY_KEY_NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenCypherPackage.INDEX__NODE_LABEL:
        return nodeLabel != null;
      case OpenCypherPackage.INDEX__PROPERTY_KEY_NAME:
        return PROPERTY_KEY_NAME_EDEFAULT == null ? propertyKeyName != null : !PROPERTY_KEY_NAME_EDEFAULT.equals(propertyKeyName);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (propertyKeyName: ");
    result.append(propertyKeyName);
    result.append(')');
    return result.toString();
  }

} //IndexImpl
