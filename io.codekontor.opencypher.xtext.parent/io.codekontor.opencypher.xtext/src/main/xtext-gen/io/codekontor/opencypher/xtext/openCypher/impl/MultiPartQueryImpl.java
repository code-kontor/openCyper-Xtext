/**
 * generated by Xtext 2.15.0
 */
package io.codekontor.opencypher.xtext.openCypher.impl;

import io.codekontor.opencypher.xtext.openCypher.MultiPartQuery;
import io.codekontor.opencypher.xtext.openCypher.MultiPartSubQuery;
import io.codekontor.opencypher.xtext.openCypher.OpenCypherPackage;
import io.codekontor.opencypher.xtext.openCypher.SinglePartQuery;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Multi Part Query</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.codekontor.opencypher.xtext.openCypher.impl.MultiPartQueryImpl#getSubQueries <em>Sub Queries</em>}</li>
 *   <li>{@link io.codekontor.opencypher.xtext.openCypher.impl.MultiPartQueryImpl#getSinglePartQuery <em>Single Part Query</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MultiPartQueryImpl extends SingleQueryImpl implements MultiPartQuery
{
  /**
   * The cached value of the '{@link #getSubQueries() <em>Sub Queries</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubQueries()
   * @generated
   * @ordered
   */
  protected EList<MultiPartSubQuery> subQueries;

  /**
   * The cached value of the '{@link #getSinglePartQuery() <em>Single Part Query</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSinglePartQuery()
   * @generated
   * @ordered
   */
  protected SinglePartQuery singlePartQuery;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MultiPartQueryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenCypherPackage.Literals.MULTI_PART_QUERY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MultiPartSubQuery> getSubQueries()
  {
    if (subQueries == null)
    {
      subQueries = new EObjectContainmentEList<MultiPartSubQuery>(MultiPartSubQuery.class, this, OpenCypherPackage.MULTI_PART_QUERY__SUB_QUERIES);
    }
    return subQueries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SinglePartQuery getSinglePartQuery()
  {
    return singlePartQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSinglePartQuery(SinglePartQuery newSinglePartQuery, NotificationChain msgs)
  {
    SinglePartQuery oldSinglePartQuery = singlePartQuery;
    singlePartQuery = newSinglePartQuery;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenCypherPackage.MULTI_PART_QUERY__SINGLE_PART_QUERY, oldSinglePartQuery, newSinglePartQuery);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSinglePartQuery(SinglePartQuery newSinglePartQuery)
  {
    if (newSinglePartQuery != singlePartQuery)
    {
      NotificationChain msgs = null;
      if (singlePartQuery != null)
        msgs = ((InternalEObject)singlePartQuery).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenCypherPackage.MULTI_PART_QUERY__SINGLE_PART_QUERY, null, msgs);
      if (newSinglePartQuery != null)
        msgs = ((InternalEObject)newSinglePartQuery).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenCypherPackage.MULTI_PART_QUERY__SINGLE_PART_QUERY, null, msgs);
      msgs = basicSetSinglePartQuery(newSinglePartQuery, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenCypherPackage.MULTI_PART_QUERY__SINGLE_PART_QUERY, newSinglePartQuery, newSinglePartQuery));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenCypherPackage.MULTI_PART_QUERY__SUB_QUERIES:
        return ((InternalEList<?>)getSubQueries()).basicRemove(otherEnd, msgs);
      case OpenCypherPackage.MULTI_PART_QUERY__SINGLE_PART_QUERY:
        return basicSetSinglePartQuery(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenCypherPackage.MULTI_PART_QUERY__SUB_QUERIES:
        return getSubQueries();
      case OpenCypherPackage.MULTI_PART_QUERY__SINGLE_PART_QUERY:
        return getSinglePartQuery();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenCypherPackage.MULTI_PART_QUERY__SUB_QUERIES:
        getSubQueries().clear();
        getSubQueries().addAll((Collection<? extends MultiPartSubQuery>)newValue);
        return;
      case OpenCypherPackage.MULTI_PART_QUERY__SINGLE_PART_QUERY:
        setSinglePartQuery((SinglePartQuery)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenCypherPackage.MULTI_PART_QUERY__SUB_QUERIES:
        getSubQueries().clear();
        return;
      case OpenCypherPackage.MULTI_PART_QUERY__SINGLE_PART_QUERY:
        setSinglePartQuery((SinglePartQuery)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenCypherPackage.MULTI_PART_QUERY__SUB_QUERIES:
        return subQueries != null && !subQueries.isEmpty();
      case OpenCypherPackage.MULTI_PART_QUERY__SINGLE_PART_QUERY:
        return singlePartQuery != null;
    }
    return super.eIsSet(featureID);
  }

} //MultiPartQueryImpl
