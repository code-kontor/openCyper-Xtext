module io.codekontor.opencypher.xtext.GenerateOpenCypher

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var workspace = ".."
var rootPath = "${workspace}/"

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "io.codekontor.opencypher.xtext"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
					root = "${rootPath}/../tests/io.codekontor.opencypher.xtext.tests"
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
					root = "${rootPath}/../tests/io.codekontor.opencypher.xtext.ui.tests"
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "io.codekontor.opencypher.xtext.OpenCypher"
			fileExtensions = "cypher"

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			parserGenerator = {
				options = {
					ignoreCase = true
					backtrack = true
				}
			}

			// we want to use Formatter2Fragment2 here
			fragment = formatting.Formatter2Fragment2 auto-inject {}
		}
	}
}
